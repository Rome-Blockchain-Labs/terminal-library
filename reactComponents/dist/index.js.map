{"version":3,"sources":["../src/index.tsx","../src/searchbar/index.tsx","../src/searchbar/redux/store.ts","../src/searchbar/redux/tokenSearchSlice.ts","../src/searchbar/tokenSearch/helpers/async.ts","../src/searchbar/tokenSearch/helpers/graphqlClients.ts","../src/searchbar/tokenSearch/helpers/config.ts","../src/searchbar/tokenSearch/index.tsx","../src/searchbar/tokenSearch/SearchInput.tsx","../src/searchbar/tokenSearch/SearchIcon.tsx","../src/searchbar/Context/TokenSearch.tsx","../src/searchbar/tokenSearch/SearchResult.tsx","../src/searchbar/tokenSearch/TokenPairDetail.tsx","../src/searchbar/tokenSearch/helpers/firstAndLast.ts","../src/searchbar/tokenSearch/helpers/intToWords.ts","../src/searchbar/tokenSearch/SearchFilters.tsx","../src/searchbar/tokenSearch/SearchFiltersNetworkSelectors.tsx","../src/searchbar/tokenSearch/Chip.tsx","../src/searchbar/tokenSearch/SearchFiltersExchangeSelectors.tsx","../src/types.ts"],"sourcesContent":["export * from \"./searchbar\"\nexport * from \"./types\"","import React from \"react\"\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport TokenSearch from \"./tokenSearch\";\n\nexport function SearchBar(renderProps) {  \n  return (  \n    <Provider store={store}>      \n      <TokenSearch \n        customSearchInput={renderProps?.customSearchInput}\n        customSearchFilter={renderProps?.customSearchFilter}\n        customChip={renderProps?.customChip}\n        customResult={renderProps?.customResult}\n        customTokenDetail={renderProps?.customTokenDetail}\n        customLoading={renderProps?.customLoading}\n        customActions={renderProps?.customActions}\n      />\n    </Provider>    \n  );\n}\n","import {\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\n\nimport { tokenSearchSlice } from './tokenSearchSlice';\n\n\n\nconst rootReducer = tokenSearchSlice.reducer\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport const store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: getDefaultMiddleware({\n    immutableCheck: false,\n  }),\n  reducer: rootReducer\n});\n\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport retry from 'async-retry';\nimport { stringify } from 'flatted';\nimport { searchTokensAsync } from \"../tokenSearch/helpers/async\";\nimport { uniq, omitBy } from \"lodash\"\nimport { networkExchangePairs } from '../tokenSearch/helpers/config';\nimport {TokenSearchState} from \"./types\";\n\nexport const setPair = createAsyncThunk(\n  'token/setPair',\n  async ({ selectedPair }:any) => {    \n    return selectedPair;\n  }\n);\n\nexport const resetSearchOnNewExchange = createAsyncThunk(\n  'token/searchReset',\n  async (searchString:any, thunkAPI:any) => {    \n    thunkAPI.dispatch(searchTokenPairs(''));\n  }\n);\n\n//todo no need for this to be a thunk\nconst setPairSearchTimestamp = createAsyncThunk(\n  'token/saveTime',\n  async (timestamp:any) => {\n    return timestamp;\n  }\n);\n\n\n// Function that handles the \"All\" values of both the network and the exchange.\n// Consider that \"no value\" equates \"All\".\nconst allValueHandler = (networkMap, exchangeMap) => {\n  let returnedNetworkMap = networkMap;\n  let returnedExchangeMap = exchangeMap;\n\n\n  // Validates that the networkMap contains the \"All\" value.\n  // If \"All\" is active, it overrides all other networks; thus we enable all the networks.\n  if (networkMap.length === 0 || networkMap.includes('All')) {\n    // Loads all the networks from \"networkExchangePairs\".\n    returnedNetworkMap = uniq(networkExchangePairs.map(pair => pair[0]));\n  }\n\n  // Validates that the networkMap contains the \"All\" value.\n  // If \"All\" is active, it overrides all other networks; thus we enable all the networks.\n  if (exchangeMap.length === 0 || exchangeMap.includes('All')) {\n    // Loads all the networks from \"networkExchangePairs\".\n    returnedExchangeMap = uniq(networkExchangePairs.map(pair => pair[1]));\n  }\n\n\n  // Returns the processed values of \"networkMap\" and \"exchangeMap\".\n  return [returnedNetworkMap, returnedExchangeMap];\n};\n\n// Function that handles the \"All\" values of both the network and the exchange.\nconst valueCleaner = (networkMap, exchangeMap) => {\n  // We have to use \"omitBy\" since a network or exchange will remain in the object if a user unselect them, but as false instead of true.\n  // We then load each network and exchange by their key into an array to further filter them.\n  networkMap = Object.keys(omitBy(networkMap, (b) => !b));\n  exchangeMap = Object.keys(omitBy(exchangeMap, (b) => !b));\n\n\n  // Returns the processed values of \"networkMap\" and \"exchangeMap\".\n  return [networkMap, exchangeMap];\n};\n\n\nexport const searchTokenPairs = createAsyncThunk(\n  'token/search',\n  async (searchString:any, thunkAPI:any) => {\n    try {\n      let { networkMap, exchangeMap } = thunkAPI.getState();\n      let processedNetworks;\n      let processedExchanges;\n      const pairSearchTimestamp = new Date().getTime();\n\n\n      // Dispatches \"setPairSearchTimestamp\".\n      thunkAPI.dispatch(setPairSearchTimestamp(pairSearchTimestamp));\n\n      // Runs the function handling the cleaning of the properties from their values indicating if they are enabled or not.\n      [processedNetworks, processedExchanges] = valueCleaner(networkMap, exchangeMap);\n\n      // Runs the function handling the management of the \"All\" value selected by the user.\n      [processedNetworks, processedExchanges] = allValueHandler(processedNetworks, processedExchanges);\n\n      // Filtering out any exchange that is not valid for the selected networks.\n      // This has to be done since an exchange will remain in the array when the network is disabled by the user.\n      // It's easier here and also offer a more natural experience for the user.\n      processedExchanges = processedExchanges\n        .filter(exchange => networkExchangePairs\n          .filter(pair => processedNetworks.includes(pair[0]) && pair[1] === exchange).length >= 1);\n\n      // Filtering out any network that does not have at least one valid exchange selected.\n      // This has to be done since the user can still have a network selected while it has no valid exchange selected.\n      // It's easier here and also offer a more natural experience for the user.\n      // We do this in last because this has a real potential to harm the user experience by running GraphQL queries that are not needed unlike feeding to the\n      // query an unused echange for a given network.\n      processedNetworks = processedNetworks\n        .filter(network => networkExchangePairs\n          .filter(pair => pair[0] === network && processedExchanges.includes(pair[1])).length >= 1);\n\n      // Loading the data.\n      const data = await retry(() => searchTokensAsync(searchString, processedNetworks, processedExchanges), { retries: 1 });\n\n      return { data, pairSearchTimestamp };\n    }\n    catch (e) {\n      console.log(\"err searchTokenPairs\", e);\n      throw new Error(stringify(e, Object.getOwnPropertyNames(e)));\n    }\n  }\n);\n\nconst initialTimestamp = new Date().getTime();\nconst initialState: TokenSearchState = {\n  fetchError: null,\n  isLoading: false,\n  isSelecting: false,\n  pairSearchTimestamp: initialTimestamp,\n  searchText: '',\n  selectedPair: undefined,\n  serializedTradeEstimator: '',\n  suggestions: [],\n  exchangeMap: {},\n  networkMap: {}\n};\n\nexport const tokenSearchSlice = createSlice({\n  extraReducers: (builder) => {\n    builder.addCase(resetSearchOnNewExchange.fulfilled, (state, action) => {\n      state.searchText = '';\n      state.suggestions = [];\n      state.isLoading = true;\n      state.fetchError = null;\n      state.isSelecting = false;\n      state.selectedPair = undefined;\n      // don't update pairSearchTimestamp\n      state.serializedTradeEstimator = '';\n    });\n    builder.addCase(setPairSearchTimestamp.fulfilled, (state, action) => {\n      state.pairSearchTimestamp = action.payload;\n    });\n    builder.addCase(setPair.fulfilled, (state, action) => {\n      //pending/rejected not needed as its not really async\n      state.searchText = '';\n      state.isSelecting = false;\n      state.selectedPair = action.payload;\n    });\n    builder.addCase(searchTokenPairs.pending, (state) => {\n      state.isLoading = true;\n      state.fetchError = null;\n    });\n    builder.addCase(searchTokenPairs.fulfilled, (state, action) => {\n      if (action.payload?.pairSearchTimestamp >= state.pairSearchTimestamp) {\n        state.pairSearchTimestamp = action.payload.pairSearchTimestamp;\n        state.suggestions = action.payload.data;\n        state.isLoading = false;\n        state.fetchError = null;\n      }\n    });\n    builder.addCase(searchTokenPairs.rejected, (state, action) => {\n      state.suggestions = [];\n      state.isLoading = false;\n      state.fetchError = 'Something went wrong fetching token pair.'; //action.error.message\n    });\n  },\n  initialState,\n  name: 'tokenSearch',\n  reducers: {\n    setSearchText: (state, action) => {\n      state.searchText = action.payload;\n    },\n    startSelecting: (state) => {\n      state.isSelecting = true;\n    },\n    stopSelecting: (state) => {\n      state.isSelecting = false;\n    },\n    toggleSelecting: (state) => {\n      state.isSelecting = !state.isSelecting;\n    },\n    setExchangeMap: (state, action) => {\n      // Setting the payload exchange name to the payload value.\n      state.exchangeMap[action.payload.exchangeName] = action.payload.checked;\n    },\n    setExchangeMapAll: (state, action) => {\n      let exchangeName;\n\n\n      // Loops through the network names.\n      for (exchangeName of action.payload.exchangeNames) {\n        // Validate if \"all exchange\" is active.\n        if (action.payload.exchangeAll) {\n          // Sets all networks to true.\n          state.exchangeMap[exchangeName] = true;\n        }\n        else {\n          // Removes all manual networks.\n          delete state.exchangeMap[exchangeName]\n        }\n      };\n      // Object.keys(state.exchangeMap).map(key => delete state.exchangeMap[key]);\n    },\n    setNetworkMap: (state, action) => {\n      // Setting the payload network name to the payload value.\n      state.networkMap[action.payload.networkName] = action.payload.checked;\n    },\n    setNetworkMapAll: (state, action) => {\n      let networkName;\n\n\n      // Loops through the network names.\n      for (networkName of action.payload.networkNames) {\n        // Validate if \"all network\" is active.\n        if (action.payload.networkAll) {\n          // Sets all networks to true.\n          state.networkMap[networkName] = true;\n        }\n        else {\n          // Removes all manual networks.\n          delete state.networkMap[networkName]\n        }\n      };\n    }\n  },\n});\n\nexport const { setSearchText, startSelecting, stopSelecting, toggleSelecting, setExchangeMap, setExchangeMapAll, setNetworkMap, setNetworkMapAll } =\n  tokenSearchSlice.actions;\nexport default tokenSearchSlice.reducer;\n","import BN from 'bignumber.js';\nimport { stringify } from 'flatted';\nimport { gql } from 'graphql-request';\nimport { romePairsClient } from './graphqlClients';\nimport {maxHits} from \"./config\";\n\n\nconst getRomeSearchTokenQuery = (networks, isPair = false) => {\n  let network;\n  let pair_search = ``;\n  const networkDatasetLength = Math.round(maxHits / networks.length);\n\n  let where = `{\n    concat_ws:{_ilike:$searchText},             \n    exchange:{_in:$exchanges}\n  }`\n\n  if (isPair)\n    where = `\n      {\n        _and:[\n          {concat_ws:{_ilike:$filter1}},\n          {concat_ws:{_ilike:$filter2}}\n        ],        \n        exchange:{_in:$exchanges}\n      }\n    `\n\n  // Looping through all networks.\n  for (network of networks) {\n    pair_search += `\n      ${network}:\n        ${network}_pair_search(\n          where:${where}, \n          limit:${networkDatasetLength}, \n          order_by:{ last_24hour_usd_volume:desc_nulls_last }\n        ) \n        {\n          id:pair_address\n          exchange\n          token0 {\n            address\n            symbol\n            name\n            decimals\n            id:address\n            image:primary_img_uri\n          }\n          token1 {\n            address\n            symbol\n            name\n            decimals\n            id:address\n            image:primary_img_uri\n          }\n          last_24hour_usd_volume\n          latest_token0_usd_price\n          latest_token1_usd_price\n        }`;\n  }\n\n  let graphQl = gql`query SearchTokens($searchText:String!,$exchanges:[String!]!){${pair_search}}`;\n\n  if (isPair)\n    graphQl = gql`query SearchTokens($filter1:String!,$filter2:String!,$exchanges:[String!]!){${pair_search}}`;\n  \n  return graphQl\n};\n\n// Function that prepares the parameters of the GraphQL query.\n// It's not doing much at the moment, but if needs to be expanded, at least it will keep the code cleaner.\nconst searchTokenAsync_Parameters = (searchText, searchExchanges) => {\n  return {\n    exchanges: [...searchExchanges],\n    searchText,\n  };\n};\n\n// Function that prepares de search text for the GraphQL query.\n// Again, for code cleaness and possible expansion.\nconst searchTokenAsync_searchString = searchString => {\n  //empty string turns to 0x which is found by every pair.\n  return searchString ? `%${searchString}%` : '%0x%';\n};\n\n// Function that creates the actual async token.\nexport const searchTokensAsync = async (searchString, searchNetworks, searchExchanges) => {//, config = { nilVolumeOkay:false }) => {\n  let res;\n  let isPair = false\n  const queries = searchString.split(' ')\n\n  const searchText = searchTokenAsync_searchString(searchString);\n  let parameters: any = searchTokenAsync_Parameters(searchText, searchExchanges);\n  \n  if (queries.length > 1) {\n    parameters = {\n      exchanges: [...searchExchanges],\n      filter1: `%${queries[0]}%`,\n      filter2: `%${queries[1]}%`,\n    };\n    isPair = true\n  }\n\n  const query = getRomeSearchTokenQuery(searchNetworks, isPair);\n  \n  // IMPORTANT!!!\n  // IMPORTANT!!!\n  // Fun fact, we are injecting ALL active exchanges for ANY network, wheter it is support or not.\n  // This does not cause any errors at the moment, but this makes the query QUITE nasty.\n  // This should be handled at some point.\n  // IMPORTANT!!!\n  // IMPORTANT!!!\n  try {\n    res = await romePairsClient.request(query, parameters);\n  }\n  catch (e) {\n    throw new Error(`${stringify(e, Object.getOwnPropertyNames(e))}, args:${stringify({ parameters, query, })}`);\n  }\n  // IMPORTANT!!!\n  // IMPORTANT!!!\n\n  const mappedPairs = Object\n    // Loading an array from each data set comprised of [{networkName},{networkResults}].\n    .entries(res)\n    .map((network:any) => {\n      // Adding the network to the results so we can display this information to the user.\n      network[1].map(result => result.network = network[0]);\n\n      // Returning only the data that is of interest to us.\n      return network[1];\n    })\n    // Flattening all the data sets into one data set.\n    .flat()\n    .filter((pair:any) => pair.token0 && pair.token1)\n    .map((pair:any) => {\n      const tokenPrices =\n        pair.latest_token0_usd_price && pair.latest_token1_usd_price ?\n          {\n            token0Price: new BN(pair.latest_token1_usd_price)\n              .dividedBy(pair.latest_token0_usd_price)\n              .toString(),\n            token1Price: new BN(pair.latest_token0_usd_price)\n              .dividedBy(pair.latest_token1_usd_price)\n              .toString(),\n          } :\n          {\n            token0Price: 1,\n            token1Price: 1,\n          };\n\n      return {\n        ...pair,\n        volumeUSD: pair.last_24hour_usd_volume,\n        ...tokenPrices,\n      };\n    });\n\n  return mappedPairs;\n};","import { GraphQLClient } from 'graphql-request';\n\nimport { romeTokenSyncUri, } from './config';\n\nexport const romePairsClient = new GraphQLClient(romeTokenSyncUri);\n","\nimport { uniq } from \"lodash\";\n\n\nexport const romeTokenSyncUri = String(\n  process.env.REACT_APP_HASURA_API_ENDPOINT_WS ||//todo should be a prop or something\n    'https://romenet.prod.velox.global/v1/graphql'\n).replace('ws', 'http');\n\nexport const maxHits = Number(process.env.REACT_APP_SEARCH_ASYNC_DATASET_LENGTH_MAXIMUM || 500)\n\nexport const minStringSearch = Number(process.env.REACT_APP_SEARCH_INPUT_LENGTH_MINIMUM || 3)\n\nconst AvalanchePairs = [\n  [\"avalanche\",\"baguette\"],\n  [\"avalanche\",\"canary\"],\n  [\"avalanche\",\"complusnetwork\"],\n  [\"avalanche\",\"elkfinance\"],\n  [\"avalanche\",\"kyberdmm\"],\n  [\"avalanche\",\"lydiafinance\"],\n  [\"avalanche\",\"oliveswap\"],\n  [\"avalanche\",\"pandaswap\"],\n  [\"avalanche\",\"pangolin\"],\n  [\"avalanche\",\"sushiswap\"],\n  [\"avalanche\",\"traderjoe\"],\n  [\"avalanche\",\"yetiswap\"],\n  [\"avalanche\",\"zeroexchange\"],\n]\nconst BSCPairs = [\n  [\"bsc\",\"apeswap\"],\n  [\"bsc\",\"babyswap\"],\n  [\"bsc\",\"biswap\"],\n  [\"bsc\",\"ellipsis.finance\"],\n  [\"bsc\",\"mdex\"],\n  [\"bsc\",\"pancakeswap\"],\n  [\"bsc\",\"safeswap\"],\n  [\"bsc\",\"sushiswap\"],\n]\nconst moonbeamPairs = [\n  [\"moonbeam\",\"beamswap\"],\n  [\"moonbeam\",\"solarflare\"],\n  [\"moonbeam\",\"stellaswap\"],\n  [\"moonbeam\",\"sushiswap\"],\n]\nconst moonriverPairs = [\n  [\"moonriver\",\"solarbeam\"],\n  [\"moonriver\",\"sushiswap\"],\n]\nexport const networkExchangePairs = [...BSCPairs,...AvalanchePairs, ...moonbeamPairs, ...moonriverPairs];\nexport const networkNames = uniq(networkExchangePairs.map(pair => pair[0]));\nexport const exchangeNames = networkNames => uniq(networkExchangePairs.filter(pair => networkNames.includes(pair[0])).map(pair => pair[1]));\n\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'styled-components/macro'\nimport { stopSelecting } from '../redux/tokenSearchSlice';\nimport SearchInput from \"./SearchInput\";\nimport SearchResult from \"./SearchResult\";\nimport SearchFilters from \"./SearchFilters\";\nimport {RootState} from \"../redux/store\";\nimport TokenSearchContext from '../Context/TokenSearch'\n\nexport const TokenSearch = (renderProps: any) => {\n  const dispatch = useDispatch();\n  const { isSelecting, isLoading } = useSelector((state:RootState) => state);\n  const searchRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    window.onmousedown = (e) => {\n      if (!searchRef?.current?.contains(e.target)) {\n        dispatch(stopSelecting());\n      }\n    };\n  }, [dispatch]);\n\n  return (\n    <TokenSearchContext.Provider value={renderProps}>\n      <div ref={searchRef}>\n        <SearchInput />\n        <SearchFilters />\n        {isSelecting && <SearchResult loading={isLoading} />}\n      </div>\n      </TokenSearchContext.Provider>\n  );\n};\n\nexport default TokenSearch;\n","import React, { useEffect, useCallback, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { searchTokenPairs, startSelecting, setSearchText } from '../redux/tokenSearchSlice';\nimport SearchIcon from './SearchIcon';\nimport {minStringSearch} from \"./helpers/config\";\nimport debounce from 'lodash.debounce';\nimport TokenSearchContext from '../Context/TokenSearch';\nimport {RootState} from \"../redux/store\";\n\nconst StyledInput = styled.input`\n  background-color: inherit;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n\n  ${({props}) => `\n    width: ${ props?.styles?.width || \"-webkit-fill-available\" };\n    border: ${ props?.styles?.border || \"none\" };   \n    color: ${ props?.styles?.color || \"#FFF\" };\n    display: ${ props?.styles?.display || \"block\" };   \n    border-color: ${ props?.styles?.borderColor || \"#067c82\" };  \n    border-style: ${ props?.styles?.borderStyle || \"solid\" };  \n    border-width: ${ props?.styles?.borderWidth || \"1px\" };  \n    border-radius: ${ props?.styles?.borderRadius || \"0\" };  \n    background: ${ props?.styles?.background || \"#08333c\" };   \n    padding: ${ props?.styles?.padding || \"11px 15px\" };    \n    font-size: ${ props?.styles?.fontSize || \"15px\" };      \n    font-family: ${ props?.styles?.fontFamily || \"'Fira Code', monospace\" };\n  `}  \n`;\n\nconst StyledSearchIconWrapper = styled.div`  \n  cursor: pointer;\n  float: right;\n  position: absolute;\n  ${({props}) => `\n    right: ${ props?.styles?.right || \"15px\" };      \n    top: ${ props?.styles?.top || \"12px\" };        \n  `}    \n`;\n\nconst StyledWrapper = styled.div`\n  position: relative;\n`;\n\nconst SearchInput = () => {\n  const dispatch = useDispatch();\n  const renderProps = useContext(TokenSearchContext);  \n  const { customSearchInput } = renderProps;\n \n  const { searchText, networkMap, exchangeMap } = useSelector((state:RootState) => state);\n  \n  // Updates the datasets of the results. \n  useEffect(() => {\n    // Ensure that the search text fulfills the minimum lenght requirement.\n    if (searchText.length >= minStringSearch) {\n      dispatch(searchTokenPairs(searchText));\n    }\n  }, [dispatch, searchText, networkMap, exchangeMap]); \n  \n\n  const onChangeFilter = (event) => {    \n    const value = event.target.value    \n    dispatch(setSearchText(value))\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounceChangeHandler = useCallback( debounce(onChangeFilter, 350), [searchText])\n  \n  const placeholder = customSearchInput?.placeholder || 'Please input token name or address.'\n  const activeColor = customSearchInput?.styles?.search?.activeColor || '#666699'\n  const color  = customSearchInput?.styles?.search?.color || '#FFF'\n  const height = customSearchInput?.styles?.search?.height || 14\n  const width = customSearchInput?.styles?.search?.width || 14\n\n  // RENDERING.\n  return (\n    <StyledWrapper onClick={() => dispatch(startSelecting())}>\n      <StyledInput \n        placeholder={placeholder}\n        autocomplete={'off'}\n        onChange={debounceChangeHandler}\n        styles={customSearchInput?.styles?.input}\n      />\n      <StyledSearchIconWrapper styles={customSearchInput?.styles?.search}>\n       <SearchIcon\n            activeColor={activeColor}\n            color={color}\n            height={height}\n            width={width}\n          />\n        </StyledSearchIconWrapper>\n    </StyledWrapper>\n  );\n};\nexport default SearchInput;\n","import React, {  memo } from 'react';\nimport styled from 'styled-components';\n\nconst StyledSVG = styled.svg`\n  '&:hover': {     \n      ${({ hoverColor}) =>\n        `stroke: ${hoverColor};`}\n     \n  }\n`\nexport const SearchIcon = memo(\n  ({ active, activeColor, color, height, width }: any) => (\n    <StyledSVG\n      height={height ?? 19.519}\n      hoverColor={activeColor}\n      viewBox=\"0 0 19.519 19.519\"\n      width={width ?? 19.519}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M1427.667,779.6l-5.554-5.555a7.774,7.774,0,1,0-1.061,1.06l5.554,5.555a.75.75,0,0,0,1.061-1.06Zm-17.8-10.482a6.258,6.258,0,1,1,6.258,6.257A6.265,6.265,0,0,1,1409.868,769.119Z\"\n        data-name=\"Search icon\"\n        stroke={active ? activeColor : color}\n        id=\"Search_icon\"\n        transform=\"translate(-1408.368 -761.362)\"\n      />\n    </StyledSVG>\n  )\n);\n\nexport default SearchIcon;\n","import React, { createContext } from 'react'\nconst TokenSearchContext = createContext<any>({})\nexport default TokenSearchContext","import React, { useContext } from 'react';\nimport styled from 'styled-components'\n\nimport { useSelector } from 'react-redux';\nimport TokenPairDetail from './TokenPairDetail';\nimport TokenSearchContext from '../Context/TokenSearch';\nimport { RootState } from \"../redux/store\";\nconst StyledResult = styled.div`\n  background-color: inherit;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: auto;\n\n  ${({props}) => `\n    width: ${ props?.styles?.width || \"auto\" };\n    height: ${ props?.styles?.height || \"300px\" };\n    border: ${ props?.styles?.border || \"1px solid grey\" };   \n    color: ${ props?.styles?.color || \"#FFF\" };\n    display: ${ props?.styles?.display || \"block\" };   \n    border-color: ${ props?.styles?.borderColor || \"#067c82\" };  \n    border-style: ${ props?.styles?.borderStyle || \"solid\" };  \n    border-width: ${ props?.styles?.borderWidth || \"1px\" };  \n    border-radius: ${ props?.styles?.borderRadius || \"0\" };  \n    background: ${ props?.styles?.background || \"#08333c\" };   \n    padding: ${ props?.styles?.padding || \"0\" };    \n    font-size: ${ props?.styles?.fontSize || \"15px\" };      \n    font-family: ${ props?.styles?.fontFamily || \"'Fira Code', monospace\" };  \n  `}  \n`;\n\nconst StyledLoading = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;  \n  margin: 10px;\n  ${({props}) => `\n    color: ${ props?.styles?.color || \"black\" };\n    font-size: ${ props?.styles?.fontSize || \"15px\" };      \n  `}    \n`\n\nconst SearchResult = (props) => {\n  const renderProps = useContext(TokenSearchContext);  \n  const { customResult, customLoading } = renderProps;\n  const {suggestions, searchText} = useSelector(\n    (state:RootState) => state\n  );\n  const filteredSuggestions = suggestions\n    .slice()\n    .sort((pair1, pair2) => pair2.volumeUSD - pair1.volumeUSD);\n  \n  if (props.loading) {\n    const loadingTitle = customLoading?.loadingTitle ? customLoading.loadingTitle : 'Loading...'\n    return <StyledLoading styles={customLoading?.styles}>{loadingTitle}</StyledLoading>;\n  }\n\n  if (!!searchText && !filteredSuggestions.length) {\n    const notFoundTitle = customLoading?.notFoundTitle ? customLoading.notFoundTitle : 'No pairs found...'    \n    return <StyledLoading styles={customLoading?.styles}>{notFoundTitle}</StyledLoading>;\n  }   \n\n  return (    \n    <StyledResult styles={customResult?.styles}>    \n      {\n        filteredSuggestions.map((suggestions, index) => \n        <TokenPairDetail\n          suggestions={filteredSuggestions}\n          index={index}\n          key={`token-detail-${index}`}\n        />\n        )\n      }  \n    </StyledResult>        \n  );\n};\nexport default SearchResult;\n","\nimport React, { useContext } from 'react';\nimport styled from 'styled-components'\n \nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from 'react-accessible-accordion';\nimport { firstAndLast, capitalizeFirstLetter } from './helpers/firstAndLast';\nimport { intToWords } from './helpers/intToWords';\nimport TokenSearchContext from '../Context/TokenSearch';\nconst imageSize = 26;\nconst DetailWrapper = styled.div`\n  .accordion__button: hover {\n    cursor: pointer;\n  }\n`;\n\nconst StyledHeader = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  gap: 10px;\n  \n  ${({props}) => `\n    padding: ${ props?.styles?.padding || \"10px\" };\n    color: ${ props?.styles?.color || \"black\" };\n    background: ${ props?.styles?.background || \"green\" };\n  `}  \n`\nconst StyeldPanel = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  gap: 10px;\n  ${({props}) => `\n    padding: ${ props?.styles?.padding || \"10px\" };\n    color: ${ props?.styles?.color || \"black\" };\n    background: ${ props?.styles?.background || \"white\" };  \n  `}    \n`\n\nconst StyledActionWrapper = styled.div`\n  display: flex;  \n  margin-top: 10px;  \n`\n\nconst StyledAction = styled.div`\n  cursor: pointer;\n  padding: 10;\n`\n\nconst Action = (props) => {\n  const { component, detail } = props\n  const Component = component\n  return (\n    <StyledAction>\n      <Component detail={detail}/>\n    </StyledAction>\n  )\n    \n}\nexport const TokenPairDetail = (props) => {\n  const { index, suggestions } = props;\n  const renderProps = useContext(TokenSearchContext);  \n  const { customTokenDetail, customActions } = renderProps;\n\n  const selectedPair = suggestions[index];\n   const tokenImage = (token) => {\n    return token?.image && (\n      <img\n      alt={token?.symbol}\n      src={token?.image}\n      style={{ borderRadius: '50%' }}\n      width={imageSize}\n    />\n    )\n  } \n  return (\n  <DetailWrapper>\n    <Accordion allowZeroExpanded>\n      <AccordionItem key={selectedPair.id}>\n        <AccordionItemHeading>\n          <AccordionItemButton>\n            <StyledHeader styles={customTokenDetail?.styles?.header}>\n              <div>\n                <div>{selectedPair.network.toUpperCase()} - {capitalizeFirstLetter(selectedPair.exchange)} - </div>\n                <div>Volume: {intToWords(selectedPair.volumeUSD)}</div>\n              </div>\n              <div>\n                {tokenImage(selectedPair.token0)}{selectedPair.token0.name} - \n                {tokenImage(selectedPair.token1)}{selectedPair.token1.name}\n              </div>\n            </StyledHeader>\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>          \n          <StyeldPanel styles={customTokenDetail?.styles?.panel}>\n            <div>\n              <div><b>Pair Address:</b> {selectedPair.id}</div>\n              <div><b>{tokenImage(selectedPair.token0)} token0 address: </b>{firstAndLast(selectedPair.token0.address)}</div>\n              <div><b>{tokenImage(selectedPair.token1)} token1 address: </b>{firstAndLast(selectedPair.token1.address)}</div>\n            </div>\n            <div>\n              <div><b>{selectedPair.network.toUpperCase()}</b></div>\n              <div><b>{capitalizeFirstLetter(selectedPair.exchange)}</b></div>\n              <StyledActionWrapper>\n                {\n                  customActions.map((action) => <Action key={`action-${action.index}`} component={action.component} detail={selectedPair}></Action>)\n                }\n              </StyledActionWrapper>\n            </div>            \n          </StyeldPanel>          \n        </AccordionItemPanel>        \n      </AccordionItem>\n    </Accordion>\n    </DetailWrapper>\n  );\n}\nexport default TokenPairDetail","export const firstAndLast = (str, chars = 8) =>\n  str && str.slice(0, chars) + '...' + str.slice(-chars);\n\nexport const capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","export function intToWords(int) {\n  if (typeof int !== 'number') {\n    int = Number(int);\n  }\n  if (isNaN(int)) {\n    return '?';\n  }\n  if (int < 1e6) {\n    return '$' + Math.round(int).toLocaleString();\n  }\n  if (int < 1e9) {\n    return '$' + Math.round(int / 1e5) / 10 + ' Million';\n  }\n  return '$' + Math.round(int / 1e8) / 10 + ' Billion';\n}\n","import React, { useContext } from \"react\"\nimport { useSelector } from 'react-redux';\nimport styled from  'styled-components'\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from 'react-accessible-accordion';\nimport { FilterNetworkAll, FilterNetworkSelectors } from \"./SearchFiltersNetworkSelectors\";\nimport { FilterExchangeAll, FilterExchangeSelectors } from \"./SearchFiltersExchangeSelectors\";\nimport { RootState } from \"../redux/store\";\nimport TokenSearchContext from '../Context/TokenSearch';\n\nconst FilterWrapper = styled.div`  \n  .accordion__button {\n    position: relative;\n  }\n\n  .accordion__button:first-child:after {\n    display: block;    \n    content: '';\n    position: absolute;\n    right: 0;\n    transform: rotate(-45deg);\n\n    ${({props}) => `\n      height: ${ props?.styles?.toggleHeight || \"10px\" };\n      width: ${ props?.styles?.toggleWidth || \"10px\" };\n      margin-right: ${ props?.styles?.toggleMarginRight || \"25px\" };    \n      top: ${ props?.styles?.toggleTop || \"20px\" };    \n      border-bottom: ${ props?.styles?.toggleBorderBottom || \"2px solid currentColor\" }; \n      border-right: ${ props?.styles?.toggleBorderRight || \"2px solid currentColor\" }; \n    `}\n  }\n\n  .accordion__button[aria-expanded='true']:first-child:after,\n  .accordion__button[aria-selected='true']:first-child:after {\n    transform: rotate(45deg);\n  }\n\n  .accordion__panel {\n    ${({props}) => `\n      border: ${ props?.styles?.contentBorder || \"0\" }; \n      border-top-style: ${ props?.styles?.contentBorderTop || \"none\" }; \n      border-right-style: ${ props?.styles?.contentBorderRight || \"none\" }; \n      border-bottom-style: ${ props?.styles?.contentBorderBottom || \"none\" }; \n      border-left-style: ${ props?.styles?.contentBorderLeft || \"none\" }; \n      border-radius: ${ props?.styles?.borderRadius || \"0\" }; \n      margin:  ${ props?.styles?.margin || \"0 10px\" };       \n    `}    \n  }\n`;\n\nconst StyledFilterHeader = styled.div`  \n  ${({props}) => `\n    display: ${ props?.styles?.display || \"inline\" };\n    width: ${ props?.styles?.width || \"auto\" };\n    border: ${ props?.styles?.border || \"none\" }; \n    background-color: ${ props?.styles?.backgroundColor || \"#f4f4f4\" }; \n    color: ${ props?.styles?.color || \"#444\" };\n    display: ${ props?.styles?.display || \"block\" }; \n    cursor: pointer;\n    padding: ${ props?.styles?.padding || \"18px\" };   \n    text-align: ${ props?.styles?.textAlign || \"left\" };     \n    margin: ${ props?.styles?.margin || \"5px\" };     \n    border-radius: ${ props?.styles?.borderRadius || \"0\" };     \n    &:hover {\n      background-color: ${ props?.styles?.hoverColor || \"#ddd\" };\n    }\n  `}      \n`; \n\nconst StyledFilterContent = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  ${({props}) => `\n    justify-content: ${ props?.styles?.justifyContent || \"center\" };\n    align-items: ${ props?.styles?.alignItems || \"center\" };  \n    padding:  ${ props?.styles?.padding || \"5px 10px\" };       \n    background-color: ${ props?.styles?.backgroundColor || \"#ddd\" };\n    border-radius: ${ props?.styles?.borderRadius || \"0\" };     \n  `}      \n`;\n\nexport const SearchFilters = () => {\n  const { networkMap, exchangeMap  } = useSelector((state:RootState) => state);\n  const renderProps = useContext(TokenSearchContext);  \n  const { customSearchFilter } = renderProps;\n\n  const exchangesActive = Object.values(networkMap).filter(b => b).length !== 0;\n  const networkCount = Object.values(networkMap).filter(b=>b).length\n  const exchangeCount = Object.values(exchangeMap).filter(b=>b).length\n\n  const title = customSearchFilter?.title || 'Filter Networks'\n  const description = networkCount === 0 && exchangeCount === 0 ? 'Searching all networks and exchanges' : customSearchFilter?.description(networkCount, exchangeCount) || `Searching {networkCount} networks and {exchangeCount} exchanges`\n\n  // RENDERING.\n  return (\n    <FilterWrapper styles={customSearchFilter?.styles.wrapper}>\n      <Accordion allowZeroExpanded>\n        <AccordionItem>\n          <AccordionItemHeading>\n            <AccordionItemButton>\n              <StyledFilterHeader styles={customSearchFilter?.styles.header}>\n                <b>{title}:</b>  &nbsp; {description}\n              </StyledFilterHeader>            \n            </AccordionItemButton>\n          </AccordionItemHeading>\n          <AccordionItemPanel>\n            <StyledFilterContent styles={customSearchFilter?.styles.network}>\n              <FilterNetworkAll />\n              <FilterNetworkSelectors />\n            </StyledFilterContent>            \n          </AccordionItemPanel>\n          <AccordionItemPanel>\n            <StyledFilterContent styles={customSearchFilter?.styles.exchange}>\n            {\n              exchangesActive &&\n              <FilterExchangeAll />\n            }\n            {\n              exchangesActive &&\n              <FilterExchangeSelectors />\n            }    \n            </StyledFilterContent>            \n          </AccordionItemPanel>\n        </AccordionItem>\n      </Accordion>\n    </FilterWrapper>\n  );\n}\n\nexport default SearchFilters","import React from \"react\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { omitBy } from \"lodash\"\nimport { setNetworkMap, setNetworkMapAll, setExchangeMapAll } from \"../redux/tokenSearchSlice\"\nimport { networkNames } from \"./helpers/config\";\nimport { Chip } from \"./Chip\"\nimport {RootState} from \"../redux/store\";\n\nexport const FilterNetworkAll = () => {\n  const dispatch = useDispatch();\n  const { exchangeMap, networkMap } = useSelector((state:RootState) => state);\n  const networkAll = Object.values(omitBy(networkMap, b => !b)).length === 0;\n  const exchangeNamesActive = Object.keys(omitBy(exchangeMap, b => !b));\n\n\n  // RENDERING.\n  return <Chip\n    name={'AllNetworks'}\n    label={'All'}\n    checked={networkAll}\n    onChange={\n      e => {\n        dispatch(setNetworkMapAll({ networkNames: networkNames, networkAll: networkAll }));\n        dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: false }));\n      }\n    }\n  />;\n};\n\n\nexport const FilterNetworkSelectors = () => {\n  const dispatch = useDispatch();\n  const { networkMap } = useSelector((state:RootState) => state);\n\n\n  // Function generating the HTML element of the network.\n  const networkElement = networkName => {\n    // RENDERING.\n    return <Chip\n      key={networkName}\n      name={networkName}\n      label={networkName}\n      checked={networkMap[networkName] || false}\n      onChange={e => dispatch(setNetworkMap({ networkName, checked: e.target.checked }))}\n    />;\n  };\n\n\n  // RENDERING.\n  return <>{networkNames.map((networkName:any) => networkElement(networkName))}</>\n};","import React, { memo, useContext } from 'react';\nimport styled from 'styled-components';\nimport TokenSearchContext from '../Context/TokenSearch';\n\n\nconst StyledChip = styled.div`\n  > input {\n    display: none;\n  }\n\n  > input + label {\n    -webkit-transition: all 500ms ease;\n    transition: all 500ms ease;    \n    cursor: pointer;    \n    display: inline-block;\n    -moz-user-select: -moz-none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    ${\n      ({props}) => `\n        font-size: ${ props?.styles?.fontSize || \"14px\" };  \n        border-radius: ${ props?.styles?.borderRadius || \"5px\" };  \n        background-color: ${ props?.styles?.backgroundColor || \"#FFF\" };  \n        border: ${ props?.styles?.border || \"solid 2px #7d7d7d\" };   \n        padding: ${ props?.styles?.padding || \"0.1rem 0.3rem\" };   \n        margin: ${ props?.styles?.margin || \"5px\" };   \n        color: ${ props?.styles?.defaultColor || \"black\" };   \n        width: ${ props?.styles?.width || \"100px\" };   \n        height: ${ props?.styles?.height || \"auto\" };   \n        text-align: ${ props?.styles?.textAlign || \"center\" }; \n      `\n    }      \n  }\n\n  > input:checked + label {\n    -webkit-transition: all 500ms ease;\n    transition: all 500ms ease;   \n    ${\n      ({props}) => `\n        border-color: ${ props?.styles?.checkedColor || \"#666699\" };    \n        color: ${ props?.styles?.checkedColor || \"white\" };   \n        background-color: ${ props?.styles?.checkedBackgroundColor || \"gray\" };  \n      `\n    }     \n  }\n`;\n\n\nexport const Chip = memo(\n  (props: any) => {\n    const renderProps = useContext(TokenSearchContext);  \n    const {label, checked, onChange, name, value} = props\n    const { customChip } = renderProps\n    return (\n      <StyledChip styles={customChip?.styles}\n      >\n        <input type=\"checkbox\" id={`${label}-${name}`} onChange={onChange} checked={checked} name={name} value={value} />\n        <label htmlFor={`${label}-${name}`}>{label} </label>\n      </StyledChip>\n    );\n  }\n);\nexport default Chip;","import React from \"react\"\nimport { omitBy } from \"lodash\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setExchangeMap, setExchangeMapAll } from \"../redux/tokenSearchSlice\"\nimport { exchangeNames } from \"./helpers/config\";\nimport { Chip } from \"./Chip\"\nimport { RootState } from \"../redux/store\";\n\nexport const FilterExchangeAll = () => {\n  const dispatch = useDispatch();\n  const { exchangeMap, networkMap } = useSelector((state:RootState) => state);\n  const exchangeAll = Object.values(omitBy(exchangeMap, b => !b)).length === 0;\n  const exchangeNamesActive = exchangeNames(Object.keys(omitBy(networkMap, b => !b)));\n\n\n  // RENDERING.\n  return <Chip\n    name={'AllExchanges'}\n    label={'All'}\n    checked={exchangeAll}\n    onChange={() => dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: exchangeAll }))}\n  />;\n};\n\n\nexport const FilterExchangeSelectors = () => {\n  const dispatch = useDispatch();\n  const { networkMap, exchangeMap } = useSelector((state:RootState) => state);\n  const exchangeNamesActive = exchangeNames(Object.keys(omitBy(networkMap, b => !b)));\n\n\n  // Function generating the HTML element of the network.\n  const exchangeElement = exchangeName => {\n    // RENDERING.\n    return <Chip\n      key={exchangeName}\n      name={exchangeName}\n      label={exchangeName}\n      checked={exchangeMap[exchangeName] || false}\n      onChange={e => dispatch(setExchangeMap({ exchangeName: exchangeName, checked: e.target.checked }))}\n    />;\n  };\n\n\n  // RENDERING.\n  return exchangeNamesActive.map(exchangeName => exchangeElement(exchangeName));\n};","import {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n};\n"],"mappings":"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","names":[]}