{"version":3,"sources":["../src/searchbar/index.tsx","../src/searchbar/redux/store.ts","../src/searchbar/redux/tokenSearchSlice.ts","../src/searchbar/tokenSearch/helpers/async.ts","../src/searchbar/tokenSearch/helpers/graphqlClients.ts","../src/searchbar/tokenSearch/helpers/config.ts","../src/searchbar/tokenSearch/helpers/filters.ts","../src/searchbar/tokenSearch/index.tsx","../src/searchbar/tokenSearch/SearchInput.tsx","../src/searchbar/tokenSearch/helpers/mutatorTextToken.ts","../src/searchbar/tokenSearch/SearchResult.tsx","../src/searchbar/tokenSearch/TokenPairDetail.tsx","../src/searchbar/tokenSearch/helpers/firstAndLast.ts","../src/searchbar/tokenSearch/helpers/intToWords.ts","../src/searchbar/tokenSearch/SearchFilters.tsx","../src/searchbar/tokenSearch/SearchFiltersNetworkSelectors.tsx","../src/searchbar/Components/Chip/index.tsx","../src/searchbar/tokenSearch/SearchFiltersExchangeSelectors.tsx","../src/types.ts"],"sourcesContent":["import React from \"react\"\nimport 'twin.macro';\nimport 'styled-components/macro'\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport TokenSearch from \"./tokenSearch\";\n\nexport function SearchBar() {\n  return (\n  <div>\n      <Provider store={store}>\n        <TokenSearch />\n      </Provider>\n    </div>\n  );\n}\n","import {\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\n\nimport { tokenSearchSlice } from './tokenSearchSlice';\n\n\n\nconst rootReducer = tokenSearchSlice.reducer\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport const store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: getDefaultMiddleware({\n    immutableCheck: false,\n  }),\n  reducer: rootReducer\n});\n\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport retry from 'async-retry';\nimport { stringify } from 'flatted';\nimport { searchTokensAsync } from \"../tokenSearch/helpers/async\";\nimport { TokenSearchState } from \"./types\";\nimport { networkExchangePairs } from '../tokenSearch/helpers/config';\nimport { filterActiveAll, filterActiveNames } from '../tokenSearch/helpers/filters.js';\n\n\nexport const setPair = createAsyncThunk(\n  'token/setPair',\n  async ({ selectedPair }: any) => {\n    console.log(\"setPair\")\n    return selectedPair;\n  }\n);\n\nexport const resetSearchOnNewExchange = createAsyncThunk(\n  'token/searchReset',\n  async (searchString: any, thunkAPI: any) => {\n    console.log(\"resetSearchOnNewExchange\")\n    thunkAPI.dispatch(searchTokenPairs(''));\n  }\n);\n\n//todo no need for this to be a thunk\nconst setPairSearchTimestamp = createAsyncThunk(\n  'token/saveTime',\n  async (timestamp: any) => {\n    return timestamp;\n  }\n);\n\n\nexport const searchTokenPairs = createAsyncThunk(\n  'token/search',\n  async (searchString, thunkAPI) => {\n    // Cancel search is string is empty.\n    if (!searchString) return;\n\n    try {\n      let { networkMap, exchangeMap } = thunkAPI.getState();\n      const pairSearchTimestamp = new Date().getTime();\n      console.log('Search sent');\n\n\n      // Dispatches \"setPairSearchTimestamp\".\n      thunkAPI.dispatch(setPairSearchTimestamp(pairSearchTimestamp));\n\n      // Runs the function handling the cleaning of the properties from their values indicating if they are enabled or not.\n      networkMap = filterActiveNames(networkMap);\n      exchangeMap = filterActiveNames(exchangeMap);\n\n      // Runs the function handling the management of the \"All\" value selected by the user.\n      networkMap = filterActiveAll(networkMap) ? [...new Set(networkExchangePairs.map(pair => pair[0]))] : networkMap;\n      exchangeMap = filterActiveAll(exchangeMap) ? [...new Set(networkExchangePairs.map(pair => pair[1]))] : exchangeMap;\n\n      // Filtering out any exchange that is not valid for the selected networks.\n      // This has to be done since an exchange will remain in the array when the network is disabled by the user.\n      // It's easier here and also offer a more natural experience for the user.\n      exchangeMap = exchangeMap\n        .filter(exchange => networkExchangePairs\n          .filter(pair => networkMap.includes(pair[0]) && pair[1] === exchange).length >= 1);\n\n      // Filtering out any network that does not have at least one valid exchange selected.\n      // This has to be done since the user can still have a network selected while it has no valid exchange selected.\n      // It's easier here and also offer a more natural experience for the user.\n      // We do this in last because this has a real potential to harm the user experience by running GraphQL queries that are not needed unlike feeding to the\n      // query an unused echange for a given network.\n      networkMap = networkMap\n        .filter(network => networkExchangePairs\n          .filter(pair => pair[0] === network && exchangeMap.includes(pair[1])).length >= 1);\n\n      // Loading the data.\n      const data = await retry(() => searchTokensAsync(searchString, networkMap, exchangeMap), { retries: 1 });\n\n      // console.log(\"data\", data);\n      console.log(data.length + ' results', (new Date().getTime() - pairSearchTimestamp) + 'ms');\n      return { data, pairSearchTimestamp };\n    }\n    catch (e) {\n      console.log(\"err searchTokenPairs\", e);\n      throw new Error(stringify(e, Object.getOwnPropertyNames(e)));\n    }\n  }\n);\n\nconst initialTimestamp = new Date().getTime();\nconst initialState: TokenSearchState = {\n  fetchError: null,\n  isLoading: false,\n  isSelecting: false,\n  pairSearchTimestamp: initialTimestamp,\n  searchText: '',\n  searchToken: false,\n  selectedPair: undefined,\n  serializedTradeEstimator: '',\n  suggestions: [],\n  exchangeMap: {},\n  networkMap: {}\n};\n\nexport const tokenSearchSlice = createSlice({\n  extraReducers: (builder) => {\n    builder.addCase(resetSearchOnNewExchange.fulfilled, (state, action) => {\n      state.searchText = '';\n      state.suggestions = [];\n      state.isLoading = true;\n      state.fetchError = null;\n      state.isSelecting = false;\n      state.selectedPair = undefined;\n      // don't update pairSearchTimestamp\n      state.serializedTradeEstimator = '';\n    });\n    builder.addCase(setPairSearchTimestamp.fulfilled, (state, action) => {\n      state.pairSearchTimestamp = action.payload;\n    });\n    builder.addCase(setPair.fulfilled, (state, action) => {\n      //pending/rejected not needed as its not really async\n      state.searchText = '';\n      state.isSelecting = false;\n      state.selectedPair = action.payload;\n    });\n    builder.addCase(searchTokenPairs.pending, (state) => {\n      state.isLoading = true;\n      state.fetchError = null;\n    });\n    builder.addCase(searchTokenPairs.fulfilled, (state, action) => {\n      if (action.payload?.pairSearchTimestamp >= state.pairSearchTimestamp) {\n        state.pairSearchTimestamp = action.payload.pairSearchTimestamp;\n        state.suggestions = action.payload.data;\n        state.isLoading = false;\n        state.fetchError = null;\n      }\n    });\n    builder.addCase(searchTokenPairs.rejected, (state, action) => {\n      state.suggestions = [];\n      state.isLoading = false;\n      state.fetchError = 'Something went wrong fetching token pair.'; //action.error.message\n    });\n  },\n  initialState,\n  name: 'tokenSearch',\n  reducers: {\n    setSearchText: (state, action) => {\n      state.searchText = action.payload;\n    },\n    setSearchToken: (state, action) => {\n      state.searchToken = action.payload;\n    },\n    startSelecting: (state) => {\n      state.isSelecting = true;\n    },\n    stopSelecting: (state) => {\n      state.isSelecting = false;\n    },\n    toggleSelecting: (state) => {\n      state.isSelecting = !state.isSelecting;\n    },\n    setExchangeMap: (state, action) => {\n      // Setting the payload exchange name to the payload value.\n      state.exchangeMap[action.payload.exchangeName] = action.payload.checked;\n    },\n    setExchangeMapAll: (state, action) => {\n      let exchangeName;\n\n\n      // Loops through the network names.\n      for (exchangeName of action.payload.exchangeNames) {\n        // Validate if \"all exchange\" is active.\n        if (action.payload.exchangeAll) {\n          // Sets all networks to true.\n          state.exchangeMap[exchangeName] = true;\n        }\n        else {\n          // Removes all manual networks.\n          delete state.exchangeMap[exchangeName]\n        }\n      };\n      // Object.keys(state.exchangeMap).map(key => delete state.exchangeMap[key]);\n    },\n    setNetworkMap: (state, action) => {\n      // Setting the payload network name to the payload value.\n      state.networkMap[action.payload.networkName] = action.payload.checked;\n    },\n    setNetworkMapAll: (state, action) => {\n      let networkName;\n\n\n      // Loops through the network names.\n      for (networkName of action.payload.networkNames) {\n        // Validate if \"all network\" is active.\n        if (action.payload.networkAll) {\n          // Sets all networks to true.\n          state.networkMap[networkName] = true;\n        }\n        else {\n          // Removes all manual networks.\n          delete state.networkMap[networkName]\n        }\n      };\n    }\n  },\n});\n\nexport const { setSearchText, startSelecting, stopSelecting, toggleSelecting, setExchangeMap, setExchangeMapAll, setNetworkMap, setNetworkMapAll, setSearchToken } =\n  tokenSearchSlice.actions;\nexport default tokenSearchSlice.reducer;\n","import BN from 'bignumber.js';\nimport { stringify } from 'flatted';\nimport { gql } from 'graphql-request';\nimport { romePairsClient } from './graphqlClients';\nimport { maxHits } from \"./config\";\n\n\nconst getRomeSearchTokenQuery = (networks) => {\n  let network;\n  let pair_search = ``;\n  const networkDatasetLength = Math.round(maxHits / networks.length);\n\n\n  // Looping through all networks.\n  for (network of networks) {\n    pair_search += `\n      ${network}:\n        ${network}_pair_search(\n          where:{\n            concat_ws:{_ilike:$searchText}, \n            exchange:{_in:$exchanges}\n          }, \n          limit:${networkDatasetLength}, \n          order_by:{ last_24hour_usd_volume:desc_nulls_last }\n        ) \n        {\n          id:pair_address\n          exchange\n          token0 {\n            address\n            symbol\n            name\n            decimals\n            id:address\n            image:primary_img_uri\n          }\n          token1 {\n            address\n            symbol\n            name\n            decimals\n            id:address\n            image:primary_img_uri\n          }\n          last_24hour_usd_volume\n          latest_token0_usd_price\n          latest_token1_usd_price\n        }`;\n  }\n\n  return gql`query SearchTokens($searchText:String!,$exchanges:[String!]!){${pair_search}}`;\n};\n\n// Function that prepares the parameters of the GraphQL query.\n// It's not doing much at the moment, but if needs to be expanded, at least it will keep the code cleaner.\nconst searchTokenAsync_Parameters = (searchText, searchExchanges) => {\n  return {\n    exchanges: [...searchExchanges],\n    searchText,\n  };\n};\n\n// Function that prepares de search text for the GraphQL query.\n// Again, for code cleaness and possible expansion.\nconst searchTokenAsync_searchString = searchString => {\n  //empty string turns to 0x which is found by every pair.\n  return searchString ? `%${searchString}%` : '%0x%';\n};\n\n// Function that creates the actual async token.\nexport const searchTokensAsync = async (searchString, searchNetworks, searchExchanges) => {//, config = { nilVolumeOkay:false }) => {\n  let res;\n  const searchText = searchTokenAsync_searchString(searchString);\n  const parameters = searchTokenAsync_Parameters(searchText, searchExchanges);\n  const query = getRomeSearchTokenQuery(searchNetworks);\n\n\n  // IMPORTANT!!!\n  // IMPORTANT!!!\n  // Fun fact, we are injecting ALL active exchanges for ANY network, wheter it is support or not.\n  // This does not cause any errors at the moment, but this makes the query QUITE nasty.\n  // This should be handled at some point.\n  // IMPORTANT!!!\n  // IMPORTANT!!!\n  try {\n    res = await romePairsClient.request(query, parameters);\n  }\n  catch (e) {\n    throw new Error(`${stringify(e, Object.getOwnPropertyNames(e))}, args:${stringify({ parameters, query, })}`);\n  }\n  // IMPORTANT!!!\n  // IMPORTANT!!!\n\n  const mappedPairs = Object\n    // Loading an array from each data set comprised of [{networkName},{networkResults}].\n    .entries(res)\n    .map((network: any) => {\n      // Adding the network to the results so we can display this information to the user.\n      network[1].map(result => result.network = network[0]);\n\n      // Returning only the data that is of interest to us.\n      return network[1];\n    })\n    // Flattening all the data sets into one data set.\n    .flat()\n    .filter((pair: any) => pair.token0 && pair.token1)\n    .map((pair: any) => {\n      const tokenPrices =\n        pair.latest_token0_usd_price && pair.latest_token1_usd_price ?\n          {\n            token0Price: new BN(pair.latest_token1_usd_price)\n              .dividedBy(pair.latest_token0_usd_price)\n              .toString(),\n            token1Price: new BN(pair.latest_token0_usd_price)\n              .dividedBy(pair.latest_token1_usd_price)\n              .toString(),\n          } :\n          {\n            token0Price: 1,\n            token1Price: 1,\n          };\n\n      return {\n        ...pair,\n        volumeUSD: pair.last_24hour_usd_volume,\n        ...tokenPrices,\n      };\n    });\n\n  return mappedPairs;\n};","import { GraphQLClient } from 'graphql-request';\n\nimport { romeTokenSyncUri, } from './config';\n\nexport const romePairsClient = new GraphQLClient(romeTokenSyncUri);\n","export const romeTokenSyncUri = String(\n  process.env.REACT_APP_HASURA_API_ENDPOINT_WS ||//todo should be a prop or something\n  'https://romenet.prod.velox.global/v1/graphql'\n).replace('ws', 'http');\n\nconst AvalanchePairs = [\n  [\"avalanche\", \"baguette\"],\n  [\"avalanche\", \"canary\"],\n  [\"avalanche\", \"complusnetwork\"],\n  [\"avalanche\", \"elkfinance\"],\n  [\"avalanche\", \"kyberdmm\"],\n  [\"avalanche\", \"lydiafinance\"],\n  [\"avalanche\", \"oliveswap\"],\n  [\"avalanche\", \"pandaswap\"],\n  [\"avalanche\", \"pangolin\"],\n  [\"avalanche\", \"sushiswap\"],\n  [\"avalanche\", \"traderjoe\"],\n  [\"avalanche\", \"yetiswap\"],\n  [\"avalanche\", \"zeroexchange\"],\n]\nconst BSCPairs = [\n  [\"bsc\", \"apeswap\"],\n  [\"bsc\", \"babyswap\"],\n  [\"bsc\", \"biswap\"],\n  [\"bsc\", \"ellipsis.finance\"],\n  [\"bsc\", \"mdex\"],\n  [\"bsc\", \"pancakeswap\"],\n  [\"bsc\", \"safeswap\"],\n  [\"bsc\", \"sushiswap\"],\n]\nconst moonbeamPairs = [\n  [\"moonbeam\", \"beamswap\"],\n  [\"moonbeam\", \"solarflare\"],\n  [\"moonbeam\", \"stellaswap\"],\n  [\"moonbeam\", \"sushiswap\"],\n]\nconst moonriverPairs = [\n  [\"moonriver\", \"solarbeam\"],\n  [\"moonriver\", \"sushiswap\"],\n]\nexport const networkExchangePairs = [...BSCPairs, ...AvalanchePairs, ...moonbeamPairs, ...moonriverPairs];\nexport const networkNames = [...new Set(networkExchangePairs.map(pair => pair[0]))];\nexport const maxHits = 500;","export const filterActiveAll = data => !Object.values(data).some(b => b);\n\nexport const filterActiveNames = data => Object.entries(data).filter(entry => entry[1]).map(entry => entry[0]);\n\nexport const filterValidExchangeNames = (data, source) => [...new Set(source.filter(entry => filterActiveNames(data).includes(entry[0])).map(entry => entry[1]))];","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'twin.macro';\nimport 'styled-components/macro'\nimport { stopSelecting } from '../redux/tokenSearchSlice';\nimport SearchInput from \"./SearchInput\";\nimport SearchResult from \"./SearchResult\";\nimport SearchFilters from \"./SearchFilters\";\nimport {RootState} from \"../redux/store\";\n\n\nexport const TokenSearch = () => {\n  const dispatch = useDispatch();\n  const { isSelecting, isLoading } = useSelector((state:RootState) => state);\n  const searchRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    window.onmousedown = (e) => {\n      if (!searchRef?.current?.contains(e.target)) {\n        dispatch(stopSelecting());\n      }\n    };\n  }, [dispatch]);\n\n  return (\n    <div tw=\"m-10\" ref={searchRef}>\n      <SearchInput />\n      <SearchFilters />\n      {isSelecting && <SearchResult loading={isLoading} />}\n    </div>\n  );\n};\n\nexport default TokenSearch;\n","import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport debounce from 'lodash.debounce';\nimport { searchTokenPairs, startSelecting, toggleSelecting, setSearchText, setSearchToken } from '../redux/tokenSearchSlice';\nimport magnifyingGlass from './icon-search.svg'\nimport { RootState } from \"../redux/store\";\nimport { mutatorTextToken } from \"./helpers/mutatorTextToken\";\n\nconst PairField = styled.div`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  border-color: #067c82;\n  border-style: solid;\n  border-width: 2px;\n  border-radius: 30px;\n  background: #08333c;\n  padding: 11px 15px;\n  font-size: 15px;\n  color: #ffffff;\n  font-family: 'Fira Code', monospace;\n\n  @media only screen and (max-width: 990px) {\n    width: 100%;\n  }\n\n  @media only screen and (max-width: 769px) {\n    width: 100%;\n  }\n`;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  border: none;\n  background-color: inherit;\n  color: #ffffff;\n  //width: auto;\n`;\n\nconst HideOnSmallScreen = styled.img`\n  width: 30px;\n  cursor: pointer;\n  float: right;\n  position: absolute;\n  right: 22px;\n  top: 9px;\n  @media only screen and (max-width: 990px) {\n    display: none;\n  }\n`;\n\n\nconst SearchInput = () => {\n  const dispatch = useDispatch();\n  const { searchText, networkMap, exchangeMap, searchToken } = useSelector((state: RootState) => state);\n\n\n  // Updates the datasets of the results.\n  useEffect(() => { dispatch(searchTokenPairs(searchText)); }, [dispatch, searchText, networkMap, exchangeMap]);\n\n\n  const onChangeFilter = (event) => {\n    const value = mutatorTextToken(event.target, searchToken, dispatch);\n    dispatch(setSearchText(value));\n  }\n\n  const debounceChangeHandler = useCallback(debounce(onChangeFilter, 350), [searchText])\n  // RENDERING.\n  return (\n    <PairField onClick={() => dispatch(startSelecting())}>\n      <StyledInput\n        placeholder={'Select a token pair'}\n        autocomplete={'off'}\n        maxLength=\"48\"\n        onChange={debounceChangeHandler}\n      />\n      <HideOnSmallScreen\n        alt={''}\n        src={magnifyingGlass}\n        onClick={() => dispatch(toggleSelecting())}\n      />\n    </PairField>\n  );\n};\nexport default SearchInput;\n","import { setSearchToken } from '../../redux/tokenSearchSlice';\n\n\n// Function that validates if the user is searching for a token and changes the search string accordingly.\n// We are also adding a value to say if the token search was enabled or not, that way if the user removes characters from the string outside of the threshold,\n// we will revert to a non-token search.\n//\n// IMPORTANT: If the user is searching for a string, that is NOT a token but validates as one, the search WILL only be looking for a token.\n//\nexport const mutatorTextToken = (input, searchToken, dispatch) => {\n    // We want to tell the user whats going on by updating the value on the UI.\n    // The user has to know that we will be looking only for tokens that start with the said string now.\n    let value = input.value;\n    const leadIsTokenLike = value.substr(0, 2).toLowerCase() === '0x';\n    const valueIsTokenLike = new RegExp(/^[0-9a-f]+$/i).test(value.substr(leadIsTokenLike ? 2 : 0));\n    const valueLength = value.length;\n\n\n    // Checks that 'leadIsTokenLike' is false and that the value is token like.\n    if (!leadIsTokenLike && valueIsTokenLike && valueLength >= 5) {\n        // Add the leading '0x' to the value.\n        value = '0x' + value;\n\n        // User is looking for a token.\n        dispatch(setSearchToken(true));\n    }\n    else\n        // Checks if the search is looking for a token.\n        if (searchToken)\n            // Checks that the value lead is token like.\n            if (leadIsTokenLike) {\n                // Checks if the user has deleted characters from the search threshold for token detection.\n                // We are looking for a lenght smaller than 7, since we have to take into account the leading '0x'.\n                if (valueLength < 7) {\n                    // Removes the leading '0x' from the value.\n                    value = value.substr(2);\n\n                    // User is NOT looking for a token.\n                    dispatch(setSearchToken(false));\n                }\n                else\n                    // We are checking if the value is token like; since the user may have added non-hex characters to the search string.\n                    if (!valueIsTokenLike) {\n                        // Removes the leading '0x' from the value.\n                        value = value.substr(2);\n\n                        // User is NOT looking for a token.\n                        dispatch(setSearchToken(false));\n                    }\n            }\n            // This should not happen.\n            // Something went wrong, not sure how this case can happen, but we are turning off the token search.\n            else\n                // User is NOT looking for a token.\n                dispatch(setSearchToken(false));\n\n    // We update the input value if the string is not empty.\n    if (!!value) input.value = value;\n\n\n    // Returning.\n    return value;\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport 'twin.macro';\nimport 'styled-components/macro'\n\nimport {RootState} from \"../redux/store\";\nimport TokenPairDetail from './TokenPairDetail'\n \nconst SearchResult = (props) => {\n  const {suggestions, searchText} = useSelector(\n    (state:RootState) => state\n  );\n  const filteredSuggestions = suggestions\n    .slice()\n    .sort((pair1, pair2) => pair2.volumeUSD - pair1.volumeUSD);\n\n    if (props.loading) {\n      return <div tw=\"relative flex bg-white justify-center items-center\">Loading...</div>;\n    }\n  \n    if (!!searchText && !filteredSuggestions.length) {\n      return <div tw=\"relative flex bg-white justify-center items-center\">No pairs found...</div>;\n    }  \n\n  return (\n    <div tw=\"h-60 overflow-y-auto pl-4 border-solid\">    \n    {\n      filteredSuggestions.map((suggestions, index) => \n      <TokenPairDetail\n        suggestions={filteredSuggestions}\n        index={index}\n      />\n      )\n    }  \n  </div>    \n  );\n};\nexport default SearchResult;\n","\nimport React from \"react\"\nimport 'twin.macro';\nimport 'styled-components/macro'\n \nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from 'react-accessible-accordion';\nimport { firstAndLast, capitalizeFirstLetter } from './helpers/firstAndLast';\nimport { intToWords } from './helpers/intToWords';\nconst imageSize = 26;\n\nexport const TokenPairDetail = (props) => {\n  const { index, suggestions } = props;\n    \n  const selectedPair = suggestions[index];\n   const tokenImage = (token) => {\n    return token?.image && (\n      <img\n      alt={token?.symbol}\n      src={token?.image}\n      style={{ borderRadius: '50%' }}\n      width={imageSize}\n    />\n    )\n  } \n  return (\n    <Accordion allowZeroExpanded>\n      <AccordionItem key={selectedPair.id}>\n        <AccordionItemHeading>\n          <AccordionItemButton tw=\"cursor-pointer\">\n            <div tw=\"grid grid-flow-col hover:border-dotted p-4 gap-4\">\n              <div tw=\"row-span-2 text-gray-900\">\n                <div>{selectedPair.network.toUpperCase()} - {capitalizeFirstLetter(selectedPair.exchange)} - </div>\n                <div tw=\"text-[12px]\">Volume: {intToWords(selectedPair.volumeUSD)}</div>\n              </div>\n              <div tw=\"row-span-1 pl-2 font-bold\">\n                {tokenImage(selectedPair.token0)}{selectedPair.token0.name} - \n                {tokenImage(selectedPair.token1)}{selectedPair.token1.name}\n              </div>\n            </div>\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>          \n          <div tw=\"grid grid-rows-3 grid-flow-col gap-4 m-4\">\n            <div tw=\"row-span-3\">\n              <div><span tw=\"font-bold\">Pair Address:</span> {selectedPair.id}</div>\n              <div><span tw=\"font-bold\">{tokenImage(selectedPair.token0)} token0 address: </span>{firstAndLast(selectedPair.token0.address)}</div>\n              <div><span tw=\"font-bold\">{tokenImage(selectedPair.token1)} token1 address: </span>{firstAndLast(selectedPair.token1.address)}</div>\n            </div>\n            <div tw=\"row-span-2\">\n              <div tw=\"font-bold\">{selectedPair.network.toUpperCase()}</div>\n              <div tw=\"font-bold\">{capitalizeFirstLetter(selectedPair.exchange)} </div>\n            </div>            \n          </div>\n          \n        </AccordionItemPanel>        \n      </AccordionItem>\n    </Accordion>\n  );\n}\nexport default TokenPairDetail","export const firstAndLast = (str, chars = 8) =>\n  str && str.slice(0, chars) + '...' + str.slice(-chars);\n\nexport const capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","export function intToWords(int) {\n  if (typeof int !== 'number') {\n    int = Number(int);\n  }\n  if (isNaN(int)) {\n    return '?';\n  }\n  if (int < 1e6) {\n    return '$' + Math.round(int).toLocaleString();\n  }\n  if (int < 1e9) {\n    return '$' + Math.round(int / 1e5) / 10 + ' Million';\n  }\n  return '$' + Math.round(int / 1e8) / 10 + ' Billion';\n}\n","import React from \"react\"\nimport { useSelector } from 'react-redux';\nimport 'twin.macro';\nimport 'styled-components/macro'\n\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from 'react-accessible-accordion';\nimport { FilterNetworkAll, FilterNetworkSelectors } from \"./SearchFiltersNetworkSelectors\";\nimport { FilterExchangeAll, FilterExchangeSelectors } from \"./SearchFiltersExchangeSelectors\";\nimport {RootState} from \"../redux/store\";\n\nexport const SearchFilters = () => {\n  const { networkMap, exchangeMap  } = useSelector((state:RootState) => state);\n  \n  const exchangesActive = Object.values(networkMap).filter(b => b).length !== 0;\n  const networkCount = Object.values(networkMap).filter(b=>b).length\n  const exchangeCount = Object.values(exchangeMap).filter(b=>b).length\n\n  // RENDERING.\n  return (\n    <Accordion allowZeroExpanded>\n      <AccordionItem>\n        <AccordionItemHeading>\n          <AccordionItemButton >\n            <div tw=\"p-4 flex\">\n              <div tw=\"font-bold\">Filter Networks:</div>  &nbsp; Searching {networkCount} networks and {exchangeCount} exchanges\n            </div>\n          </AccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel>\n          <FilterNetworkAll />\n          <FilterNetworkSelectors />\n        </AccordionItemPanel>\n        <AccordionItemPanel>\n          <div tw=\"flex justify-center items-center m-2\">\n            <FilterNetworkAll />\n            <FilterNetworkSelectors />\n          </div>\n        </AccordionItemPanel>\n        <AccordionItemPanel>          \n          <div tw=\"flex flex-wrap justify-center m-2\">\n          {\n            exchangesActive &&\n            <FilterExchangeAll />\n          }\n          {\n            exchangesActive &&\n            <FilterExchangeSelectors />\n          }    \n          </div>      \n        </AccordionItemPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n\nexport default SearchFilters","import React from \"react\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setNetworkMap, setNetworkMapAll, setExchangeMapAll } from \"../redux/tokenSearchSlice\"\nimport { networkNames } from \"./helpers/config\";\nimport { Chip } from \"../Components/Chip\";\nimport { RootState } from \"../redux/store\";\nimport { filterActiveAll, filterActiveNames } from './helpers/filters';\n\n\nexport const FilterNetworkAll = () => {\n  const dispatch = useDispatch();\n  const { exchangeMap, networkMap } = useSelector((state: RootState) => state);\n  const networkAll = filterActiveAll(networkMap);\n  const exchangeNamesActive = filterActiveNames(exchangeMap);\n\n\n  // RENDERING.\n  return <Chip\n    name={'AllNetworks'}\n    label={'All'}\n    checked={networkAll}\n    onChange={\n      e => {\n        dispatch(setNetworkMapAll({ networkNames: networkNames, networkAll: networkAll }));\n        dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: false }));\n      }\n    }\n  />;\n};\n\n\nexport const FilterNetworkSelectors = () => {\n  const dispatch = useDispatch();\n  const { networkMap } = useSelector((state: RootState) => state);\n\n\n  // Function generating the HTML element of the network.\n  const networkElement = networkName => {\n    // RENDERING.\n    return <Chip\n      key={networkName}\n      name={networkName}\n      label={networkName}\n      checked={networkMap[networkName] || false}\n      onChange={e => dispatch(setNetworkMap({ networkName, checked: e.target.checked }))}\n    />;\n  };\n\n\n  // RENDERING.\n  return <>{networkNames.map((networkName: any) => networkElement(networkName))}</>\n};","import React, { memo } from 'react';\nimport './style.css';\n\n\nexport const Chip = memo(\n  (props:any) => {\n    const {label, checked, onChange, name, value} = props\n    return (\n      <>\n        <input type=\"checkbox\" id={`${label}-${name}`} onChange={onChange} checked={checked} name={name} value={value}/>\n        <label htmlFor={`${label}-${name}`}>{label} </label>\n      </>\n    );\n  }\n);\nexport default Chip;","import React from \"react\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setExchangeMap, setExchangeMapAll } from \"../redux/tokenSearchSlice\"\nimport { Chip } from \"../Components/Chip\";\nimport { RootState } from \"../redux/store\";\nimport { filterActiveAll, filterValidExchangeNames } from './helpers/filters';\nimport { networkExchangePairs } from \"./helpers/config\";\n\n\nexport const FilterExchangeAll = () => {\n  const dispatch = useDispatch();\n  const { exchangeMap, networkMap } = useSelector((state: RootState) => state);\n  const exchangeAll = filterActiveAll(exchangeMap);\n  const exchangeNamesActive = filterValidExchangeNames(networkMap, networkExchangePairs);\n\n\n  // RENDERING.\n  return <Chip\n    name={'AllExchanges'}\n    label={'All'}\n    checked={exchangeAll}\n    onChange={() => dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: exchangeAll }))}\n  />;\n};\n\n\nexport const FilterExchangeSelectors = () => {\n  const dispatch = useDispatch();\n  const { networkMap, exchangeMap } = useSelector((state: RootState) => state);\n  const exchangeNamesActive = filterValidExchangeNames(networkMap, networkExchangePairs);\n\n\n  // Function generating the HTML element of the network.\n  const exchangeElement = exchangeName => {\n    // RENDERING.\n    return <Chip\n      key={exchangeName}\n      name={exchangeName}\n      label={exchangeName}\n      checked={exchangeMap[exchangeName] || false}\n      onChange={e => dispatch(setExchangeMap({ exchangeName: exchangeName, checked: e.target.checked }))}\n    />;\n  };\n\n\n  // RENDERING.\n  return <>{exchangeNamesActive.map(exchangeName => exchangeElement(exchangeName))}</>\n};","import {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n} from \"react-accessible-accordion\";\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeading,\n  AccordionItemButton,\n  AccordionItemPanel,\n};\n"],"mappings":"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","names":[]}