{"version":3,"sources":["../src/searchbar/index.tsx","../src/searchbar/redux/store.ts","../src/searchbar/redux/tokenSearchSlice.ts","../src/searchbar/tokenSearch/helpers/async.ts","../src/searchbar/tokenSearch/helpers/graphqlClients.ts","../src/searchbar/tokenSearch/helpers/config.ts","../src/searchbar/tokenSearch/index.tsx","../src/searchbar/tokenSearch/SearchInput.tsx","../src/searchbar/tokenSearch/SearchResult.tsx","../src/searchbar/tokenSearch/TokenPairDetail.tsx","../src/searchbar/tokenSearch/helpers/firstAndLast.ts","../src/searchbar/tokenSearch/helpers/intToWords.ts","../src/searchbar/tokenSearch/SearchFilters.tsx","../src/searchbar/tokenSearch/SearchFiltersNetworkSelectors.tsx","../src/searchbar/Components/Chip/index.tsx","../src/searchbar/tokenSearch/SearchFiltersExchangeSelectors.tsx","../src/types.ts"],"sourcesContent":["import React from \"react\"\r\nimport 'twin.macro';\r\nimport 'styled-components/macro'\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport TokenSearch from \"./tokenSearch\";\r\n\r\nexport function SearchBar() {\r\n  return (\r\n  <div>\r\n      <Provider store={store}>\r\n        <TokenSearch />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport { tokenSearchSlice } from './tokenSearchSlice';\r\n\r\n\r\n\r\nconst rootReducer = tokenSearchSlice.reducer\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  middleware: getDefaultMiddleware({\r\n    immutableCheck: false,\r\n  }),\r\n  reducer: rootReducer\r\n});\r\n\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport retry from 'async-retry';\r\nimport { stringify } from 'flatted';\r\nimport { searchTokensAsync } from \"../tokenSearch/helpers/async\";\r\nimport { uniq, omitBy } from \"lodash\"\r\nimport { networkExchangePairs } from '../tokenSearch/helpers/config';\r\nimport {TokenSearchState} from \"./types\";\r\n\r\nexport const setPair = createAsyncThunk(\r\n  'token/setPair',\r\n  async ({ selectedPair }:any) => {\r\n    console.log(\"setPair\")\r\n    return selectedPair;\r\n  }\r\n);\r\n\r\nexport const resetSearchOnNewExchange = createAsyncThunk(\r\n  'token/searchReset',\r\n  async (searchString:any, thunkAPI:any) => {\r\n    console.log(\"resetSearchOnNewExchange\")\r\n    thunkAPI.dispatch(searchTokenPairs(''));\r\n  }\r\n);\r\n\r\n//todo no need for this to be a thunk\r\nconst setPairSearchTimestamp = createAsyncThunk(\r\n  'token/saveTime',\r\n  async (timestamp:any) => {\r\n    return timestamp;\r\n  }\r\n);\r\n\r\n\r\n// Function that handles the \"All\" values of both the network and the exchange.\r\n// Consider that \"no value\" equates \"All\".\r\nconst allValueHandler = (networkMap, exchangeMap) => {\r\n  let returnedNetworkMap = networkMap;\r\n  let returnedExchangeMap = exchangeMap;\r\n\r\n\r\n  // Validates that the networkMap contains the \"All\" value.\r\n  // If \"All\" is active, it overrides all other networks; thus we enable all the networks.\r\n  if (networkMap.length === 0 || networkMap.includes('All')) {\r\n    // Loads all the networks from \"networkExchangePairs\".\r\n    returnedNetworkMap = uniq(networkExchangePairs.map(pair => pair[0]));\r\n  }\r\n\r\n  // Validates that the networkMap contains the \"All\" value.\r\n  // If \"All\" is active, it overrides all other networks; thus we enable all the networks.\r\n  if (exchangeMap.length === 0 || exchangeMap.includes('All')) {\r\n    // Loads all the networks from \"networkExchangePairs\".\r\n    returnedExchangeMap = uniq(networkExchangePairs.map(pair => pair[1]));\r\n  }\r\n\r\n\r\n  // Returns the processed values of \"networkMap\" and \"exchangeMap\".\r\n  return [returnedNetworkMap, returnedExchangeMap];\r\n};\r\n\r\n// Function that handles the \"All\" values of both the network and the exchange.\r\nconst valueCleaner = (networkMap, exchangeMap) => {\r\n  // We have to use \"omitBy\" since a network or exchange will remain in the object if a user unselect them, but as false instead of true.\r\n  // We then load each network and exchange by their key into an array to further filter them.\r\n  networkMap = Object.keys(omitBy(networkMap, (b) => !b));\r\n  exchangeMap = Object.keys(omitBy(exchangeMap, (b) => !b));\r\n\r\n\r\n  // Returns the processed values of \"networkMap\" and \"exchangeMap\".\r\n  return [networkMap, exchangeMap];\r\n};\r\n\r\n\r\nexport const searchTokenPairs = createAsyncThunk(\r\n  'token/search',\r\n  async (searchString:any, thunkAPI:any) => {\r\n    try {\r\n      let { networkMap, exchangeMap } = thunkAPI.getState();\r\n      let processedNetworks;\r\n      let processedExchanges;\r\n      const pairSearchTimestamp = new Date().getTime();\r\n\r\n\r\n      // Dispatches \"setPairSearchTimestamp\".\r\n      thunkAPI.dispatch(setPairSearchTimestamp(pairSearchTimestamp));\r\n\r\n      // Runs the function handling the cleaning of the properties from their values indicating if they are enabled or not.\r\n      [processedNetworks, processedExchanges] = valueCleaner(networkMap, exchangeMap);\r\n\r\n      // Runs the function handling the management of the \"All\" value selected by the user.\r\n      [processedNetworks, processedExchanges] = allValueHandler(processedNetworks, processedExchanges);\r\n\r\n      // Filtering out any exchange that is not valid for the selected networks.\r\n      // This has to be done since an exchange will remain in the array when the network is disabled by the user.\r\n      // It's easier here and also offer a more natural experience for the user.\r\n      processedExchanges = processedExchanges\r\n        .filter(exchange => networkExchangePairs\r\n          .filter(pair => processedNetworks.includes(pair[0]) && pair[1] === exchange).length >= 1);\r\n\r\n      // Filtering out any network that does not have at least one valid exchange selected.\r\n      // This has to be done since the user can still have a network selected while it has no valid exchange selected.\r\n      // It's easier here and also offer a more natural experience for the user.\r\n      // We do this in last because this has a real potential to harm the user experience by running GraphQL queries that are not needed unlike feeding to the\r\n      // query an unused echange for a given network.\r\n      processedNetworks = processedNetworks\r\n        .filter(network => networkExchangePairs\r\n          .filter(pair => pair[0] === network && processedExchanges.includes(pair[1])).length >= 1);\r\n\r\n      // Loading the data.\r\n      const data = await retry(() => searchTokensAsync(searchString, processedNetworks, processedExchanges), { retries: 1 });\r\n\r\n      // console.log(\"data\", data);\r\n      console.log(\"data\", data.length);\r\n      return { data, pairSearchTimestamp };\r\n    }\r\n    catch (e) {\r\n      console.log(\"err searchTokenPairs\", e);\r\n      throw new Error(stringify(e, Object.getOwnPropertyNames(e)));\r\n    }\r\n  }\r\n);\r\n\r\nconst initialTimestamp = new Date().getTime();\r\nconst initialState: TokenSearchState = {\r\n  fetchError: null,\r\n  isLoading: false,\r\n  isSelecting: false,\r\n  pairSearchTimestamp: initialTimestamp,\r\n  searchText: '',\r\n  selectedPair: undefined,\r\n  serializedTradeEstimator: '',\r\n  suggestions: [],\r\n  exchangeMap: {},\r\n  networkMap: {}\r\n};\r\n\r\nexport const tokenSearchSlice = createSlice({\r\n  extraReducers: (builder) => {\r\n    builder.addCase(resetSearchOnNewExchange.fulfilled, (state, action) => {\r\n      state.searchText = '';\r\n      state.suggestions = [];\r\n      state.isLoading = true;\r\n      state.fetchError = null;\r\n      state.isSelecting = false;\r\n      state.selectedPair = undefined;\r\n      // don't update pairSearchTimestamp\r\n      state.serializedTradeEstimator = '';\r\n    });\r\n    builder.addCase(setPairSearchTimestamp.fulfilled, (state, action) => {\r\n      state.pairSearchTimestamp = action.payload;\r\n    });\r\n    builder.addCase(setPair.fulfilled, (state, action) => {\r\n      //pending/rejected not needed as its not really async\r\n      state.searchText = '';\r\n      state.isSelecting = false;\r\n      state.selectedPair = action.payload;\r\n    });\r\n    builder.addCase(searchTokenPairs.pending, (state) => {\r\n      state.isLoading = true;\r\n      state.fetchError = null;\r\n    });\r\n    builder.addCase(searchTokenPairs.fulfilled, (state, action) => {\r\n      if (action.payload?.pairSearchTimestamp >= state.pairSearchTimestamp) {\r\n        state.pairSearchTimestamp = action.payload.pairSearchTimestamp;\r\n        state.suggestions = action.payload.data;\r\n        state.isLoading = false;\r\n        state.fetchError = null;\r\n      }\r\n    });\r\n    builder.addCase(searchTokenPairs.rejected, (state, action) => {\r\n      state.suggestions = [];\r\n      state.isLoading = false;\r\n      state.fetchError = 'Something went wrong fetching token pair.'; //action.error.message\r\n    });\r\n  },\r\n  initialState,\r\n  name: 'tokenSearch',\r\n  reducers: {\r\n    setSearchText: (state, action) => {\r\n      state.searchText = action.payload;\r\n    },\r\n    startSelecting: (state) => {\r\n      state.isSelecting = true;\r\n    },\r\n    stopSelecting: (state) => {\r\n      state.isSelecting = false;\r\n    },\r\n    toggleSelecting: (state) => {\r\n      state.isSelecting = !state.isSelecting;\r\n    },\r\n    setExchangeMap: (state, action) => {\r\n      // Setting the payload exchange name to the payload value.\r\n      state.exchangeMap[action.payload.exchangeName] = action.payload.checked;\r\n    },\r\n    setExchangeMapAll: (state, action) => {\r\n      let exchangeName;\r\n\r\n\r\n      // Loops through the network names.\r\n      for (exchangeName of action.payload.exchangeNames) {\r\n        // Validate if \"all exchange\" is active.\r\n        if (action.payload.exchangeAll) {\r\n          // Sets all networks to true.\r\n          state.exchangeMap[exchangeName] = true;\r\n        }\r\n        else {\r\n          // Removes all manual networks.\r\n          delete state.exchangeMap[exchangeName]\r\n        }\r\n      };\r\n      // Object.keys(state.exchangeMap).map(key => delete state.exchangeMap[key]);\r\n    },\r\n    setNetworkMap: (state, action) => {\r\n      // Setting the payload network name to the payload value.\r\n      state.networkMap[action.payload.networkName] = action.payload.checked;\r\n    },\r\n    setNetworkMapAll: (state, action) => {\r\n      let networkName;\r\n\r\n\r\n      // Loops through the network names.\r\n      for (networkName of action.payload.networkNames) {\r\n        // Validate if \"all network\" is active.\r\n        if (action.payload.networkAll) {\r\n          // Sets all networks to true.\r\n          state.networkMap[networkName] = true;\r\n        }\r\n        else {\r\n          // Removes all manual networks.\r\n          delete state.networkMap[networkName]\r\n        }\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setSearchText, startSelecting, stopSelecting, toggleSelecting, setExchangeMap, setExchangeMapAll, setNetworkMap, setNetworkMapAll } =\r\n  tokenSearchSlice.actions;\r\nexport default tokenSearchSlice.reducer;\r\n","import BN from 'bignumber.js';\r\nimport { stringify } from 'flatted';\r\nimport { gql } from 'graphql-request';\r\nimport { romePairsClient } from './graphqlClients';\r\nimport {maxHits} from \"./config\";\r\n\r\n\r\nconst getRomeSearchTokenQuery = (networks) => {\r\n  let network;\r\n  let pair_search = ``;\r\n  const networkDatasetLength = Math.round(maxHits / networks.length);\r\n\r\n\r\n  // Looping through all networks.\r\n  for (network of networks) {\r\n    pair_search += `\r\n      ${network}:\r\n        ${network}_pair_search(\r\n          where:{\r\n            concat_ws:{_ilike:$searchText}, \r\n            exchange:{_in:$exchanges}\r\n          }, \r\n          limit:${networkDatasetLength}, \r\n          order_by:{ last_24hour_usd_volume:desc_nulls_last }\r\n        ) \r\n        {\r\n          id:pair_address\r\n          exchange\r\n          token0 {\r\n            address\r\n            symbol\r\n            name\r\n            decimals\r\n            id:address\r\n            image:primary_img_uri\r\n          }\r\n          token1 {\r\n            address\r\n            symbol\r\n            name\r\n            decimals\r\n            id:address\r\n            image:primary_img_uri\r\n          }\r\n          last_24hour_usd_volume\r\n          latest_token0_usd_price\r\n          latest_token1_usd_price\r\n        }`;\r\n  }\r\n\r\n  return gql`query SearchTokens($searchText:String!,$exchanges:[String!]!){${pair_search}}`;\r\n};\r\n\r\n// Function that prepares the parameters of the GraphQL query.\r\n// It's not doing much at the moment, but if needs to be expanded, at least it will keep the code cleaner.\r\nconst searchTokenAsync_Parameters = (searchText, searchExchanges) => {\r\n  return {\r\n    exchanges: [...searchExchanges],\r\n    searchText,\r\n  };\r\n};\r\n\r\n// Function that prepares de search text for the GraphQL query.\r\n// Again, for code cleaness and possible expansion.\r\nconst searchTokenAsync_searchString = searchString => {\r\n  //empty string turns to 0x which is found by every pair.\r\n  return searchString ? `%${searchString}%` : '%0x%';\r\n};\r\n\r\n// Function that creates the actual async token.\r\nexport const searchTokensAsync = async (searchString, searchNetworks, searchExchanges) => {//, config = { nilVolumeOkay:false }) => {\r\n  let res;\r\n  const searchText = searchTokenAsync_searchString(searchString);\r\n  const parameters = searchTokenAsync_Parameters(searchText, searchExchanges);\r\n  const query = getRomeSearchTokenQuery(searchNetworks);\r\n\r\n  \r\n  // IMPORTANT!!!\r\n  // IMPORTANT!!!\r\n  // Fun fact, we are injecting ALL active exchanges for ANY network, wheter it is support or not.\r\n  // This does not cause any errors at the moment, but this makes the query QUITE nasty.\r\n  // This should be handled at some point.\r\n  // IMPORTANT!!!\r\n  // IMPORTANT!!!\r\n  try {\r\n    res = await romePairsClient.request(query, parameters);\r\n  }\r\n  catch (e) {\r\n    throw new Error(`${stringify(e, Object.getOwnPropertyNames(e))}, args:${stringify({ parameters, query, })}`);\r\n  }\r\n  // IMPORTANT!!!\r\n  // IMPORTANT!!!\r\n\r\n  const mappedPairs = Object\r\n    // Loading an array from each data set comprised of [{networkName},{networkResults}].\r\n    .entries(res)\r\n    .map((network:any) => {\r\n      // Adding the network to the results so we can display this information to the user.\r\n      network[1].map(result => result.network = network[0]);\r\n\r\n      // Returning only the data that is of interest to us.\r\n      return network[1];\r\n    })\r\n    // Flattening all the data sets into one data set.\r\n    .flat()\r\n    .filter((pair:any) => pair.token0 && pair.token1)\r\n    .map((pair:any) => {\r\n      const tokenPrices =\r\n        pair.latest_token0_usd_price && pair.latest_token1_usd_price ?\r\n          {\r\n            token0Price: new BN(pair.latest_token1_usd_price)\r\n              .dividedBy(pair.latest_token0_usd_price)\r\n              .toString(),\r\n            token1Price: new BN(pair.latest_token0_usd_price)\r\n              .dividedBy(pair.latest_token1_usd_price)\r\n              .toString(),\r\n          } :\r\n          {\r\n            token0Price: 1,\r\n            token1Price: 1,\r\n          };\r\n\r\n      return {\r\n        ...pair,\r\n        volumeUSD: pair.last_24hour_usd_volume,\r\n        ...tokenPrices,\r\n      };\r\n    });\r\n\r\n  return mappedPairs;\r\n};","import { GraphQLClient } from 'graphql-request';\r\n\r\nimport { romeTokenSyncUri, } from './config';\r\n\r\nexport const romePairsClient = new GraphQLClient(romeTokenSyncUri);\r\n","\r\nimport { uniq } from \"lodash\";\r\n\r\n\r\nexport const romeTokenSyncUri = String(\r\n  process.env.REACT_APP_HASURA_API_ENDPOINT_WS ||//todo should be a prop or something\r\n    'https://romenet.prod.velox.global/v1/graphql'\r\n).replace('ws', 'http');\r\n\r\nexport const maxHits = Number(process.env.REACT_APP_SEARCH_ASYNC_DATASET_LENGTH_MAXIMUM || 500)\r\n\r\nexport const minStringSearch = Number(process.env.REACT_APP_SEARCH_INPUT_LENGTH_MINIMUM || 3)\r\n\r\nconst AvalanchePairs = [\r\n  [\"avalanche\",\"baguette\"],\r\n  [\"avalanche\",\"canary\"],\r\n  [\"avalanche\",\"complusnetwork\"],\r\n  [\"avalanche\",\"elkfinance\"],\r\n  [\"avalanche\",\"kyberdmm\"],\r\n  [\"avalanche\",\"lydiafinance\"],\r\n  [\"avalanche\",\"oliveswap\"],\r\n  [\"avalanche\",\"pandaswap\"],\r\n  [\"avalanche\",\"pangolin\"],\r\n  [\"avalanche\",\"sushiswap\"],\r\n  [\"avalanche\",\"traderjoe\"],\r\n  [\"avalanche\",\"yetiswap\"],\r\n  [\"avalanche\",\"zeroexchange\"],\r\n]\r\nconst BSCPairs = [\r\n  [\"bsc\",\"apeswap\"],\r\n  [\"bsc\",\"babyswap\"],\r\n  [\"bsc\",\"biswap\"],\r\n  [\"bsc\",\"ellipsis.finance\"],\r\n  [\"bsc\",\"mdex\"],\r\n  [\"bsc\",\"pancakeswap\"],\r\n  [\"bsc\",\"safeswap\"],\r\n  [\"bsc\",\"sushiswap\"],\r\n]\r\nconst moonbeamPairs = [\r\n  [\"moonbeam\",\"beamswap\"],\r\n  [\"moonbeam\",\"solarflare\"],\r\n  [\"moonbeam\",\"stellaswap\"],\r\n  [\"moonbeam\",\"sushiswap\"],\r\n]\r\nconst moonriverPairs = [\r\n  [\"moonriver\",\"solarbeam\"],\r\n  [\"moonriver\",\"sushiswap\"],\r\n]\r\nexport const networkExchangePairs = [...BSCPairs,...AvalanchePairs, ...moonbeamPairs, ...moonriverPairs];\r\nexport const networkNames = uniq(networkExchangePairs.map(pair => pair[0]));\r\nexport const exchangeNames = networkNames => uniq(networkExchangePairs.filter(pair => networkNames.includes(pair[0])).map(pair => pair[1]));\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport 'twin.macro';\r\nimport 'styled-components/macro'\r\nimport { stopSelecting } from '../redux/tokenSearchSlice';\r\nimport SearchInput from \"./SearchInput\";\r\nimport SearchResult from \"./SearchResult\";\r\nimport SearchFilters from \"./SearchFilters\";\r\nimport {RootState} from \"../redux/store\";\r\n\r\n\r\nexport const TokenSearch = () => {\r\n  const dispatch = useDispatch();\r\n  const { isSelecting, isLoading } = useSelector((state:RootState) => state);\r\n  const searchRef = useRef<HTMLInputElement>();\r\n\r\n  useEffect(() => {\r\n    window.onmousedown = (e) => {\r\n      if (!searchRef?.current?.contains(e.target)) {\r\n        dispatch(stopSelecting());\r\n      }\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div tw=\"m-10\" ref={searchRef}>\r\n      <SearchInput />\r\n      <SearchFilters />\r\n      {isSelecting && <SearchResult loading={isLoading} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TokenSearch;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport debounce from 'lodash.debounce';\r\nimport { searchTokenPairs, startSelecting, toggleSelecting, setSearchText } from '../redux/tokenSearchSlice';\r\nimport magnifyingGlass from './icon-search.svg'\r\nimport {RootState} from \"../redux/store\";\r\nimport {minStringSearch} from \"./helpers/config\";\r\n\r\nconst PairField = styled.div`\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  position: relative;\r\n  border-color: #067c82;\r\n  border-style: solid;\r\n  border-width: 2px;\r\n  border-radius: 30px;\r\n  background: #08333c;\r\n  padding: 11px 15px;\r\n  font-size: 15px;\r\n  color: #ffffff;\r\n  font-family: 'Fira Code', monospace;\r\n\r\n  @media only screen and (max-width: 990px) {\r\n    width: 100%;\r\n  }\r\n\r\n  @media only screen and (max-width: 769px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  border: none;\r\n  background-color: inherit;\r\n  color: #ffffff;\r\n  //width: auto;\r\n`;\r\n\r\nconst HideOnSmallScreen = styled.img`\r\n  width: 30px;\r\n  cursor: pointer;\r\n  float: right;\r\n  position: absolute;\r\n  right: 22px;\r\n  top: 9px;\r\n  @media only screen and (max-width: 990px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\n\r\nconst SearchInput = () => {\r\n  const dispatch = useDispatch();\r\n  const { searchText, networkMap, exchangeMap } = useSelector((state:RootState) => state);\r\n  \r\n  // Updates the datasets of the results.\r\n  useEffect(() => {\r\n    // Ensure that the search text fulfills the minimum lenght requirement.\r\n    if (searchText.length >= minStringSearch) {\r\n      dispatch(searchTokenPairs(searchText));\r\n    }\r\n  }, [dispatch, searchText, networkMap, exchangeMap]);\r\n\r\n\r\n  const onChangeFilter = (event) => {    \r\n    const value = event.target.value    \r\n    dispatch(setSearchText(value))\r\n  }\r\n\r\n  const debounceChangeHandler = useCallback( debounce(onChangeFilter, 350), [searchText])  \r\n  // RENDERING.\r\n  return (\r\n    <PairField onClick={() => dispatch(startSelecting())}>\r\n      <StyledInput\r\n        placeholder={'Select a token pair'}\r\n        autocomplete={'off'}\r\n        onChange={debounceChangeHandler}\r\n      />\r\n      <HideOnSmallScreen\r\n        alt={''}\r\n        src={magnifyingGlass}\r\n        onClick={() => dispatch(toggleSelecting())}\r\n      />\r\n    </PairField>\r\n  );\r\n};\r\nexport default SearchInput;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport 'twin.macro';\r\nimport 'styled-components/macro'\r\n\r\nimport {RootState} from \"../redux/store\";\r\nimport TokenPairDetail from './TokenPairDetail'\r\n \r\nconst SearchResult = (props) => {\r\n  const {suggestions, searchText} = useSelector(\r\n    (state:RootState) => state\r\n  );\r\n  const filteredSuggestions = suggestions\r\n    .slice()\r\n    .sort((pair1, pair2) => pair2.volumeUSD - pair1.volumeUSD);\r\n\r\n    if (props.loading) {\r\n      return <div tw=\"relative flex bg-white justify-center items-center\">Loading...</div>;\r\n    }\r\n  \r\n    if (!!searchText && !filteredSuggestions.length) {\r\n      return <div tw=\"relative flex bg-white justify-center items-center\">No pairs found...</div>;\r\n    }  \r\n\r\n  return (\r\n    <div tw=\"h-60 overflow-y-auto pl-4 border-solid\">    \r\n    {\r\n      filteredSuggestions.map((suggestions, index) => \r\n      <TokenPairDetail\r\n        suggestions={filteredSuggestions}\r\n        index={index}\r\n      />\r\n      )\r\n    }  \r\n  </div>    \r\n  );\r\n};\r\nexport default SearchResult;\r\n","\r\nimport React from \"react\"\r\nimport 'twin.macro';\r\nimport 'styled-components/macro'\r\n \r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemHeading,\r\n  AccordionItemButton,\r\n  AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\nimport { firstAndLast, capitalizeFirstLetter } from './helpers/firstAndLast';\r\nimport { intToWords } from './helpers/intToWords';\r\nconst imageSize = 26;\r\n\r\nexport const TokenPairDetail = (props) => {\r\n  const { index, suggestions } = props;\r\n    \r\n  const selectedPair = suggestions[index];\r\n   const tokenImage = (token) => {\r\n    return token?.image && (\r\n      <img\r\n      alt={token?.symbol}\r\n      src={token?.image}\r\n      style={{ borderRadius: '50%' }}\r\n      width={imageSize}\r\n    />\r\n    )\r\n  } \r\n  return (\r\n    <Accordion allowZeroExpanded>\r\n      <AccordionItem key={selectedPair.id}>\r\n        <AccordionItemHeading>\r\n          <AccordionItemButton tw=\"cursor-pointer\">\r\n            <div tw=\"grid grid-flow-col hover:border-dotted p-4 gap-4\">\r\n              <div tw=\"row-span-2 text-gray-900\">\r\n                <div>{selectedPair.network.toUpperCase()} - {capitalizeFirstLetter(selectedPair.exchange)} - </div>\r\n                <div tw=\"text-[12px]\">Volume: {intToWords(selectedPair.volumeUSD)}</div>\r\n              </div>\r\n              <div tw=\"row-span-1 pl-2 font-bold\">\r\n                {tokenImage(selectedPair.token0)}{selectedPair.token0.name} - \r\n                {tokenImage(selectedPair.token1)}{selectedPair.token1.name}\r\n              </div>\r\n            </div>\r\n          </AccordionItemButton>\r\n        </AccordionItemHeading>\r\n        <AccordionItemPanel>          \r\n          <div tw=\"grid grid-rows-3 grid-flow-col gap-4 m-4\">\r\n            <div tw=\"row-span-3\">\r\n              <div><span tw=\"font-bold\">Pair Address:</span> {selectedPair.id}</div>\r\n              <div><span tw=\"font-bold\">{tokenImage(selectedPair.token0)} token0 address: </span>{firstAndLast(selectedPair.token0.address)}</div>\r\n              <div><span tw=\"font-bold\">{tokenImage(selectedPair.token1)} token1 address: </span>{firstAndLast(selectedPair.token1.address)}</div>\r\n            </div>\r\n            <div tw=\"row-span-2\">\r\n              <div tw=\"font-bold\">{selectedPair.network.toUpperCase()}</div>\r\n              <div tw=\"font-bold\">{capitalizeFirstLetter(selectedPair.exchange)} </div>\r\n            </div>            \r\n          </div>\r\n          \r\n        </AccordionItemPanel>        \r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n}\r\nexport default TokenPairDetail","export const firstAndLast = (str, chars = 8) =>\r\n  str && str.slice(0, chars) + '...' + str.slice(-chars);\r\n\r\nexport const capitalizeFirstLetter = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n","export function intToWords(int) {\r\n  if (typeof int !== 'number') {\r\n    int = Number(int);\r\n  }\r\n  if (isNaN(int)) {\r\n    return '?';\r\n  }\r\n  if (int < 1e6) {\r\n    return '$' + Math.round(int).toLocaleString();\r\n  }\r\n  if (int < 1e9) {\r\n    return '$' + Math.round(int / 1e5) / 10 + ' Million';\r\n  }\r\n  return '$' + Math.round(int / 1e8) / 10 + ' Billion';\r\n}\r\n","import React from \"react\"\r\nimport { useSelector } from 'react-redux';\r\nimport 'twin.macro';\r\nimport 'styled-components/macro'\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemHeading,\r\n  AccordionItemButton,\r\n  AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\nimport { FilterNetworkAll, FilterNetworkSelectors } from \"./SearchFiltersNetworkSelectors\";\r\nimport { FilterExchangeAll, FilterExchangeSelectors } from \"./SearchFiltersExchangeSelectors\";\r\nimport {RootState} from \"../redux/store\";\r\n\r\nexport const SearchFilters = () => {\r\n  const { networkMap, exchangeMap  } = useSelector((state:RootState) => state);\r\n  \r\n  const exchangesActive = Object.values(networkMap).filter(b => b).length !== 0;\r\n  const networkCount = Object.values(networkMap).filter(b=>b).length\r\n  const exchangeCount = Object.values(exchangeMap).filter(b=>b).length\r\n\r\n  // RENDERING.\r\n  return (\r\n    <Accordion allowZeroExpanded>\r\n      <AccordionItem>\r\n        <AccordionItemHeading>\r\n          <AccordionItemButton >\r\n            <div tw=\"p-4 flex\">\r\n              <div tw=\"font-bold\">Filter Networks:</div>  &nbsp; Searching {networkCount} networks and {exchangeCount} exchanges\r\n            </div>\r\n          </AccordionItemButton>\r\n        </AccordionItemHeading>\r\n        <AccordionItemPanel>\r\n          <FilterNetworkAll />\r\n          <FilterNetworkSelectors />\r\n        </AccordionItemPanel>\r\n        <AccordionItemPanel>\r\n          <div tw=\"flex justify-center items-center m-2\">\r\n            <FilterNetworkAll />\r\n            <FilterNetworkSelectors />\r\n          </div>\r\n        </AccordionItemPanel>\r\n        <AccordionItemPanel>          \r\n          <div tw=\"flex flex-wrap justify-center m-2\">\r\n          {\r\n            exchangesActive &&\r\n            <FilterExchangeAll />\r\n          }\r\n          {\r\n            exchangesActive &&\r\n            <FilterExchangeSelectors />\r\n          }    \r\n          </div>      \r\n        </AccordionItemPanel>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n}\r\n\r\nexport default SearchFilters","import React from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { omitBy } from \"lodash\"\r\nimport { setNetworkMap, setNetworkMapAll, setExchangeMapAll } from \"../redux/tokenSearchSlice\"\r\nimport { networkNames } from \"./helpers/config\";\r\nimport { Chip } from \"../Components/Chip\";\r\nimport {RootState} from \"../redux/store\";\r\n\r\n\r\nexport const FilterNetworkAll = () => {\r\n  const dispatch = useDispatch();\r\n  const { exchangeMap, networkMap } = useSelector((state:RootState) => state);\r\n  const networkAll = Object.values(omitBy(networkMap, b => !b)).length === 0;\r\n  const exchangeNamesActive = Object.keys(omitBy(exchangeMap, b => !b));\r\n\r\n\r\n  // RENDERING.\r\n  return <Chip\r\n    name={'AllNetworks'}\r\n    label={'All'}\r\n    checked={networkAll}\r\n    onChange={\r\n      e => {\r\n        dispatch(setNetworkMapAll({ networkNames: networkNames, networkAll: networkAll }));\r\n        dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: false }));\r\n      }\r\n    }\r\n  />;\r\n};\r\n\r\n\r\nexport const FilterNetworkSelectors = () => {\r\n  const dispatch = useDispatch();\r\n  const { networkMap } = useSelector((state:RootState) => state);\r\n\r\n\r\n  // Function generating the HTML element of the network.\r\n  const networkElement = networkName => {\r\n    // RENDERING.\r\n    return <Chip\r\n      key={networkName}\r\n      name={networkName}\r\n      label={networkName}\r\n      checked={networkMap[networkName] || false}\r\n      onChange={e => dispatch(setNetworkMap({ networkName, checked: e.target.checked }))}\r\n    />;\r\n  };\r\n\r\n\r\n  // RENDERING.\r\n  return <>{networkNames.map((networkName:any) => networkElement(networkName))}</>\r\n};","import React, { memo } from 'react';\r\nimport './style.css';\r\n\r\n\r\nexport const Chip = memo(\r\n  (props:any) => {\r\n    const {label, checked, onChange, name, value} = props\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" id={`${label}-${name}`} onChange={onChange} checked={checked} name={name} value={value}/>\r\n        <label htmlFor={`${label}-${name}`}>{label} </label>\r\n      </>\r\n    );\r\n  }\r\n);\r\nexport default Chip;","import React from \"react\"\r\nimport { omitBy } from \"lodash\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setExchangeMap, setExchangeMapAll } from \"../redux/tokenSearchSlice\"\r\nimport { exchangeNames } from \"./helpers/config\";\r\nimport { Chip } from \"../Components/Chip\";\r\nimport {RootState} from \"../redux/store\";\r\n\r\n\r\nexport const FilterExchangeAll = () => {\r\n  const dispatch = useDispatch();\r\n  const { exchangeMap, networkMap } = useSelector((state:RootState) => state);\r\n  const exchangeAll = Object.values(omitBy(exchangeMap, b => !b)).length === 0;\r\n  const exchangeNamesActive = exchangeNames(Object.keys(omitBy(networkMap, b => !b)));\r\n\r\n\r\n  // RENDERING.\r\n  return <Chip\r\n    name={'AllExchanges'}\r\n    label={'All'}\r\n    checked={exchangeAll}\r\n    onChange={() => dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: exchangeAll }))}\r\n  />;\r\n};\r\n\r\n\r\nexport const FilterExchangeSelectors = () => {\r\n  const dispatch = useDispatch();\r\n  const { networkMap, exchangeMap } = useSelector((state:RootState) => state);\r\n  const exchangeNamesActive = exchangeNames(Object.keys(omitBy(networkMap, b => !b)));\r\n\r\n\r\n  // Function generating the HTML element of the network.\r\n  const exchangeElement = exchangeName => {\r\n    // RENDERING.\r\n    return <Chip\r\n      key={exchangeName}\r\n      name={exchangeName}\r\n      label={exchangeName}\r\n      checked={exchangeMap[exchangeName] || false}\r\n      onChange={e => dispatch(setExchangeMap({ exchangeName: exchangeName, checked: e.target.checked }))}\r\n    />;\r\n  };\r\n\r\n\r\n  // RENDERING.\r\n  return <>{exchangeNamesActive.map(exchangeName => exchangeElement(exchangeName))}</>\r\n};","import {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemHeading,\r\n  AccordionItemButton,\r\n  AccordionItemPanel,\r\n} from \"react-accessible-accordion\";\r\n\r\nexport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemHeading,\r\n  AccordionItemButton,\r\n  AccordionItemPanel,\r\n};\r\n"],"mappings":"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","names":[]}