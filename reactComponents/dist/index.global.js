(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a3, b3) => {
    for (var prop in b3 || (b3 = {}))
      if (__hasOwnProp.call(b3, prop))
        __defNormalProp(a3, prop, b3[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b3)) {
        if (__propIsEnum.call(b3, prop))
          __defNormalProp(a3, prop, b3[prop]);
      }
    return a3;
  };
  var __spreadProps = (a3, b3) => __defProps(a3, __getOwnPropDescs(b3));
  var __require = /* @__PURE__ */ ((x3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x3, {
    get: (a3, b3) => (typeof require !== "undefined" ? require : a3)[b3]
  }) : x3)(function(x3) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n3) {
            return test2[n3];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from = Object(arguments[s3]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from, symbols[i3])) {
                to[symbols[i3]] = from[symbols[i3]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS({
    "node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      var l3 = require_object_assign();
      var n3 = 60103;
      var p2 = 60106;
      exports.Fragment = 60107;
      exports.StrictMode = 60108;
      exports.Profiler = 60114;
      var q3 = 60109;
      var r3 = 60110;
      var t3 = 60112;
      exports.Suspense = 60113;
      var u3 = 60115;
      var v3 = 60116;
      if (typeof Symbol === "function" && Symbol.for) {
        w3 = Symbol.for;
        n3 = w3("react.element");
        p2 = w3("react.portal");
        exports.Fragment = w3("react.fragment");
        exports.StrictMode = w3("react.strict_mode");
        exports.Profiler = w3("react.profiler");
        q3 = w3("react.provider");
        r3 = w3("react.context");
        t3 = w3("react.forward_ref");
        exports.Suspense = w3("react.suspense");
        u3 = w3("react.memo");
        v3 = w3("react.lazy");
      }
      var w3;
      var x3 = typeof Symbol === "function" && Symbol.iterator;
      function y3(a3) {
        if (a3 === null || typeof a3 !== "object")
          return null;
        a3 = x3 && a3[x3] || a3["@@iterator"];
        return typeof a3 === "function" ? a3 : null;
      }
      function z3(a3) {
        for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a3, c3 = 1; c3 < arguments.length; c3++)
          b3 += "&args[]=" + encodeURIComponent(arguments[c3]);
        return "Minified React error #" + a3 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var A2 = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } };
      var B3 = {};
      function C2(a3, b3, c3) {
        this.props = a3;
        this.context = b3;
        this.refs = B3;
        this.updater = c3 || A2;
      }
      C2.prototype.isReactComponent = {};
      C2.prototype.setState = function(a3, b3) {
        if (typeof a3 !== "object" && typeof a3 !== "function" && a3 != null)
          throw Error(z3(85));
        this.updater.enqueueSetState(this, a3, b3, "setState");
      };
      C2.prototype.forceUpdate = function(a3) {
        this.updater.enqueueForceUpdate(this, a3, "forceUpdate");
      };
      function D3() {
      }
      D3.prototype = C2.prototype;
      function E3(a3, b3, c3) {
        this.props = a3;
        this.context = b3;
        this.refs = B3;
        this.updater = c3 || A2;
      }
      var F3 = E3.prototype = new D3();
      F3.constructor = E3;
      l3(F3, C2.prototype);
      F3.isPureReactComponent = true;
      var G3 = { current: null };
      var H3 = Object.prototype.hasOwnProperty;
      var I3 = { key: true, ref: true, __self: true, __source: true };
      function J2(a3, b3, c3) {
        var e3, d3 = {}, k3 = null, h2 = null;
        if (b3 != null)
          for (e3 in b3.ref !== void 0 && (h2 = b3.ref), b3.key !== void 0 && (k3 = "" + b3.key), b3)
            H3.call(b3, e3) && !I3.hasOwnProperty(e3) && (d3[e3] = b3[e3]);
        var g3 = arguments.length - 2;
        if (g3 === 1)
          d3.children = c3;
        else if (1 < g3) {
          for (var f2 = Array(g3), m3 = 0; m3 < g3; m3++)
            f2[m3] = arguments[m3 + 2];
          d3.children = f2;
        }
        if (a3 && a3.defaultProps)
          for (e3 in g3 = a3.defaultProps, g3)
            d3[e3] === void 0 && (d3[e3] = g3[e3]);
        return { $$typeof: n3, type: a3, key: k3, ref: h2, props: d3, _owner: G3.current };
      }
      function K2(a3, b3) {
        return { $$typeof: n3, type: a3.type, key: b3, ref: a3.ref, props: a3.props, _owner: a3._owner };
      }
      function L3(a3) {
        return typeof a3 === "object" && a3 !== null && a3.$$typeof === n3;
      }
      function escape(a3) {
        var b3 = { "=": "=0", ":": "=2" };
        return "$" + a3.replace(/[=:]/g, function(a4) {
          return b3[a4];
        });
      }
      var M3 = /\/+/g;
      function N3(a3, b3) {
        return typeof a3 === "object" && a3 !== null && a3.key != null ? escape("" + a3.key) : b3.toString(36);
      }
      function O3(a3, b3, c3, e3, d3) {
        var k3 = typeof a3;
        if (k3 === "undefined" || k3 === "boolean")
          a3 = null;
        var h2 = false;
        if (a3 === null)
          h2 = true;
        else
          switch (k3) {
            case "string":
            case "number":
              h2 = true;
              break;
            case "object":
              switch (a3.$$typeof) {
                case n3:
                case p2:
                  h2 = true;
              }
          }
        if (h2)
          return h2 = a3, d3 = d3(h2), a3 = e3 === "" ? "." + N3(h2, 0) : e3, Array.isArray(d3) ? (c3 = "", a3 != null && (c3 = a3.replace(M3, "$&/") + "/"), O3(d3, b3, c3, "", function(a4) {
            return a4;
          })) : d3 != null && (L3(d3) && (d3 = K2(d3, c3 + (!d3.key || h2 && h2.key === d3.key ? "" : ("" + d3.key).replace(M3, "$&/") + "/") + a3)), b3.push(d3)), 1;
        h2 = 0;
        e3 = e3 === "" ? "." : e3 + ":";
        if (Array.isArray(a3))
          for (var g3 = 0; g3 < a3.length; g3++) {
            k3 = a3[g3];
            var f2 = e3 + N3(k3, g3);
            h2 += O3(k3, b3, c3, f2, d3);
          }
        else if (f2 = y3(a3), typeof f2 === "function")
          for (a3 = f2.call(a3), g3 = 0; !(k3 = a3.next()).done; )
            k3 = k3.value, f2 = e3 + N3(k3, g3++), h2 += O3(k3, b3, c3, f2, d3);
        else if (k3 === "object")
          throw b3 = "" + a3, Error(z3(31, b3 === "[object Object]" ? "object with keys {" + Object.keys(a3).join(", ") + "}" : b3));
        return h2;
      }
      function P2(a3, b3, c3) {
        if (a3 == null)
          return a3;
        var e3 = [], d3 = 0;
        O3(a3, e3, "", "", function(a4) {
          return b3.call(c3, a4, d3++);
        });
        return e3;
      }
      function Q3(a3) {
        if (a3._status === -1) {
          var b3 = a3._result;
          b3 = b3();
          a3._status = 0;
          a3._result = b3;
          b3.then(function(b4) {
            a3._status === 0 && (b4 = b4.default, a3._status = 1, a3._result = b4);
          }, function(b4) {
            a3._status === 0 && (a3._status = 2, a3._result = b4);
          });
        }
        if (a3._status === 1)
          return a3._result;
        throw a3._result;
      }
      var R3 = { current: null };
      function S3() {
        var a3 = R3.current;
        if (a3 === null)
          throw Error(z3(321));
        return a3;
      }
      var T2 = { ReactCurrentDispatcher: R3, ReactCurrentBatchConfig: { transition: 0 }, ReactCurrentOwner: G3, IsSomeRendererActing: { current: false }, assign: l3 };
      exports.Children = { map: P2, forEach: function(a3, b3, c3) {
        P2(a3, function() {
          b3.apply(this, arguments);
        }, c3);
      }, count: function(a3) {
        var b3 = 0;
        P2(a3, function() {
          b3++;
        });
        return b3;
      }, toArray: function(a3) {
        return P2(a3, function(a4) {
          return a4;
        }) || [];
      }, only: function(a3) {
        if (!L3(a3))
          throw Error(z3(143));
        return a3;
      } };
      exports.Component = C2;
      exports.PureComponent = E3;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T2;
      exports.cloneElement = function(a3, b3, c3) {
        if (a3 === null || a3 === void 0)
          throw Error(z3(267, a3));
        var e3 = l3({}, a3.props), d3 = a3.key, k3 = a3.ref, h2 = a3._owner;
        if (b3 != null) {
          b3.ref !== void 0 && (k3 = b3.ref, h2 = G3.current);
          b3.key !== void 0 && (d3 = "" + b3.key);
          if (a3.type && a3.type.defaultProps)
            var g3 = a3.type.defaultProps;
          for (f2 in b3)
            H3.call(b3, f2) && !I3.hasOwnProperty(f2) && (e3[f2] = b3[f2] === void 0 && g3 !== void 0 ? g3[f2] : b3[f2]);
        }
        var f2 = arguments.length - 2;
        if (f2 === 1)
          e3.children = c3;
        else if (1 < f2) {
          g3 = Array(f2);
          for (var m3 = 0; m3 < f2; m3++)
            g3[m3] = arguments[m3 + 2];
          e3.children = g3;
        }
        return {
          $$typeof: n3,
          type: a3.type,
          key: d3,
          ref: k3,
          props: e3,
          _owner: h2
        };
      };
      exports.createContext = function(a3, b3) {
        b3 === void 0 && (b3 = null);
        a3 = { $$typeof: r3, _calculateChangedBits: b3, _currentValue: a3, _currentValue2: a3, _threadCount: 0, Provider: null, Consumer: null };
        a3.Provider = { $$typeof: q3, _context: a3 };
        return a3.Consumer = a3;
      };
      exports.createElement = J2;
      exports.createFactory = function(a3) {
        var b3 = J2.bind(null, a3);
        b3.type = a3;
        return b3;
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(a3) {
        return { $$typeof: t3, render: a3 };
      };
      exports.isValidElement = L3;
      exports.lazy = function(a3) {
        return { $$typeof: v3, _payload: { _status: -1, _result: a3 }, _init: Q3 };
      };
      exports.memo = function(a3, b3) {
        return { $$typeof: u3, type: a3, compare: b3 === void 0 ? null : b3 };
      };
      exports.useCallback = function(a3, b3) {
        return S3().useCallback(a3, b3);
      };
      exports.useContext = function(a3, b3) {
        return S3().useContext(a3, b3);
      };
      exports.useDebugValue = function() {
      };
      exports.useEffect = function(a3, b3) {
        return S3().useEffect(a3, b3);
      };
      exports.useImperativeHandle = function(a3, b3, c3) {
        return S3().useImperativeHandle(a3, b3, c3);
      };
      exports.useLayoutEffect = function(a3, b3) {
        return S3().useLayoutEffect(a3, b3);
      };
      exports.useMemo = function(a3, b3) {
        return S3().useMemo(a3, b3);
      };
      exports.useReducer = function(a3, b3, c3) {
        return S3().useReducer(a3, b3, c3);
      };
      exports.useRef = function(a3) {
        return S3().useRef(a3);
      };
      exports.useState = function(a3) {
        return S3().useState(a3);
      };
      exports.version = "17.0.2";
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent2;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement3(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext3(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer3 = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer3, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer3;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render2.displayName == null) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare2) {
            {
              if (!isValidElementType2(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare2 === void 0 ? null : compare2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext12(Context2, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context2._context !== void 0) {
                var realContext = Context2._context;
                if (realContext.Consumer === Context2) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context2) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context2, unstable_observedBits);
          }
          function useState6(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer3(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef6(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect8(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback3(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo6(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys2.length; i3++) {
                var key = keys2[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement3.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e3) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent2;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext3;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback3;
          exports.useContext = useContext12;
          exports.useDebugValue = useDebugValue2;
          exports.useEffect = useEffect8;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo6;
          exports.useReducer = useReducer3;
          exports.useRef = useRef6;
          exports.useState = useState6;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_production_min();
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.production.min.js
  var require_react_is_production_min = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.production.min.js"(exports) {
      "use strict";
      var b3 = typeof Symbol === "function" && Symbol.for;
      var c3 = b3 ? Symbol.for("react.element") : 60103;
      var d3 = b3 ? Symbol.for("react.portal") : 60106;
      var e3 = b3 ? Symbol.for("react.fragment") : 60107;
      var f2 = b3 ? Symbol.for("react.strict_mode") : 60108;
      var g3 = b3 ? Symbol.for("react.profiler") : 60114;
      var h2 = b3 ? Symbol.for("react.provider") : 60109;
      var k3 = b3 ? Symbol.for("react.context") : 60110;
      var l3 = b3 ? Symbol.for("react.async_mode") : 60111;
      var m3 = b3 ? Symbol.for("react.concurrent_mode") : 60111;
      var n3 = b3 ? Symbol.for("react.forward_ref") : 60112;
      var p2 = b3 ? Symbol.for("react.suspense") : 60113;
      var q3 = b3 ? Symbol.for("react.suspense_list") : 60120;
      var r3 = b3 ? Symbol.for("react.memo") : 60115;
      var t3 = b3 ? Symbol.for("react.lazy") : 60116;
      var v3 = b3 ? Symbol.for("react.block") : 60121;
      var w3 = b3 ? Symbol.for("react.fundamental") : 60117;
      var x3 = b3 ? Symbol.for("react.responder") : 60118;
      var y3 = b3 ? Symbol.for("react.scope") : 60119;
      function z3(a3) {
        if (typeof a3 === "object" && a3 !== null) {
          var u3 = a3.$$typeof;
          switch (u3) {
            case c3:
              switch (a3 = a3.type, a3) {
                case l3:
                case m3:
                case e3:
                case g3:
                case f2:
                case p2:
                  return a3;
                default:
                  switch (a3 = a3 && a3.$$typeof, a3) {
                    case k3:
                    case n3:
                    case t3:
                    case r3:
                    case h2:
                      return a3;
                    default:
                      return u3;
                  }
              }
            case d3:
              return u3;
          }
        }
      }
      function A2(a3) {
        return z3(a3) === m3;
      }
      exports.AsyncMode = l3;
      exports.ConcurrentMode = m3;
      exports.ContextConsumer = k3;
      exports.ContextProvider = h2;
      exports.Element = c3;
      exports.ForwardRef = n3;
      exports.Fragment = e3;
      exports.Lazy = t3;
      exports.Memo = r3;
      exports.Portal = d3;
      exports.Profiler = g3;
      exports.StrictMode = f2;
      exports.Suspense = p2;
      exports.isAsyncMode = function(a3) {
        return A2(a3) || z3(a3) === l3;
      };
      exports.isConcurrentMode = A2;
      exports.isContextConsumer = function(a3) {
        return z3(a3) === k3;
      };
      exports.isContextProvider = function(a3) {
        return z3(a3) === h2;
      };
      exports.isElement = function(a3) {
        return typeof a3 === "object" && a3 !== null && a3.$$typeof === c3;
      };
      exports.isForwardRef = function(a3) {
        return z3(a3) === n3;
      };
      exports.isFragment = function(a3) {
        return z3(a3) === e3;
      };
      exports.isLazy = function(a3) {
        return z3(a3) === t3;
      };
      exports.isMemo = function(a3) {
        return z3(a3) === r3;
      };
      exports.isPortal = function(a3) {
        return z3(a3) === d3;
      };
      exports.isProfiler = function(a3) {
        return z3(a3) === g3;
      };
      exports.isStrictMode = function(a3) {
        return z3(a3) === f2;
      };
      exports.isSuspense = function(a3) {
        return z3(a3) === p2;
      };
      exports.isValidElementType = function(a3) {
        return typeof a3 === "string" || typeof a3 === "function" || a3 === e3 || a3 === m3 || a3 === g3 || a3 === f2 || a3 === p2 || a3 === q3 || typeof a3 === "object" && a3 !== null && (a3.$$typeof === t3 || a3.$$typeof === r3 || a3.$$typeof === h2 || a3.$$typeof === k3 || a3.$$typeof === n3 || a3.$$typeof === w3 || a3.$$typeof === x3 || a3.$$typeof === y3 || a3.$$typeof === v3);
      };
      exports.typeOf = z3;
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment2 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment2;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_is_production_min();
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (process.env.NODE_ENV !== "production") {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (process.env.NODE_ENV !== "production") {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (process.env.NODE_ENV !== "production") {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (process.env.NODE_ENV !== "production") {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x3, y3) {
          if (x3 === y3) {
            return x3 !== 0 || 1 / x3 === 1 / y3;
          } else {
            return x3 !== x3 && y3 !== y3;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (process.env.NODE_ENV !== "production") {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error = typeChecker(propValue, i3, componentName, location, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (process.env.NODE_ENV !== "production") {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/factoryWithThrowingShims.js
  var require_factoryWithThrowingShims = __commonJS({
    "node_modules/prop-types/factoryWithThrowingShims.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      function emptyFunction() {
      }
      function emptyFunctionWithReset() {
      }
      emptyFunctionWithReset.resetWarningCache = emptyFunction;
      module.exports = function() {
        function shim(props, propName, componentName, location, propFullName, secret) {
          if (secret === ReactPropTypesSecret) {
            return;
          }
          var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
          err.name = "Invariant Violation";
          throw err;
        }
        ;
        shim.isRequired = shim;
        function getShim() {
          return shim;
        }
        ;
        var ReactPropTypes = {
          array: shim,
          bigint: shim,
          bool: shim,
          func: shim,
          number: shim,
          object: shim,
          string: shim,
          symbol: shim,
          any: shim,
          arrayOf: getShim,
          element: shim,
          elementType: shim,
          instanceOf: getShim,
          node: shim,
          objectOf: getShim,
          oneOf: getShim,
          oneOfType: getShim,
          shape: getShim,
          exact: getShim,
          checkPropTypes: emptyFunctionWithReset,
          resetWarningCache: emptyFunction
        };
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (process.env.NODE_ENV !== "production") {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = require_factoryWithThrowingShims()();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js
  var require_react_is_production_min2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js"(exports) {
      "use strict";
      var b3 = typeof Symbol === "function" && Symbol.for;
      var c3 = b3 ? Symbol.for("react.element") : 60103;
      var d3 = b3 ? Symbol.for("react.portal") : 60106;
      var e3 = b3 ? Symbol.for("react.fragment") : 60107;
      var f2 = b3 ? Symbol.for("react.strict_mode") : 60108;
      var g3 = b3 ? Symbol.for("react.profiler") : 60114;
      var h2 = b3 ? Symbol.for("react.provider") : 60109;
      var k3 = b3 ? Symbol.for("react.context") : 60110;
      var l3 = b3 ? Symbol.for("react.async_mode") : 60111;
      var m3 = b3 ? Symbol.for("react.concurrent_mode") : 60111;
      var n3 = b3 ? Symbol.for("react.forward_ref") : 60112;
      var p2 = b3 ? Symbol.for("react.suspense") : 60113;
      var q3 = b3 ? Symbol.for("react.suspense_list") : 60120;
      var r3 = b3 ? Symbol.for("react.memo") : 60115;
      var t3 = b3 ? Symbol.for("react.lazy") : 60116;
      var v3 = b3 ? Symbol.for("react.block") : 60121;
      var w3 = b3 ? Symbol.for("react.fundamental") : 60117;
      var x3 = b3 ? Symbol.for("react.responder") : 60118;
      var y3 = b3 ? Symbol.for("react.scope") : 60119;
      function z3(a3) {
        if (typeof a3 === "object" && a3 !== null) {
          var u3 = a3.$$typeof;
          switch (u3) {
            case c3:
              switch (a3 = a3.type, a3) {
                case l3:
                case m3:
                case e3:
                case g3:
                case f2:
                case p2:
                  return a3;
                default:
                  switch (a3 = a3 && a3.$$typeof, a3) {
                    case k3:
                    case n3:
                    case t3:
                    case r3:
                    case h2:
                      return a3;
                    default:
                      return u3;
                  }
              }
            case d3:
              return u3;
          }
        }
      }
      function A2(a3) {
        return z3(a3) === m3;
      }
      exports.AsyncMode = l3;
      exports.ConcurrentMode = m3;
      exports.ContextConsumer = k3;
      exports.ContextProvider = h2;
      exports.Element = c3;
      exports.ForwardRef = n3;
      exports.Fragment = e3;
      exports.Lazy = t3;
      exports.Memo = r3;
      exports.Portal = d3;
      exports.Profiler = g3;
      exports.StrictMode = f2;
      exports.Suspense = p2;
      exports.isAsyncMode = function(a3) {
        return A2(a3) || z3(a3) === l3;
      };
      exports.isConcurrentMode = A2;
      exports.isContextConsumer = function(a3) {
        return z3(a3) === k3;
      };
      exports.isContextProvider = function(a3) {
        return z3(a3) === h2;
      };
      exports.isElement = function(a3) {
        return typeof a3 === "object" && a3 !== null && a3.$$typeof === c3;
      };
      exports.isForwardRef = function(a3) {
        return z3(a3) === n3;
      };
      exports.isFragment = function(a3) {
        return z3(a3) === e3;
      };
      exports.isLazy = function(a3) {
        return z3(a3) === t3;
      };
      exports.isMemo = function(a3) {
        return z3(a3) === r3;
      };
      exports.isPortal = function(a3) {
        return z3(a3) === d3;
      };
      exports.isProfiler = function(a3) {
        return z3(a3) === g3;
      };
      exports.isStrictMode = function(a3) {
        return z3(a3) === f2;
      };
      exports.isSuspense = function(a3) {
        return z3(a3) === p2;
      };
      exports.isValidElementType = function(a3) {
        return typeof a3 === "string" || typeof a3 === "function" || a3 === e3 || a3 === m3 || a3 === g3 || a3 === f2 || a3 === p2 || a3 === q3 || typeof a3 === "object" && a3 !== null && (a3.$$typeof === t3 || a3.$$typeof === r3 || a3.$$typeof === h2 || a3.$$typeof === k3 || a3.$$typeof === n3 || a3.$$typeof === w3 || a3.$$typeof === x3 || a3.$$typeof === y3 || a3.$$typeof === v3);
      };
      exports.typeOf = z3;
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment2 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment2;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_is_production_min2();
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is2();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i3 = 0; i3 < keys2.length; ++i3) {
            var key = keys2[i3];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e3) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/react-redux/node_modules/react-is/cjs/react-is.production.min.js
  var require_react_is_production_min3 = __commonJS({
    "node_modules/react-redux/node_modules/react-is/cjs/react-is.production.min.js"(exports) {
      "use strict";
      var b3 = 60103;
      var c3 = 60106;
      var d3 = 60107;
      var e3 = 60108;
      var f2 = 60114;
      var g3 = 60109;
      var h2 = 60110;
      var k3 = 60112;
      var l3 = 60113;
      var m3 = 60120;
      var n3 = 60115;
      var p2 = 60116;
      var q3 = 60121;
      var r3 = 60122;
      var u3 = 60117;
      var v3 = 60129;
      var w3 = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        x3 = Symbol.for;
        b3 = x3("react.element");
        c3 = x3("react.portal");
        d3 = x3("react.fragment");
        e3 = x3("react.strict_mode");
        f2 = x3("react.profiler");
        g3 = x3("react.provider");
        h2 = x3("react.context");
        k3 = x3("react.forward_ref");
        l3 = x3("react.suspense");
        m3 = x3("react.suspense_list");
        n3 = x3("react.memo");
        p2 = x3("react.lazy");
        q3 = x3("react.block");
        r3 = x3("react.server.block");
        u3 = x3("react.fundamental");
        v3 = x3("react.debug_trace_mode");
        w3 = x3("react.legacy_hidden");
      }
      var x3;
      function y3(a3) {
        if (typeof a3 === "object" && a3 !== null) {
          var t3 = a3.$$typeof;
          switch (t3) {
            case b3:
              switch (a3 = a3.type, a3) {
                case d3:
                case f2:
                case e3:
                case l3:
                case m3:
                  return a3;
                default:
                  switch (a3 = a3 && a3.$$typeof, a3) {
                    case h2:
                    case k3:
                    case p2:
                    case n3:
                    case g3:
                      return a3;
                    default:
                      return t3;
                  }
              }
            case c3:
              return t3;
          }
        }
      }
      var z3 = g3;
      var A2 = b3;
      var B3 = k3;
      var C2 = d3;
      var D3 = p2;
      var E3 = n3;
      var F3 = c3;
      var G3 = f2;
      var H3 = e3;
      var I3 = l3;
      exports.ContextConsumer = h2;
      exports.ContextProvider = z3;
      exports.Element = A2;
      exports.ForwardRef = B3;
      exports.Fragment = C2;
      exports.Lazy = D3;
      exports.Memo = E3;
      exports.Portal = F3;
      exports.Profiler = G3;
      exports.StrictMode = H3;
      exports.Suspense = I3;
      exports.isAsyncMode = function() {
        return false;
      };
      exports.isConcurrentMode = function() {
        return false;
      };
      exports.isContextConsumer = function(a3) {
        return y3(a3) === h2;
      };
      exports.isContextProvider = function(a3) {
        return y3(a3) === g3;
      };
      exports.isElement = function(a3) {
        return typeof a3 === "object" && a3 !== null && a3.$$typeof === b3;
      };
      exports.isForwardRef = function(a3) {
        return y3(a3) === k3;
      };
      exports.isFragment = function(a3) {
        return y3(a3) === d3;
      };
      exports.isLazy = function(a3) {
        return y3(a3) === p2;
      };
      exports.isMemo = function(a3) {
        return y3(a3) === n3;
      };
      exports.isPortal = function(a3) {
        return y3(a3) === c3;
      };
      exports.isProfiler = function(a3) {
        return y3(a3) === f2;
      };
      exports.isStrictMode = function(a3) {
        return y3(a3) === e3;
      };
      exports.isSuspense = function(a3) {
        return y3(a3) === l3;
      };
      exports.isValidElementType = function(a3) {
        return typeof a3 === "string" || typeof a3 === "function" || a3 === d3 || a3 === f2 || a3 === v3 || a3 === e3 || a3 === l3 || a3 === m3 || a3 === w3 || typeof a3 === "object" && a3 !== null && (a3.$$typeof === p2 || a3.$$typeof === n3 || a3.$$typeof === g3 || a3.$$typeof === h2 || a3.$$typeof === k3 || a3.$$typeof === u3 || a3.$$typeof === q3 || a3[0] === r3) ? true : false;
      };
      exports.typeOf = y3;
    }
  });

  // node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment2 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer2(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment2;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-redux/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-redux/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_is_production_min3();
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.production.min.js
  var require_scheduler_production_min = __commonJS({
    "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
      "use strict";
      var f2;
      var g3;
      var h2;
      var k3;
      if (typeof performance === "object" && typeof performance.now === "function") {
        l3 = performance;
        exports.unstable_now = function() {
          return l3.now();
        };
      } else {
        p2 = Date, q3 = p2.now();
        exports.unstable_now = function() {
          return p2.now() - q3;
        };
      }
      var l3;
      var p2;
      var q3;
      if (typeof window === "undefined" || typeof MessageChannel !== "function") {
        t3 = null, u3 = null, w3 = function() {
          if (t3 !== null)
            try {
              var a3 = exports.unstable_now();
              t3(true, a3);
              t3 = null;
            } catch (b3) {
              throw setTimeout(w3, 0), b3;
            }
        };
        f2 = function(a3) {
          t3 !== null ? setTimeout(f2, 0, a3) : (t3 = a3, setTimeout(w3, 0));
        };
        g3 = function(a3, b3) {
          u3 = setTimeout(a3, b3);
        };
        h2 = function() {
          clearTimeout(u3);
        };
        exports.unstable_shouldYield = function() {
          return false;
        };
        k3 = exports.unstable_forceFrameRate = function() {
        };
      } else {
        x3 = window.setTimeout, y3 = window.clearTimeout;
        if (typeof console !== "undefined") {
          z3 = window.cancelAnimationFrame;
          typeof window.requestAnimationFrame !== "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          typeof z3 !== "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        A2 = false, B3 = null, C2 = -1, D3 = 5, E3 = 0;
        exports.unstable_shouldYield = function() {
          return exports.unstable_now() >= E3;
        };
        k3 = function() {
        };
        exports.unstable_forceFrameRate = function(a3) {
          0 > a3 || 125 < a3 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D3 = 0 < a3 ? Math.floor(1e3 / a3) : 5;
        };
        F3 = new MessageChannel(), G3 = F3.port2;
        F3.port1.onmessage = function() {
          if (B3 !== null) {
            var a3 = exports.unstable_now();
            E3 = a3 + D3;
            try {
              B3(true, a3) ? G3.postMessage(null) : (A2 = false, B3 = null);
            } catch (b3) {
              throw G3.postMessage(null), b3;
            }
          } else
            A2 = false;
        };
        f2 = function(a3) {
          B3 = a3;
          A2 || (A2 = true, G3.postMessage(null));
        };
        g3 = function(a3, b3) {
          C2 = x3(function() {
            a3(exports.unstable_now());
          }, b3);
        };
        h2 = function() {
          y3(C2);
          C2 = -1;
        };
      }
      var t3;
      var u3;
      var w3;
      var x3;
      var y3;
      var z3;
      var A2;
      var B3;
      var C2;
      var D3;
      var E3;
      var F3;
      var G3;
      function H3(a3, b3) {
        var c3 = a3.length;
        a3.push(b3);
        a:
          for (; ; ) {
            var d3 = c3 - 1 >>> 1, e3 = a3[d3];
            if (e3 !== void 0 && 0 < I3(e3, b3))
              a3[d3] = b3, a3[c3] = e3, c3 = d3;
            else
              break a;
          }
      }
      function J2(a3) {
        a3 = a3[0];
        return a3 === void 0 ? null : a3;
      }
      function K2(a3) {
        var b3 = a3[0];
        if (b3 !== void 0) {
          var c3 = a3.pop();
          if (c3 !== b3) {
            a3[0] = c3;
            a:
              for (var d3 = 0, e3 = a3.length; d3 < e3; ) {
                var m3 = 2 * (d3 + 1) - 1, n3 = a3[m3], v3 = m3 + 1, r3 = a3[v3];
                if (n3 !== void 0 && 0 > I3(n3, c3))
                  r3 !== void 0 && 0 > I3(r3, n3) ? (a3[d3] = r3, a3[v3] = c3, d3 = v3) : (a3[d3] = n3, a3[m3] = c3, d3 = m3);
                else if (r3 !== void 0 && 0 > I3(r3, c3))
                  a3[d3] = r3, a3[v3] = c3, d3 = v3;
                else
                  break a;
              }
          }
          return b3;
        }
        return null;
      }
      function I3(a3, b3) {
        var c3 = a3.sortIndex - b3.sortIndex;
        return c3 !== 0 ? c3 : a3.id - b3.id;
      }
      var L3 = [];
      var M3 = [];
      var N3 = 1;
      var O3 = null;
      var P2 = 3;
      var Q3 = false;
      var R3 = false;
      var S3 = false;
      function T2(a3) {
        for (var b3 = J2(M3); b3 !== null; ) {
          if (b3.callback === null)
            K2(M3);
          else if (b3.startTime <= a3)
            K2(M3), b3.sortIndex = b3.expirationTime, H3(L3, b3);
          else
            break;
          b3 = J2(M3);
        }
      }
      function U3(a3) {
        S3 = false;
        T2(a3);
        if (!R3)
          if (J2(L3) !== null)
            R3 = true, f2(V2);
          else {
            var b3 = J2(M3);
            b3 !== null && g3(U3, b3.startTime - a3);
          }
      }
      function V2(a3, b3) {
        R3 = false;
        S3 && (S3 = false, h2());
        Q3 = true;
        var c3 = P2;
        try {
          T2(b3);
          for (O3 = J2(L3); O3 !== null && (!(O3.expirationTime > b3) || a3 && !exports.unstable_shouldYield()); ) {
            var d3 = O3.callback;
            if (typeof d3 === "function") {
              O3.callback = null;
              P2 = O3.priorityLevel;
              var e3 = d3(O3.expirationTime <= b3);
              b3 = exports.unstable_now();
              typeof e3 === "function" ? O3.callback = e3 : O3 === J2(L3) && K2(L3);
              T2(b3);
            } else
              K2(L3);
            O3 = J2(L3);
          }
          if (O3 !== null)
            var m3 = true;
          else {
            var n3 = J2(M3);
            n3 !== null && g3(U3, n3.startTime - b3);
            m3 = false;
          }
          return m3;
        } finally {
          O3 = null, P2 = c3, Q3 = false;
        }
      }
      var W3 = k3;
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(a3) {
        a3.callback = null;
      };
      exports.unstable_continueExecution = function() {
        R3 || Q3 || (R3 = true, f2(V2));
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return P2;
      };
      exports.unstable_getFirstCallbackNode = function() {
        return J2(L3);
      };
      exports.unstable_next = function(a3) {
        switch (P2) {
          case 1:
          case 2:
          case 3:
            var b3 = 3;
            break;
          default:
            b3 = P2;
        }
        var c3 = P2;
        P2 = b3;
        try {
          return a3();
        } finally {
          P2 = c3;
        }
      };
      exports.unstable_pauseExecution = function() {
      };
      exports.unstable_requestPaint = W3;
      exports.unstable_runWithPriority = function(a3, b3) {
        switch (a3) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a3 = 3;
        }
        var c3 = P2;
        P2 = a3;
        try {
          return b3();
        } finally {
          P2 = c3;
        }
      };
      exports.unstable_scheduleCallback = function(a3, b3, c3) {
        var d3 = exports.unstable_now();
        typeof c3 === "object" && c3 !== null ? (c3 = c3.delay, c3 = typeof c3 === "number" && 0 < c3 ? d3 + c3 : d3) : c3 = d3;
        switch (a3) {
          case 1:
            var e3 = -1;
            break;
          case 2:
            e3 = 250;
            break;
          case 5:
            e3 = 1073741823;
            break;
          case 4:
            e3 = 1e4;
            break;
          default:
            e3 = 5e3;
        }
        e3 = c3 + e3;
        a3 = { id: N3++, callback: b3, priorityLevel: a3, startTime: c3, expirationTime: e3, sortIndex: -1 };
        c3 > d3 ? (a3.sortIndex = c3, H3(M3, a3), J2(L3) === null && a3 === J2(M3) && (S3 ? h2() : S3 = true, g3(U3, c3 - d3))) : (a3.sortIndex = e3, H3(L3, a3), R3 || Q3 || (R3 = true, f2(V2)));
        return a3;
      };
      exports.unstable_wrapCallback = function(a3) {
        var b3 = P2;
        return function() {
          var c3 = P2;
          P2 = b3;
          try {
            return a3.apply(this, arguments);
          } finally {
            P2 = c3;
          }
        };
      };
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e3) {
                  setTimeout(_flushCallback, 0);
                  throw e3;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i3) {
            var index = i3;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare2(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index = i3;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare2(left, node) < 0) {
                if (right !== void 0 && compare2(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare2(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare2(a3, b3) {
            var diff = a3.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a3.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task2, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task2) {
            task2.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_scheduler_production_min();
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.production.min.js
  var require_react_dom_production_min = __commonJS({
    "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
      "use strict";
      var aa = require_react();
      var m3 = require_object_assign();
      var r3 = require_scheduler();
      function y3(a3) {
        for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a3, c3 = 1; c3 < arguments.length; c3++)
          b3 += "&args[]=" + encodeURIComponent(arguments[c3]);
        return "Minified React error #" + a3 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      if (!aa)
        throw Error(y3(227));
      var ba = /* @__PURE__ */ new Set();
      var ca = {};
      function da(a3, b3) {
        ea(a3, b3);
        ea(a3 + "Capture", b3);
      }
      function ea(a3, b3) {
        ca[a3] = b3;
        for (a3 = 0; a3 < b3.length; a3++)
          ba.add(b3[a3]);
      }
      var fa = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined");
      var ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var ia = Object.prototype.hasOwnProperty;
      var ja = {};
      var ka = {};
      function la(a3) {
        if (ia.call(ka, a3))
          return true;
        if (ia.call(ja, a3))
          return false;
        if (ha.test(a3))
          return ka[a3] = true;
        ja[a3] = true;
        return false;
      }
      function ma(a3, b3, c3, d3) {
        if (c3 !== null && c3.type === 0)
          return false;
        switch (typeof b3) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d3)
              return false;
            if (c3 !== null)
              return !c3.acceptsBooleans;
            a3 = a3.toLowerCase().slice(0, 5);
            return a3 !== "data-" && a3 !== "aria-";
          default:
            return false;
        }
      }
      function na(a3, b3, c3, d3) {
        if (b3 === null || typeof b3 === "undefined" || ma(a3, b3, c3, d3))
          return true;
        if (d3)
          return false;
        if (c3 !== null)
          switch (c3.type) {
            case 3:
              return !b3;
            case 4:
              return b3 === false;
            case 5:
              return isNaN(b3);
            case 6:
              return isNaN(b3) || 1 > b3;
          }
        return false;
      }
      function B3(a3, b3, c3, d3, e3, f2, g3) {
        this.acceptsBooleans = b3 === 2 || b3 === 3 || b3 === 4;
        this.attributeName = d3;
        this.attributeNamespace = e3;
        this.mustUseProperty = c3;
        this.propertyName = a3;
        this.type = b3;
        this.sanitizeURL = f2;
        this.removeEmptyString = g3;
      }
      var D3 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
        D3[a3] = new B3(a3, 0, false, a3, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
        var b3 = a3[0];
        D3[b3] = new B3(b3, 1, false, a3[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
        D3[a3] = new B3(a3, 2, false, a3.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
        D3[a3] = new B3(a3, 2, false, a3, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
        D3[a3] = new B3(a3, 3, false, a3.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a3) {
        D3[a3] = new B3(a3, 3, true, a3, null, false, false);
      });
      ["capture", "download"].forEach(function(a3) {
        D3[a3] = new B3(a3, 4, false, a3, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a3) {
        D3[a3] = new B3(a3, 6, false, a3, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a3) {
        D3[a3] = new B3(a3, 5, false, a3.toLowerCase(), null, false, false);
      });
      var oa = /[\-:]([a-z])/g;
      function pa(a3) {
        return a3[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
        var b3 = a3.replace(oa, pa);
        D3[b3] = new B3(b3, 1, false, a3, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
        var b3 = a3.replace(oa, pa);
        D3[b3] = new B3(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
        var b3 = a3.replace(oa, pa);
        D3[b3] = new B3(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a3) {
        D3[a3] = new B3(a3, 1, false, a3.toLowerCase(), null, false, false);
      });
      D3.xlinkHref = new B3("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a3) {
        D3[a3] = new B3(a3, 1, false, a3.toLowerCase(), null, true, true);
      });
      function qa(a3, b3, c3, d3) {
        var e3 = D3.hasOwnProperty(b3) ? D3[b3] : null;
        var f2 = e3 !== null ? e3.type === 0 : d3 ? false : !(2 < b3.length) || b3[0] !== "o" && b3[0] !== "O" || b3[1] !== "n" && b3[1] !== "N" ? false : true;
        f2 || (na(b3, c3, e3, d3) && (c3 = null), d3 || e3 === null ? la(b3) && (c3 === null ? a3.removeAttribute(b3) : a3.setAttribute(b3, "" + c3)) : e3.mustUseProperty ? a3[e3.propertyName] = c3 === null ? e3.type === 3 ? false : "" : c3 : (b3 = e3.attributeName, d3 = e3.attributeNamespace, c3 === null ? a3.removeAttribute(b3) : (e3 = e3.type, c3 = e3 === 3 || e3 === 4 && c3 === true ? "" : "" + c3, d3 ? a3.setAttributeNS(d3, b3, c3) : a3.setAttribute(b3, c3))));
      }
      var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var sa = 60103;
      var ta = 60106;
      var ua = 60107;
      var wa = 60108;
      var xa = 60114;
      var ya = 60109;
      var za = 60110;
      var Aa = 60112;
      var Ba = 60113;
      var Ca = 60120;
      var Da = 60115;
      var Ea = 60116;
      var Fa = 60121;
      var Ga = 60128;
      var Ha = 60129;
      var Ia = 60130;
      var Ja = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        E3 = Symbol.for;
        sa = E3("react.element");
        ta = E3("react.portal");
        ua = E3("react.fragment");
        wa = E3("react.strict_mode");
        xa = E3("react.profiler");
        ya = E3("react.provider");
        za = E3("react.context");
        Aa = E3("react.forward_ref");
        Ba = E3("react.suspense");
        Ca = E3("react.suspense_list");
        Da = E3("react.memo");
        Ea = E3("react.lazy");
        Fa = E3("react.block");
        E3("react.scope");
        Ga = E3("react.opaque.id");
        Ha = E3("react.debug_trace_mode");
        Ia = E3("react.offscreen");
        Ja = E3("react.legacy_hidden");
      }
      var E3;
      var Ka = typeof Symbol === "function" && Symbol.iterator;
      function La(a3) {
        if (a3 === null || typeof a3 !== "object")
          return null;
        a3 = Ka && a3[Ka] || a3["@@iterator"];
        return typeof a3 === "function" ? a3 : null;
      }
      var Ma;
      function Na(a3) {
        if (Ma === void 0)
          try {
            throw Error();
          } catch (c3) {
            var b3 = c3.stack.trim().match(/\n( *(at )?)/);
            Ma = b3 && b3[1] || "";
          }
        return "\n" + Ma + a3;
      }
      var Oa = false;
      function Pa(a3, b3) {
        if (!a3 || Oa)
          return "";
        Oa = true;
        var c3 = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b3)
            if (b3 = function() {
              throw Error();
            }, Object.defineProperty(b3.prototype, "props", { set: function() {
              throw Error();
            } }), typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(b3, []);
              } catch (k3) {
                var d3 = k3;
              }
              Reflect.construct(a3, [], b3);
            } else {
              try {
                b3.call();
              } catch (k3) {
                d3 = k3;
              }
              a3.call(b3.prototype);
            }
          else {
            try {
              throw Error();
            } catch (k3) {
              d3 = k3;
            }
            a3();
          }
        } catch (k3) {
          if (k3 && d3 && typeof k3.stack === "string") {
            for (var e3 = k3.stack.split("\n"), f2 = d3.stack.split("\n"), g3 = e3.length - 1, h2 = f2.length - 1; 1 <= g3 && 0 <= h2 && e3[g3] !== f2[h2]; )
              h2--;
            for (; 1 <= g3 && 0 <= h2; g3--, h2--)
              if (e3[g3] !== f2[h2]) {
                if (g3 !== 1 || h2 !== 1) {
                  do
                    if (g3--, h2--, 0 > h2 || e3[g3] !== f2[h2])
                      return "\n" + e3[g3].replace(" at new ", " at ");
                  while (1 <= g3 && 0 <= h2);
                }
                break;
              }
          }
        } finally {
          Oa = false, Error.prepareStackTrace = c3;
        }
        return (a3 = a3 ? a3.displayName || a3.name : "") ? Na(a3) : "";
      }
      function Qa(a3) {
        switch (a3.tag) {
          case 5:
            return Na(a3.type);
          case 16:
            return Na("Lazy");
          case 13:
            return Na("Suspense");
          case 19:
            return Na("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a3 = Pa(a3.type, false), a3;
          case 11:
            return a3 = Pa(a3.type.render, false), a3;
          case 22:
            return a3 = Pa(a3.type._render, false), a3;
          case 1:
            return a3 = Pa(a3.type, true), a3;
          default:
            return "";
        }
      }
      function Ra(a3) {
        if (a3 == null)
          return null;
        if (typeof a3 === "function")
          return a3.displayName || a3.name || null;
        if (typeof a3 === "string")
          return a3;
        switch (a3) {
          case ua:
            return "Fragment";
          case ta:
            return "Portal";
          case xa:
            return "Profiler";
          case wa:
            return "StrictMode";
          case Ba:
            return "Suspense";
          case Ca:
            return "SuspenseList";
        }
        if (typeof a3 === "object")
          switch (a3.$$typeof) {
            case za:
              return (a3.displayName || "Context") + ".Consumer";
            case ya:
              return (a3._context.displayName || "Context") + ".Provider";
            case Aa:
              var b3 = a3.render;
              b3 = b3.displayName || b3.name || "";
              return a3.displayName || (b3 !== "" ? "ForwardRef(" + b3 + ")" : "ForwardRef");
            case Da:
              return Ra(a3.type);
            case Fa:
              return Ra(a3._render);
            case Ea:
              b3 = a3._payload;
              a3 = a3._init;
              try {
                return Ra(a3(b3));
              } catch (c3) {
              }
          }
        return null;
      }
      function Sa(a3) {
        switch (typeof a3) {
          case "boolean":
          case "number":
          case "object":
          case "string":
          case "undefined":
            return a3;
          default:
            return "";
        }
      }
      function Ta(a3) {
        var b3 = a3.type;
        return (a3 = a3.nodeName) && a3.toLowerCase() === "input" && (b3 === "checkbox" || b3 === "radio");
      }
      function Ua(a3) {
        var b3 = Ta(a3) ? "checked" : "value", c3 = Object.getOwnPropertyDescriptor(a3.constructor.prototype, b3), d3 = "" + a3[b3];
        if (!a3.hasOwnProperty(b3) && typeof c3 !== "undefined" && typeof c3.get === "function" && typeof c3.set === "function") {
          var e3 = c3.get, f2 = c3.set;
          Object.defineProperty(a3, b3, { configurable: true, get: function() {
            return e3.call(this);
          }, set: function(a4) {
            d3 = "" + a4;
            f2.call(this, a4);
          } });
          Object.defineProperty(a3, b3, { enumerable: c3.enumerable });
          return { getValue: function() {
            return d3;
          }, setValue: function(a4) {
            d3 = "" + a4;
          }, stopTracking: function() {
            a3._valueTracker = null;
            delete a3[b3];
          } };
        }
      }
      function Va(a3) {
        a3._valueTracker || (a3._valueTracker = Ua(a3));
      }
      function Wa(a3) {
        if (!a3)
          return false;
        var b3 = a3._valueTracker;
        if (!b3)
          return true;
        var c3 = b3.getValue();
        var d3 = "";
        a3 && (d3 = Ta(a3) ? a3.checked ? "true" : "false" : a3.value);
        a3 = d3;
        return a3 !== c3 ? (b3.setValue(a3), true) : false;
      }
      function Xa(a3) {
        a3 = a3 || (typeof document !== "undefined" ? document : void 0);
        if (typeof a3 === "undefined")
          return null;
        try {
          return a3.activeElement || a3.body;
        } catch (b3) {
          return a3.body;
        }
      }
      function Ya(a3, b3) {
        var c3 = b3.checked;
        return m3({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c3 != null ? c3 : a3._wrapperState.initialChecked });
      }
      function Za(a3, b3) {
        var c3 = b3.defaultValue == null ? "" : b3.defaultValue, d3 = b3.checked != null ? b3.checked : b3.defaultChecked;
        c3 = Sa(b3.value != null ? b3.value : c3);
        a3._wrapperState = { initialChecked: d3, initialValue: c3, controlled: b3.type === "checkbox" || b3.type === "radio" ? b3.checked != null : b3.value != null };
      }
      function $a(a3, b3) {
        b3 = b3.checked;
        b3 != null && qa(a3, "checked", b3, false);
      }
      function ab(a3, b3) {
        $a(a3, b3);
        var c3 = Sa(b3.value), d3 = b3.type;
        if (c3 != null)
          if (d3 === "number") {
            if (c3 === 0 && a3.value === "" || a3.value != c3)
              a3.value = "" + c3;
          } else
            a3.value !== "" + c3 && (a3.value = "" + c3);
        else if (d3 === "submit" || d3 === "reset") {
          a3.removeAttribute("value");
          return;
        }
        b3.hasOwnProperty("value") ? bb(a3, b3.type, c3) : b3.hasOwnProperty("defaultValue") && bb(a3, b3.type, Sa(b3.defaultValue));
        b3.checked == null && b3.defaultChecked != null && (a3.defaultChecked = !!b3.defaultChecked);
      }
      function cb(a3, b3, c3) {
        if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
          var d3 = b3.type;
          if (!(d3 !== "submit" && d3 !== "reset" || b3.value !== void 0 && b3.value !== null))
            return;
          b3 = "" + a3._wrapperState.initialValue;
          c3 || b3 === a3.value || (a3.value = b3);
          a3.defaultValue = b3;
        }
        c3 = a3.name;
        c3 !== "" && (a3.name = "");
        a3.defaultChecked = !!a3._wrapperState.initialChecked;
        c3 !== "" && (a3.name = c3);
      }
      function bb(a3, b3, c3) {
        if (b3 !== "number" || Xa(a3.ownerDocument) !== a3)
          c3 == null ? a3.defaultValue = "" + a3._wrapperState.initialValue : a3.defaultValue !== "" + c3 && (a3.defaultValue = "" + c3);
      }
      function db(a3) {
        var b3 = "";
        aa.Children.forEach(a3, function(a4) {
          a4 != null && (b3 += a4);
        });
        return b3;
      }
      function eb(a3, b3) {
        a3 = m3({ children: void 0 }, b3);
        if (b3 = db(b3.children))
          a3.children = b3;
        return a3;
      }
      function fb(a3, b3, c3, d3) {
        a3 = a3.options;
        if (b3) {
          b3 = {};
          for (var e3 = 0; e3 < c3.length; e3++)
            b3["$" + c3[e3]] = true;
          for (c3 = 0; c3 < a3.length; c3++)
            e3 = b3.hasOwnProperty("$" + a3[c3].value), a3[c3].selected !== e3 && (a3[c3].selected = e3), e3 && d3 && (a3[c3].defaultSelected = true);
        } else {
          c3 = "" + Sa(c3);
          b3 = null;
          for (e3 = 0; e3 < a3.length; e3++) {
            if (a3[e3].value === c3) {
              a3[e3].selected = true;
              d3 && (a3[e3].defaultSelected = true);
              return;
            }
            b3 !== null || a3[e3].disabled || (b3 = a3[e3]);
          }
          b3 !== null && (b3.selected = true);
        }
      }
      function gb(a3, b3) {
        if (b3.dangerouslySetInnerHTML != null)
          throw Error(y3(91));
        return m3({}, b3, { value: void 0, defaultValue: void 0, children: "" + a3._wrapperState.initialValue });
      }
      function hb(a3, b3) {
        var c3 = b3.value;
        if (c3 == null) {
          c3 = b3.children;
          b3 = b3.defaultValue;
          if (c3 != null) {
            if (b3 != null)
              throw Error(y3(92));
            if (Array.isArray(c3)) {
              if (!(1 >= c3.length))
                throw Error(y3(93));
              c3 = c3[0];
            }
            b3 = c3;
          }
          b3 == null && (b3 = "");
          c3 = b3;
        }
        a3._wrapperState = { initialValue: Sa(c3) };
      }
      function ib(a3, b3) {
        var c3 = Sa(b3.value), d3 = Sa(b3.defaultValue);
        c3 != null && (c3 = "" + c3, c3 !== a3.value && (a3.value = c3), b3.defaultValue == null && a3.defaultValue !== c3 && (a3.defaultValue = c3));
        d3 != null && (a3.defaultValue = "" + d3);
      }
      function jb(a3) {
        var b3 = a3.textContent;
        b3 === a3._wrapperState.initialValue && b3 !== "" && b3 !== null && (a3.value = b3);
      }
      var kb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
      function lb(a3) {
        switch (a3) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function mb(a3, b3) {
        return a3 == null || a3 === "http://www.w3.org/1999/xhtml" ? lb(b3) : a3 === "http://www.w3.org/2000/svg" && b3 === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a3;
      }
      var nb;
      var ob = function(a3) {
        return typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction ? function(b3, c3, d3, e3) {
          MSApp.execUnsafeLocalFunction(function() {
            return a3(b3, c3, d3, e3);
          });
        } : a3;
      }(function(a3, b3) {
        if (a3.namespaceURI !== kb.svg || "innerHTML" in a3)
          a3.innerHTML = b3;
        else {
          nb = nb || document.createElement("div");
          nb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
          for (b3 = nb.firstChild; a3.firstChild; )
            a3.removeChild(a3.firstChild);
          for (; b3.firstChild; )
            a3.appendChild(b3.firstChild);
        }
      });
      function pb(a3, b3) {
        if (b3) {
          var c3 = a3.firstChild;
          if (c3 && c3 === a3.lastChild && c3.nodeType === 3) {
            c3.nodeValue = b3;
            return;
          }
        }
        a3.textContent = b3;
      }
      var qb = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      var rb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(qb).forEach(function(a3) {
        rb.forEach(function(b3) {
          b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
          qb[b3] = qb[a3];
        });
      });
      function sb(a3, b3, c3) {
        return b3 == null || typeof b3 === "boolean" || b3 === "" ? "" : c3 || typeof b3 !== "number" || b3 === 0 || qb.hasOwnProperty(a3) && qb[a3] ? ("" + b3).trim() : b3 + "px";
      }
      function tb(a3, b3) {
        a3 = a3.style;
        for (var c3 in b3)
          if (b3.hasOwnProperty(c3)) {
            var d3 = c3.indexOf("--") === 0, e3 = sb(c3, b3[c3], d3);
            c3 === "float" && (c3 = "cssFloat");
            d3 ? a3.setProperty(c3, e3) : a3[c3] = e3;
          }
      }
      var ub = m3({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function vb(a3, b3) {
        if (b3) {
          if (ub[a3] && (b3.children != null || b3.dangerouslySetInnerHTML != null))
            throw Error(y3(137, a3));
          if (b3.dangerouslySetInnerHTML != null) {
            if (b3.children != null)
              throw Error(y3(60));
            if (!(typeof b3.dangerouslySetInnerHTML === "object" && "__html" in b3.dangerouslySetInnerHTML))
              throw Error(y3(61));
          }
          if (b3.style != null && typeof b3.style !== "object")
            throw Error(y3(62));
        }
      }
      function wb(a3, b3) {
        if (a3.indexOf("-") === -1)
          return typeof b3.is === "string";
        switch (a3) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      function xb(a3) {
        a3 = a3.target || a3.srcElement || window;
        a3.correspondingUseElement && (a3 = a3.correspondingUseElement);
        return a3.nodeType === 3 ? a3.parentNode : a3;
      }
      var yb = null;
      var zb = null;
      var Ab = null;
      function Bb(a3) {
        if (a3 = Cb(a3)) {
          if (typeof yb !== "function")
            throw Error(y3(280));
          var b3 = a3.stateNode;
          b3 && (b3 = Db(b3), yb(a3.stateNode, a3.type, b3));
        }
      }
      function Eb(a3) {
        zb ? Ab ? Ab.push(a3) : Ab = [a3] : zb = a3;
      }
      function Fb() {
        if (zb) {
          var a3 = zb, b3 = Ab;
          Ab = zb = null;
          Bb(a3);
          if (b3)
            for (a3 = 0; a3 < b3.length; a3++)
              Bb(b3[a3]);
        }
      }
      function Gb(a3, b3) {
        return a3(b3);
      }
      function Hb(a3, b3, c3, d3, e3) {
        return a3(b3, c3, d3, e3);
      }
      function Ib() {
      }
      var Jb = Gb;
      var Kb = false;
      var Lb = false;
      function Mb() {
        if (zb !== null || Ab !== null)
          Ib(), Fb();
      }
      function Nb(a3, b3, c3) {
        if (Lb)
          return a3(b3, c3);
        Lb = true;
        try {
          return Jb(a3, b3, c3);
        } finally {
          Lb = false, Mb();
        }
      }
      function Ob(a3, b3) {
        var c3 = a3.stateNode;
        if (c3 === null)
          return null;
        var d3 = Db(c3);
        if (d3 === null)
          return null;
        c3 = d3[b3];
        a:
          switch (b3) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d3 = !d3.disabled) || (a3 = a3.type, d3 = !(a3 === "button" || a3 === "input" || a3 === "select" || a3 === "textarea"));
              a3 = !d3;
              break a;
            default:
              a3 = false;
          }
        if (a3)
          return null;
        if (c3 && typeof c3 !== "function")
          throw Error(y3(231, b3, typeof c3));
        return c3;
      }
      var Pb = false;
      if (fa)
        try {
          Qb = {};
          Object.defineProperty(Qb, "passive", { get: function() {
            Pb = true;
          } });
          window.addEventListener("test", Qb, Qb);
          window.removeEventListener("test", Qb, Qb);
        } catch (a3) {
          Pb = false;
        }
      var Qb;
      function Rb(a3, b3, c3, d3, e3, f2, g3, h2, k3) {
        var l3 = Array.prototype.slice.call(arguments, 3);
        try {
          b3.apply(c3, l3);
        } catch (n3) {
          this.onError(n3);
        }
      }
      var Sb = false;
      var Tb = null;
      var Ub = false;
      var Vb = null;
      var Wb = { onError: function(a3) {
        Sb = true;
        Tb = a3;
      } };
      function Xb(a3, b3, c3, d3, e3, f2, g3, h2, k3) {
        Sb = false;
        Tb = null;
        Rb.apply(Wb, arguments);
      }
      function Yb(a3, b3, c3, d3, e3, f2, g3, h2, k3) {
        Xb.apply(this, arguments);
        if (Sb) {
          if (Sb) {
            var l3 = Tb;
            Sb = false;
            Tb = null;
          } else
            throw Error(y3(198));
          Ub || (Ub = true, Vb = l3);
        }
      }
      function Zb(a3) {
        var b3 = a3, c3 = a3;
        if (a3.alternate)
          for (; b3.return; )
            b3 = b3.return;
        else {
          a3 = b3;
          do
            b3 = a3, (b3.flags & 1026) !== 0 && (c3 = b3.return), a3 = b3.return;
          while (a3);
        }
        return b3.tag === 3 ? c3 : null;
      }
      function $b(a3) {
        if (a3.tag === 13) {
          var b3 = a3.memoizedState;
          b3 === null && (a3 = a3.alternate, a3 !== null && (b3 = a3.memoizedState));
          if (b3 !== null)
            return b3.dehydrated;
        }
        return null;
      }
      function ac(a3) {
        if (Zb(a3) !== a3)
          throw Error(y3(188));
      }
      function bc(a3) {
        var b3 = a3.alternate;
        if (!b3) {
          b3 = Zb(a3);
          if (b3 === null)
            throw Error(y3(188));
          return b3 !== a3 ? null : a3;
        }
        for (var c3 = a3, d3 = b3; ; ) {
          var e3 = c3.return;
          if (e3 === null)
            break;
          var f2 = e3.alternate;
          if (f2 === null) {
            d3 = e3.return;
            if (d3 !== null) {
              c3 = d3;
              continue;
            }
            break;
          }
          if (e3.child === f2.child) {
            for (f2 = e3.child; f2; ) {
              if (f2 === c3)
                return ac(e3), a3;
              if (f2 === d3)
                return ac(e3), b3;
              f2 = f2.sibling;
            }
            throw Error(y3(188));
          }
          if (c3.return !== d3.return)
            c3 = e3, d3 = f2;
          else {
            for (var g3 = false, h2 = e3.child; h2; ) {
              if (h2 === c3) {
                g3 = true;
                c3 = e3;
                d3 = f2;
                break;
              }
              if (h2 === d3) {
                g3 = true;
                d3 = e3;
                c3 = f2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g3) {
              for (h2 = f2.child; h2; ) {
                if (h2 === c3) {
                  g3 = true;
                  c3 = f2;
                  d3 = e3;
                  break;
                }
                if (h2 === d3) {
                  g3 = true;
                  d3 = f2;
                  c3 = e3;
                  break;
                }
                h2 = h2.sibling;
              }
              if (!g3)
                throw Error(y3(189));
            }
          }
          if (c3.alternate !== d3)
            throw Error(y3(190));
        }
        if (c3.tag !== 3)
          throw Error(y3(188));
        return c3.stateNode.current === c3 ? a3 : b3;
      }
      function cc(a3) {
        a3 = bc(a3);
        if (!a3)
          return null;
        for (var b3 = a3; ; ) {
          if (b3.tag === 5 || b3.tag === 6)
            return b3;
          if (b3.child)
            b3.child.return = b3, b3 = b3.child;
          else {
            if (b3 === a3)
              break;
            for (; !b3.sibling; ) {
              if (!b3.return || b3.return === a3)
                return null;
              b3 = b3.return;
            }
            b3.sibling.return = b3.return;
            b3 = b3.sibling;
          }
        }
        return null;
      }
      function dc(a3, b3) {
        for (var c3 = a3.alternate; b3 !== null; ) {
          if (b3 === a3 || b3 === c3)
            return true;
          b3 = b3.return;
        }
        return false;
      }
      var ec;
      var fc;
      var gc;
      var hc;
      var ic = false;
      var jc = [];
      var kc = null;
      var lc = null;
      var mc = null;
      var nc = /* @__PURE__ */ new Map();
      var oc = /* @__PURE__ */ new Map();
      var pc = [];
      var qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function rc(a3, b3, c3, d3, e3) {
        return { blockedOn: a3, domEventName: b3, eventSystemFlags: c3 | 16, nativeEvent: e3, targetContainers: [d3] };
      }
      function sc(a3, b3) {
        switch (a3) {
          case "focusin":
          case "focusout":
            kc = null;
            break;
          case "dragenter":
          case "dragleave":
            lc = null;
            break;
          case "mouseover":
          case "mouseout":
            mc = null;
            break;
          case "pointerover":
          case "pointerout":
            nc.delete(b3.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            oc.delete(b3.pointerId);
        }
      }
      function tc(a3, b3, c3, d3, e3, f2) {
        if (a3 === null || a3.nativeEvent !== f2)
          return a3 = rc(b3, c3, d3, e3, f2), b3 !== null && (b3 = Cb(b3), b3 !== null && fc(b3)), a3;
        a3.eventSystemFlags |= d3;
        b3 = a3.targetContainers;
        e3 !== null && b3.indexOf(e3) === -1 && b3.push(e3);
        return a3;
      }
      function uc(a3, b3, c3, d3, e3) {
        switch (b3) {
          case "focusin":
            return kc = tc(kc, a3, b3, c3, d3, e3), true;
          case "dragenter":
            return lc = tc(lc, a3, b3, c3, d3, e3), true;
          case "mouseover":
            return mc = tc(mc, a3, b3, c3, d3, e3), true;
          case "pointerover":
            var f2 = e3.pointerId;
            nc.set(f2, tc(nc.get(f2) || null, a3, b3, c3, d3, e3));
            return true;
          case "gotpointercapture":
            return f2 = e3.pointerId, oc.set(f2, tc(oc.get(f2) || null, a3, b3, c3, d3, e3)), true;
        }
        return false;
      }
      function vc(a3) {
        var b3 = wc(a3.target);
        if (b3 !== null) {
          var c3 = Zb(b3);
          if (c3 !== null) {
            if (b3 = c3.tag, b3 === 13) {
              if (b3 = $b(c3), b3 !== null) {
                a3.blockedOn = b3;
                hc(a3.lanePriority, function() {
                  r3.unstable_runWithPriority(a3.priority, function() {
                    gc(c3);
                  });
                });
                return;
              }
            } else if (b3 === 3 && c3.stateNode.hydrate) {
              a3.blockedOn = c3.tag === 3 ? c3.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a3.blockedOn = null;
      }
      function xc(a3) {
        if (a3.blockedOn !== null)
          return false;
        for (var b3 = a3.targetContainers; 0 < b3.length; ) {
          var c3 = yc(a3.domEventName, a3.eventSystemFlags, b3[0], a3.nativeEvent);
          if (c3 !== null)
            return b3 = Cb(c3), b3 !== null && fc(b3), a3.blockedOn = c3, false;
          b3.shift();
        }
        return true;
      }
      function zc(a3, b3, c3) {
        xc(a3) && c3.delete(b3);
      }
      function Ac() {
        for (ic = false; 0 < jc.length; ) {
          var a3 = jc[0];
          if (a3.blockedOn !== null) {
            a3 = Cb(a3.blockedOn);
            a3 !== null && ec(a3);
            break;
          }
          for (var b3 = a3.targetContainers; 0 < b3.length; ) {
            var c3 = yc(a3.domEventName, a3.eventSystemFlags, b3[0], a3.nativeEvent);
            if (c3 !== null) {
              a3.blockedOn = c3;
              break;
            }
            b3.shift();
          }
          a3.blockedOn === null && jc.shift();
        }
        kc !== null && xc(kc) && (kc = null);
        lc !== null && xc(lc) && (lc = null);
        mc !== null && xc(mc) && (mc = null);
        nc.forEach(zc);
        oc.forEach(zc);
      }
      function Bc(a3, b3) {
        a3.blockedOn === b3 && (a3.blockedOn = null, ic || (ic = true, r3.unstable_scheduleCallback(r3.unstable_NormalPriority, Ac)));
      }
      function Cc(a3) {
        function b3(b4) {
          return Bc(b4, a3);
        }
        if (0 < jc.length) {
          Bc(jc[0], a3);
          for (var c3 = 1; c3 < jc.length; c3++) {
            var d3 = jc[c3];
            d3.blockedOn === a3 && (d3.blockedOn = null);
          }
        }
        kc !== null && Bc(kc, a3);
        lc !== null && Bc(lc, a3);
        mc !== null && Bc(mc, a3);
        nc.forEach(b3);
        oc.forEach(b3);
        for (c3 = 0; c3 < pc.length; c3++)
          d3 = pc[c3], d3.blockedOn === a3 && (d3.blockedOn = null);
        for (; 0 < pc.length && (c3 = pc[0], c3.blockedOn === null); )
          vc(c3), c3.blockedOn === null && pc.shift();
      }
      function Dc(a3, b3) {
        var c3 = {};
        c3[a3.toLowerCase()] = b3.toLowerCase();
        c3["Webkit" + a3] = "webkit" + b3;
        c3["Moz" + a3] = "moz" + b3;
        return c3;
      }
      var Ec = { animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd") };
      var Fc = {};
      var Gc = {};
      fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
      function Hc(a3) {
        if (Fc[a3])
          return Fc[a3];
        if (!Ec[a3])
          return a3;
        var b3 = Ec[a3], c3;
        for (c3 in b3)
          if (b3.hasOwnProperty(c3) && c3 in Gc)
            return Fc[a3] = b3[c3];
        return a3;
      }
      var Ic = Hc("animationend");
      var Jc = Hc("animationiteration");
      var Kc = Hc("animationstart");
      var Lc = Hc("transitionend");
      var Mc = /* @__PURE__ */ new Map();
      var Nc = /* @__PURE__ */ new Map();
      var Oc = [
        "abort",
        "abort",
        Ic,
        "animationEnd",
        Jc,
        "animationIteration",
        Kc,
        "animationStart",
        "canplay",
        "canPlay",
        "canplaythrough",
        "canPlayThrough",
        "durationchange",
        "durationChange",
        "emptied",
        "emptied",
        "encrypted",
        "encrypted",
        "ended",
        "ended",
        "error",
        "error",
        "gotpointercapture",
        "gotPointerCapture",
        "load",
        "load",
        "loadeddata",
        "loadedData",
        "loadedmetadata",
        "loadedMetadata",
        "loadstart",
        "loadStart",
        "lostpointercapture",
        "lostPointerCapture",
        "playing",
        "playing",
        "progress",
        "progress",
        "seeking",
        "seeking",
        "stalled",
        "stalled",
        "suspend",
        "suspend",
        "timeupdate",
        "timeUpdate",
        Lc,
        "transitionEnd",
        "waiting",
        "waiting"
      ];
      function Pc(a3, b3) {
        for (var c3 = 0; c3 < a3.length; c3 += 2) {
          var d3 = a3[c3], e3 = a3[c3 + 1];
          e3 = "on" + (e3[0].toUpperCase() + e3.slice(1));
          Nc.set(d3, b3);
          Mc.set(d3, e3);
          da(e3, [d3]);
        }
      }
      var Qc = r3.unstable_now;
      Qc();
      var F3 = 8;
      function Rc(a3) {
        if ((1 & a3) !== 0)
          return F3 = 15, 1;
        if ((2 & a3) !== 0)
          return F3 = 14, 2;
        if ((4 & a3) !== 0)
          return F3 = 13, 4;
        var b3 = 24 & a3;
        if (b3 !== 0)
          return F3 = 12, b3;
        if ((a3 & 32) !== 0)
          return F3 = 11, 32;
        b3 = 192 & a3;
        if (b3 !== 0)
          return F3 = 10, b3;
        if ((a3 & 256) !== 0)
          return F3 = 9, 256;
        b3 = 3584 & a3;
        if (b3 !== 0)
          return F3 = 8, b3;
        if ((a3 & 4096) !== 0)
          return F3 = 7, 4096;
        b3 = 4186112 & a3;
        if (b3 !== 0)
          return F3 = 6, b3;
        b3 = 62914560 & a3;
        if (b3 !== 0)
          return F3 = 5, b3;
        if (a3 & 67108864)
          return F3 = 4, 67108864;
        if ((a3 & 134217728) !== 0)
          return F3 = 3, 134217728;
        b3 = 805306368 & a3;
        if (b3 !== 0)
          return F3 = 2, b3;
        if ((1073741824 & a3) !== 0)
          return F3 = 1, 1073741824;
        F3 = 8;
        return a3;
      }
      function Sc(a3) {
        switch (a3) {
          case 99:
            return 15;
          case 98:
            return 10;
          case 97:
          case 96:
            return 8;
          case 95:
            return 2;
          default:
            return 0;
        }
      }
      function Tc(a3) {
        switch (a3) {
          case 15:
          case 14:
            return 99;
          case 13:
          case 12:
          case 11:
          case 10:
            return 98;
          case 9:
          case 8:
          case 7:
          case 6:
          case 4:
          case 5:
            return 97;
          case 3:
          case 2:
          case 1:
            return 95;
          case 0:
            return 90;
          default:
            throw Error(y3(358, a3));
        }
      }
      function Uc(a3, b3) {
        var c3 = a3.pendingLanes;
        if (c3 === 0)
          return F3 = 0;
        var d3 = 0, e3 = 0, f2 = a3.expiredLanes, g3 = a3.suspendedLanes, h2 = a3.pingedLanes;
        if (f2 !== 0)
          d3 = f2, e3 = F3 = 15;
        else if (f2 = c3 & 134217727, f2 !== 0) {
          var k3 = f2 & ~g3;
          k3 !== 0 ? (d3 = Rc(k3), e3 = F3) : (h2 &= f2, h2 !== 0 && (d3 = Rc(h2), e3 = F3));
        } else
          f2 = c3 & ~g3, f2 !== 0 ? (d3 = Rc(f2), e3 = F3) : h2 !== 0 && (d3 = Rc(h2), e3 = F3);
        if (d3 === 0)
          return 0;
        d3 = 31 - Vc(d3);
        d3 = c3 & ((0 > d3 ? 0 : 1 << d3) << 1) - 1;
        if (b3 !== 0 && b3 !== d3 && (b3 & g3) === 0) {
          Rc(b3);
          if (e3 <= F3)
            return b3;
          F3 = e3;
        }
        b3 = a3.entangledLanes;
        if (b3 !== 0)
          for (a3 = a3.entanglements, b3 &= d3; 0 < b3; )
            c3 = 31 - Vc(b3), e3 = 1 << c3, d3 |= a3[c3], b3 &= ~e3;
        return d3;
      }
      function Wc(a3) {
        a3 = a3.pendingLanes & -1073741825;
        return a3 !== 0 ? a3 : a3 & 1073741824 ? 1073741824 : 0;
      }
      function Xc(a3, b3) {
        switch (a3) {
          case 15:
            return 1;
          case 14:
            return 2;
          case 12:
            return a3 = Yc(24 & ~b3), a3 === 0 ? Xc(10, b3) : a3;
          case 10:
            return a3 = Yc(192 & ~b3), a3 === 0 ? Xc(8, b3) : a3;
          case 8:
            return a3 = Yc(3584 & ~b3), a3 === 0 && (a3 = Yc(4186112 & ~b3), a3 === 0 && (a3 = 512)), a3;
          case 2:
            return b3 = Yc(805306368 & ~b3), b3 === 0 && (b3 = 268435456), b3;
        }
        throw Error(y3(358, a3));
      }
      function Yc(a3) {
        return a3 & -a3;
      }
      function Zc(a3) {
        for (var b3 = [], c3 = 0; 31 > c3; c3++)
          b3.push(a3);
        return b3;
      }
      function $c(a3, b3, c3) {
        a3.pendingLanes |= b3;
        var d3 = b3 - 1;
        a3.suspendedLanes &= d3;
        a3.pingedLanes &= d3;
        a3 = a3.eventTimes;
        b3 = 31 - Vc(b3);
        a3[b3] = c3;
      }
      var Vc = Math.clz32 ? Math.clz32 : ad;
      var bd = Math.log;
      var cd = Math.LN2;
      function ad(a3) {
        return a3 === 0 ? 32 : 31 - (bd(a3) / cd | 0) | 0;
      }
      var dd = r3.unstable_UserBlockingPriority;
      var ed = r3.unstable_runWithPriority;
      var fd = true;
      function gd(a3, b3, c3, d3) {
        Kb || Ib();
        var e3 = hd, f2 = Kb;
        Kb = true;
        try {
          Hb(e3, a3, b3, c3, d3);
        } finally {
          (Kb = f2) || Mb();
        }
      }
      function id(a3, b3, c3, d3) {
        ed(dd, hd.bind(null, a3, b3, c3, d3));
      }
      function hd(a3, b3, c3, d3) {
        if (fd) {
          var e3;
          if ((e3 = (b3 & 4) === 0) && 0 < jc.length && -1 < qc.indexOf(a3))
            a3 = rc(null, a3, b3, c3, d3), jc.push(a3);
          else {
            var f2 = yc(a3, b3, c3, d3);
            if (f2 === null)
              e3 && sc(a3, d3);
            else {
              if (e3) {
                if (-1 < qc.indexOf(a3)) {
                  a3 = rc(f2, a3, b3, c3, d3);
                  jc.push(a3);
                  return;
                }
                if (uc(f2, a3, b3, c3, d3))
                  return;
                sc(a3, d3);
              }
              jd(a3, b3, d3, null, c3);
            }
          }
        }
      }
      function yc(a3, b3, c3, d3) {
        var e3 = xb(d3);
        e3 = wc(e3);
        if (e3 !== null) {
          var f2 = Zb(e3);
          if (f2 === null)
            e3 = null;
          else {
            var g3 = f2.tag;
            if (g3 === 13) {
              e3 = $b(f2);
              if (e3 !== null)
                return e3;
              e3 = null;
            } else if (g3 === 3) {
              if (f2.stateNode.hydrate)
                return f2.tag === 3 ? f2.stateNode.containerInfo : null;
              e3 = null;
            } else
              f2 !== e3 && (e3 = null);
          }
        }
        jd(a3, b3, d3, e3, c3);
        return null;
      }
      var kd = null;
      var ld = null;
      var md = null;
      function nd() {
        if (md)
          return md;
        var a3, b3 = ld, c3 = b3.length, d3, e3 = "value" in kd ? kd.value : kd.textContent, f2 = e3.length;
        for (a3 = 0; a3 < c3 && b3[a3] === e3[a3]; a3++)
          ;
        var g3 = c3 - a3;
        for (d3 = 1; d3 <= g3 && b3[c3 - d3] === e3[f2 - d3]; d3++)
          ;
        return md = e3.slice(a3, 1 < d3 ? 1 - d3 : void 0);
      }
      function od(a3) {
        var b3 = a3.keyCode;
        "charCode" in a3 ? (a3 = a3.charCode, a3 === 0 && b3 === 13 && (a3 = 13)) : a3 = b3;
        a3 === 10 && (a3 = 13);
        return 32 <= a3 || a3 === 13 ? a3 : 0;
      }
      function pd() {
        return true;
      }
      function qd() {
        return false;
      }
      function rd(a3) {
        function b3(b4, d3, e3, f2, g3) {
          this._reactName = b4;
          this._targetInst = e3;
          this.type = d3;
          this.nativeEvent = f2;
          this.target = g3;
          this.currentTarget = null;
          for (var c3 in a3)
            a3.hasOwnProperty(c3) && (b4 = a3[c3], this[c3] = b4 ? b4(f2) : f2[c3]);
          this.isDefaultPrevented = (f2.defaultPrevented != null ? f2.defaultPrevented : f2.returnValue === false) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        m3(b3.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var a4 = this.nativeEvent;
          a4 && (a4.preventDefault ? a4.preventDefault() : typeof a4.returnValue !== "unknown" && (a4.returnValue = false), this.isDefaultPrevented = pd);
        }, stopPropagation: function() {
          var a4 = this.nativeEvent;
          a4 && (a4.stopPropagation ? a4.stopPropagation() : typeof a4.cancelBubble !== "unknown" && (a4.cancelBubble = true), this.isPropagationStopped = pd);
        }, persist: function() {
        }, isPersistent: pd });
        return b3;
      }
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a3) {
        return a3.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 };
      var td = rd(sd);
      var ud = m3({}, sd, { view: 0, detail: 0 });
      var vd = rd(ud);
      var wd;
      var xd;
      var yd;
      var Ad = m3({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a3) {
        return a3.relatedTarget === void 0 ? a3.fromElement === a3.srcElement ? a3.toElement : a3.fromElement : a3.relatedTarget;
      }, movementX: function(a3) {
        if ("movementX" in a3)
          return a3.movementX;
        a3 !== yd && (yd && a3.type === "mousemove" ? (wd = a3.screenX - yd.screenX, xd = a3.screenY - yd.screenY) : xd = wd = 0, yd = a3);
        return wd;
      }, movementY: function(a3) {
        return "movementY" in a3 ? a3.movementY : xd;
      } });
      var Bd = rd(Ad);
      var Cd = m3({}, Ad, { dataTransfer: 0 });
      var Dd = rd(Cd);
      var Ed = m3({}, ud, { relatedTarget: 0 });
      var Fd = rd(Ed);
      var Gd = m3({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Hd = rd(Gd);
      var Id = m3({}, sd, { clipboardData: function(a3) {
        return "clipboardData" in a3 ? a3.clipboardData : window.clipboardData;
      } });
      var Jd = rd(Id);
      var Kd = m3({}, sd, { data: 0 });
      var Ld = rd(Kd);
      var Md = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var Nd = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a3) {
        var b3 = this.nativeEvent;
        return b3.getModifierState ? b3.getModifierState(a3) : (a3 = Od[a3]) ? !!b3[a3] : false;
      }
      function zd() {
        return Pd;
      }
      var Qd = m3({}, ud, { key: function(a3) {
        if (a3.key) {
          var b3 = Md[a3.key] || a3.key;
          if (b3 !== "Unidentified")
            return b3;
        }
        return a3.type === "keypress" ? (a3 = od(a3), a3 === 13 ? "Enter" : String.fromCharCode(a3)) : a3.type === "keydown" || a3.type === "keyup" ? Nd[a3.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a3) {
        return a3.type === "keypress" ? od(a3) : 0;
      }, keyCode: function(a3) {
        return a3.type === "keydown" || a3.type === "keyup" ? a3.keyCode : 0;
      }, which: function(a3) {
        return a3.type === "keypress" ? od(a3) : a3.type === "keydown" || a3.type === "keyup" ? a3.keyCode : 0;
      } });
      var Rd = rd(Qd);
      var Sd = m3({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
      var Td = rd(Sd);
      var Ud = m3({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
      var Vd = rd(Ud);
      var Wd = m3({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Xd = rd(Wd);
      var Yd = m3({}, Ad, {
        deltaX: function(a3) {
          return "deltaX" in a3 ? a3.deltaX : "wheelDeltaX" in a3 ? -a3.wheelDeltaX : 0;
        },
        deltaY: function(a3) {
          return "deltaY" in a3 ? a3.deltaY : "wheelDeltaY" in a3 ? -a3.wheelDeltaY : "wheelDelta" in a3 ? -a3.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var Zd = rd(Yd);
      var $d = [9, 13, 27, 32];
      var ae2 = fa && "CompositionEvent" in window;
      var be2 = null;
      fa && "documentMode" in document && (be2 = document.documentMode);
      var ce2 = fa && "TextEvent" in window && !be2;
      var de2 = fa && (!ae2 || be2 && 8 < be2 && 11 >= be2);
      var ee2 = String.fromCharCode(32);
      var fe2 = false;
      function ge2(a3, b3) {
        switch (a3) {
          case "keyup":
            return $d.indexOf(b3.keyCode) !== -1;
          case "keydown":
            return b3.keyCode !== 229;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function he2(a3) {
        a3 = a3.detail;
        return typeof a3 === "object" && "data" in a3 ? a3.data : null;
      }
      var ie2 = false;
      function je2(a3, b3) {
        switch (a3) {
          case "compositionend":
            return he2(b3);
          case "keypress":
            if (b3.which !== 32)
              return null;
            fe2 = true;
            return ee2;
          case "textInput":
            return a3 = b3.data, a3 === ee2 && fe2 ? null : a3;
          default:
            return null;
        }
      }
      function ke2(a3, b3) {
        if (ie2)
          return a3 === "compositionend" || !ae2 && ge2(a3, b3) ? (a3 = nd(), md = ld = kd = null, ie2 = false, a3) : null;
        switch (a3) {
          case "paste":
            return null;
          case "keypress":
            if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
              if (b3.char && 1 < b3.char.length)
                return b3.char;
              if (b3.which)
                return String.fromCharCode(b3.which);
            }
            return null;
          case "compositionend":
            return de2 && b3.locale !== "ko" ? null : b3.data;
          default:
            return null;
        }
      }
      var le2 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me2(a3) {
        var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
        return b3 === "input" ? !!le2[a3.type] : b3 === "textarea" ? true : false;
      }
      function ne2(a3, b3, c3, d3) {
        Eb(d3);
        b3 = oe2(b3, "onChange");
        0 < b3.length && (c3 = new td("onChange", "change", null, c3, d3), a3.push({ event: c3, listeners: b3 }));
      }
      var pe2 = null;
      var qe2 = null;
      function re2(a3) {
        se2(a3, 0);
      }
      function te2(a3) {
        var b3 = ue2(a3);
        if (Wa(b3))
          return a3;
      }
      function ve2(a3, b3) {
        if (a3 === "change")
          return b3;
      }
      var we2 = false;
      if (fa) {
        if (fa) {
          ye2 = "oninput" in document;
          if (!ye2) {
            ze2 = document.createElement("div");
            ze2.setAttribute("oninput", "return;");
            ye2 = typeof ze2.oninput === "function";
          }
          xe2 = ye2;
        } else
          xe2 = false;
        we2 = xe2 && (!document.documentMode || 9 < document.documentMode);
      }
      var xe2;
      var ye2;
      var ze2;
      function Ae2() {
        pe2 && (pe2.detachEvent("onpropertychange", Be2), qe2 = pe2 = null);
      }
      function Be2(a3) {
        if (a3.propertyName === "value" && te2(qe2)) {
          var b3 = [];
          ne2(b3, qe2, a3, xb(a3));
          a3 = re2;
          if (Kb)
            a3(b3);
          else {
            Kb = true;
            try {
              Gb(a3, b3);
            } finally {
              Kb = false, Mb();
            }
          }
        }
      }
      function Ce2(a3, b3, c3) {
        a3 === "focusin" ? (Ae2(), pe2 = b3, qe2 = c3, pe2.attachEvent("onpropertychange", Be2)) : a3 === "focusout" && Ae2();
      }
      function De2(a3) {
        if (a3 === "selectionchange" || a3 === "keyup" || a3 === "keydown")
          return te2(qe2);
      }
      function Ee2(a3, b3) {
        if (a3 === "click")
          return te2(b3);
      }
      function Fe2(a3, b3) {
        if (a3 === "input" || a3 === "change")
          return te2(b3);
      }
      function Ge2(a3, b3) {
        return a3 === b3 && (a3 !== 0 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
      }
      var He2 = typeof Object.is === "function" ? Object.is : Ge2;
      var Ie2 = Object.prototype.hasOwnProperty;
      function Je2(a3, b3) {
        if (He2(a3, b3))
          return true;
        if (typeof a3 !== "object" || a3 === null || typeof b3 !== "object" || b3 === null)
          return false;
        var c3 = Object.keys(a3), d3 = Object.keys(b3);
        if (c3.length !== d3.length)
          return false;
        for (d3 = 0; d3 < c3.length; d3++)
          if (!Ie2.call(b3, c3[d3]) || !He2(a3[c3[d3]], b3[c3[d3]]))
            return false;
        return true;
      }
      function Ke(a3) {
        for (; a3 && a3.firstChild; )
          a3 = a3.firstChild;
        return a3;
      }
      function Le(a3, b3) {
        var c3 = Ke(a3);
        a3 = 0;
        for (var d3; c3; ) {
          if (c3.nodeType === 3) {
            d3 = a3 + c3.textContent.length;
            if (a3 <= b3 && d3 >= b3)
              return { node: c3, offset: b3 - a3 };
            a3 = d3;
          }
          a: {
            for (; c3; ) {
              if (c3.nextSibling) {
                c3 = c3.nextSibling;
                break a;
              }
              c3 = c3.parentNode;
            }
            c3 = void 0;
          }
          c3 = Ke(c3);
        }
      }
      function Me2(a3, b3) {
        return a3 && b3 ? a3 === b3 ? true : a3 && a3.nodeType === 3 ? false : b3 && b3.nodeType === 3 ? Me2(a3, b3.parentNode) : "contains" in a3 ? a3.contains(b3) : a3.compareDocumentPosition ? !!(a3.compareDocumentPosition(b3) & 16) : false : false;
      }
      function Ne2() {
        for (var a3 = window, b3 = Xa(); b3 instanceof a3.HTMLIFrameElement; ) {
          try {
            var c3 = typeof b3.contentWindow.location.href === "string";
          } catch (d3) {
            c3 = false;
          }
          if (c3)
            a3 = b3.contentWindow;
          else
            break;
          b3 = Xa(a3.document);
        }
        return b3;
      }
      function Oe2(a3) {
        var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
        return b3 && (b3 === "input" && (a3.type === "text" || a3.type === "search" || a3.type === "tel" || a3.type === "url" || a3.type === "password") || b3 === "textarea" || a3.contentEditable === "true");
      }
      var Pe2 = fa && "documentMode" in document && 11 >= document.documentMode;
      var Qe = null;
      var Re2 = null;
      var Se2 = null;
      var Te2 = false;
      function Ue2(a3, b3, c3) {
        var d3 = c3.window === c3 ? c3.document : c3.nodeType === 9 ? c3 : c3.ownerDocument;
        Te2 || Qe == null || Qe !== Xa(d3) || (d3 = Qe, "selectionStart" in d3 && Oe2(d3) ? d3 = { start: d3.selectionStart, end: d3.selectionEnd } : (d3 = (d3.ownerDocument && d3.ownerDocument.defaultView || window).getSelection(), d3 = { anchorNode: d3.anchorNode, anchorOffset: d3.anchorOffset, focusNode: d3.focusNode, focusOffset: d3.focusOffset }), Se2 && Je2(Se2, d3) || (Se2 = d3, d3 = oe2(Re2, "onSelect"), 0 < d3.length && (b3 = new td("onSelect", "select", null, b3, c3), a3.push({ event: b3, listeners: d3 }), b3.target = Qe)));
      }
      Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
      Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
      Pc(Oc, 2);
      for (Ve2 = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve2.length; We++)
        Nc.set(Ve2[We], 0);
      var Ve2;
      var We;
      ea("onMouseEnter", ["mouseout", "mouseover"]);
      ea("onMouseLeave", ["mouseout", "mouseover"]);
      ea("onPointerEnter", ["pointerout", "pointerover"]);
      ea("onPointerLeave", ["pointerout", "pointerover"]);
      da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
      var Ye2 = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
      function Ze(a3, b3, c3) {
        var d3 = a3.type || "unknown-event";
        a3.currentTarget = c3;
        Yb(d3, b3, void 0, a3);
        a3.currentTarget = null;
      }
      function se2(a3, b3) {
        b3 = (b3 & 4) !== 0;
        for (var c3 = 0; c3 < a3.length; c3++) {
          var d3 = a3[c3], e3 = d3.event;
          d3 = d3.listeners;
          a: {
            var f2 = void 0;
            if (b3)
              for (var g3 = d3.length - 1; 0 <= g3; g3--) {
                var h2 = d3[g3], k3 = h2.instance, l3 = h2.currentTarget;
                h2 = h2.listener;
                if (k3 !== f2 && e3.isPropagationStopped())
                  break a;
                Ze(e3, h2, l3);
                f2 = k3;
              }
            else
              for (g3 = 0; g3 < d3.length; g3++) {
                h2 = d3[g3];
                k3 = h2.instance;
                l3 = h2.currentTarget;
                h2 = h2.listener;
                if (k3 !== f2 && e3.isPropagationStopped())
                  break a;
                Ze(e3, h2, l3);
                f2 = k3;
              }
          }
        }
        if (Ub)
          throw a3 = Vb, Ub = false, Vb = null, a3;
      }
      function G3(a3, b3) {
        var c3 = $e(b3), d3 = a3 + "__bubble";
        c3.has(d3) || (af(b3, a3, 2, false), c3.add(d3));
      }
      var bf = "_reactListening" + Math.random().toString(36).slice(2);
      function cf(a3) {
        a3[bf] || (a3[bf] = true, ba.forEach(function(b3) {
          Ye2.has(b3) || df(b3, false, a3, null);
          df(b3, true, a3, null);
        }));
      }
      function df(a3, b3, c3, d3) {
        var e3 = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0, f2 = c3;
        a3 === "selectionchange" && c3.nodeType !== 9 && (f2 = c3.ownerDocument);
        if (d3 !== null && !b3 && Ye2.has(a3)) {
          if (a3 !== "scroll")
            return;
          e3 |= 2;
          f2 = d3;
        }
        var g3 = $e(f2), h2 = a3 + "__" + (b3 ? "capture" : "bubble");
        g3.has(h2) || (b3 && (e3 |= 4), af(f2, a3, e3, b3), g3.add(h2));
      }
      function af(a3, b3, c3, d3) {
        var e3 = Nc.get(b3);
        switch (e3 === void 0 ? 2 : e3) {
          case 0:
            e3 = gd;
            break;
          case 1:
            e3 = id;
            break;
          default:
            e3 = hd;
        }
        c3 = e3.bind(null, b3, c3, a3);
        e3 = void 0;
        !Pb || b3 !== "touchstart" && b3 !== "touchmove" && b3 !== "wheel" || (e3 = true);
        d3 ? e3 !== void 0 ? a3.addEventListener(b3, c3, { capture: true, passive: e3 }) : a3.addEventListener(b3, c3, true) : e3 !== void 0 ? a3.addEventListener(b3, c3, { passive: e3 }) : a3.addEventListener(b3, c3, false);
      }
      function jd(a3, b3, c3, d3, e3) {
        var f2 = d3;
        if ((b3 & 1) === 0 && (b3 & 2) === 0 && d3 !== null)
          a:
            for (; ; ) {
              if (d3 === null)
                return;
              var g3 = d3.tag;
              if (g3 === 3 || g3 === 4) {
                var h2 = d3.stateNode.containerInfo;
                if (h2 === e3 || h2.nodeType === 8 && h2.parentNode === e3)
                  break;
                if (g3 === 4)
                  for (g3 = d3.return; g3 !== null; ) {
                    var k3 = g3.tag;
                    if (k3 === 3 || k3 === 4) {
                      if (k3 = g3.stateNode.containerInfo, k3 === e3 || k3.nodeType === 8 && k3.parentNode === e3)
                        return;
                    }
                    g3 = g3.return;
                  }
                for (; h2 !== null; ) {
                  g3 = wc(h2);
                  if (g3 === null)
                    return;
                  k3 = g3.tag;
                  if (k3 === 5 || k3 === 6) {
                    d3 = f2 = g3;
                    continue a;
                  }
                  h2 = h2.parentNode;
                }
              }
              d3 = d3.return;
            }
        Nb(function() {
          var d4 = f2, e4 = xb(c3), g4 = [];
          a: {
            var h3 = Mc.get(a3);
            if (h3 !== void 0) {
              var k4 = td, x3 = a3;
              switch (a3) {
                case "keypress":
                  if (od(c3) === 0)
                    break a;
                case "keydown":
                case "keyup":
                  k4 = Rd;
                  break;
                case "focusin":
                  x3 = "focus";
                  k4 = Fd;
                  break;
                case "focusout":
                  x3 = "blur";
                  k4 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k4 = Fd;
                  break;
                case "click":
                  if (c3.button === 2)
                    break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k4 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k4 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k4 = Vd;
                  break;
                case Ic:
                case Jc:
                case Kc:
                  k4 = Hd;
                  break;
                case Lc:
                  k4 = Xd;
                  break;
                case "scroll":
                  k4 = vd;
                  break;
                case "wheel":
                  k4 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k4 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k4 = Td;
              }
              var w3 = (b3 & 4) !== 0, z3 = !w3 && a3 === "scroll", u3 = w3 ? h3 !== null ? h3 + "Capture" : null : h3;
              w3 = [];
              for (var t3 = d4, q3; t3 !== null; ) {
                q3 = t3;
                var v3 = q3.stateNode;
                q3.tag === 5 && v3 !== null && (q3 = v3, u3 !== null && (v3 = Ob(t3, u3), v3 != null && w3.push(ef(t3, v3, q3))));
                if (z3)
                  break;
                t3 = t3.return;
              }
              0 < w3.length && (h3 = new k4(h3, x3, null, c3, e4), g4.push({ event: h3, listeners: w3 }));
            }
          }
          if ((b3 & 7) === 0) {
            a: {
              h3 = a3 === "mouseover" || a3 === "pointerover";
              k4 = a3 === "mouseout" || a3 === "pointerout";
              if (h3 && (b3 & 16) === 0 && (x3 = c3.relatedTarget || c3.fromElement) && (wc(x3) || x3[ff]))
                break a;
              if (k4 || h3) {
                h3 = e4.window === e4 ? e4 : (h3 = e4.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
                if (k4) {
                  if (x3 = c3.relatedTarget || c3.toElement, k4 = d4, x3 = x3 ? wc(x3) : null, x3 !== null && (z3 = Zb(x3), x3 !== z3 || x3.tag !== 5 && x3.tag !== 6))
                    x3 = null;
                } else
                  k4 = null, x3 = d4;
                if (k4 !== x3) {
                  w3 = Bd;
                  v3 = "onMouseLeave";
                  u3 = "onMouseEnter";
                  t3 = "mouse";
                  if (a3 === "pointerout" || a3 === "pointerover")
                    w3 = Td, v3 = "onPointerLeave", u3 = "onPointerEnter", t3 = "pointer";
                  z3 = k4 == null ? h3 : ue2(k4);
                  q3 = x3 == null ? h3 : ue2(x3);
                  h3 = new w3(v3, t3 + "leave", k4, c3, e4);
                  h3.target = z3;
                  h3.relatedTarget = q3;
                  v3 = null;
                  wc(e4) === d4 && (w3 = new w3(u3, t3 + "enter", x3, c3, e4), w3.target = q3, w3.relatedTarget = z3, v3 = w3);
                  z3 = v3;
                  if (k4 && x3)
                    b: {
                      w3 = k4;
                      u3 = x3;
                      t3 = 0;
                      for (q3 = w3; q3; q3 = gf(q3))
                        t3++;
                      q3 = 0;
                      for (v3 = u3; v3; v3 = gf(v3))
                        q3++;
                      for (; 0 < t3 - q3; )
                        w3 = gf(w3), t3--;
                      for (; 0 < q3 - t3; )
                        u3 = gf(u3), q3--;
                      for (; t3--; ) {
                        if (w3 === u3 || u3 !== null && w3 === u3.alternate)
                          break b;
                        w3 = gf(w3);
                        u3 = gf(u3);
                      }
                      w3 = null;
                    }
                  else
                    w3 = null;
                  k4 !== null && hf(g4, h3, k4, w3, false);
                  x3 !== null && z3 !== null && hf(g4, z3, x3, w3, true);
                }
              }
            }
            a: {
              h3 = d4 ? ue2(d4) : window;
              k4 = h3.nodeName && h3.nodeName.toLowerCase();
              if (k4 === "select" || k4 === "input" && h3.type === "file")
                var J2 = ve2;
              else if (me2(h3))
                if (we2)
                  J2 = Fe2;
                else {
                  J2 = De2;
                  var K2 = Ce2;
                }
              else
                (k4 = h3.nodeName) && k4.toLowerCase() === "input" && (h3.type === "checkbox" || h3.type === "radio") && (J2 = Ee2);
              if (J2 && (J2 = J2(a3, d4))) {
                ne2(g4, J2, c3, e4);
                break a;
              }
              K2 && K2(a3, h3, d4);
              a3 === "focusout" && (K2 = h3._wrapperState) && K2.controlled && h3.type === "number" && bb(h3, "number", h3.value);
            }
            K2 = d4 ? ue2(d4) : window;
            switch (a3) {
              case "focusin":
                if (me2(K2) || K2.contentEditable === "true")
                  Qe = K2, Re2 = d4, Se2 = null;
                break;
              case "focusout":
                Se2 = Re2 = Qe = null;
                break;
              case "mousedown":
                Te2 = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te2 = false;
                Ue2(g4, c3, e4);
                break;
              case "selectionchange":
                if (Pe2)
                  break;
              case "keydown":
              case "keyup":
                Ue2(g4, c3, e4);
            }
            var Q3;
            if (ae2)
              b: {
                switch (a3) {
                  case "compositionstart":
                    var L3 = "onCompositionStart";
                    break b;
                  case "compositionend":
                    L3 = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    L3 = "onCompositionUpdate";
                    break b;
                }
                L3 = void 0;
              }
            else
              ie2 ? ge2(a3, c3) && (L3 = "onCompositionEnd") : a3 === "keydown" && c3.keyCode === 229 && (L3 = "onCompositionStart");
            L3 && (de2 && c3.locale !== "ko" && (ie2 || L3 !== "onCompositionStart" ? L3 === "onCompositionEnd" && ie2 && (Q3 = nd()) : (kd = e4, ld = "value" in kd ? kd.value : kd.textContent, ie2 = true)), K2 = oe2(d4, L3), 0 < K2.length && (L3 = new Ld(L3, a3, null, c3, e4), g4.push({ event: L3, listeners: K2 }), Q3 ? L3.data = Q3 : (Q3 = he2(c3), Q3 !== null && (L3.data = Q3))));
            if (Q3 = ce2 ? je2(a3, c3) : ke2(a3, c3))
              d4 = oe2(d4, "onBeforeInput"), 0 < d4.length && (e4 = new Ld("onBeforeInput", "beforeinput", null, c3, e4), g4.push({ event: e4, listeners: d4 }), e4.data = Q3);
          }
          se2(g4, b3);
        });
      }
      function ef(a3, b3, c3) {
        return { instance: a3, listener: b3, currentTarget: c3 };
      }
      function oe2(a3, b3) {
        for (var c3 = b3 + "Capture", d3 = []; a3 !== null; ) {
          var e3 = a3, f2 = e3.stateNode;
          e3.tag === 5 && f2 !== null && (e3 = f2, f2 = Ob(a3, c3), f2 != null && d3.unshift(ef(a3, f2, e3)), f2 = Ob(a3, b3), f2 != null && d3.push(ef(a3, f2, e3)));
          a3 = a3.return;
        }
        return d3;
      }
      function gf(a3) {
        if (a3 === null)
          return null;
        do
          a3 = a3.return;
        while (a3 && a3.tag !== 5);
        return a3 ? a3 : null;
      }
      function hf(a3, b3, c3, d3, e3) {
        for (var f2 = b3._reactName, g3 = []; c3 !== null && c3 !== d3; ) {
          var h2 = c3, k3 = h2.alternate, l3 = h2.stateNode;
          if (k3 !== null && k3 === d3)
            break;
          h2.tag === 5 && l3 !== null && (h2 = l3, e3 ? (k3 = Ob(c3, f2), k3 != null && g3.unshift(ef(c3, k3, h2))) : e3 || (k3 = Ob(c3, f2), k3 != null && g3.push(ef(c3, k3, h2))));
          c3 = c3.return;
        }
        g3.length !== 0 && a3.push({ event: b3, listeners: g3 });
      }
      function jf() {
      }
      var kf = null;
      var lf = null;
      function mf(a3, b3) {
        switch (a3) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!b3.autoFocus;
        }
        return false;
      }
      function nf(a3, b3) {
        return a3 === "textarea" || a3 === "option" || a3 === "noscript" || typeof b3.children === "string" || typeof b3.children === "number" || typeof b3.dangerouslySetInnerHTML === "object" && b3.dangerouslySetInnerHTML !== null && b3.dangerouslySetInnerHTML.__html != null;
      }
      var of = typeof setTimeout === "function" ? setTimeout : void 0;
      var pf = typeof clearTimeout === "function" ? clearTimeout : void 0;
      function qf(a3) {
        a3.nodeType === 1 ? a3.textContent = "" : a3.nodeType === 9 && (a3 = a3.body, a3 != null && (a3.textContent = ""));
      }
      function rf(a3) {
        for (; a3 != null; a3 = a3.nextSibling) {
          var b3 = a3.nodeType;
          if (b3 === 1 || b3 === 3)
            break;
        }
        return a3;
      }
      function sf(a3) {
        a3 = a3.previousSibling;
        for (var b3 = 0; a3; ) {
          if (a3.nodeType === 8) {
            var c3 = a3.data;
            if (c3 === "$" || c3 === "$!" || c3 === "$?") {
              if (b3 === 0)
                return a3;
              b3--;
            } else
              c3 === "/$" && b3++;
          }
          a3 = a3.previousSibling;
        }
        return null;
      }
      var tf = 0;
      function uf(a3) {
        return { $$typeof: Ga, toString: a3, valueOf: a3 };
      }
      var vf = Math.random().toString(36).slice(2);
      var wf = "__reactFiber$" + vf;
      var xf = "__reactProps$" + vf;
      var ff = "__reactContainer$" + vf;
      var yf = "__reactEvents$" + vf;
      function wc(a3) {
        var b3 = a3[wf];
        if (b3)
          return b3;
        for (var c3 = a3.parentNode; c3; ) {
          if (b3 = c3[ff] || c3[wf]) {
            c3 = b3.alternate;
            if (b3.child !== null || c3 !== null && c3.child !== null)
              for (a3 = sf(a3); a3 !== null; ) {
                if (c3 = a3[wf])
                  return c3;
                a3 = sf(a3);
              }
            return b3;
          }
          a3 = c3;
          c3 = a3.parentNode;
        }
        return null;
      }
      function Cb(a3) {
        a3 = a3[wf] || a3[ff];
        return !a3 || a3.tag !== 5 && a3.tag !== 6 && a3.tag !== 13 && a3.tag !== 3 ? null : a3;
      }
      function ue2(a3) {
        if (a3.tag === 5 || a3.tag === 6)
          return a3.stateNode;
        throw Error(y3(33));
      }
      function Db(a3) {
        return a3[xf] || null;
      }
      function $e(a3) {
        var b3 = a3[yf];
        b3 === void 0 && (b3 = a3[yf] = /* @__PURE__ */ new Set());
        return b3;
      }
      var zf = [];
      var Af = -1;
      function Bf(a3) {
        return { current: a3 };
      }
      function H3(a3) {
        0 > Af || (a3.current = zf[Af], zf[Af] = null, Af--);
      }
      function I3(a3, b3) {
        Af++;
        zf[Af] = a3.current;
        a3.current = b3;
      }
      var Cf = {};
      var M3 = Bf(Cf);
      var N3 = Bf(false);
      var Df = Cf;
      function Ef(a3, b3) {
        var c3 = a3.type.contextTypes;
        if (!c3)
          return Cf;
        var d3 = a3.stateNode;
        if (d3 && d3.__reactInternalMemoizedUnmaskedChildContext === b3)
          return d3.__reactInternalMemoizedMaskedChildContext;
        var e3 = {}, f2;
        for (f2 in c3)
          e3[f2] = b3[f2];
        d3 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = b3, a3.__reactInternalMemoizedMaskedChildContext = e3);
        return e3;
      }
      function Ff(a3) {
        a3 = a3.childContextTypes;
        return a3 !== null && a3 !== void 0;
      }
      function Gf() {
        H3(N3);
        H3(M3);
      }
      function Hf(a3, b3, c3) {
        if (M3.current !== Cf)
          throw Error(y3(168));
        I3(M3, b3);
        I3(N3, c3);
      }
      function If(a3, b3, c3) {
        var d3 = a3.stateNode;
        a3 = b3.childContextTypes;
        if (typeof d3.getChildContext !== "function")
          return c3;
        d3 = d3.getChildContext();
        for (var e3 in d3)
          if (!(e3 in a3))
            throw Error(y3(108, Ra(b3) || "Unknown", e3));
        return m3({}, c3, d3);
      }
      function Jf(a3) {
        a3 = (a3 = a3.stateNode) && a3.__reactInternalMemoizedMergedChildContext || Cf;
        Df = M3.current;
        I3(M3, a3);
        I3(N3, N3.current);
        return true;
      }
      function Kf(a3, b3, c3) {
        var d3 = a3.stateNode;
        if (!d3)
          throw Error(y3(169));
        c3 ? (a3 = If(a3, b3, Df), d3.__reactInternalMemoizedMergedChildContext = a3, H3(N3), H3(M3), I3(M3, a3)) : H3(N3);
        I3(N3, c3);
      }
      var Lf = null;
      var Mf = null;
      var Nf = r3.unstable_runWithPriority;
      var Of = r3.unstable_scheduleCallback;
      var Pf = r3.unstable_cancelCallback;
      var Qf = r3.unstable_shouldYield;
      var Rf = r3.unstable_requestPaint;
      var Sf = r3.unstable_now;
      var Tf = r3.unstable_getCurrentPriorityLevel;
      var Uf = r3.unstable_ImmediatePriority;
      var Vf = r3.unstable_UserBlockingPriority;
      var Wf = r3.unstable_NormalPriority;
      var Xf = r3.unstable_LowPriority;
      var Yf = r3.unstable_IdlePriority;
      var Zf = {};
      var $f = Rf !== void 0 ? Rf : function() {
      };
      var ag = null;
      var bg = null;
      var cg = false;
      var dg = Sf();
      var O3 = 1e4 > dg ? Sf : function() {
        return Sf() - dg;
      };
      function eg() {
        switch (Tf()) {
          case Uf:
            return 99;
          case Vf:
            return 98;
          case Wf:
            return 97;
          case Xf:
            return 96;
          case Yf:
            return 95;
          default:
            throw Error(y3(332));
        }
      }
      function fg(a3) {
        switch (a3) {
          case 99:
            return Uf;
          case 98:
            return Vf;
          case 97:
            return Wf;
          case 96:
            return Xf;
          case 95:
            return Yf;
          default:
            throw Error(y3(332));
        }
      }
      function gg(a3, b3) {
        a3 = fg(a3);
        return Nf(a3, b3);
      }
      function hg(a3, b3, c3) {
        a3 = fg(a3);
        return Of(a3, b3, c3);
      }
      function ig() {
        if (bg !== null) {
          var a3 = bg;
          bg = null;
          Pf(a3);
        }
        jg();
      }
      function jg() {
        if (!cg && ag !== null) {
          cg = true;
          var a3 = 0;
          try {
            var b3 = ag;
            gg(99, function() {
              for (; a3 < b3.length; a3++) {
                var c3 = b3[a3];
                do
                  c3 = c3(true);
                while (c3 !== null);
              }
            });
            ag = null;
          } catch (c3) {
            throw ag !== null && (ag = ag.slice(a3 + 1)), Of(Uf, ig), c3;
          } finally {
            cg = false;
          }
        }
      }
      var kg = ra.ReactCurrentBatchConfig;
      function lg(a3, b3) {
        if (a3 && a3.defaultProps) {
          b3 = m3({}, b3);
          a3 = a3.defaultProps;
          for (var c3 in a3)
            b3[c3] === void 0 && (b3[c3] = a3[c3]);
          return b3;
        }
        return b3;
      }
      var mg = Bf(null);
      var ng = null;
      var og = null;
      var pg = null;
      function qg() {
        pg = og = ng = null;
      }
      function rg(a3) {
        var b3 = mg.current;
        H3(mg);
        a3.type._context._currentValue = b3;
      }
      function sg(a3, b3) {
        for (; a3 !== null; ) {
          var c3 = a3.alternate;
          if ((a3.childLanes & b3) === b3)
            if (c3 === null || (c3.childLanes & b3) === b3)
              break;
            else
              c3.childLanes |= b3;
          else
            a3.childLanes |= b3, c3 !== null && (c3.childLanes |= b3);
          a3 = a3.return;
        }
      }
      function tg(a3, b3) {
        ng = a3;
        pg = og = null;
        a3 = a3.dependencies;
        a3 !== null && a3.firstContext !== null && ((a3.lanes & b3) !== 0 && (ug = true), a3.firstContext = null);
      }
      function vg(a3, b3) {
        if (pg !== a3 && b3 !== false && b3 !== 0) {
          if (typeof b3 !== "number" || b3 === 1073741823)
            pg = a3, b3 = 1073741823;
          b3 = { context: a3, observedBits: b3, next: null };
          if (og === null) {
            if (ng === null)
              throw Error(y3(308));
            og = b3;
            ng.dependencies = { lanes: 0, firstContext: b3, responders: null };
          } else
            og = og.next = b3;
        }
        return a3._currentValue;
      }
      var wg = false;
      function xg(a3) {
        a3.updateQueue = { baseState: a3.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null }, effects: null };
      }
      function yg(a3, b3) {
        a3 = a3.updateQueue;
        b3.updateQueue === a3 && (b3.updateQueue = { baseState: a3.baseState, firstBaseUpdate: a3.firstBaseUpdate, lastBaseUpdate: a3.lastBaseUpdate, shared: a3.shared, effects: a3.effects });
      }
      function zg(a3, b3) {
        return { eventTime: a3, lane: b3, tag: 0, payload: null, callback: null, next: null };
      }
      function Ag(a3, b3) {
        a3 = a3.updateQueue;
        if (a3 !== null) {
          a3 = a3.shared;
          var c3 = a3.pending;
          c3 === null ? b3.next = b3 : (b3.next = c3.next, c3.next = b3);
          a3.pending = b3;
        }
      }
      function Bg(a3, b3) {
        var c3 = a3.updateQueue, d3 = a3.alternate;
        if (d3 !== null && (d3 = d3.updateQueue, c3 === d3)) {
          var e3 = null, f2 = null;
          c3 = c3.firstBaseUpdate;
          if (c3 !== null) {
            do {
              var g3 = { eventTime: c3.eventTime, lane: c3.lane, tag: c3.tag, payload: c3.payload, callback: c3.callback, next: null };
              f2 === null ? e3 = f2 = g3 : f2 = f2.next = g3;
              c3 = c3.next;
            } while (c3 !== null);
            f2 === null ? e3 = f2 = b3 : f2 = f2.next = b3;
          } else
            e3 = f2 = b3;
          c3 = { baseState: d3.baseState, firstBaseUpdate: e3, lastBaseUpdate: f2, shared: d3.shared, effects: d3.effects };
          a3.updateQueue = c3;
          return;
        }
        a3 = c3.lastBaseUpdate;
        a3 === null ? c3.firstBaseUpdate = b3 : a3.next = b3;
        c3.lastBaseUpdate = b3;
      }
      function Cg(a3, b3, c3, d3) {
        var e3 = a3.updateQueue;
        wg = false;
        var f2 = e3.firstBaseUpdate, g3 = e3.lastBaseUpdate, h2 = e3.shared.pending;
        if (h2 !== null) {
          e3.shared.pending = null;
          var k3 = h2, l3 = k3.next;
          k3.next = null;
          g3 === null ? f2 = l3 : g3.next = l3;
          g3 = k3;
          var n3 = a3.alternate;
          if (n3 !== null) {
            n3 = n3.updateQueue;
            var A2 = n3.lastBaseUpdate;
            A2 !== g3 && (A2 === null ? n3.firstBaseUpdate = l3 : A2.next = l3, n3.lastBaseUpdate = k3);
          }
        }
        if (f2 !== null) {
          A2 = e3.baseState;
          g3 = 0;
          n3 = l3 = k3 = null;
          do {
            h2 = f2.lane;
            var p2 = f2.eventTime;
            if ((d3 & h2) === h2) {
              n3 !== null && (n3 = n3.next = {
                eventTime: p2,
                lane: 0,
                tag: f2.tag,
                payload: f2.payload,
                callback: f2.callback,
                next: null
              });
              a: {
                var C2 = a3, x3 = f2;
                h2 = b3;
                p2 = c3;
                switch (x3.tag) {
                  case 1:
                    C2 = x3.payload;
                    if (typeof C2 === "function") {
                      A2 = C2.call(p2, A2, h2);
                      break a;
                    }
                    A2 = C2;
                    break a;
                  case 3:
                    C2.flags = C2.flags & -4097 | 64;
                  case 0:
                    C2 = x3.payload;
                    h2 = typeof C2 === "function" ? C2.call(p2, A2, h2) : C2;
                    if (h2 === null || h2 === void 0)
                      break a;
                    A2 = m3({}, A2, h2);
                    break a;
                  case 2:
                    wg = true;
                }
              }
              f2.callback !== null && (a3.flags |= 32, h2 = e3.effects, h2 === null ? e3.effects = [f2] : h2.push(f2));
            } else
              p2 = { eventTime: p2, lane: h2, tag: f2.tag, payload: f2.payload, callback: f2.callback, next: null }, n3 === null ? (l3 = n3 = p2, k3 = A2) : n3 = n3.next = p2, g3 |= h2;
            f2 = f2.next;
            if (f2 === null)
              if (h2 = e3.shared.pending, h2 === null)
                break;
              else
                f2 = h2.next, h2.next = null, e3.lastBaseUpdate = h2, e3.shared.pending = null;
          } while (1);
          n3 === null && (k3 = A2);
          e3.baseState = k3;
          e3.firstBaseUpdate = l3;
          e3.lastBaseUpdate = n3;
          Dg |= g3;
          a3.lanes = g3;
          a3.memoizedState = A2;
        }
      }
      function Eg(a3, b3, c3) {
        a3 = b3.effects;
        b3.effects = null;
        if (a3 !== null)
          for (b3 = 0; b3 < a3.length; b3++) {
            var d3 = a3[b3], e3 = d3.callback;
            if (e3 !== null) {
              d3.callback = null;
              d3 = c3;
              if (typeof e3 !== "function")
                throw Error(y3(191, e3));
              e3.call(d3);
            }
          }
      }
      var Fg = new aa.Component().refs;
      function Gg(a3, b3, c3, d3) {
        b3 = a3.memoizedState;
        c3 = c3(d3, b3);
        c3 = c3 === null || c3 === void 0 ? b3 : m3({}, b3, c3);
        a3.memoizedState = c3;
        a3.lanes === 0 && (a3.updateQueue.baseState = c3);
      }
      var Kg = { isMounted: function(a3) {
        return (a3 = a3._reactInternals) ? Zb(a3) === a3 : false;
      }, enqueueSetState: function(a3, b3, c3) {
        a3 = a3._reactInternals;
        var d3 = Hg(), e3 = Ig(a3), f2 = zg(d3, e3);
        f2.payload = b3;
        c3 !== void 0 && c3 !== null && (f2.callback = c3);
        Ag(a3, f2);
        Jg(a3, e3, d3);
      }, enqueueReplaceState: function(a3, b3, c3) {
        a3 = a3._reactInternals;
        var d3 = Hg(), e3 = Ig(a3), f2 = zg(d3, e3);
        f2.tag = 1;
        f2.payload = b3;
        c3 !== void 0 && c3 !== null && (f2.callback = c3);
        Ag(a3, f2);
        Jg(a3, e3, d3);
      }, enqueueForceUpdate: function(a3, b3) {
        a3 = a3._reactInternals;
        var c3 = Hg(), d3 = Ig(a3), e3 = zg(c3, d3);
        e3.tag = 2;
        b3 !== void 0 && b3 !== null && (e3.callback = b3);
        Ag(a3, e3);
        Jg(a3, d3, c3);
      } };
      function Lg(a3, b3, c3, d3, e3, f2, g3) {
        a3 = a3.stateNode;
        return typeof a3.shouldComponentUpdate === "function" ? a3.shouldComponentUpdate(d3, f2, g3) : b3.prototype && b3.prototype.isPureReactComponent ? !Je2(c3, d3) || !Je2(e3, f2) : true;
      }
      function Mg(a3, b3, c3) {
        var d3 = false, e3 = Cf;
        var f2 = b3.contextType;
        typeof f2 === "object" && f2 !== null ? f2 = vg(f2) : (e3 = Ff(b3) ? Df : M3.current, d3 = b3.contextTypes, f2 = (d3 = d3 !== null && d3 !== void 0) ? Ef(a3, e3) : Cf);
        b3 = new b3(c3, f2);
        a3.memoizedState = b3.state !== null && b3.state !== void 0 ? b3.state : null;
        b3.updater = Kg;
        a3.stateNode = b3;
        b3._reactInternals = a3;
        d3 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = e3, a3.__reactInternalMemoizedMaskedChildContext = f2);
        return b3;
      }
      function Ng(a3, b3, c3, d3) {
        a3 = b3.state;
        typeof b3.componentWillReceiveProps === "function" && b3.componentWillReceiveProps(c3, d3);
        typeof b3.UNSAFE_componentWillReceiveProps === "function" && b3.UNSAFE_componentWillReceiveProps(c3, d3);
        b3.state !== a3 && Kg.enqueueReplaceState(b3, b3.state, null);
      }
      function Og(a3, b3, c3, d3) {
        var e3 = a3.stateNode;
        e3.props = c3;
        e3.state = a3.memoizedState;
        e3.refs = Fg;
        xg(a3);
        var f2 = b3.contextType;
        typeof f2 === "object" && f2 !== null ? e3.context = vg(f2) : (f2 = Ff(b3) ? Df : M3.current, e3.context = Ef(a3, f2));
        Cg(a3, c3, e3, d3);
        e3.state = a3.memoizedState;
        f2 = b3.getDerivedStateFromProps;
        typeof f2 === "function" && (Gg(a3, b3, f2, c3), e3.state = a3.memoizedState);
        typeof b3.getDerivedStateFromProps === "function" || typeof e3.getSnapshotBeforeUpdate === "function" || typeof e3.UNSAFE_componentWillMount !== "function" && typeof e3.componentWillMount !== "function" || (b3 = e3.state, typeof e3.componentWillMount === "function" && e3.componentWillMount(), typeof e3.UNSAFE_componentWillMount === "function" && e3.UNSAFE_componentWillMount(), b3 !== e3.state && Kg.enqueueReplaceState(e3, e3.state, null), Cg(a3, c3, e3, d3), e3.state = a3.memoizedState);
        typeof e3.componentDidMount === "function" && (a3.flags |= 4);
      }
      var Pg = Array.isArray;
      function Qg(a3, b3, c3) {
        a3 = c3.ref;
        if (a3 !== null && typeof a3 !== "function" && typeof a3 !== "object") {
          if (c3._owner) {
            c3 = c3._owner;
            if (c3) {
              if (c3.tag !== 1)
                throw Error(y3(309));
              var d3 = c3.stateNode;
            }
            if (!d3)
              throw Error(y3(147, a3));
            var e3 = "" + a3;
            if (b3 !== null && b3.ref !== null && typeof b3.ref === "function" && b3.ref._stringRef === e3)
              return b3.ref;
            b3 = function(a4) {
              var b4 = d3.refs;
              b4 === Fg && (b4 = d3.refs = {});
              a4 === null ? delete b4[e3] : b4[e3] = a4;
            };
            b3._stringRef = e3;
            return b3;
          }
          if (typeof a3 !== "string")
            throw Error(y3(284));
          if (!c3._owner)
            throw Error(y3(290, a3));
        }
        return a3;
      }
      function Rg(a3, b3) {
        if (a3.type !== "textarea")
          throw Error(y3(31, Object.prototype.toString.call(b3) === "[object Object]" ? "object with keys {" + Object.keys(b3).join(", ") + "}" : b3));
      }
      function Sg(a3) {
        function b3(b4, c4) {
          if (a3) {
            var d4 = b4.lastEffect;
            d4 !== null ? (d4.nextEffect = c4, b4.lastEffect = c4) : b4.firstEffect = b4.lastEffect = c4;
            c4.nextEffect = null;
            c4.flags = 8;
          }
        }
        function c3(c4, d4) {
          if (!a3)
            return null;
          for (; d4 !== null; )
            b3(c4, d4), d4 = d4.sibling;
          return null;
        }
        function d3(a4, b4) {
          for (a4 = /* @__PURE__ */ new Map(); b4 !== null; )
            b4.key !== null ? a4.set(b4.key, b4) : a4.set(b4.index, b4), b4 = b4.sibling;
          return a4;
        }
        function e3(a4, b4) {
          a4 = Tg(a4, b4);
          a4.index = 0;
          a4.sibling = null;
          return a4;
        }
        function f2(b4, c4, d4) {
          b4.index = d4;
          if (!a3)
            return c4;
          d4 = b4.alternate;
          if (d4 !== null)
            return d4 = d4.index, d4 < c4 ? (b4.flags = 2, c4) : d4;
          b4.flags = 2;
          return c4;
        }
        function g3(b4) {
          a3 && b4.alternate === null && (b4.flags = 2);
          return b4;
        }
        function h2(a4, b4, c4, d4) {
          if (b4 === null || b4.tag !== 6)
            return b4 = Ug(c4, a4.mode, d4), b4.return = a4, b4;
          b4 = e3(b4, c4);
          b4.return = a4;
          return b4;
        }
        function k3(a4, b4, c4, d4) {
          if (b4 !== null && b4.elementType === c4.type)
            return d4 = e3(b4, c4.props), d4.ref = Qg(a4, b4, c4), d4.return = a4, d4;
          d4 = Vg(c4.type, c4.key, c4.props, null, a4.mode, d4);
          d4.ref = Qg(a4, b4, c4);
          d4.return = a4;
          return d4;
        }
        function l3(a4, b4, c4, d4) {
          if (b4 === null || b4.tag !== 4 || b4.stateNode.containerInfo !== c4.containerInfo || b4.stateNode.implementation !== c4.implementation)
            return b4 = Wg(c4, a4.mode, d4), b4.return = a4, b4;
          b4 = e3(b4, c4.children || []);
          b4.return = a4;
          return b4;
        }
        function n3(a4, b4, c4, d4, f3) {
          if (b4 === null || b4.tag !== 7)
            return b4 = Xg(c4, a4.mode, d4, f3), b4.return = a4, b4;
          b4 = e3(b4, c4);
          b4.return = a4;
          return b4;
        }
        function A2(a4, b4, c4) {
          if (typeof b4 === "string" || typeof b4 === "number")
            return b4 = Ug("" + b4, a4.mode, c4), b4.return = a4, b4;
          if (typeof b4 === "object" && b4 !== null) {
            switch (b4.$$typeof) {
              case sa:
                return c4 = Vg(b4.type, b4.key, b4.props, null, a4.mode, c4), c4.ref = Qg(a4, null, b4), c4.return = a4, c4;
              case ta:
                return b4 = Wg(b4, a4.mode, c4), b4.return = a4, b4;
            }
            if (Pg(b4) || La(b4))
              return b4 = Xg(b4, a4.mode, c4, null), b4.return = a4, b4;
            Rg(a4, b4);
          }
          return null;
        }
        function p2(a4, b4, c4, d4) {
          var e4 = b4 !== null ? b4.key : null;
          if (typeof c4 === "string" || typeof c4 === "number")
            return e4 !== null ? null : h2(a4, b4, "" + c4, d4);
          if (typeof c4 === "object" && c4 !== null) {
            switch (c4.$$typeof) {
              case sa:
                return c4.key === e4 ? c4.type === ua ? n3(a4, b4, c4.props.children, d4, e4) : k3(a4, b4, c4, d4) : null;
              case ta:
                return c4.key === e4 ? l3(a4, b4, c4, d4) : null;
            }
            if (Pg(c4) || La(c4))
              return e4 !== null ? null : n3(a4, b4, c4, d4, null);
            Rg(a4, c4);
          }
          return null;
        }
        function C2(a4, b4, c4, d4, e4) {
          if (typeof d4 === "string" || typeof d4 === "number")
            return a4 = a4.get(c4) || null, h2(b4, a4, "" + d4, e4);
          if (typeof d4 === "object" && d4 !== null) {
            switch (d4.$$typeof) {
              case sa:
                return a4 = a4.get(d4.key === null ? c4 : d4.key) || null, d4.type === ua ? n3(b4, a4, d4.props.children, e4, d4.key) : k3(b4, a4, d4, e4);
              case ta:
                return a4 = a4.get(d4.key === null ? c4 : d4.key) || null, l3(b4, a4, d4, e4);
            }
            if (Pg(d4) || La(d4))
              return a4 = a4.get(c4) || null, n3(b4, a4, d4, e4, null);
            Rg(b4, d4);
          }
          return null;
        }
        function x3(e4, g4, h3, k4) {
          for (var l4 = null, t3 = null, u3 = g4, z3 = g4 = 0, q3 = null; u3 !== null && z3 < h3.length; z3++) {
            u3.index > z3 ? (q3 = u3, u3 = null) : q3 = u3.sibling;
            var n4 = p2(e4, u3, h3[z3], k4);
            if (n4 === null) {
              u3 === null && (u3 = q3);
              break;
            }
            a3 && u3 && n4.alternate === null && b3(e4, u3);
            g4 = f2(n4, g4, z3);
            t3 === null ? l4 = n4 : t3.sibling = n4;
            t3 = n4;
            u3 = q3;
          }
          if (z3 === h3.length)
            return c3(e4, u3), l4;
          if (u3 === null) {
            for (; z3 < h3.length; z3++)
              u3 = A2(e4, h3[z3], k4), u3 !== null && (g4 = f2(u3, g4, z3), t3 === null ? l4 = u3 : t3.sibling = u3, t3 = u3);
            return l4;
          }
          for (u3 = d3(e4, u3); z3 < h3.length; z3++)
            q3 = C2(u3, e4, z3, h3[z3], k4), q3 !== null && (a3 && q3.alternate !== null && u3.delete(q3.key === null ? z3 : q3.key), g4 = f2(q3, g4, z3), t3 === null ? l4 = q3 : t3.sibling = q3, t3 = q3);
          a3 && u3.forEach(function(a4) {
            return b3(e4, a4);
          });
          return l4;
        }
        function w3(e4, g4, h3, k4) {
          var l4 = La(h3);
          if (typeof l4 !== "function")
            throw Error(y3(150));
          h3 = l4.call(h3);
          if (h3 == null)
            throw Error(y3(151));
          for (var t3 = l4 = null, u3 = g4, z3 = g4 = 0, q3 = null, n4 = h3.next(); u3 !== null && !n4.done; z3++, n4 = h3.next()) {
            u3.index > z3 ? (q3 = u3, u3 = null) : q3 = u3.sibling;
            var w4 = p2(e4, u3, n4.value, k4);
            if (w4 === null) {
              u3 === null && (u3 = q3);
              break;
            }
            a3 && u3 && w4.alternate === null && b3(e4, u3);
            g4 = f2(w4, g4, z3);
            t3 === null ? l4 = w4 : t3.sibling = w4;
            t3 = w4;
            u3 = q3;
          }
          if (n4.done)
            return c3(e4, u3), l4;
          if (u3 === null) {
            for (; !n4.done; z3++, n4 = h3.next())
              n4 = A2(e4, n4.value, k4), n4 !== null && (g4 = f2(n4, g4, z3), t3 === null ? l4 = n4 : t3.sibling = n4, t3 = n4);
            return l4;
          }
          for (u3 = d3(e4, u3); !n4.done; z3++, n4 = h3.next())
            n4 = C2(u3, e4, z3, n4.value, k4), n4 !== null && (a3 && n4.alternate !== null && u3.delete(n4.key === null ? z3 : n4.key), g4 = f2(n4, g4, z3), t3 === null ? l4 = n4 : t3.sibling = n4, t3 = n4);
          a3 && u3.forEach(function(a4) {
            return b3(e4, a4);
          });
          return l4;
        }
        return function(a4, d4, f3, h3) {
          var k4 = typeof f3 === "object" && f3 !== null && f3.type === ua && f3.key === null;
          k4 && (f3 = f3.props.children);
          var l4 = typeof f3 === "object" && f3 !== null;
          if (l4)
            switch (f3.$$typeof) {
              case sa:
                a: {
                  l4 = f3.key;
                  for (k4 = d4; k4 !== null; ) {
                    if (k4.key === l4) {
                      switch (k4.tag) {
                        case 7:
                          if (f3.type === ua) {
                            c3(a4, k4.sibling);
                            d4 = e3(k4, f3.props.children);
                            d4.return = a4;
                            a4 = d4;
                            break a;
                          }
                          break;
                        default:
                          if (k4.elementType === f3.type) {
                            c3(a4, k4.sibling);
                            d4 = e3(k4, f3.props);
                            d4.ref = Qg(a4, k4, f3);
                            d4.return = a4;
                            a4 = d4;
                            break a;
                          }
                      }
                      c3(a4, k4);
                      break;
                    } else
                      b3(a4, k4);
                    k4 = k4.sibling;
                  }
                  f3.type === ua ? (d4 = Xg(f3.props.children, a4.mode, h3, f3.key), d4.return = a4, a4 = d4) : (h3 = Vg(f3.type, f3.key, f3.props, null, a4.mode, h3), h3.ref = Qg(a4, d4, f3), h3.return = a4, a4 = h3);
                }
                return g3(a4);
              case ta:
                a: {
                  for (k4 = f3.key; d4 !== null; ) {
                    if (d4.key === k4)
                      if (d4.tag === 4 && d4.stateNode.containerInfo === f3.containerInfo && d4.stateNode.implementation === f3.implementation) {
                        c3(a4, d4.sibling);
                        d4 = e3(d4, f3.children || []);
                        d4.return = a4;
                        a4 = d4;
                        break a;
                      } else {
                        c3(a4, d4);
                        break;
                      }
                    else
                      b3(a4, d4);
                    d4 = d4.sibling;
                  }
                  d4 = Wg(f3, a4.mode, h3);
                  d4.return = a4;
                  a4 = d4;
                }
                return g3(a4);
            }
          if (typeof f3 === "string" || typeof f3 === "number")
            return f3 = "" + f3, d4 !== null && d4.tag === 6 ? (c3(a4, d4.sibling), d4 = e3(d4, f3), d4.return = a4, a4 = d4) : (c3(a4, d4), d4 = Ug(f3, a4.mode, h3), d4.return = a4, a4 = d4), g3(a4);
          if (Pg(f3))
            return x3(a4, d4, f3, h3);
          if (La(f3))
            return w3(a4, d4, f3, h3);
          l4 && Rg(a4, f3);
          if (typeof f3 === "undefined" && !k4)
            switch (a4.tag) {
              case 1:
              case 22:
              case 0:
              case 11:
              case 15:
                throw Error(y3(152, Ra(a4.type) || "Component"));
            }
          return c3(a4, d4);
        };
      }
      var Yg = Sg(true);
      var Zg = Sg(false);
      var $g = {};
      var ah = Bf($g);
      var bh = Bf($g);
      var ch = Bf($g);
      function dh(a3) {
        if (a3 === $g)
          throw Error(y3(174));
        return a3;
      }
      function eh(a3, b3) {
        I3(ch, b3);
        I3(bh, a3);
        I3(ah, $g);
        a3 = b3.nodeType;
        switch (a3) {
          case 9:
          case 11:
            b3 = (b3 = b3.documentElement) ? b3.namespaceURI : mb(null, "");
            break;
          default:
            a3 = a3 === 8 ? b3.parentNode : b3, b3 = a3.namespaceURI || null, a3 = a3.tagName, b3 = mb(b3, a3);
        }
        H3(ah);
        I3(ah, b3);
      }
      function fh() {
        H3(ah);
        H3(bh);
        H3(ch);
      }
      function gh(a3) {
        dh(ch.current);
        var b3 = dh(ah.current);
        var c3 = mb(b3, a3.type);
        b3 !== c3 && (I3(bh, a3), I3(ah, c3));
      }
      function hh(a3) {
        bh.current === a3 && (H3(ah), H3(bh));
      }
      var P2 = Bf(0);
      function ih(a3) {
        for (var b3 = a3; b3 !== null; ) {
          if (b3.tag === 13) {
            var c3 = b3.memoizedState;
            if (c3 !== null && (c3 = c3.dehydrated, c3 === null || c3.data === "$?" || c3.data === "$!"))
              return b3;
          } else if (b3.tag === 19 && b3.memoizedProps.revealOrder !== void 0) {
            if ((b3.flags & 64) !== 0)
              return b3;
          } else if (b3.child !== null) {
            b3.child.return = b3;
            b3 = b3.child;
            continue;
          }
          if (b3 === a3)
            break;
          for (; b3.sibling === null; ) {
            if (b3.return === null || b3.return === a3)
              return null;
            b3 = b3.return;
          }
          b3.sibling.return = b3.return;
          b3 = b3.sibling;
        }
        return null;
      }
      var jh = null;
      var kh = null;
      var lh = false;
      function mh(a3, b3) {
        var c3 = nh(5, null, null, 0);
        c3.elementType = "DELETED";
        c3.type = "DELETED";
        c3.stateNode = b3;
        c3.return = a3;
        c3.flags = 8;
        a3.lastEffect !== null ? (a3.lastEffect.nextEffect = c3, a3.lastEffect = c3) : a3.firstEffect = a3.lastEffect = c3;
      }
      function oh(a3, b3) {
        switch (a3.tag) {
          case 5:
            var c3 = a3.type;
            b3 = b3.nodeType !== 1 || c3.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
            return b3 !== null ? (a3.stateNode = b3, true) : false;
          case 6:
            return b3 = a3.pendingProps === "" || b3.nodeType !== 3 ? null : b3, b3 !== null ? (a3.stateNode = b3, true) : false;
          case 13:
            return false;
          default:
            return false;
        }
      }
      function ph(a3) {
        if (lh) {
          var b3 = kh;
          if (b3) {
            var c3 = b3;
            if (!oh(a3, b3)) {
              b3 = rf(c3.nextSibling);
              if (!b3 || !oh(a3, b3)) {
                a3.flags = a3.flags & -1025 | 2;
                lh = false;
                jh = a3;
                return;
              }
              mh(jh, c3);
            }
            jh = a3;
            kh = rf(b3.firstChild);
          } else
            a3.flags = a3.flags & -1025 | 2, lh = false, jh = a3;
        }
      }
      function qh(a3) {
        for (a3 = a3.return; a3 !== null && a3.tag !== 5 && a3.tag !== 3 && a3.tag !== 13; )
          a3 = a3.return;
        jh = a3;
      }
      function rh(a3) {
        if (a3 !== jh)
          return false;
        if (!lh)
          return qh(a3), lh = true, false;
        var b3 = a3.type;
        if (a3.tag !== 5 || b3 !== "head" && b3 !== "body" && !nf(b3, a3.memoizedProps))
          for (b3 = kh; b3; )
            mh(a3, b3), b3 = rf(b3.nextSibling);
        qh(a3);
        if (a3.tag === 13) {
          a3 = a3.memoizedState;
          a3 = a3 !== null ? a3.dehydrated : null;
          if (!a3)
            throw Error(y3(317));
          a: {
            a3 = a3.nextSibling;
            for (b3 = 0; a3; ) {
              if (a3.nodeType === 8) {
                var c3 = a3.data;
                if (c3 === "/$") {
                  if (b3 === 0) {
                    kh = rf(a3.nextSibling);
                    break a;
                  }
                  b3--;
                } else
                  c3 !== "$" && c3 !== "$!" && c3 !== "$?" || b3++;
              }
              a3 = a3.nextSibling;
            }
            kh = null;
          }
        } else
          kh = jh ? rf(a3.stateNode.nextSibling) : null;
        return true;
      }
      function sh() {
        kh = jh = null;
        lh = false;
      }
      var th = [];
      function uh() {
        for (var a3 = 0; a3 < th.length; a3++)
          th[a3]._workInProgressVersionPrimary = null;
        th.length = 0;
      }
      var vh = ra.ReactCurrentDispatcher;
      var wh = ra.ReactCurrentBatchConfig;
      var xh = 0;
      var R3 = null;
      var S3 = null;
      var T2 = null;
      var yh = false;
      var zh = false;
      function Ah() {
        throw Error(y3(321));
      }
      function Bh(a3, b3) {
        if (b3 === null)
          return false;
        for (var c3 = 0; c3 < b3.length && c3 < a3.length; c3++)
          if (!He2(a3[c3], b3[c3]))
            return false;
        return true;
      }
      function Ch(a3, b3, c3, d3, e3, f2) {
        xh = f2;
        R3 = b3;
        b3.memoizedState = null;
        b3.updateQueue = null;
        b3.lanes = 0;
        vh.current = a3 === null || a3.memoizedState === null ? Dh : Eh;
        a3 = c3(d3, e3);
        if (zh) {
          f2 = 0;
          do {
            zh = false;
            if (!(25 > f2))
              throw Error(y3(301));
            f2 += 1;
            T2 = S3 = null;
            b3.updateQueue = null;
            vh.current = Fh;
            a3 = c3(d3, e3);
          } while (zh);
        }
        vh.current = Gh;
        b3 = S3 !== null && S3.next !== null;
        xh = 0;
        T2 = S3 = R3 = null;
        yh = false;
        if (b3)
          throw Error(y3(300));
        return a3;
      }
      function Hh() {
        var a3 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        T2 === null ? R3.memoizedState = T2 = a3 : T2 = T2.next = a3;
        return T2;
      }
      function Ih() {
        if (S3 === null) {
          var a3 = R3.alternate;
          a3 = a3 !== null ? a3.memoizedState : null;
        } else
          a3 = S3.next;
        var b3 = T2 === null ? R3.memoizedState : T2.next;
        if (b3 !== null)
          T2 = b3, S3 = a3;
        else {
          if (a3 === null)
            throw Error(y3(310));
          S3 = a3;
          a3 = { memoizedState: S3.memoizedState, baseState: S3.baseState, baseQueue: S3.baseQueue, queue: S3.queue, next: null };
          T2 === null ? R3.memoizedState = T2 = a3 : T2 = T2.next = a3;
        }
        return T2;
      }
      function Jh(a3, b3) {
        return typeof b3 === "function" ? b3(a3) : b3;
      }
      function Kh(a3) {
        var b3 = Ih(), c3 = b3.queue;
        if (c3 === null)
          throw Error(y3(311));
        c3.lastRenderedReducer = a3;
        var d3 = S3, e3 = d3.baseQueue, f2 = c3.pending;
        if (f2 !== null) {
          if (e3 !== null) {
            var g3 = e3.next;
            e3.next = f2.next;
            f2.next = g3;
          }
          d3.baseQueue = e3 = f2;
          c3.pending = null;
        }
        if (e3 !== null) {
          e3 = e3.next;
          d3 = d3.baseState;
          var h2 = g3 = f2 = null, k3 = e3;
          do {
            var l3 = k3.lane;
            if ((xh & l3) === l3)
              h2 !== null && (h2 = h2.next = { lane: 0, action: k3.action, eagerReducer: k3.eagerReducer, eagerState: k3.eagerState, next: null }), d3 = k3.eagerReducer === a3 ? k3.eagerState : a3(d3, k3.action);
            else {
              var n3 = {
                lane: l3,
                action: k3.action,
                eagerReducer: k3.eagerReducer,
                eagerState: k3.eagerState,
                next: null
              };
              h2 === null ? (g3 = h2 = n3, f2 = d3) : h2 = h2.next = n3;
              R3.lanes |= l3;
              Dg |= l3;
            }
            k3 = k3.next;
          } while (k3 !== null && k3 !== e3);
          h2 === null ? f2 = d3 : h2.next = g3;
          He2(d3, b3.memoizedState) || (ug = true);
          b3.memoizedState = d3;
          b3.baseState = f2;
          b3.baseQueue = h2;
          c3.lastRenderedState = d3;
        }
        return [b3.memoizedState, c3.dispatch];
      }
      function Lh(a3) {
        var b3 = Ih(), c3 = b3.queue;
        if (c3 === null)
          throw Error(y3(311));
        c3.lastRenderedReducer = a3;
        var d3 = c3.dispatch, e3 = c3.pending, f2 = b3.memoizedState;
        if (e3 !== null) {
          c3.pending = null;
          var g3 = e3 = e3.next;
          do
            f2 = a3(f2, g3.action), g3 = g3.next;
          while (g3 !== e3);
          He2(f2, b3.memoizedState) || (ug = true);
          b3.memoizedState = f2;
          b3.baseQueue === null && (b3.baseState = f2);
          c3.lastRenderedState = f2;
        }
        return [f2, d3];
      }
      function Mh(a3, b3, c3) {
        var d3 = b3._getVersion;
        d3 = d3(b3._source);
        var e3 = b3._workInProgressVersionPrimary;
        if (e3 !== null)
          a3 = e3 === d3;
        else if (a3 = a3.mutableReadLanes, a3 = (xh & a3) === a3)
          b3._workInProgressVersionPrimary = d3, th.push(b3);
        if (a3)
          return c3(b3._source);
        th.push(b3);
        throw Error(y3(350));
      }
      function Nh(a3, b3, c3, d3) {
        var e3 = U3;
        if (e3 === null)
          throw Error(y3(349));
        var f2 = b3._getVersion, g3 = f2(b3._source), h2 = vh.current, k3 = h2.useState(function() {
          return Mh(e3, b3, c3);
        }), l3 = k3[1], n3 = k3[0];
        k3 = T2;
        var A2 = a3.memoizedState, p2 = A2.refs, C2 = p2.getSnapshot, x3 = A2.source;
        A2 = A2.subscribe;
        var w3 = R3;
        a3.memoizedState = { refs: p2, source: b3, subscribe: d3 };
        h2.useEffect(function() {
          p2.getSnapshot = c3;
          p2.setSnapshot = l3;
          var a4 = f2(b3._source);
          if (!He2(g3, a4)) {
            a4 = c3(b3._source);
            He2(n3, a4) || (l3(a4), a4 = Ig(w3), e3.mutableReadLanes |= a4 & e3.pendingLanes);
            a4 = e3.mutableReadLanes;
            e3.entangledLanes |= a4;
            for (var d4 = e3.entanglements, h3 = a4; 0 < h3; ) {
              var k4 = 31 - Vc(h3), v3 = 1 << k4;
              d4[k4] |= a4;
              h3 &= ~v3;
            }
          }
        }, [c3, b3, d3]);
        h2.useEffect(function() {
          return d3(b3._source, function() {
            var a4 = p2.getSnapshot, c4 = p2.setSnapshot;
            try {
              c4(a4(b3._source));
              var d4 = Ig(w3);
              e3.mutableReadLanes |= d4 & e3.pendingLanes;
            } catch (q3) {
              c4(function() {
                throw q3;
              });
            }
          });
        }, [b3, d3]);
        He2(C2, c3) && He2(x3, b3) && He2(A2, d3) || (a3 = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n3 }, a3.dispatch = l3 = Oh.bind(null, R3, a3), k3.queue = a3, k3.baseQueue = null, n3 = Mh(e3, b3, c3), k3.memoizedState = k3.baseState = n3);
        return n3;
      }
      function Ph(a3, b3, c3) {
        var d3 = Ih();
        return Nh(d3, a3, b3, c3);
      }
      function Qh(a3) {
        var b3 = Hh();
        typeof a3 === "function" && (a3 = a3());
        b3.memoizedState = b3.baseState = a3;
        a3 = b3.queue = { pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a3 };
        a3 = a3.dispatch = Oh.bind(null, R3, a3);
        return [b3.memoizedState, a3];
      }
      function Rh(a3, b3, c3, d3) {
        a3 = { tag: a3, create: b3, destroy: c3, deps: d3, next: null };
        b3 = R3.updateQueue;
        b3 === null ? (b3 = { lastEffect: null }, R3.updateQueue = b3, b3.lastEffect = a3.next = a3) : (c3 = b3.lastEffect, c3 === null ? b3.lastEffect = a3.next = a3 : (d3 = c3.next, c3.next = a3, a3.next = d3, b3.lastEffect = a3));
        return a3;
      }
      function Sh(a3) {
        var b3 = Hh();
        a3 = { current: a3 };
        return b3.memoizedState = a3;
      }
      function Th() {
        return Ih().memoizedState;
      }
      function Uh(a3, b3, c3, d3) {
        var e3 = Hh();
        R3.flags |= a3;
        e3.memoizedState = Rh(1 | b3, c3, void 0, d3 === void 0 ? null : d3);
      }
      function Vh(a3, b3, c3, d3) {
        var e3 = Ih();
        d3 = d3 === void 0 ? null : d3;
        var f2 = void 0;
        if (S3 !== null) {
          var g3 = S3.memoizedState;
          f2 = g3.destroy;
          if (d3 !== null && Bh(d3, g3.deps)) {
            Rh(b3, c3, f2, d3);
            return;
          }
        }
        R3.flags |= a3;
        e3.memoizedState = Rh(1 | b3, c3, f2, d3);
      }
      function Wh(a3, b3) {
        return Uh(516, 4, a3, b3);
      }
      function Xh(a3, b3) {
        return Vh(516, 4, a3, b3);
      }
      function Yh(a3, b3) {
        return Vh(4, 2, a3, b3);
      }
      function Zh(a3, b3) {
        if (typeof b3 === "function")
          return a3 = a3(), b3(a3), function() {
            b3(null);
          };
        if (b3 !== null && b3 !== void 0)
          return a3 = a3(), b3.current = a3, function() {
            b3.current = null;
          };
      }
      function $h(a3, b3, c3) {
        c3 = c3 !== null && c3 !== void 0 ? c3.concat([a3]) : null;
        return Vh(4, 2, Zh.bind(null, b3, a3), c3);
      }
      function ai() {
      }
      function bi(a3, b3) {
        var c3 = Ih();
        b3 = b3 === void 0 ? null : b3;
        var d3 = c3.memoizedState;
        if (d3 !== null && b3 !== null && Bh(b3, d3[1]))
          return d3[0];
        c3.memoizedState = [a3, b3];
        return a3;
      }
      function ci(a3, b3) {
        var c3 = Ih();
        b3 = b3 === void 0 ? null : b3;
        var d3 = c3.memoizedState;
        if (d3 !== null && b3 !== null && Bh(b3, d3[1]))
          return d3[0];
        a3 = a3();
        c3.memoizedState = [a3, b3];
        return a3;
      }
      function di(a3, b3) {
        var c3 = eg();
        gg(98 > c3 ? 98 : c3, function() {
          a3(true);
        });
        gg(97 < c3 ? 97 : c3, function() {
          var c4 = wh.transition;
          wh.transition = 1;
          try {
            a3(false), b3();
          } finally {
            wh.transition = c4;
          }
        });
      }
      function Oh(a3, b3, c3) {
        var d3 = Hg(), e3 = Ig(a3), f2 = { lane: e3, action: c3, eagerReducer: null, eagerState: null, next: null }, g3 = b3.pending;
        g3 === null ? f2.next = f2 : (f2.next = g3.next, g3.next = f2);
        b3.pending = f2;
        g3 = a3.alternate;
        if (a3 === R3 || g3 !== null && g3 === R3)
          zh = yh = true;
        else {
          if (a3.lanes === 0 && (g3 === null || g3.lanes === 0) && (g3 = b3.lastRenderedReducer, g3 !== null))
            try {
              var h2 = b3.lastRenderedState, k3 = g3(h2, c3);
              f2.eagerReducer = g3;
              f2.eagerState = k3;
              if (He2(k3, h2))
                return;
            } catch (l3) {
            } finally {
            }
          Jg(a3, e3, d3);
        }
      }
      var Gh = { readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false };
      var Dh = { readContext: vg, useCallback: function(a3, b3) {
        Hh().memoizedState = [a3, b3 === void 0 ? null : b3];
        return a3;
      }, useContext: vg, useEffect: Wh, useImperativeHandle: function(a3, b3, c3) {
        c3 = c3 !== null && c3 !== void 0 ? c3.concat([a3]) : null;
        return Uh(4, 2, Zh.bind(null, b3, a3), c3);
      }, useLayoutEffect: function(a3, b3) {
        return Uh(4, 2, a3, b3);
      }, useMemo: function(a3, b3) {
        var c3 = Hh();
        b3 = b3 === void 0 ? null : b3;
        a3 = a3();
        c3.memoizedState = [a3, b3];
        return a3;
      }, useReducer: function(a3, b3, c3) {
        var d3 = Hh();
        b3 = c3 !== void 0 ? c3(b3) : b3;
        d3.memoizedState = d3.baseState = b3;
        a3 = d3.queue = { pending: null, dispatch: null, lastRenderedReducer: a3, lastRenderedState: b3 };
        a3 = a3.dispatch = Oh.bind(null, R3, a3);
        return [d3.memoizedState, a3];
      }, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a3) {
        var b3 = Qh(a3), c3 = b3[0], d3 = b3[1];
        Wh(function() {
          var b4 = wh.transition;
          wh.transition = 1;
          try {
            d3(a3);
          } finally {
            wh.transition = b4;
          }
        }, [a3]);
        return c3;
      }, useTransition: function() {
        var a3 = Qh(false), b3 = a3[0];
        a3 = di.bind(null, a3[1]);
        Sh(a3);
        return [a3, b3];
      }, useMutableSource: function(a3, b3, c3) {
        var d3 = Hh();
        d3.memoizedState = { refs: { getSnapshot: b3, setSnapshot: null }, source: a3, subscribe: c3 };
        return Nh(d3, a3, b3, c3);
      }, useOpaqueIdentifier: function() {
        if (lh) {
          var a3 = false, b3 = uf(function() {
            a3 || (a3 = true, c3("r:" + (tf++).toString(36)));
            throw Error(y3(355));
          }), c3 = Qh(b3)[1];
          (R3.mode & 2) === 0 && (R3.flags |= 516, Rh(5, function() {
            c3("r:" + (tf++).toString(36));
          }, void 0, null));
          return b3;
        }
        b3 = "r:" + (tf++).toString(36);
        Qh(b3);
        return b3;
      }, unstable_isNewReconciler: false };
      var Eh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
        return Kh(Jh);
      }, useDebugValue: ai, useDeferredValue: function(a3) {
        var b3 = Kh(Jh), c3 = b3[0], d3 = b3[1];
        Xh(function() {
          var b4 = wh.transition;
          wh.transition = 1;
          try {
            d3(a3);
          } finally {
            wh.transition = b4;
          }
        }, [a3]);
        return c3;
      }, useTransition: function() {
        var a3 = Kh(Jh)[0];
        return [
          Th().current,
          a3
        ];
      }, useMutableSource: Ph, useOpaqueIdentifier: function() {
        return Kh(Jh)[0];
      }, unstable_isNewReconciler: false };
      var Fh = { readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
        return Lh(Jh);
      }, useDebugValue: ai, useDeferredValue: function(a3) {
        var b3 = Lh(Jh), c3 = b3[0], d3 = b3[1];
        Xh(function() {
          var b4 = wh.transition;
          wh.transition = 1;
          try {
            d3(a3);
          } finally {
            wh.transition = b4;
          }
        }, [a3]);
        return c3;
      }, useTransition: function() {
        var a3 = Lh(Jh)[0];
        return [
          Th().current,
          a3
        ];
      }, useMutableSource: Ph, useOpaqueIdentifier: function() {
        return Lh(Jh)[0];
      }, unstable_isNewReconciler: false };
      var ei = ra.ReactCurrentOwner;
      var ug = false;
      function fi(a3, b3, c3, d3) {
        b3.child = a3 === null ? Zg(b3, null, c3, d3) : Yg(b3, a3.child, c3, d3);
      }
      function gi(a3, b3, c3, d3, e3) {
        c3 = c3.render;
        var f2 = b3.ref;
        tg(b3, e3);
        d3 = Ch(a3, b3, c3, d3, f2, e3);
        if (a3 !== null && !ug)
          return b3.updateQueue = a3.updateQueue, b3.flags &= -517, a3.lanes &= ~e3, hi(a3, b3, e3);
        b3.flags |= 1;
        fi(a3, b3, d3, e3);
        return b3.child;
      }
      function ii(a3, b3, c3, d3, e3, f2) {
        if (a3 === null) {
          var g3 = c3.type;
          if (typeof g3 === "function" && !ji(g3) && g3.defaultProps === void 0 && c3.compare === null && c3.defaultProps === void 0)
            return b3.tag = 15, b3.type = g3, ki(a3, b3, g3, d3, e3, f2);
          a3 = Vg(c3.type, null, d3, b3, b3.mode, f2);
          a3.ref = b3.ref;
          a3.return = b3;
          return b3.child = a3;
        }
        g3 = a3.child;
        if ((e3 & f2) === 0 && (e3 = g3.memoizedProps, c3 = c3.compare, c3 = c3 !== null ? c3 : Je2, c3(e3, d3) && a3.ref === b3.ref))
          return hi(a3, b3, f2);
        b3.flags |= 1;
        a3 = Tg(g3, d3);
        a3.ref = b3.ref;
        a3.return = b3;
        return b3.child = a3;
      }
      function ki(a3, b3, c3, d3, e3, f2) {
        if (a3 !== null && Je2(a3.memoizedProps, d3) && a3.ref === b3.ref)
          if (ug = false, (f2 & e3) !== 0)
            (a3.flags & 16384) !== 0 && (ug = true);
          else
            return b3.lanes = a3.lanes, hi(a3, b3, f2);
        return li(a3, b3, c3, d3, f2);
      }
      function mi(a3, b3, c3) {
        var d3 = b3.pendingProps, e3 = d3.children, f2 = a3 !== null ? a3.memoizedState : null;
        if (d3.mode === "hidden" || d3.mode === "unstable-defer-without-hiding")
          if ((b3.mode & 4) === 0)
            b3.memoizedState = { baseLanes: 0 }, ni(b3, c3);
          else if ((c3 & 1073741824) !== 0)
            b3.memoizedState = { baseLanes: 0 }, ni(b3, f2 !== null ? f2.baseLanes : c3);
          else
            return a3 = f2 !== null ? f2.baseLanes | c3 : c3, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a3 }, ni(b3, a3), null;
        else
          f2 !== null ? (d3 = f2.baseLanes | c3, b3.memoizedState = null) : d3 = c3, ni(b3, d3);
        fi(a3, b3, e3, c3);
        return b3.child;
      }
      function oi(a3, b3) {
        var c3 = b3.ref;
        if (a3 === null && c3 !== null || a3 !== null && a3.ref !== c3)
          b3.flags |= 128;
      }
      function li(a3, b3, c3, d3, e3) {
        var f2 = Ff(c3) ? Df : M3.current;
        f2 = Ef(b3, f2);
        tg(b3, e3);
        c3 = Ch(a3, b3, c3, d3, f2, e3);
        if (a3 !== null && !ug)
          return b3.updateQueue = a3.updateQueue, b3.flags &= -517, a3.lanes &= ~e3, hi(a3, b3, e3);
        b3.flags |= 1;
        fi(a3, b3, c3, e3);
        return b3.child;
      }
      function pi(a3, b3, c3, d3, e3) {
        if (Ff(c3)) {
          var f2 = true;
          Jf(b3);
        } else
          f2 = false;
        tg(b3, e3);
        if (b3.stateNode === null)
          a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2), Mg(b3, c3, d3), Og(b3, c3, d3, e3), d3 = true;
        else if (a3 === null) {
          var g3 = b3.stateNode, h2 = b3.memoizedProps;
          g3.props = h2;
          var k3 = g3.context, l3 = c3.contextType;
          typeof l3 === "object" && l3 !== null ? l3 = vg(l3) : (l3 = Ff(c3) ? Df : M3.current, l3 = Ef(b3, l3));
          var n3 = c3.getDerivedStateFromProps, A2 = typeof n3 === "function" || typeof g3.getSnapshotBeforeUpdate === "function";
          A2 || typeof g3.UNSAFE_componentWillReceiveProps !== "function" && typeof g3.componentWillReceiveProps !== "function" || (h2 !== d3 || k3 !== l3) && Ng(b3, g3, d3, l3);
          wg = false;
          var p2 = b3.memoizedState;
          g3.state = p2;
          Cg(b3, d3, g3, e3);
          k3 = b3.memoizedState;
          h2 !== d3 || p2 !== k3 || N3.current || wg ? (typeof n3 === "function" && (Gg(b3, c3, n3, d3), k3 = b3.memoizedState), (h2 = wg || Lg(b3, c3, h2, d3, p2, k3, l3)) ? (A2 || typeof g3.UNSAFE_componentWillMount !== "function" && typeof g3.componentWillMount !== "function" || (typeof g3.componentWillMount === "function" && g3.componentWillMount(), typeof g3.UNSAFE_componentWillMount === "function" && g3.UNSAFE_componentWillMount()), typeof g3.componentDidMount === "function" && (b3.flags |= 4)) : (typeof g3.componentDidMount === "function" && (b3.flags |= 4), b3.memoizedProps = d3, b3.memoizedState = k3), g3.props = d3, g3.state = k3, g3.context = l3, d3 = h2) : (typeof g3.componentDidMount === "function" && (b3.flags |= 4), d3 = false);
        } else {
          g3 = b3.stateNode;
          yg(a3, b3);
          h2 = b3.memoizedProps;
          l3 = b3.type === b3.elementType ? h2 : lg(b3.type, h2);
          g3.props = l3;
          A2 = b3.pendingProps;
          p2 = g3.context;
          k3 = c3.contextType;
          typeof k3 === "object" && k3 !== null ? k3 = vg(k3) : (k3 = Ff(c3) ? Df : M3.current, k3 = Ef(b3, k3));
          var C2 = c3.getDerivedStateFromProps;
          (n3 = typeof C2 === "function" || typeof g3.getSnapshotBeforeUpdate === "function") || typeof g3.UNSAFE_componentWillReceiveProps !== "function" && typeof g3.componentWillReceiveProps !== "function" || (h2 !== A2 || p2 !== k3) && Ng(b3, g3, d3, k3);
          wg = false;
          p2 = b3.memoizedState;
          g3.state = p2;
          Cg(b3, d3, g3, e3);
          var x3 = b3.memoizedState;
          h2 !== A2 || p2 !== x3 || N3.current || wg ? (typeof C2 === "function" && (Gg(b3, c3, C2, d3), x3 = b3.memoizedState), (l3 = wg || Lg(b3, c3, l3, d3, p2, x3, k3)) ? (n3 || typeof g3.UNSAFE_componentWillUpdate !== "function" && typeof g3.componentWillUpdate !== "function" || (typeof g3.componentWillUpdate === "function" && g3.componentWillUpdate(d3, x3, k3), typeof g3.UNSAFE_componentWillUpdate === "function" && g3.UNSAFE_componentWillUpdate(d3, x3, k3)), typeof g3.componentDidUpdate === "function" && (b3.flags |= 4), typeof g3.getSnapshotBeforeUpdate === "function" && (b3.flags |= 256)) : (typeof g3.componentDidUpdate !== "function" || h2 === a3.memoizedProps && p2 === a3.memoizedState || (b3.flags |= 4), typeof g3.getSnapshotBeforeUpdate !== "function" || h2 === a3.memoizedProps && p2 === a3.memoizedState || (b3.flags |= 256), b3.memoizedProps = d3, b3.memoizedState = x3), g3.props = d3, g3.state = x3, g3.context = k3, d3 = l3) : (typeof g3.componentDidUpdate !== "function" || h2 === a3.memoizedProps && p2 === a3.memoizedState || (b3.flags |= 4), typeof g3.getSnapshotBeforeUpdate !== "function" || h2 === a3.memoizedProps && p2 === a3.memoizedState || (b3.flags |= 256), d3 = false);
        }
        return qi(a3, b3, c3, d3, f2, e3);
      }
      function qi(a3, b3, c3, d3, e3, f2) {
        oi(a3, b3);
        var g3 = (b3.flags & 64) !== 0;
        if (!d3 && !g3)
          return e3 && Kf(b3, c3, false), hi(a3, b3, f2);
        d3 = b3.stateNode;
        ei.current = b3;
        var h2 = g3 && typeof c3.getDerivedStateFromError !== "function" ? null : d3.render();
        b3.flags |= 1;
        a3 !== null && g3 ? (b3.child = Yg(b3, a3.child, null, f2), b3.child = Yg(b3, null, h2, f2)) : fi(a3, b3, h2, f2);
        b3.memoizedState = d3.state;
        e3 && Kf(b3, c3, true);
        return b3.child;
      }
      function ri(a3) {
        var b3 = a3.stateNode;
        b3.pendingContext ? Hf(a3, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && Hf(a3, b3.context, false);
        eh(a3, b3.containerInfo);
      }
      var si = { dehydrated: null, retryLane: 0 };
      function ti(a3, b3, c3) {
        var d3 = b3.pendingProps, e3 = P2.current, f2 = false, g3;
        (g3 = (b3.flags & 64) !== 0) || (g3 = a3 !== null && a3.memoizedState === null ? false : (e3 & 2) !== 0);
        g3 ? (f2 = true, b3.flags &= -65) : a3 !== null && a3.memoizedState === null || d3.fallback === void 0 || d3.unstable_avoidThisFallback === true || (e3 |= 1);
        I3(P2, e3 & 1);
        if (a3 === null) {
          d3.fallback !== void 0 && ph(b3);
          a3 = d3.children;
          e3 = d3.fallback;
          if (f2)
            return a3 = ui(b3, a3, e3, c3), b3.child.memoizedState = { baseLanes: c3 }, b3.memoizedState = si, a3;
          if (typeof d3.unstable_expectedLoadTime === "number")
            return a3 = ui(b3, a3, e3, c3), b3.child.memoizedState = { baseLanes: c3 }, b3.memoizedState = si, b3.lanes = 33554432, a3;
          c3 = vi({ mode: "visible", children: a3 }, b3.mode, c3, null);
          c3.return = b3;
          return b3.child = c3;
        }
        if (a3.memoizedState !== null) {
          if (f2)
            return d3 = wi(a3, b3, d3.children, d3.fallback, c3), f2 = b3.child, e3 = a3.child.memoizedState, f2.memoizedState = e3 === null ? { baseLanes: c3 } : { baseLanes: e3.baseLanes | c3 }, f2.childLanes = a3.childLanes & ~c3, b3.memoizedState = si, d3;
          c3 = xi(a3, b3, d3.children, c3);
          b3.memoizedState = null;
          return c3;
        }
        if (f2)
          return d3 = wi(a3, b3, d3.children, d3.fallback, c3), f2 = b3.child, e3 = a3.child.memoizedState, f2.memoizedState = e3 === null ? { baseLanes: c3 } : { baseLanes: e3.baseLanes | c3 }, f2.childLanes = a3.childLanes & ~c3, b3.memoizedState = si, d3;
        c3 = xi(a3, b3, d3.children, c3);
        b3.memoizedState = null;
        return c3;
      }
      function ui(a3, b3, c3, d3) {
        var e3 = a3.mode, f2 = a3.child;
        b3 = { mode: "hidden", children: b3 };
        (e3 & 2) === 0 && f2 !== null ? (f2.childLanes = 0, f2.pendingProps = b3) : f2 = vi(b3, e3, 0, null);
        c3 = Xg(c3, e3, d3, null);
        f2.return = a3;
        c3.return = a3;
        f2.sibling = c3;
        a3.child = f2;
        return c3;
      }
      function xi(a3, b3, c3, d3) {
        var e3 = a3.child;
        a3 = e3.sibling;
        c3 = Tg(e3, { mode: "visible", children: c3 });
        (b3.mode & 2) === 0 && (c3.lanes = d3);
        c3.return = b3;
        c3.sibling = null;
        a3 !== null && (a3.nextEffect = null, a3.flags = 8, b3.firstEffect = b3.lastEffect = a3);
        return b3.child = c3;
      }
      function wi(a3, b3, c3, d3, e3) {
        var f2 = b3.mode, g3 = a3.child;
        a3 = g3.sibling;
        var h2 = { mode: "hidden", children: c3 };
        (f2 & 2) === 0 && b3.child !== g3 ? (c3 = b3.child, c3.childLanes = 0, c3.pendingProps = h2, g3 = c3.lastEffect, g3 !== null ? (b3.firstEffect = c3.firstEffect, b3.lastEffect = g3, g3.nextEffect = null) : b3.firstEffect = b3.lastEffect = null) : c3 = Tg(g3, h2);
        a3 !== null ? d3 = Tg(a3, d3) : (d3 = Xg(d3, f2, e3, null), d3.flags |= 2);
        d3.return = b3;
        c3.return = b3;
        c3.sibling = d3;
        b3.child = c3;
        return d3;
      }
      function yi(a3, b3) {
        a3.lanes |= b3;
        var c3 = a3.alternate;
        c3 !== null && (c3.lanes |= b3);
        sg(a3.return, b3);
      }
      function zi(a3, b3, c3, d3, e3, f2) {
        var g3 = a3.memoizedState;
        g3 === null ? a3.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d3, tail: c3, tailMode: e3, lastEffect: f2 } : (g3.isBackwards = b3, g3.rendering = null, g3.renderingStartTime = 0, g3.last = d3, g3.tail = c3, g3.tailMode = e3, g3.lastEffect = f2);
      }
      function Ai(a3, b3, c3) {
        var d3 = b3.pendingProps, e3 = d3.revealOrder, f2 = d3.tail;
        fi(a3, b3, d3.children, c3);
        d3 = P2.current;
        if ((d3 & 2) !== 0)
          d3 = d3 & 1 | 2, b3.flags |= 64;
        else {
          if (a3 !== null && (a3.flags & 64) !== 0)
            a:
              for (a3 = b3.child; a3 !== null; ) {
                if (a3.tag === 13)
                  a3.memoizedState !== null && yi(a3, c3);
                else if (a3.tag === 19)
                  yi(a3, c3);
                else if (a3.child !== null) {
                  a3.child.return = a3;
                  a3 = a3.child;
                  continue;
                }
                if (a3 === b3)
                  break a;
                for (; a3.sibling === null; ) {
                  if (a3.return === null || a3.return === b3)
                    break a;
                  a3 = a3.return;
                }
                a3.sibling.return = a3.return;
                a3 = a3.sibling;
              }
          d3 &= 1;
        }
        I3(P2, d3);
        if ((b3.mode & 2) === 0)
          b3.memoizedState = null;
        else
          switch (e3) {
            case "forwards":
              c3 = b3.child;
              for (e3 = null; c3 !== null; )
                a3 = c3.alternate, a3 !== null && ih(a3) === null && (e3 = c3), c3 = c3.sibling;
              c3 = e3;
              c3 === null ? (e3 = b3.child, b3.child = null) : (e3 = c3.sibling, c3.sibling = null);
              zi(b3, false, e3, c3, f2, b3.lastEffect);
              break;
            case "backwards":
              c3 = null;
              e3 = b3.child;
              for (b3.child = null; e3 !== null; ) {
                a3 = e3.alternate;
                if (a3 !== null && ih(a3) === null) {
                  b3.child = e3;
                  break;
                }
                a3 = e3.sibling;
                e3.sibling = c3;
                c3 = e3;
                e3 = a3;
              }
              zi(b3, true, c3, null, f2, b3.lastEffect);
              break;
            case "together":
              zi(b3, false, null, null, void 0, b3.lastEffect);
              break;
            default:
              b3.memoizedState = null;
          }
        return b3.child;
      }
      function hi(a3, b3, c3) {
        a3 !== null && (b3.dependencies = a3.dependencies);
        Dg |= b3.lanes;
        if ((c3 & b3.childLanes) !== 0) {
          if (a3 !== null && b3.child !== a3.child)
            throw Error(y3(153));
          if (b3.child !== null) {
            a3 = b3.child;
            c3 = Tg(a3, a3.pendingProps);
            b3.child = c3;
            for (c3.return = b3; a3.sibling !== null; )
              a3 = a3.sibling, c3 = c3.sibling = Tg(a3, a3.pendingProps), c3.return = b3;
            c3.sibling = null;
          }
          return b3.child;
        }
        return null;
      }
      var Bi;
      var Ci;
      var Di;
      var Ei;
      Bi = function(a3, b3) {
        for (var c3 = b3.child; c3 !== null; ) {
          if (c3.tag === 5 || c3.tag === 6)
            a3.appendChild(c3.stateNode);
          else if (c3.tag !== 4 && c3.child !== null) {
            c3.child.return = c3;
            c3 = c3.child;
            continue;
          }
          if (c3 === b3)
            break;
          for (; c3.sibling === null; ) {
            if (c3.return === null || c3.return === b3)
              return;
            c3 = c3.return;
          }
          c3.sibling.return = c3.return;
          c3 = c3.sibling;
        }
      };
      Ci = function() {
      };
      Di = function(a3, b3, c3, d3) {
        var e3 = a3.memoizedProps;
        if (e3 !== d3) {
          a3 = b3.stateNode;
          dh(ah.current);
          var f2 = null;
          switch (c3) {
            case "input":
              e3 = Ya(a3, e3);
              d3 = Ya(a3, d3);
              f2 = [];
              break;
            case "option":
              e3 = eb(a3, e3);
              d3 = eb(a3, d3);
              f2 = [];
              break;
            case "select":
              e3 = m3({}, e3, { value: void 0 });
              d3 = m3({}, d3, { value: void 0 });
              f2 = [];
              break;
            case "textarea":
              e3 = gb(a3, e3);
              d3 = gb(a3, d3);
              f2 = [];
              break;
            default:
              typeof e3.onClick !== "function" && typeof d3.onClick === "function" && (a3.onclick = jf);
          }
          vb(c3, d3);
          var g3;
          c3 = null;
          for (l3 in e3)
            if (!d3.hasOwnProperty(l3) && e3.hasOwnProperty(l3) && e3[l3] != null)
              if (l3 === "style") {
                var h2 = e3[l3];
                for (g3 in h2)
                  h2.hasOwnProperty(g3) && (c3 || (c3 = {}), c3[g3] = "");
              } else
                l3 !== "dangerouslySetInnerHTML" && l3 !== "children" && l3 !== "suppressContentEditableWarning" && l3 !== "suppressHydrationWarning" && l3 !== "autoFocus" && (ca.hasOwnProperty(l3) ? f2 || (f2 = []) : (f2 = f2 || []).push(l3, null));
          for (l3 in d3) {
            var k3 = d3[l3];
            h2 = e3 != null ? e3[l3] : void 0;
            if (d3.hasOwnProperty(l3) && k3 !== h2 && (k3 != null || h2 != null))
              if (l3 === "style")
                if (h2) {
                  for (g3 in h2)
                    !h2.hasOwnProperty(g3) || k3 && k3.hasOwnProperty(g3) || (c3 || (c3 = {}), c3[g3] = "");
                  for (g3 in k3)
                    k3.hasOwnProperty(g3) && h2[g3] !== k3[g3] && (c3 || (c3 = {}), c3[g3] = k3[g3]);
                } else
                  c3 || (f2 || (f2 = []), f2.push(l3, c3)), c3 = k3;
              else
                l3 === "dangerouslySetInnerHTML" ? (k3 = k3 ? k3.__html : void 0, h2 = h2 ? h2.__html : void 0, k3 != null && h2 !== k3 && (f2 = f2 || []).push(l3, k3)) : l3 === "children" ? typeof k3 !== "string" && typeof k3 !== "number" || (f2 = f2 || []).push(l3, "" + k3) : l3 !== "suppressContentEditableWarning" && l3 !== "suppressHydrationWarning" && (ca.hasOwnProperty(l3) ? (k3 != null && l3 === "onScroll" && G3("scroll", a3), f2 || h2 === k3 || (f2 = [])) : typeof k3 === "object" && k3 !== null && k3.$$typeof === Ga ? k3.toString() : (f2 = f2 || []).push(l3, k3));
          }
          c3 && (f2 = f2 || []).push("style", c3);
          var l3 = f2;
          if (b3.updateQueue = l3)
            b3.flags |= 4;
        }
      };
      Ei = function(a3, b3, c3, d3) {
        c3 !== d3 && (b3.flags |= 4);
      };
      function Fi(a3, b3) {
        if (!lh)
          switch (a3.tailMode) {
            case "hidden":
              b3 = a3.tail;
              for (var c3 = null; b3 !== null; )
                b3.alternate !== null && (c3 = b3), b3 = b3.sibling;
              c3 === null ? a3.tail = null : c3.sibling = null;
              break;
            case "collapsed":
              c3 = a3.tail;
              for (var d3 = null; c3 !== null; )
                c3.alternate !== null && (d3 = c3), c3 = c3.sibling;
              d3 === null ? b3 || a3.tail === null ? a3.tail = null : a3.tail.sibling = null : d3.sibling = null;
          }
      }
      function Gi(a3, b3, c3) {
        var d3 = b3.pendingProps;
        switch (b3.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return null;
          case 1:
            return Ff(b3.type) && Gf(), null;
          case 3:
            fh();
            H3(N3);
            H3(M3);
            uh();
            d3 = b3.stateNode;
            d3.pendingContext && (d3.context = d3.pendingContext, d3.pendingContext = null);
            if (a3 === null || a3.child === null)
              rh(b3) ? b3.flags |= 4 : d3.hydrate || (b3.flags |= 256);
            Ci(b3);
            return null;
          case 5:
            hh(b3);
            var e3 = dh(ch.current);
            c3 = b3.type;
            if (a3 !== null && b3.stateNode != null)
              Di(a3, b3, c3, d3, e3), a3.ref !== b3.ref && (b3.flags |= 128);
            else {
              if (!d3) {
                if (b3.stateNode === null)
                  throw Error(y3(166));
                return null;
              }
              a3 = dh(ah.current);
              if (rh(b3)) {
                d3 = b3.stateNode;
                c3 = b3.type;
                var f2 = b3.memoizedProps;
                d3[wf] = b3;
                d3[xf] = f2;
                switch (c3) {
                  case "dialog":
                    G3("cancel", d3);
                    G3("close", d3);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    G3("load", d3);
                    break;
                  case "video":
                  case "audio":
                    for (a3 = 0; a3 < Xe.length; a3++)
                      G3(Xe[a3], d3);
                    break;
                  case "source":
                    G3("error", d3);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    G3("error", d3);
                    G3("load", d3);
                    break;
                  case "details":
                    G3("toggle", d3);
                    break;
                  case "input":
                    Za(d3, f2);
                    G3("invalid", d3);
                    break;
                  case "select":
                    d3._wrapperState = { wasMultiple: !!f2.multiple };
                    G3("invalid", d3);
                    break;
                  case "textarea":
                    hb(d3, f2), G3("invalid", d3);
                }
                vb(c3, f2);
                a3 = null;
                for (var g3 in f2)
                  f2.hasOwnProperty(g3) && (e3 = f2[g3], g3 === "children" ? typeof e3 === "string" ? d3.textContent !== e3 && (a3 = ["children", e3]) : typeof e3 === "number" && d3.textContent !== "" + e3 && (a3 = ["children", "" + e3]) : ca.hasOwnProperty(g3) && e3 != null && g3 === "onScroll" && G3("scroll", d3));
                switch (c3) {
                  case "input":
                    Va(d3);
                    cb(d3, f2, true);
                    break;
                  case "textarea":
                    Va(d3);
                    jb(d3);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    typeof f2.onClick === "function" && (d3.onclick = jf);
                }
                d3 = a3;
                b3.updateQueue = d3;
                d3 !== null && (b3.flags |= 4);
              } else {
                g3 = e3.nodeType === 9 ? e3 : e3.ownerDocument;
                a3 === kb.html && (a3 = lb(c3));
                a3 === kb.html ? c3 === "script" ? (a3 = g3.createElement("div"), a3.innerHTML = "<script><\/script>", a3 = a3.removeChild(a3.firstChild)) : typeof d3.is === "string" ? a3 = g3.createElement(c3, { is: d3.is }) : (a3 = g3.createElement(c3), c3 === "select" && (g3 = a3, d3.multiple ? g3.multiple = true : d3.size && (g3.size = d3.size))) : a3 = g3.createElementNS(a3, c3);
                a3[wf] = b3;
                a3[xf] = d3;
                Bi(a3, b3, false, false);
                b3.stateNode = a3;
                g3 = wb(c3, d3);
                switch (c3) {
                  case "dialog":
                    G3("cancel", a3);
                    G3("close", a3);
                    e3 = d3;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    G3("load", a3);
                    e3 = d3;
                    break;
                  case "video":
                  case "audio":
                    for (e3 = 0; e3 < Xe.length; e3++)
                      G3(Xe[e3], a3);
                    e3 = d3;
                    break;
                  case "source":
                    G3("error", a3);
                    e3 = d3;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    G3("error", a3);
                    G3("load", a3);
                    e3 = d3;
                    break;
                  case "details":
                    G3("toggle", a3);
                    e3 = d3;
                    break;
                  case "input":
                    Za(a3, d3);
                    e3 = Ya(a3, d3);
                    G3("invalid", a3);
                    break;
                  case "option":
                    e3 = eb(a3, d3);
                    break;
                  case "select":
                    a3._wrapperState = { wasMultiple: !!d3.multiple };
                    e3 = m3({}, d3, { value: void 0 });
                    G3("invalid", a3);
                    break;
                  case "textarea":
                    hb(a3, d3);
                    e3 = gb(a3, d3);
                    G3("invalid", a3);
                    break;
                  default:
                    e3 = d3;
                }
                vb(c3, e3);
                var h2 = e3;
                for (f2 in h2)
                  if (h2.hasOwnProperty(f2)) {
                    var k3 = h2[f2];
                    f2 === "style" ? tb(a3, k3) : f2 === "dangerouslySetInnerHTML" ? (k3 = k3 ? k3.__html : void 0, k3 != null && ob(a3, k3)) : f2 === "children" ? typeof k3 === "string" ? (c3 !== "textarea" || k3 !== "") && pb(a3, k3) : typeof k3 === "number" && pb(a3, "" + k3) : f2 !== "suppressContentEditableWarning" && f2 !== "suppressHydrationWarning" && f2 !== "autoFocus" && (ca.hasOwnProperty(f2) ? k3 != null && f2 === "onScroll" && G3("scroll", a3) : k3 != null && qa(a3, f2, k3, g3));
                  }
                switch (c3) {
                  case "input":
                    Va(a3);
                    cb(a3, d3, false);
                    break;
                  case "textarea":
                    Va(a3);
                    jb(a3);
                    break;
                  case "option":
                    d3.value != null && a3.setAttribute("value", "" + Sa(d3.value));
                    break;
                  case "select":
                    a3.multiple = !!d3.multiple;
                    f2 = d3.value;
                    f2 != null ? fb(a3, !!d3.multiple, f2, false) : d3.defaultValue != null && fb(a3, !!d3.multiple, d3.defaultValue, true);
                    break;
                  default:
                    typeof e3.onClick === "function" && (a3.onclick = jf);
                }
                mf(c3, d3) && (b3.flags |= 4);
              }
              b3.ref !== null && (b3.flags |= 128);
            }
            return null;
          case 6:
            if (a3 && b3.stateNode != null)
              Ei(a3, b3, a3.memoizedProps, d3);
            else {
              if (typeof d3 !== "string" && b3.stateNode === null)
                throw Error(y3(166));
              c3 = dh(ch.current);
              dh(ah.current);
              rh(b3) ? (d3 = b3.stateNode, c3 = b3.memoizedProps, d3[wf] = b3, d3.nodeValue !== c3 && (b3.flags |= 4)) : (d3 = (c3.nodeType === 9 ? c3 : c3.ownerDocument).createTextNode(d3), d3[wf] = b3, b3.stateNode = d3);
            }
            return null;
          case 13:
            H3(P2);
            d3 = b3.memoizedState;
            if ((b3.flags & 64) !== 0)
              return b3.lanes = c3, b3;
            d3 = d3 !== null;
            c3 = false;
            a3 === null ? b3.memoizedProps.fallback !== void 0 && rh(b3) : c3 = a3.memoizedState !== null;
            if (d3 && !c3 && (b3.mode & 2) !== 0)
              if (a3 === null && b3.memoizedProps.unstable_avoidThisFallback !== true || (P2.current & 1) !== 0)
                V2 === 0 && (V2 = 3);
              else {
                if (V2 === 0 || V2 === 3)
                  V2 = 4;
                U3 === null || (Dg & 134217727) === 0 && (Hi & 134217727) === 0 || Ii(U3, W3);
              }
            if (d3 || c3)
              b3.flags |= 4;
            return null;
          case 4:
            return fh(), Ci(b3), a3 === null && cf(b3.stateNode.containerInfo), null;
          case 10:
            return rg(b3), null;
          case 17:
            return Ff(b3.type) && Gf(), null;
          case 19:
            H3(P2);
            d3 = b3.memoizedState;
            if (d3 === null)
              return null;
            f2 = (b3.flags & 64) !== 0;
            g3 = d3.rendering;
            if (g3 === null)
              if (f2)
                Fi(d3, false);
              else {
                if (V2 !== 0 || a3 !== null && (a3.flags & 64) !== 0)
                  for (a3 = b3.child; a3 !== null; ) {
                    g3 = ih(a3);
                    if (g3 !== null) {
                      b3.flags |= 64;
                      Fi(d3, false);
                      f2 = g3.updateQueue;
                      f2 !== null && (b3.updateQueue = f2, b3.flags |= 4);
                      d3.lastEffect === null && (b3.firstEffect = null);
                      b3.lastEffect = d3.lastEffect;
                      d3 = c3;
                      for (c3 = b3.child; c3 !== null; )
                        f2 = c3, a3 = d3, f2.flags &= 2, f2.nextEffect = null, f2.firstEffect = null, f2.lastEffect = null, g3 = f2.alternate, g3 === null ? (f2.childLanes = 0, f2.lanes = a3, f2.child = null, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g3.childLanes, f2.lanes = g3.lanes, f2.child = g3.child, f2.memoizedProps = g3.memoizedProps, f2.memoizedState = g3.memoizedState, f2.updateQueue = g3.updateQueue, f2.type = g3.type, a3 = g3.dependencies, f2.dependencies = a3 === null ? null : { lanes: a3.lanes, firstContext: a3.firstContext }), c3 = c3.sibling;
                      I3(P2, P2.current & 1 | 2);
                      return b3.child;
                    }
                    a3 = a3.sibling;
                  }
                d3.tail !== null && O3() > Ji && (b3.flags |= 64, f2 = true, Fi(d3, false), b3.lanes = 33554432);
              }
            else {
              if (!f2)
                if (a3 = ih(g3), a3 !== null) {
                  if (b3.flags |= 64, f2 = true, c3 = a3.updateQueue, c3 !== null && (b3.updateQueue = c3, b3.flags |= 4), Fi(d3, true), d3.tail === null && d3.tailMode === "hidden" && !g3.alternate && !lh)
                    return b3 = b3.lastEffect = d3.lastEffect, b3 !== null && (b3.nextEffect = null), null;
                } else
                  2 * O3() - d3.renderingStartTime > Ji && c3 !== 1073741824 && (b3.flags |= 64, f2 = true, Fi(d3, false), b3.lanes = 33554432);
              d3.isBackwards ? (g3.sibling = b3.child, b3.child = g3) : (c3 = d3.last, c3 !== null ? c3.sibling = g3 : b3.child = g3, d3.last = g3);
            }
            return d3.tail !== null ? (c3 = d3.tail, d3.rendering = c3, d3.tail = c3.sibling, d3.lastEffect = b3.lastEffect, d3.renderingStartTime = O3(), c3.sibling = null, b3 = P2.current, I3(P2, f2 ? b3 & 1 | 2 : b3 & 1), c3) : null;
          case 23:
          case 24:
            return Ki(), a3 !== null && a3.memoizedState !== null !== (b3.memoizedState !== null) && d3.mode !== "unstable-defer-without-hiding" && (b3.flags |= 4), null;
        }
        throw Error(y3(156, b3.tag));
      }
      function Li(a3) {
        switch (a3.tag) {
          case 1:
            Ff(a3.type) && Gf();
            var b3 = a3.flags;
            return b3 & 4096 ? (a3.flags = b3 & -4097 | 64, a3) : null;
          case 3:
            fh();
            H3(N3);
            H3(M3);
            uh();
            b3 = a3.flags;
            if ((b3 & 64) !== 0)
              throw Error(y3(285));
            a3.flags = b3 & -4097 | 64;
            return a3;
          case 5:
            return hh(a3), null;
          case 13:
            return H3(P2), b3 = a3.flags, b3 & 4096 ? (a3.flags = b3 & -4097 | 64, a3) : null;
          case 19:
            return H3(P2), null;
          case 4:
            return fh(), null;
          case 10:
            return rg(a3), null;
          case 23:
          case 24:
            return Ki(), null;
          default:
            return null;
        }
      }
      function Mi(a3, b3) {
        try {
          var c3 = "", d3 = b3;
          do
            c3 += Qa(d3), d3 = d3.return;
          while (d3);
          var e3 = c3;
        } catch (f2) {
          e3 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
        }
        return { value: a3, source: b3, stack: e3 };
      }
      function Ni(a3, b3) {
        try {
          console.error(b3.value);
        } catch (c3) {
          setTimeout(function() {
            throw c3;
          });
        }
      }
      var Oi = typeof WeakMap === "function" ? WeakMap : Map;
      function Pi(a3, b3, c3) {
        c3 = zg(-1, c3);
        c3.tag = 3;
        c3.payload = { element: null };
        var d3 = b3.value;
        c3.callback = function() {
          Qi || (Qi = true, Ri = d3);
          Ni(a3, b3);
        };
        return c3;
      }
      function Si(a3, b3, c3) {
        c3 = zg(-1, c3);
        c3.tag = 3;
        var d3 = a3.type.getDerivedStateFromError;
        if (typeof d3 === "function") {
          var e3 = b3.value;
          c3.payload = function() {
            Ni(a3, b3);
            return d3(e3);
          };
        }
        var f2 = a3.stateNode;
        f2 !== null && typeof f2.componentDidCatch === "function" && (c3.callback = function() {
          typeof d3 !== "function" && (Ti === null ? Ti = /* @__PURE__ */ new Set([this]) : Ti.add(this), Ni(a3, b3));
          var c4 = b3.stack;
          this.componentDidCatch(b3.value, { componentStack: c4 !== null ? c4 : "" });
        });
        return c3;
      }
      var Ui = typeof WeakSet === "function" ? WeakSet : Set;
      function Vi(a3) {
        var b3 = a3.ref;
        if (b3 !== null)
          if (typeof b3 === "function")
            try {
              b3(null);
            } catch (c3) {
              Wi(a3, c3);
            }
          else
            b3.current = null;
      }
      function Xi(a3, b3) {
        switch (b3.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            return;
          case 1:
            if (b3.flags & 256 && a3 !== null) {
              var c3 = a3.memoizedProps, d3 = a3.memoizedState;
              a3 = b3.stateNode;
              b3 = a3.getSnapshotBeforeUpdate(b3.elementType === b3.type ? c3 : lg(b3.type, c3), d3);
              a3.__reactInternalSnapshotBeforeUpdate = b3;
            }
            return;
          case 3:
            b3.flags & 256 && qf(b3.stateNode.containerInfo);
            return;
          case 5:
          case 6:
          case 4:
          case 17:
            return;
        }
        throw Error(y3(163));
      }
      function Yi(a3, b3, c3) {
        switch (c3.tag) {
          case 0:
          case 11:
          case 15:
          case 22:
            b3 = c3.updateQueue;
            b3 = b3 !== null ? b3.lastEffect : null;
            if (b3 !== null) {
              a3 = b3 = b3.next;
              do {
                if ((a3.tag & 3) === 3) {
                  var d3 = a3.create;
                  a3.destroy = d3();
                }
                a3 = a3.next;
              } while (a3 !== b3);
            }
            b3 = c3.updateQueue;
            b3 = b3 !== null ? b3.lastEffect : null;
            if (b3 !== null) {
              a3 = b3 = b3.next;
              do {
                var e3 = a3;
                d3 = e3.next;
                e3 = e3.tag;
                (e3 & 4) !== 0 && (e3 & 1) !== 0 && (Zi(c3, a3), $i(c3, a3));
                a3 = d3;
              } while (a3 !== b3);
            }
            return;
          case 1:
            a3 = c3.stateNode;
            c3.flags & 4 && (b3 === null ? a3.componentDidMount() : (d3 = c3.elementType === c3.type ? b3.memoizedProps : lg(c3.type, b3.memoizedProps), a3.componentDidUpdate(d3, b3.memoizedState, a3.__reactInternalSnapshotBeforeUpdate)));
            b3 = c3.updateQueue;
            b3 !== null && Eg(c3, b3, a3);
            return;
          case 3:
            b3 = c3.updateQueue;
            if (b3 !== null) {
              a3 = null;
              if (c3.child !== null)
                switch (c3.child.tag) {
                  case 5:
                    a3 = c3.child.stateNode;
                    break;
                  case 1:
                    a3 = c3.child.stateNode;
                }
              Eg(c3, b3, a3);
            }
            return;
          case 5:
            a3 = c3.stateNode;
            b3 === null && c3.flags & 4 && mf(c3.type, c3.memoizedProps) && a3.focus();
            return;
          case 6:
            return;
          case 4:
            return;
          case 12:
            return;
          case 13:
            c3.memoizedState === null && (c3 = c3.alternate, c3 !== null && (c3 = c3.memoizedState, c3 !== null && (c3 = c3.dehydrated, c3 !== null && Cc(c3))));
            return;
          case 19:
          case 17:
          case 20:
          case 21:
          case 23:
          case 24:
            return;
        }
        throw Error(y3(163));
      }
      function aj(a3, b3) {
        for (var c3 = a3; ; ) {
          if (c3.tag === 5) {
            var d3 = c3.stateNode;
            if (b3)
              d3 = d3.style, typeof d3.setProperty === "function" ? d3.setProperty("display", "none", "important") : d3.display = "none";
            else {
              d3 = c3.stateNode;
              var e3 = c3.memoizedProps.style;
              e3 = e3 !== void 0 && e3 !== null && e3.hasOwnProperty("display") ? e3.display : null;
              d3.style.display = sb("display", e3);
            }
          } else if (c3.tag === 6)
            c3.stateNode.nodeValue = b3 ? "" : c3.memoizedProps;
          else if ((c3.tag !== 23 && c3.tag !== 24 || c3.memoizedState === null || c3 === a3) && c3.child !== null) {
            c3.child.return = c3;
            c3 = c3.child;
            continue;
          }
          if (c3 === a3)
            break;
          for (; c3.sibling === null; ) {
            if (c3.return === null || c3.return === a3)
              return;
            c3 = c3.return;
          }
          c3.sibling.return = c3.return;
          c3 = c3.sibling;
        }
      }
      function bj(a3, b3) {
        if (Mf && typeof Mf.onCommitFiberUnmount === "function")
          try {
            Mf.onCommitFiberUnmount(Lf, b3);
          } catch (f2) {
          }
        switch (b3.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
          case 22:
            a3 = b3.updateQueue;
            if (a3 !== null && (a3 = a3.lastEffect, a3 !== null)) {
              var c3 = a3 = a3.next;
              do {
                var d3 = c3, e3 = d3.destroy;
                d3 = d3.tag;
                if (e3 !== void 0)
                  if ((d3 & 4) !== 0)
                    Zi(b3, c3);
                  else {
                    d3 = b3;
                    try {
                      e3();
                    } catch (f2) {
                      Wi(d3, f2);
                    }
                  }
                c3 = c3.next;
              } while (c3 !== a3);
            }
            break;
          case 1:
            Vi(b3);
            a3 = b3.stateNode;
            if (typeof a3.componentWillUnmount === "function")
              try {
                a3.props = b3.memoizedProps, a3.state = b3.memoizedState, a3.componentWillUnmount();
              } catch (f2) {
                Wi(b3, f2);
              }
            break;
          case 5:
            Vi(b3);
            break;
          case 4:
            cj(a3, b3);
        }
      }
      function dj(a3) {
        a3.alternate = null;
        a3.child = null;
        a3.dependencies = null;
        a3.firstEffect = null;
        a3.lastEffect = null;
        a3.memoizedProps = null;
        a3.memoizedState = null;
        a3.pendingProps = null;
        a3.return = null;
        a3.updateQueue = null;
      }
      function ej(a3) {
        return a3.tag === 5 || a3.tag === 3 || a3.tag === 4;
      }
      function fj(a3) {
        a: {
          for (var b3 = a3.return; b3 !== null; ) {
            if (ej(b3))
              break a;
            b3 = b3.return;
          }
          throw Error(y3(160));
        }
        var c3 = b3;
        b3 = c3.stateNode;
        switch (c3.tag) {
          case 5:
            var d3 = false;
            break;
          case 3:
            b3 = b3.containerInfo;
            d3 = true;
            break;
          case 4:
            b3 = b3.containerInfo;
            d3 = true;
            break;
          default:
            throw Error(y3(161));
        }
        c3.flags & 16 && (pb(b3, ""), c3.flags &= -17);
        a:
          b:
            for (c3 = a3; ; ) {
              for (; c3.sibling === null; ) {
                if (c3.return === null || ej(c3.return)) {
                  c3 = null;
                  break a;
                }
                c3 = c3.return;
              }
              c3.sibling.return = c3.return;
              for (c3 = c3.sibling; c3.tag !== 5 && c3.tag !== 6 && c3.tag !== 18; ) {
                if (c3.flags & 2)
                  continue b;
                if (c3.child === null || c3.tag === 4)
                  continue b;
                else
                  c3.child.return = c3, c3 = c3.child;
              }
              if (!(c3.flags & 2)) {
                c3 = c3.stateNode;
                break a;
              }
            }
        d3 ? gj(a3, c3, b3) : hj(a3, c3, b3);
      }
      function gj(a3, b3, c3) {
        var d3 = a3.tag, e3 = d3 === 5 || d3 === 6;
        if (e3)
          a3 = e3 ? a3.stateNode : a3.stateNode.instance, b3 ? c3.nodeType === 8 ? c3.parentNode.insertBefore(a3, b3) : c3.insertBefore(a3, b3) : (c3.nodeType === 8 ? (b3 = c3.parentNode, b3.insertBefore(a3, c3)) : (b3 = c3, b3.appendChild(a3)), c3 = c3._reactRootContainer, c3 !== null && c3 !== void 0 || b3.onclick !== null || (b3.onclick = jf));
        else if (d3 !== 4 && (a3 = a3.child, a3 !== null))
          for (gj(a3, b3, c3), a3 = a3.sibling; a3 !== null; )
            gj(a3, b3, c3), a3 = a3.sibling;
      }
      function hj(a3, b3, c3) {
        var d3 = a3.tag, e3 = d3 === 5 || d3 === 6;
        if (e3)
          a3 = e3 ? a3.stateNode : a3.stateNode.instance, b3 ? c3.insertBefore(a3, b3) : c3.appendChild(a3);
        else if (d3 !== 4 && (a3 = a3.child, a3 !== null))
          for (hj(a3, b3, c3), a3 = a3.sibling; a3 !== null; )
            hj(a3, b3, c3), a3 = a3.sibling;
      }
      function cj(a3, b3) {
        for (var c3 = b3, d3 = false, e3, f2; ; ) {
          if (!d3) {
            d3 = c3.return;
            a:
              for (; ; ) {
                if (d3 === null)
                  throw Error(y3(160));
                e3 = d3.stateNode;
                switch (d3.tag) {
                  case 5:
                    f2 = false;
                    break a;
                  case 3:
                    e3 = e3.containerInfo;
                    f2 = true;
                    break a;
                  case 4:
                    e3 = e3.containerInfo;
                    f2 = true;
                    break a;
                }
                d3 = d3.return;
              }
            d3 = true;
          }
          if (c3.tag === 5 || c3.tag === 6) {
            a:
              for (var g3 = a3, h2 = c3, k3 = h2; ; )
                if (bj(g3, k3), k3.child !== null && k3.tag !== 4)
                  k3.child.return = k3, k3 = k3.child;
                else {
                  if (k3 === h2)
                    break a;
                  for (; k3.sibling === null; ) {
                    if (k3.return === null || k3.return === h2)
                      break a;
                    k3 = k3.return;
                  }
                  k3.sibling.return = k3.return;
                  k3 = k3.sibling;
                }
            f2 ? (g3 = e3, h2 = c3.stateNode, g3.nodeType === 8 ? g3.parentNode.removeChild(h2) : g3.removeChild(h2)) : e3.removeChild(c3.stateNode);
          } else if (c3.tag === 4) {
            if (c3.child !== null) {
              e3 = c3.stateNode.containerInfo;
              f2 = true;
              c3.child.return = c3;
              c3 = c3.child;
              continue;
            }
          } else if (bj(a3, c3), c3.child !== null) {
            c3.child.return = c3;
            c3 = c3.child;
            continue;
          }
          if (c3 === b3)
            break;
          for (; c3.sibling === null; ) {
            if (c3.return === null || c3.return === b3)
              return;
            c3 = c3.return;
            c3.tag === 4 && (d3 = false);
          }
          c3.sibling.return = c3.return;
          c3 = c3.sibling;
        }
      }
      function ij(a3, b3) {
        switch (b3.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
          case 22:
            var c3 = b3.updateQueue;
            c3 = c3 !== null ? c3.lastEffect : null;
            if (c3 !== null) {
              var d3 = c3 = c3.next;
              do
                (d3.tag & 3) === 3 && (a3 = d3.destroy, d3.destroy = void 0, a3 !== void 0 && a3()), d3 = d3.next;
              while (d3 !== c3);
            }
            return;
          case 1:
            return;
          case 5:
            c3 = b3.stateNode;
            if (c3 != null) {
              d3 = b3.memoizedProps;
              var e3 = a3 !== null ? a3.memoizedProps : d3;
              a3 = b3.type;
              var f2 = b3.updateQueue;
              b3.updateQueue = null;
              if (f2 !== null) {
                c3[xf] = d3;
                a3 === "input" && d3.type === "radio" && d3.name != null && $a(c3, d3);
                wb(a3, e3);
                b3 = wb(a3, d3);
                for (e3 = 0; e3 < f2.length; e3 += 2) {
                  var g3 = f2[e3], h2 = f2[e3 + 1];
                  g3 === "style" ? tb(c3, h2) : g3 === "dangerouslySetInnerHTML" ? ob(c3, h2) : g3 === "children" ? pb(c3, h2) : qa(c3, g3, h2, b3);
                }
                switch (a3) {
                  case "input":
                    ab(c3, d3);
                    break;
                  case "textarea":
                    ib(c3, d3);
                    break;
                  case "select":
                    a3 = c3._wrapperState.wasMultiple, c3._wrapperState.wasMultiple = !!d3.multiple, f2 = d3.value, f2 != null ? fb(c3, !!d3.multiple, f2, false) : a3 !== !!d3.multiple && (d3.defaultValue != null ? fb(c3, !!d3.multiple, d3.defaultValue, true) : fb(c3, !!d3.multiple, d3.multiple ? [] : "", false));
                }
              }
            }
            return;
          case 6:
            if (b3.stateNode === null)
              throw Error(y3(162));
            b3.stateNode.nodeValue = b3.memoizedProps;
            return;
          case 3:
            c3 = b3.stateNode;
            c3.hydrate && (c3.hydrate = false, Cc(c3.containerInfo));
            return;
          case 12:
            return;
          case 13:
            b3.memoizedState !== null && (jj = O3(), aj(b3.child, true));
            kj(b3);
            return;
          case 19:
            kj(b3);
            return;
          case 17:
            return;
          case 23:
          case 24:
            aj(b3, b3.memoizedState !== null);
            return;
        }
        throw Error(y3(163));
      }
      function kj(a3) {
        var b3 = a3.updateQueue;
        if (b3 !== null) {
          a3.updateQueue = null;
          var c3 = a3.stateNode;
          c3 === null && (c3 = a3.stateNode = new Ui());
          b3.forEach(function(b4) {
            var d3 = lj.bind(null, a3, b4);
            c3.has(b4) || (c3.add(b4), b4.then(d3, d3));
          });
        }
      }
      function mj(a3, b3) {
        return a3 !== null && (a3 = a3.memoizedState, a3 === null || a3.dehydrated !== null) ? (b3 = b3.memoizedState, b3 !== null && b3.dehydrated === null) : false;
      }
      var nj = Math.ceil;
      var oj = ra.ReactCurrentDispatcher;
      var pj = ra.ReactCurrentOwner;
      var X3 = 0;
      var U3 = null;
      var Y3 = null;
      var W3 = 0;
      var qj = 0;
      var rj = Bf(0);
      var V2 = 0;
      var sj = null;
      var tj = 0;
      var Dg = 0;
      var Hi = 0;
      var uj = 0;
      var vj = null;
      var jj = 0;
      var Ji = Infinity;
      function wj() {
        Ji = O3() + 500;
      }
      var Z3 = null;
      var Qi = false;
      var Ri = null;
      var Ti = null;
      var xj = false;
      var yj = null;
      var zj = 90;
      var Aj = [];
      var Bj = [];
      var Cj = null;
      var Dj = 0;
      var Ej = null;
      var Fj = -1;
      var Gj = 0;
      var Hj = 0;
      var Ij = null;
      var Jj = false;
      function Hg() {
        return (X3 & 48) !== 0 ? O3() : Fj !== -1 ? Fj : Fj = O3();
      }
      function Ig(a3) {
        a3 = a3.mode;
        if ((a3 & 2) === 0)
          return 1;
        if ((a3 & 4) === 0)
          return eg() === 99 ? 1 : 2;
        Gj === 0 && (Gj = tj);
        if (kg.transition !== 0) {
          Hj !== 0 && (Hj = vj !== null ? vj.pendingLanes : 0);
          a3 = Gj;
          var b3 = 4186112 & ~Hj;
          b3 &= -b3;
          b3 === 0 && (a3 = 4186112 & ~a3, b3 = a3 & -a3, b3 === 0 && (b3 = 8192));
          return b3;
        }
        a3 = eg();
        (X3 & 4) !== 0 && a3 === 98 ? a3 = Xc(12, Gj) : (a3 = Sc(a3), a3 = Xc(a3, Gj));
        return a3;
      }
      function Jg(a3, b3, c3) {
        if (50 < Dj)
          throw Dj = 0, Ej = null, Error(y3(185));
        a3 = Kj(a3, b3);
        if (a3 === null)
          return null;
        $c(a3, b3, c3);
        a3 === U3 && (Hi |= b3, V2 === 4 && Ii(a3, W3));
        var d3 = eg();
        b3 === 1 ? (X3 & 8) !== 0 && (X3 & 48) === 0 ? Lj(a3) : (Mj(a3, c3), X3 === 0 && (wj(), ig())) : ((X3 & 4) === 0 || d3 !== 98 && d3 !== 99 || (Cj === null ? Cj = /* @__PURE__ */ new Set([a3]) : Cj.add(a3)), Mj(a3, c3));
        vj = a3;
      }
      function Kj(a3, b3) {
        a3.lanes |= b3;
        var c3 = a3.alternate;
        c3 !== null && (c3.lanes |= b3);
        c3 = a3;
        for (a3 = a3.return; a3 !== null; )
          a3.childLanes |= b3, c3 = a3.alternate, c3 !== null && (c3.childLanes |= b3), c3 = a3, a3 = a3.return;
        return c3.tag === 3 ? c3.stateNode : null;
      }
      function Mj(a3, b3) {
        for (var c3 = a3.callbackNode, d3 = a3.suspendedLanes, e3 = a3.pingedLanes, f2 = a3.expirationTimes, g3 = a3.pendingLanes; 0 < g3; ) {
          var h2 = 31 - Vc(g3), k3 = 1 << h2, l3 = f2[h2];
          if (l3 === -1) {
            if ((k3 & d3) === 0 || (k3 & e3) !== 0) {
              l3 = b3;
              Rc(k3);
              var n3 = F3;
              f2[h2] = 10 <= n3 ? l3 + 250 : 6 <= n3 ? l3 + 5e3 : -1;
            }
          } else
            l3 <= b3 && (a3.expiredLanes |= k3);
          g3 &= ~k3;
        }
        d3 = Uc(a3, a3 === U3 ? W3 : 0);
        b3 = F3;
        if (d3 === 0)
          c3 !== null && (c3 !== Zf && Pf(c3), a3.callbackNode = null, a3.callbackPriority = 0);
        else {
          if (c3 !== null) {
            if (a3.callbackPriority === b3)
              return;
            c3 !== Zf && Pf(c3);
          }
          b3 === 15 ? (c3 = Lj.bind(null, a3), ag === null ? (ag = [c3], bg = Of(Uf, jg)) : ag.push(c3), c3 = Zf) : b3 === 14 ? c3 = hg(99, Lj.bind(null, a3)) : (c3 = Tc(b3), c3 = hg(c3, Nj.bind(null, a3)));
          a3.callbackPriority = b3;
          a3.callbackNode = c3;
        }
      }
      function Nj(a3) {
        Fj = -1;
        Hj = Gj = 0;
        if ((X3 & 48) !== 0)
          throw Error(y3(327));
        var b3 = a3.callbackNode;
        if (Oj() && a3.callbackNode !== b3)
          return null;
        var c3 = Uc(a3, a3 === U3 ? W3 : 0);
        if (c3 === 0)
          return null;
        var d3 = c3;
        var e3 = X3;
        X3 |= 16;
        var f2 = Pj();
        if (U3 !== a3 || W3 !== d3)
          wj(), Qj(a3, d3);
        do
          try {
            Rj();
            break;
          } catch (h2) {
            Sj(a3, h2);
          }
        while (1);
        qg();
        oj.current = f2;
        X3 = e3;
        Y3 !== null ? d3 = 0 : (U3 = null, W3 = 0, d3 = V2);
        if ((tj & Hi) !== 0)
          Qj(a3, 0);
        else if (d3 !== 0) {
          d3 === 2 && (X3 |= 64, a3.hydrate && (a3.hydrate = false, qf(a3.containerInfo)), c3 = Wc(a3), c3 !== 0 && (d3 = Tj(a3, c3)));
          if (d3 === 1)
            throw b3 = sj, Qj(a3, 0), Ii(a3, c3), Mj(a3, O3()), b3;
          a3.finishedWork = a3.current.alternate;
          a3.finishedLanes = c3;
          switch (d3) {
            case 0:
            case 1:
              throw Error(y3(345));
            case 2:
              Uj(a3);
              break;
            case 3:
              Ii(a3, c3);
              if ((c3 & 62914560) === c3 && (d3 = jj + 500 - O3(), 10 < d3)) {
                if (Uc(a3, 0) !== 0)
                  break;
                e3 = a3.suspendedLanes;
                if ((e3 & c3) !== c3) {
                  Hg();
                  a3.pingedLanes |= a3.suspendedLanes & e3;
                  break;
                }
                a3.timeoutHandle = of(Uj.bind(null, a3), d3);
                break;
              }
              Uj(a3);
              break;
            case 4:
              Ii(a3, c3);
              if ((c3 & 4186112) === c3)
                break;
              d3 = a3.eventTimes;
              for (e3 = -1; 0 < c3; ) {
                var g3 = 31 - Vc(c3);
                f2 = 1 << g3;
                g3 = d3[g3];
                g3 > e3 && (e3 = g3);
                c3 &= ~f2;
              }
              c3 = e3;
              c3 = O3() - c3;
              c3 = (120 > c3 ? 120 : 480 > c3 ? 480 : 1080 > c3 ? 1080 : 1920 > c3 ? 1920 : 3e3 > c3 ? 3e3 : 4320 > c3 ? 4320 : 1960 * nj(c3 / 1960)) - c3;
              if (10 < c3) {
                a3.timeoutHandle = of(Uj.bind(null, a3), c3);
                break;
              }
              Uj(a3);
              break;
            case 5:
              Uj(a3);
              break;
            default:
              throw Error(y3(329));
          }
        }
        Mj(a3, O3());
        return a3.callbackNode === b3 ? Nj.bind(null, a3) : null;
      }
      function Ii(a3, b3) {
        b3 &= ~uj;
        b3 &= ~Hi;
        a3.suspendedLanes |= b3;
        a3.pingedLanes &= ~b3;
        for (a3 = a3.expirationTimes; 0 < b3; ) {
          var c3 = 31 - Vc(b3), d3 = 1 << c3;
          a3[c3] = -1;
          b3 &= ~d3;
        }
      }
      function Lj(a3) {
        if ((X3 & 48) !== 0)
          throw Error(y3(327));
        Oj();
        if (a3 === U3 && (a3.expiredLanes & W3) !== 0) {
          var b3 = W3;
          var c3 = Tj(a3, b3);
          (tj & Hi) !== 0 && (b3 = Uc(a3, b3), c3 = Tj(a3, b3));
        } else
          b3 = Uc(a3, 0), c3 = Tj(a3, b3);
        a3.tag !== 0 && c3 === 2 && (X3 |= 64, a3.hydrate && (a3.hydrate = false, qf(a3.containerInfo)), b3 = Wc(a3), b3 !== 0 && (c3 = Tj(a3, b3)));
        if (c3 === 1)
          throw c3 = sj, Qj(a3, 0), Ii(a3, b3), Mj(a3, O3()), c3;
        a3.finishedWork = a3.current.alternate;
        a3.finishedLanes = b3;
        Uj(a3);
        Mj(a3, O3());
        return null;
      }
      function Vj() {
        if (Cj !== null) {
          var a3 = Cj;
          Cj = null;
          a3.forEach(function(a4) {
            a4.expiredLanes |= 24 & a4.pendingLanes;
            Mj(a4, O3());
          });
        }
        ig();
      }
      function Wj(a3, b3) {
        var c3 = X3;
        X3 |= 1;
        try {
          return a3(b3);
        } finally {
          X3 = c3, X3 === 0 && (wj(), ig());
        }
      }
      function Xj(a3, b3) {
        var c3 = X3;
        X3 &= -2;
        X3 |= 8;
        try {
          return a3(b3);
        } finally {
          X3 = c3, X3 === 0 && (wj(), ig());
        }
      }
      function ni(a3, b3) {
        I3(rj, qj);
        qj |= b3;
        tj |= b3;
      }
      function Ki() {
        qj = rj.current;
        H3(rj);
      }
      function Qj(a3, b3) {
        a3.finishedWork = null;
        a3.finishedLanes = 0;
        var c3 = a3.timeoutHandle;
        c3 !== -1 && (a3.timeoutHandle = -1, pf(c3));
        if (Y3 !== null)
          for (c3 = Y3.return; c3 !== null; ) {
            var d3 = c3;
            switch (d3.tag) {
              case 1:
                d3 = d3.type.childContextTypes;
                d3 !== null && d3 !== void 0 && Gf();
                break;
              case 3:
                fh();
                H3(N3);
                H3(M3);
                uh();
                break;
              case 5:
                hh(d3);
                break;
              case 4:
                fh();
                break;
              case 13:
                H3(P2);
                break;
              case 19:
                H3(P2);
                break;
              case 10:
                rg(d3);
                break;
              case 23:
              case 24:
                Ki();
            }
            c3 = c3.return;
          }
        U3 = a3;
        Y3 = Tg(a3.current, null);
        W3 = qj = tj = b3;
        V2 = 0;
        sj = null;
        uj = Hi = Dg = 0;
      }
      function Sj(a3, b3) {
        do {
          var c3 = Y3;
          try {
            qg();
            vh.current = Gh;
            if (yh) {
              for (var d3 = R3.memoizedState; d3 !== null; ) {
                var e3 = d3.queue;
                e3 !== null && (e3.pending = null);
                d3 = d3.next;
              }
              yh = false;
            }
            xh = 0;
            T2 = S3 = R3 = null;
            zh = false;
            pj.current = null;
            if (c3 === null || c3.return === null) {
              V2 = 1;
              sj = b3;
              Y3 = null;
              break;
            }
            a: {
              var f2 = a3, g3 = c3.return, h2 = c3, k3 = b3;
              b3 = W3;
              h2.flags |= 2048;
              h2.firstEffect = h2.lastEffect = null;
              if (k3 !== null && typeof k3 === "object" && typeof k3.then === "function") {
                var l3 = k3;
                if ((h2.mode & 2) === 0) {
                  var n3 = h2.alternate;
                  n3 ? (h2.updateQueue = n3.updateQueue, h2.memoizedState = n3.memoizedState, h2.lanes = n3.lanes) : (h2.updateQueue = null, h2.memoizedState = null);
                }
                var A2 = (P2.current & 1) !== 0, p2 = g3;
                do {
                  var C2;
                  if (C2 = p2.tag === 13) {
                    var x3 = p2.memoizedState;
                    if (x3 !== null)
                      C2 = x3.dehydrated !== null ? true : false;
                    else {
                      var w3 = p2.memoizedProps;
                      C2 = w3.fallback === void 0 ? false : w3.unstable_avoidThisFallback !== true ? true : A2 ? false : true;
                    }
                  }
                  if (C2) {
                    var z3 = p2.updateQueue;
                    if (z3 === null) {
                      var u3 = /* @__PURE__ */ new Set();
                      u3.add(l3);
                      p2.updateQueue = u3;
                    } else
                      z3.add(l3);
                    if ((p2.mode & 2) === 0) {
                      p2.flags |= 64;
                      h2.flags |= 16384;
                      h2.flags &= -2981;
                      if (h2.tag === 1)
                        if (h2.alternate === null)
                          h2.tag = 17;
                        else {
                          var t3 = zg(-1, 1);
                          t3.tag = 2;
                          Ag(h2, t3);
                        }
                      h2.lanes |= 1;
                      break a;
                    }
                    k3 = void 0;
                    h2 = b3;
                    var q3 = f2.pingCache;
                    q3 === null ? (q3 = f2.pingCache = new Oi(), k3 = /* @__PURE__ */ new Set(), q3.set(l3, k3)) : (k3 = q3.get(l3), k3 === void 0 && (k3 = /* @__PURE__ */ new Set(), q3.set(l3, k3)));
                    if (!k3.has(h2)) {
                      k3.add(h2);
                      var v3 = Yj.bind(null, f2, l3, h2);
                      l3.then(v3, v3);
                    }
                    p2.flags |= 4096;
                    p2.lanes = b3;
                    break a;
                  }
                  p2 = p2.return;
                } while (p2 !== null);
                k3 = Error((Ra(h2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
              }
              V2 !== 5 && (V2 = 2);
              k3 = Mi(k3, h2);
              p2 = g3;
              do {
                switch (p2.tag) {
                  case 3:
                    f2 = k3;
                    p2.flags |= 4096;
                    b3 &= -b3;
                    p2.lanes |= b3;
                    var J2 = Pi(p2, f2, b3);
                    Bg(p2, J2);
                    break a;
                  case 1:
                    f2 = k3;
                    var K2 = p2.type, Q3 = p2.stateNode;
                    if ((p2.flags & 64) === 0 && (typeof K2.getDerivedStateFromError === "function" || Q3 !== null && typeof Q3.componentDidCatch === "function" && (Ti === null || !Ti.has(Q3)))) {
                      p2.flags |= 4096;
                      b3 &= -b3;
                      p2.lanes |= b3;
                      var L3 = Si(p2, f2, b3);
                      Bg(p2, L3);
                      break a;
                    }
                }
                p2 = p2.return;
              } while (p2 !== null);
            }
            Zj(c3);
          } catch (va) {
            b3 = va;
            Y3 === c3 && c3 !== null && (Y3 = c3 = c3.return);
            continue;
          }
          break;
        } while (1);
      }
      function Pj() {
        var a3 = oj.current;
        oj.current = Gh;
        return a3 === null ? Gh : a3;
      }
      function Tj(a3, b3) {
        var c3 = X3;
        X3 |= 16;
        var d3 = Pj();
        U3 === a3 && W3 === b3 || Qj(a3, b3);
        do
          try {
            ak();
            break;
          } catch (e3) {
            Sj(a3, e3);
          }
        while (1);
        qg();
        X3 = c3;
        oj.current = d3;
        if (Y3 !== null)
          throw Error(y3(261));
        U3 = null;
        W3 = 0;
        return V2;
      }
      function ak() {
        for (; Y3 !== null; )
          bk(Y3);
      }
      function Rj() {
        for (; Y3 !== null && !Qf(); )
          bk(Y3);
      }
      function bk(a3) {
        var b3 = ck(a3.alternate, a3, qj);
        a3.memoizedProps = a3.pendingProps;
        b3 === null ? Zj(a3) : Y3 = b3;
        pj.current = null;
      }
      function Zj(a3) {
        var b3 = a3;
        do {
          var c3 = b3.alternate;
          a3 = b3.return;
          if ((b3.flags & 2048) === 0) {
            c3 = Gi(c3, b3, qj);
            if (c3 !== null) {
              Y3 = c3;
              return;
            }
            c3 = b3;
            if (c3.tag !== 24 && c3.tag !== 23 || c3.memoizedState === null || (qj & 1073741824) !== 0 || (c3.mode & 4) === 0) {
              for (var d3 = 0, e3 = c3.child; e3 !== null; )
                d3 |= e3.lanes | e3.childLanes, e3 = e3.sibling;
              c3.childLanes = d3;
            }
            a3 !== null && (a3.flags & 2048) === 0 && (a3.firstEffect === null && (a3.firstEffect = b3.firstEffect), b3.lastEffect !== null && (a3.lastEffect !== null && (a3.lastEffect.nextEffect = b3.firstEffect), a3.lastEffect = b3.lastEffect), 1 < b3.flags && (a3.lastEffect !== null ? a3.lastEffect.nextEffect = b3 : a3.firstEffect = b3, a3.lastEffect = b3));
          } else {
            c3 = Li(b3);
            if (c3 !== null) {
              c3.flags &= 2047;
              Y3 = c3;
              return;
            }
            a3 !== null && (a3.firstEffect = a3.lastEffect = null, a3.flags |= 2048);
          }
          b3 = b3.sibling;
          if (b3 !== null) {
            Y3 = b3;
            return;
          }
          Y3 = b3 = a3;
        } while (b3 !== null);
        V2 === 0 && (V2 = 5);
      }
      function Uj(a3) {
        var b3 = eg();
        gg(99, dk.bind(null, a3, b3));
        return null;
      }
      function dk(a3, b3) {
        do
          Oj();
        while (yj !== null);
        if ((X3 & 48) !== 0)
          throw Error(y3(327));
        var c3 = a3.finishedWork;
        if (c3 === null)
          return null;
        a3.finishedWork = null;
        a3.finishedLanes = 0;
        if (c3 === a3.current)
          throw Error(y3(177));
        a3.callbackNode = null;
        var d3 = c3.lanes | c3.childLanes, e3 = d3, f2 = a3.pendingLanes & ~e3;
        a3.pendingLanes = e3;
        a3.suspendedLanes = 0;
        a3.pingedLanes = 0;
        a3.expiredLanes &= e3;
        a3.mutableReadLanes &= e3;
        a3.entangledLanes &= e3;
        e3 = a3.entanglements;
        for (var g3 = a3.eventTimes, h2 = a3.expirationTimes; 0 < f2; ) {
          var k3 = 31 - Vc(f2), l3 = 1 << k3;
          e3[k3] = 0;
          g3[k3] = -1;
          h2[k3] = -1;
          f2 &= ~l3;
        }
        Cj !== null && (d3 & 24) === 0 && Cj.has(a3) && Cj.delete(a3);
        a3 === U3 && (Y3 = U3 = null, W3 = 0);
        1 < c3.flags ? c3.lastEffect !== null ? (c3.lastEffect.nextEffect = c3, d3 = c3.firstEffect) : d3 = c3 : d3 = c3.firstEffect;
        if (d3 !== null) {
          e3 = X3;
          X3 |= 32;
          pj.current = null;
          kf = fd;
          g3 = Ne2();
          if (Oe2(g3)) {
            if ("selectionStart" in g3)
              h2 = { start: g3.selectionStart, end: g3.selectionEnd };
            else
              a:
                if (h2 = (h2 = g3.ownerDocument) && h2.defaultView || window, (l3 = h2.getSelection && h2.getSelection()) && l3.rangeCount !== 0) {
                  h2 = l3.anchorNode;
                  f2 = l3.anchorOffset;
                  k3 = l3.focusNode;
                  l3 = l3.focusOffset;
                  try {
                    h2.nodeType, k3.nodeType;
                  } catch (va) {
                    h2 = null;
                    break a;
                  }
                  var n3 = 0, A2 = -1, p2 = -1, C2 = 0, x3 = 0, w3 = g3, z3 = null;
                  b:
                    for (; ; ) {
                      for (var u3; ; ) {
                        w3 !== h2 || f2 !== 0 && w3.nodeType !== 3 || (A2 = n3 + f2);
                        w3 !== k3 || l3 !== 0 && w3.nodeType !== 3 || (p2 = n3 + l3);
                        w3.nodeType === 3 && (n3 += w3.nodeValue.length);
                        if ((u3 = w3.firstChild) === null)
                          break;
                        z3 = w3;
                        w3 = u3;
                      }
                      for (; ; ) {
                        if (w3 === g3)
                          break b;
                        z3 === h2 && ++C2 === f2 && (A2 = n3);
                        z3 === k3 && ++x3 === l3 && (p2 = n3);
                        if ((u3 = w3.nextSibling) !== null)
                          break;
                        w3 = z3;
                        z3 = w3.parentNode;
                      }
                      w3 = u3;
                    }
                  h2 = A2 === -1 || p2 === -1 ? null : { start: A2, end: p2 };
                } else
                  h2 = null;
            h2 = h2 || { start: 0, end: 0 };
          } else
            h2 = null;
          lf = { focusedElem: g3, selectionRange: h2 };
          fd = false;
          Ij = null;
          Jj = false;
          Z3 = d3;
          do
            try {
              ek();
            } catch (va) {
              if (Z3 === null)
                throw Error(y3(330));
              Wi(Z3, va);
              Z3 = Z3.nextEffect;
            }
          while (Z3 !== null);
          Ij = null;
          Z3 = d3;
          do
            try {
              for (g3 = a3; Z3 !== null; ) {
                var t3 = Z3.flags;
                t3 & 16 && pb(Z3.stateNode, "");
                if (t3 & 128) {
                  var q3 = Z3.alternate;
                  if (q3 !== null) {
                    var v3 = q3.ref;
                    v3 !== null && (typeof v3 === "function" ? v3(null) : v3.current = null);
                  }
                }
                switch (t3 & 1038) {
                  case 2:
                    fj(Z3);
                    Z3.flags &= -3;
                    break;
                  case 6:
                    fj(Z3);
                    Z3.flags &= -3;
                    ij(Z3.alternate, Z3);
                    break;
                  case 1024:
                    Z3.flags &= -1025;
                    break;
                  case 1028:
                    Z3.flags &= -1025;
                    ij(Z3.alternate, Z3);
                    break;
                  case 4:
                    ij(Z3.alternate, Z3);
                    break;
                  case 8:
                    h2 = Z3;
                    cj(g3, h2);
                    var J2 = h2.alternate;
                    dj(h2);
                    J2 !== null && dj(J2);
                }
                Z3 = Z3.nextEffect;
              }
            } catch (va) {
              if (Z3 === null)
                throw Error(y3(330));
              Wi(Z3, va);
              Z3 = Z3.nextEffect;
            }
          while (Z3 !== null);
          v3 = lf;
          q3 = Ne2();
          t3 = v3.focusedElem;
          g3 = v3.selectionRange;
          if (q3 !== t3 && t3 && t3.ownerDocument && Me2(t3.ownerDocument.documentElement, t3)) {
            g3 !== null && Oe2(t3) && (q3 = g3.start, v3 = g3.end, v3 === void 0 && (v3 = q3), "selectionStart" in t3 ? (t3.selectionStart = q3, t3.selectionEnd = Math.min(v3, t3.value.length)) : (v3 = (q3 = t3.ownerDocument || document) && q3.defaultView || window, v3.getSelection && (v3 = v3.getSelection(), h2 = t3.textContent.length, J2 = Math.min(g3.start, h2), g3 = g3.end === void 0 ? J2 : Math.min(g3.end, h2), !v3.extend && J2 > g3 && (h2 = g3, g3 = J2, J2 = h2), h2 = Le(t3, J2), f2 = Le(t3, g3), h2 && f2 && (v3.rangeCount !== 1 || v3.anchorNode !== h2.node || v3.anchorOffset !== h2.offset || v3.focusNode !== f2.node || v3.focusOffset !== f2.offset) && (q3 = q3.createRange(), q3.setStart(h2.node, h2.offset), v3.removeAllRanges(), J2 > g3 ? (v3.addRange(q3), v3.extend(f2.node, f2.offset)) : (q3.setEnd(f2.node, f2.offset), v3.addRange(q3))))));
            q3 = [];
            for (v3 = t3; v3 = v3.parentNode; )
              v3.nodeType === 1 && q3.push({ element: v3, left: v3.scrollLeft, top: v3.scrollTop });
            typeof t3.focus === "function" && t3.focus();
            for (t3 = 0; t3 < q3.length; t3++)
              v3 = q3[t3], v3.element.scrollLeft = v3.left, v3.element.scrollTop = v3.top;
          }
          fd = !!kf;
          lf = kf = null;
          a3.current = c3;
          Z3 = d3;
          do
            try {
              for (t3 = a3; Z3 !== null; ) {
                var K2 = Z3.flags;
                K2 & 36 && Yi(t3, Z3.alternate, Z3);
                if (K2 & 128) {
                  q3 = void 0;
                  var Q3 = Z3.ref;
                  if (Q3 !== null) {
                    var L3 = Z3.stateNode;
                    switch (Z3.tag) {
                      case 5:
                        q3 = L3;
                        break;
                      default:
                        q3 = L3;
                    }
                    typeof Q3 === "function" ? Q3(q3) : Q3.current = q3;
                  }
                }
                Z3 = Z3.nextEffect;
              }
            } catch (va) {
              if (Z3 === null)
                throw Error(y3(330));
              Wi(Z3, va);
              Z3 = Z3.nextEffect;
            }
          while (Z3 !== null);
          Z3 = null;
          $f();
          X3 = e3;
        } else
          a3.current = c3;
        if (xj)
          xj = false, yj = a3, zj = b3;
        else
          for (Z3 = d3; Z3 !== null; )
            b3 = Z3.nextEffect, Z3.nextEffect = null, Z3.flags & 8 && (K2 = Z3, K2.sibling = null, K2.stateNode = null), Z3 = b3;
        d3 = a3.pendingLanes;
        d3 === 0 && (Ti = null);
        d3 === 1 ? a3 === Ej ? Dj++ : (Dj = 0, Ej = a3) : Dj = 0;
        c3 = c3.stateNode;
        if (Mf && typeof Mf.onCommitFiberRoot === "function")
          try {
            Mf.onCommitFiberRoot(Lf, c3, void 0, (c3.current.flags & 64) === 64);
          } catch (va) {
          }
        Mj(a3, O3());
        if (Qi)
          throw Qi = false, a3 = Ri, Ri = null, a3;
        if ((X3 & 8) !== 0)
          return null;
        ig();
        return null;
      }
      function ek() {
        for (; Z3 !== null; ) {
          var a3 = Z3.alternate;
          Jj || Ij === null || ((Z3.flags & 8) !== 0 ? dc(Z3, Ij) && (Jj = true) : Z3.tag === 13 && mj(a3, Z3) && dc(Z3, Ij) && (Jj = true));
          var b3 = Z3.flags;
          (b3 & 256) !== 0 && Xi(a3, Z3);
          (b3 & 512) === 0 || xj || (xj = true, hg(97, function() {
            Oj();
            return null;
          }));
          Z3 = Z3.nextEffect;
        }
      }
      function Oj() {
        if (zj !== 90) {
          var a3 = 97 < zj ? 97 : zj;
          zj = 90;
          return gg(a3, fk);
        }
        return false;
      }
      function $i(a3, b3) {
        Aj.push(b3, a3);
        xj || (xj = true, hg(97, function() {
          Oj();
          return null;
        }));
      }
      function Zi(a3, b3) {
        Bj.push(b3, a3);
        xj || (xj = true, hg(97, function() {
          Oj();
          return null;
        }));
      }
      function fk() {
        if (yj === null)
          return false;
        var a3 = yj;
        yj = null;
        if ((X3 & 48) !== 0)
          throw Error(y3(331));
        var b3 = X3;
        X3 |= 32;
        var c3 = Bj;
        Bj = [];
        for (var d3 = 0; d3 < c3.length; d3 += 2) {
          var e3 = c3[d3], f2 = c3[d3 + 1], g3 = e3.destroy;
          e3.destroy = void 0;
          if (typeof g3 === "function")
            try {
              g3();
            } catch (k3) {
              if (f2 === null)
                throw Error(y3(330));
              Wi(f2, k3);
            }
        }
        c3 = Aj;
        Aj = [];
        for (d3 = 0; d3 < c3.length; d3 += 2) {
          e3 = c3[d3];
          f2 = c3[d3 + 1];
          try {
            var h2 = e3.create;
            e3.destroy = h2();
          } catch (k3) {
            if (f2 === null)
              throw Error(y3(330));
            Wi(f2, k3);
          }
        }
        for (h2 = a3.current.firstEffect; h2 !== null; )
          a3 = h2.nextEffect, h2.nextEffect = null, h2.flags & 8 && (h2.sibling = null, h2.stateNode = null), h2 = a3;
        X3 = b3;
        ig();
        return true;
      }
      function gk(a3, b3, c3) {
        b3 = Mi(c3, b3);
        b3 = Pi(a3, b3, 1);
        Ag(a3, b3);
        b3 = Hg();
        a3 = Kj(a3, 1);
        a3 !== null && ($c(a3, 1, b3), Mj(a3, b3));
      }
      function Wi(a3, b3) {
        if (a3.tag === 3)
          gk(a3, a3, b3);
        else
          for (var c3 = a3.return; c3 !== null; ) {
            if (c3.tag === 3) {
              gk(c3, a3, b3);
              break;
            } else if (c3.tag === 1) {
              var d3 = c3.stateNode;
              if (typeof c3.type.getDerivedStateFromError === "function" || typeof d3.componentDidCatch === "function" && (Ti === null || !Ti.has(d3))) {
                a3 = Mi(b3, a3);
                var e3 = Si(c3, a3, 1);
                Ag(c3, e3);
                e3 = Hg();
                c3 = Kj(c3, 1);
                if (c3 !== null)
                  $c(c3, 1, e3), Mj(c3, e3);
                else if (typeof d3.componentDidCatch === "function" && (Ti === null || !Ti.has(d3)))
                  try {
                    d3.componentDidCatch(b3, a3);
                  } catch (f2) {
                  }
                break;
              }
            }
            c3 = c3.return;
          }
      }
      function Yj(a3, b3, c3) {
        var d3 = a3.pingCache;
        d3 !== null && d3.delete(b3);
        b3 = Hg();
        a3.pingedLanes |= a3.suspendedLanes & c3;
        U3 === a3 && (W3 & c3) === c3 && (V2 === 4 || V2 === 3 && (W3 & 62914560) === W3 && 500 > O3() - jj ? Qj(a3, 0) : uj |= c3);
        Mj(a3, b3);
      }
      function lj(a3, b3) {
        var c3 = a3.stateNode;
        c3 !== null && c3.delete(b3);
        b3 = 0;
        b3 === 0 && (b3 = a3.mode, (b3 & 2) === 0 ? b3 = 1 : (b3 & 4) === 0 ? b3 = eg() === 99 ? 1 : 2 : (Gj === 0 && (Gj = tj), b3 = Yc(62914560 & ~Gj), b3 === 0 && (b3 = 4194304)));
        c3 = Hg();
        a3 = Kj(a3, b3);
        a3 !== null && ($c(a3, b3, c3), Mj(a3, c3));
      }
      var ck;
      ck = function(a3, b3, c3) {
        var d3 = b3.lanes;
        if (a3 !== null)
          if (a3.memoizedProps !== b3.pendingProps || N3.current)
            ug = true;
          else if ((c3 & d3) !== 0)
            ug = (a3.flags & 16384) !== 0 ? true : false;
          else {
            ug = false;
            switch (b3.tag) {
              case 3:
                ri(b3);
                sh();
                break;
              case 5:
                gh(b3);
                break;
              case 1:
                Ff(b3.type) && Jf(b3);
                break;
              case 4:
                eh(b3, b3.stateNode.containerInfo);
                break;
              case 10:
                d3 = b3.memoizedProps.value;
                var e3 = b3.type._context;
                I3(mg, e3._currentValue);
                e3._currentValue = d3;
                break;
              case 13:
                if (b3.memoizedState !== null) {
                  if ((c3 & b3.child.childLanes) !== 0)
                    return ti(a3, b3, c3);
                  I3(P2, P2.current & 1);
                  b3 = hi(a3, b3, c3);
                  return b3 !== null ? b3.sibling : null;
                }
                I3(P2, P2.current & 1);
                break;
              case 19:
                d3 = (c3 & b3.childLanes) !== 0;
                if ((a3.flags & 64) !== 0) {
                  if (d3)
                    return Ai(a3, b3, c3);
                  b3.flags |= 64;
                }
                e3 = b3.memoizedState;
                e3 !== null && (e3.rendering = null, e3.tail = null, e3.lastEffect = null);
                I3(P2, P2.current);
                if (d3)
                  break;
                else
                  return null;
              case 23:
              case 24:
                return b3.lanes = 0, mi(a3, b3, c3);
            }
            return hi(a3, b3, c3);
          }
        else
          ug = false;
        b3.lanes = 0;
        switch (b3.tag) {
          case 2:
            d3 = b3.type;
            a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
            a3 = b3.pendingProps;
            e3 = Ef(b3, M3.current);
            tg(b3, c3);
            e3 = Ch(null, b3, d3, a3, e3, c3);
            b3.flags |= 1;
            if (typeof e3 === "object" && e3 !== null && typeof e3.render === "function" && e3.$$typeof === void 0) {
              b3.tag = 1;
              b3.memoizedState = null;
              b3.updateQueue = null;
              if (Ff(d3)) {
                var f2 = true;
                Jf(b3);
              } else
                f2 = false;
              b3.memoizedState = e3.state !== null && e3.state !== void 0 ? e3.state : null;
              xg(b3);
              var g3 = d3.getDerivedStateFromProps;
              typeof g3 === "function" && Gg(b3, d3, g3, a3);
              e3.updater = Kg;
              b3.stateNode = e3;
              e3._reactInternals = b3;
              Og(b3, d3, a3, c3);
              b3 = qi(null, b3, d3, true, f2, c3);
            } else
              b3.tag = 0, fi(null, b3, e3, c3), b3 = b3.child;
            return b3;
          case 16:
            e3 = b3.elementType;
            a: {
              a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
              a3 = b3.pendingProps;
              f2 = e3._init;
              e3 = f2(e3._payload);
              b3.type = e3;
              f2 = b3.tag = hk(e3);
              a3 = lg(e3, a3);
              switch (f2) {
                case 0:
                  b3 = li(null, b3, e3, a3, c3);
                  break a;
                case 1:
                  b3 = pi(null, b3, e3, a3, c3);
                  break a;
                case 11:
                  b3 = gi(null, b3, e3, a3, c3);
                  break a;
                case 14:
                  b3 = ii(null, b3, e3, lg(e3.type, a3), d3, c3);
                  break a;
              }
              throw Error(y3(306, e3, ""));
            }
            return b3;
          case 0:
            return d3 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d3 ? e3 : lg(d3, e3), li(a3, b3, d3, e3, c3);
          case 1:
            return d3 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d3 ? e3 : lg(d3, e3), pi(a3, b3, d3, e3, c3);
          case 3:
            ri(b3);
            d3 = b3.updateQueue;
            if (a3 === null || d3 === null)
              throw Error(y3(282));
            d3 = b3.pendingProps;
            e3 = b3.memoizedState;
            e3 = e3 !== null ? e3.element : null;
            yg(a3, b3);
            Cg(b3, d3, null, c3);
            d3 = b3.memoizedState.element;
            if (d3 === e3)
              sh(), b3 = hi(a3, b3, c3);
            else {
              e3 = b3.stateNode;
              if (f2 = e3.hydrate)
                kh = rf(b3.stateNode.containerInfo.firstChild), jh = b3, f2 = lh = true;
              if (f2) {
                a3 = e3.mutableSourceEagerHydrationData;
                if (a3 != null)
                  for (e3 = 0; e3 < a3.length; e3 += 2)
                    f2 = a3[e3], f2._workInProgressVersionPrimary = a3[e3 + 1], th.push(f2);
                c3 = Zg(b3, null, d3, c3);
                for (b3.child = c3; c3; )
                  c3.flags = c3.flags & -3 | 1024, c3 = c3.sibling;
              } else
                fi(a3, b3, d3, c3), sh();
              b3 = b3.child;
            }
            return b3;
          case 5:
            return gh(b3), a3 === null && ph(b3), d3 = b3.type, e3 = b3.pendingProps, f2 = a3 !== null ? a3.memoizedProps : null, g3 = e3.children, nf(d3, e3) ? g3 = null : f2 !== null && nf(d3, f2) && (b3.flags |= 16), oi(a3, b3), fi(a3, b3, g3, c3), b3.child;
          case 6:
            return a3 === null && ph(b3), null;
          case 13:
            return ti(a3, b3, c3);
          case 4:
            return eh(b3, b3.stateNode.containerInfo), d3 = b3.pendingProps, a3 === null ? b3.child = Yg(b3, null, d3, c3) : fi(a3, b3, d3, c3), b3.child;
          case 11:
            return d3 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d3 ? e3 : lg(d3, e3), gi(a3, b3, d3, e3, c3);
          case 7:
            return fi(a3, b3, b3.pendingProps, c3), b3.child;
          case 8:
            return fi(a3, b3, b3.pendingProps.children, c3), b3.child;
          case 12:
            return fi(a3, b3, b3.pendingProps.children, c3), b3.child;
          case 10:
            a: {
              d3 = b3.type._context;
              e3 = b3.pendingProps;
              g3 = b3.memoizedProps;
              f2 = e3.value;
              var h2 = b3.type._context;
              I3(mg, h2._currentValue);
              h2._currentValue = f2;
              if (g3 !== null)
                if (h2 = g3.value, f2 = He2(h2, f2) ? 0 : (typeof d3._calculateChangedBits === "function" ? d3._calculateChangedBits(h2, f2) : 1073741823) | 0, f2 === 0) {
                  if (g3.children === e3.children && !N3.current) {
                    b3 = hi(a3, b3, c3);
                    break a;
                  }
                } else
                  for (h2 = b3.child, h2 !== null && (h2.return = b3); h2 !== null; ) {
                    var k3 = h2.dependencies;
                    if (k3 !== null) {
                      g3 = h2.child;
                      for (var l3 = k3.firstContext; l3 !== null; ) {
                        if (l3.context === d3 && (l3.observedBits & f2) !== 0) {
                          h2.tag === 1 && (l3 = zg(-1, c3 & -c3), l3.tag = 2, Ag(h2, l3));
                          h2.lanes |= c3;
                          l3 = h2.alternate;
                          l3 !== null && (l3.lanes |= c3);
                          sg(h2.return, c3);
                          k3.lanes |= c3;
                          break;
                        }
                        l3 = l3.next;
                      }
                    } else
                      g3 = h2.tag === 10 ? h2.type === b3.type ? null : h2.child : h2.child;
                    if (g3 !== null)
                      g3.return = h2;
                    else
                      for (g3 = h2; g3 !== null; ) {
                        if (g3 === b3) {
                          g3 = null;
                          break;
                        }
                        h2 = g3.sibling;
                        if (h2 !== null) {
                          h2.return = g3.return;
                          g3 = h2;
                          break;
                        }
                        g3 = g3.return;
                      }
                    h2 = g3;
                  }
              fi(a3, b3, e3.children, c3);
              b3 = b3.child;
            }
            return b3;
          case 9:
            return e3 = b3.type, f2 = b3.pendingProps, d3 = f2.children, tg(b3, c3), e3 = vg(e3, f2.unstable_observedBits), d3 = d3(e3), b3.flags |= 1, fi(a3, b3, d3, c3), b3.child;
          case 14:
            return e3 = b3.type, f2 = lg(e3, b3.pendingProps), f2 = lg(e3.type, f2), ii(a3, b3, e3, f2, d3, c3);
          case 15:
            return ki(a3, b3, b3.type, b3.pendingProps, d3, c3);
          case 17:
            return d3 = b3.type, e3 = b3.pendingProps, e3 = b3.elementType === d3 ? e3 : lg(d3, e3), a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2), b3.tag = 1, Ff(d3) ? (a3 = true, Jf(b3)) : a3 = false, tg(b3, c3), Mg(b3, d3, e3), Og(b3, d3, e3, c3), qi(null, b3, d3, true, a3, c3);
          case 19:
            return Ai(a3, b3, c3);
          case 23:
            return mi(a3, b3, c3);
          case 24:
            return mi(a3, b3, c3);
        }
        throw Error(y3(156, b3.tag));
      };
      function ik(a3, b3, c3, d3) {
        this.tag = a3;
        this.key = c3;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b3;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d3;
        this.flags = 0;
        this.lastEffect = this.firstEffect = this.nextEffect = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function nh(a3, b3, c3, d3) {
        return new ik(a3, b3, c3, d3);
      }
      function ji(a3) {
        a3 = a3.prototype;
        return !(!a3 || !a3.isReactComponent);
      }
      function hk(a3) {
        if (typeof a3 === "function")
          return ji(a3) ? 1 : 0;
        if (a3 !== void 0 && a3 !== null) {
          a3 = a3.$$typeof;
          if (a3 === Aa)
            return 11;
          if (a3 === Da)
            return 14;
        }
        return 2;
      }
      function Tg(a3, b3) {
        var c3 = a3.alternate;
        c3 === null ? (c3 = nh(a3.tag, b3, a3.key, a3.mode), c3.elementType = a3.elementType, c3.type = a3.type, c3.stateNode = a3.stateNode, c3.alternate = a3, a3.alternate = c3) : (c3.pendingProps = b3, c3.type = a3.type, c3.flags = 0, c3.nextEffect = null, c3.firstEffect = null, c3.lastEffect = null);
        c3.childLanes = a3.childLanes;
        c3.lanes = a3.lanes;
        c3.child = a3.child;
        c3.memoizedProps = a3.memoizedProps;
        c3.memoizedState = a3.memoizedState;
        c3.updateQueue = a3.updateQueue;
        b3 = a3.dependencies;
        c3.dependencies = b3 === null ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
        c3.sibling = a3.sibling;
        c3.index = a3.index;
        c3.ref = a3.ref;
        return c3;
      }
      function Vg(a3, b3, c3, d3, e3, f2) {
        var g3 = 2;
        d3 = a3;
        if (typeof a3 === "function")
          ji(a3) && (g3 = 1);
        else if (typeof a3 === "string")
          g3 = 5;
        else
          a:
            switch (a3) {
              case ua:
                return Xg(c3.children, e3, f2, b3);
              case Ha:
                g3 = 8;
                e3 |= 16;
                break;
              case wa:
                g3 = 8;
                e3 |= 1;
                break;
              case xa:
                return a3 = nh(12, c3, b3, e3 | 8), a3.elementType = xa, a3.type = xa, a3.lanes = f2, a3;
              case Ba:
                return a3 = nh(13, c3, b3, e3), a3.type = Ba, a3.elementType = Ba, a3.lanes = f2, a3;
              case Ca:
                return a3 = nh(19, c3, b3, e3), a3.elementType = Ca, a3.lanes = f2, a3;
              case Ia:
                return vi(c3, e3, f2, b3);
              case Ja:
                return a3 = nh(24, c3, b3, e3), a3.elementType = Ja, a3.lanes = f2, a3;
              default:
                if (typeof a3 === "object" && a3 !== null)
                  switch (a3.$$typeof) {
                    case ya:
                      g3 = 10;
                      break a;
                    case za:
                      g3 = 9;
                      break a;
                    case Aa:
                      g3 = 11;
                      break a;
                    case Da:
                      g3 = 14;
                      break a;
                    case Ea:
                      g3 = 16;
                      d3 = null;
                      break a;
                    case Fa:
                      g3 = 22;
                      break a;
                  }
                throw Error(y3(130, a3 == null ? a3 : typeof a3, ""));
            }
        b3 = nh(g3, c3, b3, e3);
        b3.elementType = a3;
        b3.type = d3;
        b3.lanes = f2;
        return b3;
      }
      function Xg(a3, b3, c3, d3) {
        a3 = nh(7, a3, d3, b3);
        a3.lanes = c3;
        return a3;
      }
      function vi(a3, b3, c3, d3) {
        a3 = nh(23, a3, d3, b3);
        a3.elementType = Ia;
        a3.lanes = c3;
        return a3;
      }
      function Ug(a3, b3, c3) {
        a3 = nh(6, a3, null, b3);
        a3.lanes = c3;
        return a3;
      }
      function Wg(a3, b3, c3) {
        b3 = nh(4, a3.children !== null ? a3.children : [], a3.key, b3);
        b3.lanes = c3;
        b3.stateNode = { containerInfo: a3.containerInfo, pendingChildren: null, implementation: a3.implementation };
        return b3;
      }
      function jk(a3, b3, c3) {
        this.tag = b3;
        this.containerInfo = a3;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.pendingContext = this.context = null;
        this.hydrate = c3;
        this.callbackNode = null;
        this.callbackPriority = 0;
        this.eventTimes = Zc(0);
        this.expirationTimes = Zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = Zc(0);
        this.mutableSourceEagerHydrationData = null;
      }
      function kk(a3, b3, c3) {
        var d3 = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        return { $$typeof: ta, key: d3 == null ? null : "" + d3, children: a3, containerInfo: b3, implementation: c3 };
      }
      function lk(a3, b3, c3, d3) {
        var e3 = b3.current, f2 = Hg(), g3 = Ig(e3);
        a:
          if (c3) {
            c3 = c3._reactInternals;
            b: {
              if (Zb(c3) !== c3 || c3.tag !== 1)
                throw Error(y3(170));
              var h2 = c3;
              do {
                switch (h2.tag) {
                  case 3:
                    h2 = h2.stateNode.context;
                    break b;
                  case 1:
                    if (Ff(h2.type)) {
                      h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                      break b;
                    }
                }
                h2 = h2.return;
              } while (h2 !== null);
              throw Error(y3(171));
            }
            if (c3.tag === 1) {
              var k3 = c3.type;
              if (Ff(k3)) {
                c3 = If(c3, k3, h2);
                break a;
              }
            }
            c3 = h2;
          } else
            c3 = Cf;
        b3.context === null ? b3.context = c3 : b3.pendingContext = c3;
        b3 = zg(f2, g3);
        b3.payload = { element: a3 };
        d3 = d3 === void 0 ? null : d3;
        d3 !== null && (b3.callback = d3);
        Ag(e3, b3);
        Jg(e3, g3, f2);
        return g3;
      }
      function mk(a3) {
        a3 = a3.current;
        if (!a3.child)
          return null;
        switch (a3.child.tag) {
          case 5:
            return a3.child.stateNode;
          default:
            return a3.child.stateNode;
        }
      }
      function nk(a3, b3) {
        a3 = a3.memoizedState;
        if (a3 !== null && a3.dehydrated !== null) {
          var c3 = a3.retryLane;
          a3.retryLane = c3 !== 0 && c3 < b3 ? c3 : b3;
        }
      }
      function ok(a3, b3) {
        nk(a3, b3);
        (a3 = a3.alternate) && nk(a3, b3);
      }
      function pk() {
        return null;
      }
      function qk(a3, b3, c3) {
        var d3 = c3 != null && c3.hydrationOptions != null && c3.hydrationOptions.mutableSources || null;
        c3 = new jk(a3, b3, c3 != null && c3.hydrate === true);
        b3 = nh(3, null, null, b3 === 2 ? 7 : b3 === 1 ? 3 : 0);
        c3.current = b3;
        b3.stateNode = c3;
        xg(b3);
        a3[ff] = c3.current;
        cf(a3.nodeType === 8 ? a3.parentNode : a3);
        if (d3)
          for (a3 = 0; a3 < d3.length; a3++) {
            b3 = d3[a3];
            var e3 = b3._getVersion;
            e3 = e3(b3._source);
            c3.mutableSourceEagerHydrationData == null ? c3.mutableSourceEagerHydrationData = [b3, e3] : c3.mutableSourceEagerHydrationData.push(b3, e3);
          }
        this._internalRoot = c3;
      }
      qk.prototype.render = function(a3) {
        lk(a3, this._internalRoot, null, null);
      };
      qk.prototype.unmount = function() {
        var a3 = this._internalRoot, b3 = a3.containerInfo;
        lk(null, a3, null, function() {
          b3[ff] = null;
        });
      };
      function rk(a3) {
        return !(!a3 || a3.nodeType !== 1 && a3.nodeType !== 9 && a3.nodeType !== 11 && (a3.nodeType !== 8 || a3.nodeValue !== " react-mount-point-unstable "));
      }
      function sk(a3, b3) {
        b3 || (b3 = a3 ? a3.nodeType === 9 ? a3.documentElement : a3.firstChild : null, b3 = !(!b3 || b3.nodeType !== 1 || !b3.hasAttribute("data-reactroot")));
        if (!b3)
          for (var c3; c3 = a3.lastChild; )
            a3.removeChild(c3);
        return new qk(a3, 0, b3 ? { hydrate: true } : void 0);
      }
      function tk(a3, b3, c3, d3, e3) {
        var f2 = c3._reactRootContainer;
        if (f2) {
          var g3 = f2._internalRoot;
          if (typeof e3 === "function") {
            var h2 = e3;
            e3 = function() {
              var a4 = mk(g3);
              h2.call(a4);
            };
          }
          lk(b3, g3, a3, e3);
        } else {
          f2 = c3._reactRootContainer = sk(c3, d3);
          g3 = f2._internalRoot;
          if (typeof e3 === "function") {
            var k3 = e3;
            e3 = function() {
              var a4 = mk(g3);
              k3.call(a4);
            };
          }
          Xj(function() {
            lk(b3, g3, a3, e3);
          });
        }
        return mk(g3);
      }
      ec = function(a3) {
        if (a3.tag === 13) {
          var b3 = Hg();
          Jg(a3, 4, b3);
          ok(a3, 4);
        }
      };
      fc = function(a3) {
        if (a3.tag === 13) {
          var b3 = Hg();
          Jg(a3, 67108864, b3);
          ok(a3, 67108864);
        }
      };
      gc = function(a3) {
        if (a3.tag === 13) {
          var b3 = Hg(), c3 = Ig(a3);
          Jg(a3, c3, b3);
          ok(a3, c3);
        }
      };
      hc = function(a3, b3) {
        return b3();
      };
      yb = function(a3, b3, c3) {
        switch (b3) {
          case "input":
            ab(a3, c3);
            b3 = c3.name;
            if (c3.type === "radio" && b3 != null) {
              for (c3 = a3; c3.parentNode; )
                c3 = c3.parentNode;
              c3 = c3.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
              for (b3 = 0; b3 < c3.length; b3++) {
                var d3 = c3[b3];
                if (d3 !== a3 && d3.form === a3.form) {
                  var e3 = Db(d3);
                  if (!e3)
                    throw Error(y3(90));
                  Wa(d3);
                  ab(d3, e3);
                }
              }
            }
            break;
          case "textarea":
            ib(a3, c3);
            break;
          case "select":
            b3 = c3.value, b3 != null && fb(a3, !!c3.multiple, b3, false);
        }
      };
      Gb = Wj;
      Hb = function(a3, b3, c3, d3, e3) {
        var f2 = X3;
        X3 |= 4;
        try {
          return gg(98, a3.bind(null, b3, c3, d3, e3));
        } finally {
          X3 = f2, X3 === 0 && (wj(), ig());
        }
      };
      Ib = function() {
        (X3 & 49) === 0 && (Vj(), Oj());
      };
      Jb = function(a3, b3) {
        var c3 = X3;
        X3 |= 2;
        try {
          return a3(b3);
        } finally {
          X3 = c3, X3 === 0 && (wj(), ig());
        }
      };
      function uk(a3, b3) {
        var c3 = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
        if (!rk(b3))
          throw Error(y3(200));
        return kk(a3, b3, null, c3);
      }
      var vk = { Events: [Cb, ue2, Db, Eb, Fb, Oj, { current: false }] };
      var wk = { findFiberByHostInstance: wc, bundleType: 0, version: "17.0.2", rendererPackageName: "react-dom" };
      var xk = { bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a3) {
        a3 = cc(a3);
        return a3 === null ? null : a3.stateNode;
      }, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null };
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
        yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!yk.isDisabled && yk.supportsFiber)
          try {
            Lf = yk.inject(xk), Mf = yk;
          } catch (a3) {
          }
      }
      var yk;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
      exports.createPortal = uk;
      exports.findDOMNode = function(a3) {
        if (a3 == null)
          return null;
        if (a3.nodeType === 1)
          return a3;
        var b3 = a3._reactInternals;
        if (b3 === void 0) {
          if (typeof a3.render === "function")
            throw Error(y3(188));
          throw Error(y3(268, Object.keys(a3)));
        }
        a3 = cc(b3);
        a3 = a3 === null ? null : a3.stateNode;
        return a3;
      };
      exports.flushSync = function(a3, b3) {
        var c3 = X3;
        if ((c3 & 48) !== 0)
          return a3(b3);
        X3 |= 1;
        try {
          if (a3)
            return gg(99, a3.bind(null, b3));
        } finally {
          X3 = c3, ig();
        }
      };
      exports.hydrate = function(a3, b3, c3) {
        if (!rk(b3))
          throw Error(y3(200));
        return tk(null, a3, b3, true, c3);
      };
      exports.render = function(a3, b3, c3) {
        if (!rk(b3))
          throw Error(y3(200));
        return tk(null, a3, b3, false, c3);
      };
      exports.unmountComponentAtNode = function(a3) {
        if (!rk(a3))
          throw Error(y3(40));
        return a3._reactRootContainer ? (Xj(function() {
          tk(null, null, a3, false, function() {
            a3._reactRootContainer = null;
            a3[ff] = null;
          });
        }), true) : false;
      };
      exports.unstable_batchedUpdates = Wj;
      exports.unstable_createPortal = function(a3, b3) {
        return uk(a3, b3, 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null);
      };
      exports.unstable_renderSubtreeIntoContainer = function(a3, b3, c3, d3) {
        if (!rk(c3))
          throw Error(y3(200));
        if (a3 == null || a3._reactInternals === void 0)
          throw Error(y3(38));
        return tk(a3, b3, c3, false, d3);
      };
      exports.version = "17.0.2";
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.production.min.js
  var require_scheduler_tracing_production_min = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.production.min.js"(exports) {
      "use strict";
      var b3 = 0;
      exports.__interactionsRef = null;
      exports.__subscriberRef = null;
      exports.unstable_clear = function(a3) {
        return a3();
      };
      exports.unstable_getCurrent = function() {
        return null;
      };
      exports.unstable_getThreadID = function() {
        return ++b3;
      };
      exports.unstable_subscribe = function() {
      };
      exports.unstable_trace = function(a3, d3, c3) {
        return c3();
      };
      exports.unstable_unsubscribe = function() {
      };
      exports.unstable_wrap = function(a3) {
        return a3;
      };
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_scheduler_tracing_production_min();
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var React52 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React52.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React52) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment2 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React52.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React52.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_3, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn2, a3, b3, c3, d3) {
            return fn2(a3, b3, c3, d3);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, bookkeeping) {
            if (isInsideEventHandler) {
              return fn2(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn2, a3, b3) {
            if (isBatchingEventUpdates) {
              return fn2(a3, b3);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn2, a3, b3);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn2, a3, b3, c3, d3) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn2, a3, b3, c3, d3);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener2 = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener2 || typeof listener2 === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener2 + "` type.");
              }
            }
            return listener2;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a3, b3, c3, d3, e3, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a3, b3, c3, d3, e3, f2) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a3, b3, c3, d3, e3, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a3, b3, c3, d3, e3, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a3.return !== b3.return) {
                a3 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a3.alternate === b3)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a3.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn2) {
            attemptUserBlockingHydration = fn2;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3 += 2) {
              var topEvent = eventTypes[i3];
              var event = eventTypes[i3 + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3++) {
              eventPriorities.set(eventTypes[i3], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b3) {
            return (a3 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a3, b3) {
            return a3 | b3;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b3) {
            return a3 !== NoLane && a3 < b3 ? a3 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, false);
            return listener2;
          }
          function addEventCaptureListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, true);
            return listener2;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              capture: true,
              passive
            });
            return listener2;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              passive
            });
            return listener2;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x3, y3) {
            return x3 === y3 && (x3 !== 0 || 1 / x3 === 1 / y3) || x3 !== x3 && y3 !== y3;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual2(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              if (!hasOwnProperty$2.call(objB, keysA[i3]) || !objectIs(objA[keysA[i3]], objB[keysA[i3]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener2, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener2, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener2 = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener2, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener2 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener2);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener2);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener2, currentTarget) {
            return {
              instance,
              listener: listener2,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener2 = getListener(instance, reactEventName);
                  if (listener2 != null) {
                    listeners.push(createDispatchListener(instance, listener2, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener2) {
              if (listener2 === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener2);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement3(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn2);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i3 < _queue.length; i3++) {
                      var callback = _queue[i3];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i3 + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array = [];
              set3.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps2 = Component.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone3 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone3;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone3 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone3;
                    } else {
                      newLast.next = clone3;
                      newLast = clone3;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone3 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone3;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone3;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React52.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone3 = createWorkInProgress(fiber, pendingProps);
              clone3.index = 0;
              clone3.sibling = null;
              return clone3;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment2) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment2: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (!(c3 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone3 = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone3;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone3;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render3 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare2 = Component.compare;
              compare2 = compare2 !== null ? compare2 : shallowEqual2;
              if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i3 = 0; i3 < mutableSourceEagerHydrationData.length; i3 += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i3];
                    var version = mutableSourceEagerHydrationData[i3 + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment2:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment2:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry2 = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry2 = tracing.unstable_wrap(retry2);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry2, retry2);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn2, a3, b3, c3, d3) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn2.bind(null, a3, b3, c3, d3));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn2, a3) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn2(a3);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn2) {
                  return runWithPriority$1(ImmediatePriority$1, fn2.bind(null, a3));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i3 = 0; i3 < expirationTimes.length; i3++) {
                    scheduleInteractions(root2, expirationTimes[i3], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i3 = 0; i3 < unmountEffects.length; i3 += 2) {
              var _effect = unmountEffects[i3];
              var fiber = unmountEffects[i3 + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment2, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn2) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn2();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement2 = getReactRootElementInContainer(container);
            return !!(rootElement2 && rootElement2.nodeType === ELEMENT_NODE && rootElement2.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (process.env.NODE_ENV !== "production") {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      if (process.env.NODE_ENV === "production") {
        checkDCE();
        module.exports = require_react_dom_production_min();
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/retry/lib/retry_operation.js
  var require_retry_operation = __commonJS({
    "node_modules/retry/lib/retry_operation.js"(exports, module) {
      function RetryOperation(timeouts, options) {
        if (typeof options === "boolean") {
          options = { forever: options };
        }
        this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
        this._timeouts = timeouts;
        this._options = options || {};
        this._maxRetryTime = options && options.maxRetryTime || Infinity;
        this._fn = null;
        this._errors = [];
        this._attempts = 1;
        this._operationTimeout = null;
        this._operationTimeoutCb = null;
        this._timeout = null;
        this._operationStart = null;
        this._timer = null;
        if (this._options.forever) {
          this._cachedTimeouts = this._timeouts.slice(0);
        }
      }
      module.exports = RetryOperation;
      RetryOperation.prototype.reset = function() {
        this._attempts = 1;
        this._timeouts = this._originalTimeouts.slice(0);
      };
      RetryOperation.prototype.stop = function() {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        if (this._timer) {
          clearTimeout(this._timer);
        }
        this._timeouts = [];
        this._cachedTimeouts = null;
      };
      RetryOperation.prototype.retry = function(err) {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        if (!err) {
          return false;
        }
        var currentTime = new Date().getTime();
        if (err && currentTime - this._operationStart >= this._maxRetryTime) {
          this._errors.push(err);
          this._errors.unshift(new Error("RetryOperation timeout occurred"));
          return false;
        }
        this._errors.push(err);
        var timeout = this._timeouts.shift();
        if (timeout === void 0) {
          if (this._cachedTimeouts) {
            this._errors.splice(0, this._errors.length - 1);
            timeout = this._cachedTimeouts.slice(-1);
          } else {
            return false;
          }
        }
        var self2 = this;
        this._timer = setTimeout(function() {
          self2._attempts++;
          if (self2._operationTimeoutCb) {
            self2._timeout = setTimeout(function() {
              self2._operationTimeoutCb(self2._attempts);
            }, self2._operationTimeout);
            if (self2._options.unref) {
              self2._timeout.unref();
            }
          }
          self2._fn(self2._attempts);
        }, timeout);
        if (this._options.unref) {
          this._timer.unref();
        }
        return true;
      };
      RetryOperation.prototype.attempt = function(fn2, timeoutOps) {
        this._fn = fn2;
        if (timeoutOps) {
          if (timeoutOps.timeout) {
            this._operationTimeout = timeoutOps.timeout;
          }
          if (timeoutOps.cb) {
            this._operationTimeoutCb = timeoutOps.cb;
          }
        }
        var self2 = this;
        if (this._operationTimeoutCb) {
          this._timeout = setTimeout(function() {
            self2._operationTimeoutCb();
          }, self2._operationTimeout);
        }
        this._operationStart = new Date().getTime();
        this._fn(this._attempts);
      };
      RetryOperation.prototype.try = function(fn2) {
        console.log("Using RetryOperation.try() is deprecated");
        this.attempt(fn2);
      };
      RetryOperation.prototype.start = function(fn2) {
        console.log("Using RetryOperation.start() is deprecated");
        this.attempt(fn2);
      };
      RetryOperation.prototype.start = RetryOperation.prototype.try;
      RetryOperation.prototype.errors = function() {
        return this._errors;
      };
      RetryOperation.prototype.attempts = function() {
        return this._attempts;
      };
      RetryOperation.prototype.mainError = function() {
        if (this._errors.length === 0) {
          return null;
        }
        var counts = {};
        var mainError = null;
        var mainErrorCount = 0;
        for (var i3 = 0; i3 < this._errors.length; i3++) {
          var error = this._errors[i3];
          var message = error.message;
          var count = (counts[message] || 0) + 1;
          counts[message] = count;
          if (count >= mainErrorCount) {
            mainError = error;
            mainErrorCount = count;
          }
        }
        return mainError;
      };
    }
  });

  // node_modules/retry/lib/retry.js
  var require_retry = __commonJS({
    "node_modules/retry/lib/retry.js"(exports) {
      var RetryOperation = require_retry_operation();
      exports.operation = function(options) {
        var timeouts = exports.timeouts(options);
        return new RetryOperation(timeouts, {
          forever: options && (options.forever || options.retries === Infinity),
          unref: options && options.unref,
          maxRetryTime: options && options.maxRetryTime
        });
      };
      exports.timeouts = function(options) {
        if (options instanceof Array) {
          return [].concat(options);
        }
        var opts = {
          retries: 10,
          factor: 2,
          minTimeout: 1 * 1e3,
          maxTimeout: Infinity,
          randomize: false
        };
        for (var key in options) {
          opts[key] = options[key];
        }
        if (opts.minTimeout > opts.maxTimeout) {
          throw new Error("minTimeout is greater than maxTimeout");
        }
        var timeouts = [];
        for (var i3 = 0; i3 < opts.retries; i3++) {
          timeouts.push(this.createTimeout(i3, opts));
        }
        if (options && options.forever && !timeouts.length) {
          timeouts.push(this.createTimeout(i3, opts));
        }
        timeouts.sort(function(a3, b3) {
          return a3 - b3;
        });
        return timeouts;
      };
      exports.createTimeout = function(attempt, opts) {
        var random = opts.randomize ? Math.random() + 1 : 1;
        var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
        timeout = Math.min(timeout, opts.maxTimeout);
        return timeout;
      };
      exports.wrap = function(obj, options, methods) {
        if (options instanceof Array) {
          methods = options;
          options = null;
        }
        if (!methods) {
          methods = [];
          for (var key in obj) {
            if (typeof obj[key] === "function") {
              methods.push(key);
            }
          }
        }
        for (var i3 = 0; i3 < methods.length; i3++) {
          var method = methods[i3];
          var original = obj[method];
          obj[method] = function retryWrapper(original2) {
            var op = exports.operation(options);
            var args = Array.prototype.slice.call(arguments, 1);
            var callback = args.pop();
            args.push(function(err) {
              if (op.retry(err)) {
                return;
              }
              if (err) {
                arguments[0] = op.mainError();
              }
              callback.apply(this, arguments);
            });
            op.attempt(function() {
              original2.apply(obj, args);
            });
          }.bind(obj, original);
          obj[method].options = options;
        }
      };
    }
  });

  // node_modules/retry/index.js
  var require_retry2 = __commonJS({
    "node_modules/retry/index.js"(exports, module) {
      module.exports = require_retry();
    }
  });

  // node_modules/async-retry/lib/index.js
  var require_lib = __commonJS({
    "node_modules/async-retry/lib/index.js"(exports, module) {
      var retrier = require_retry2();
      function retry2(fn2, opts) {
        function run(resolve, reject) {
          var options = opts || {};
          var op;
          if (!("randomize" in options)) {
            options.randomize = true;
          }
          op = retrier.operation(options);
          function bail(err) {
            reject(err || new Error("Aborted"));
          }
          function onError(err, num) {
            if (err.bail) {
              bail(err);
              return;
            }
            if (!op.retry(err)) {
              reject(op.mainError());
            } else if (options.onRetry) {
              options.onRetry(err, num);
            }
          }
          function runAttempt(num) {
            var val;
            try {
              val = fn2(bail, num);
            } catch (err) {
              onError(err, num);
              return;
            }
            Promise.resolve(val).then(resolve).catch(function catchIt(err) {
              onError(err, num);
            });
          }
          op.attempt(runAttempt);
        }
        return new Promise(run);
      }
      module.exports = retry2;
    }
  });

  // node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js"(exports, module) {
      "use strict";
      var conversions = {};
      module.exports = conversions;
      function sign(x3) {
        return x3 < 0 ? -1 : 1;
      }
      function evenRound(x3) {
        if (x3 % 1 === 0.5 && (x3 & 1) === 0) {
          return Math.floor(x3);
        } else {
          return Math.round(x3);
        }
      }
      function createNumberConversion(bitLength, typeOpts) {
        if (!typeOpts.unsigned) {
          --bitLength;
        }
        const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
        const upperBound = Math.pow(2, bitLength) - 1;
        const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
        const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
        return function(V2, opts) {
          if (!opts)
            opts = {};
          let x3 = +V2;
          if (opts.enforceRange) {
            if (!Number.isFinite(x3)) {
              throw new TypeError("Argument is not a finite number");
            }
            x3 = sign(x3) * Math.floor(Math.abs(x3));
            if (x3 < lowerBound || x3 > upperBound) {
              throw new TypeError("Argument is not in byte range");
            }
            return x3;
          }
          if (!isNaN(x3) && opts.clamp) {
            x3 = evenRound(x3);
            if (x3 < lowerBound)
              x3 = lowerBound;
            if (x3 > upperBound)
              x3 = upperBound;
            return x3;
          }
          if (!Number.isFinite(x3) || x3 === 0) {
            return 0;
          }
          x3 = sign(x3) * Math.floor(Math.abs(x3));
          x3 = x3 % moduloVal;
          if (!typeOpts.unsigned && x3 >= moduloBound) {
            return x3 - moduloVal;
          } else if (typeOpts.unsigned) {
            if (x3 < 0) {
              x3 += moduloVal;
            } else if (x3 === -0) {
              return 0;
            }
          }
          return x3;
        };
      }
      conversions["void"] = function() {
        return void 0;
      };
      conversions["boolean"] = function(val) {
        return !!val;
      };
      conversions["byte"] = createNumberConversion(8, { unsigned: false });
      conversions["octet"] = createNumberConversion(8, { unsigned: true });
      conversions["short"] = createNumberConversion(16, { unsigned: false });
      conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
      conversions["long"] = createNumberConversion(32, { unsigned: false });
      conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
      conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
      conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
      conversions["double"] = function(V2) {
        const x3 = +V2;
        if (!Number.isFinite(x3)) {
          throw new TypeError("Argument is not a finite floating-point value");
        }
        return x3;
      };
      conversions["unrestricted double"] = function(V2) {
        const x3 = +V2;
        if (isNaN(x3)) {
          throw new TypeError("Argument is NaN");
        }
        return x3;
      };
      conversions["float"] = conversions["double"];
      conversions["unrestricted float"] = conversions["unrestricted double"];
      conversions["DOMString"] = function(V2, opts) {
        if (!opts)
          opts = {};
        if (opts.treatNullAsEmptyString && V2 === null) {
          return "";
        }
        return String(V2);
      };
      conversions["ByteString"] = function(V2, opts) {
        const x3 = String(V2);
        let c3 = void 0;
        for (let i3 = 0; (c3 = x3.codePointAt(i3)) !== void 0; ++i3) {
          if (c3 > 255) {
            throw new TypeError("Argument is not a valid bytestring");
          }
        }
        return x3;
      };
      conversions["USVString"] = function(V2) {
        const S3 = String(V2);
        const n3 = S3.length;
        const U3 = [];
        for (let i3 = 0; i3 < n3; ++i3) {
          const c3 = S3.charCodeAt(i3);
          if (c3 < 55296 || c3 > 57343) {
            U3.push(String.fromCodePoint(c3));
          } else if (56320 <= c3 && c3 <= 57343) {
            U3.push(String.fromCodePoint(65533));
          } else {
            if (i3 === n3 - 1) {
              U3.push(String.fromCodePoint(65533));
            } else {
              const d3 = S3.charCodeAt(i3 + 1);
              if (56320 <= d3 && d3 <= 57343) {
                const a3 = c3 & 1023;
                const b3 = d3 & 1023;
                U3.push(String.fromCodePoint((2 << 15) + (2 << 9) * a3 + b3));
                ++i3;
              } else {
                U3.push(String.fromCodePoint(65533));
              }
            }
          }
        }
        return U3.join("");
      };
      conversions["Date"] = function(V2, opts) {
        if (!(V2 instanceof Date)) {
          throw new TypeError("Argument is not a Date object");
        }
        if (isNaN(V2)) {
          return void 0;
        }
        return V2;
      };
      conversions["RegExp"] = function(V2, opts) {
        if (!(V2 instanceof RegExp)) {
          V2 = new RegExp(V2);
        }
        return V2;
      };
    }
  });

  // node_modules/whatwg-url/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/whatwg-url/lib/utils.js"(exports, module) {
      "use strict";
      module.exports.mixin = function mixin(target, source) {
        const keys2 = Object.getOwnPropertyNames(source);
        for (let i3 = 0; i3 < keys2.length; ++i3) {
          Object.defineProperty(target, keys2[i3], Object.getOwnPropertyDescriptor(source, keys2[i3]));
        }
      };
      module.exports.wrapperSymbol = Symbol("wrapper");
      module.exports.implSymbol = Symbol("impl");
      module.exports.wrapperForImpl = function(impl) {
        return impl[module.exports.wrapperSymbol];
      };
      module.exports.implForWrapper = function(wrapper) {
        return wrapper[module.exports.implSymbol];
      };
    }
  });

  // node_modules/tr46/lib/mappingTable.json
  var require_mappingTable = __commonJS({
    "node_modules/tr46/lib/mappingTable.json"(exports, module) {
      module.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
    }
  });

  // node_modules/tr46/index.js
  var require_tr46 = __commonJS({
    "node_modules/tr46/index.js"(exports, module) {
      "use strict";
      var punycode = __require("punycode");
      var mappingTable = require_mappingTable();
      var PROCESSING_OPTIONS = {
        TRANSITIONAL: 0,
        NONTRANSITIONAL: 1
      };
      function normalize(str) {
        return str.split("\0").map(function(s3) {
          return s3.normalize("NFC");
        }).join("\0");
      }
      function findStatus(val) {
        var start = 0;
        var end = mappingTable.length - 1;
        while (start <= end) {
          var mid = Math.floor((start + end) / 2);
          var target = mappingTable[mid];
          if (target[0][0] <= val && target[0][1] >= val) {
            return target;
          } else if (target[0][0] > val) {
            end = mid - 1;
          } else {
            start = mid + 1;
          }
        }
        return null;
      }
      var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      function countSymbols(string) {
        return string.replace(regexAstralSymbols, "_").length;
      }
      function mapChars(domain_name, useSTD3, processing_option) {
        var hasError = false;
        var processed = "";
        var len = countSymbols(domain_name);
        for (var i3 = 0; i3 < len; ++i3) {
          var codePoint = domain_name.codePointAt(i3);
          var status = findStatus(codePoint);
          switch (status[1]) {
            case "disallowed":
              hasError = true;
              processed += String.fromCodePoint(codePoint);
              break;
            case "ignored":
              break;
            case "mapped":
              processed += String.fromCodePoint.apply(String, status[2]);
              break;
            case "deviation":
              if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
                processed += String.fromCodePoint.apply(String, status[2]);
              } else {
                processed += String.fromCodePoint(codePoint);
              }
              break;
            case "valid":
              processed += String.fromCodePoint(codePoint);
              break;
            case "disallowed_STD3_mapped":
              if (useSTD3) {
                hasError = true;
                processed += String.fromCodePoint(codePoint);
              } else {
                processed += String.fromCodePoint.apply(String, status[2]);
              }
              break;
            case "disallowed_STD3_valid":
              if (useSTD3) {
                hasError = true;
              }
              processed += String.fromCodePoint(codePoint);
              break;
          }
        }
        return {
          string: processed,
          error: hasError
        };
      }
      var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
      function validateLabel(label, processing_option) {
        if (label.substr(0, 4) === "xn--") {
          label = punycode.toUnicode(label);
          processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
        }
        var error = false;
        if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
          error = true;
        }
        var len = countSymbols(label);
        for (var i3 = 0; i3 < len; ++i3) {
          var status = findStatus(label.codePointAt(i3));
          if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
            error = true;
            break;
          }
        }
        return {
          label,
          error
        };
      }
      function processing(domain_name, useSTD3, processing_option) {
        var result = mapChars(domain_name, useSTD3, processing_option);
        result.string = normalize(result.string);
        var labels = result.string.split(".");
        for (var i3 = 0; i3 < labels.length; ++i3) {
          try {
            var validation = validateLabel(labels[i3]);
            labels[i3] = validation.label;
            result.error = result.error || validation.error;
          } catch (e3) {
            result.error = true;
          }
        }
        return {
          string: labels.join("."),
          error: result.error
        };
      }
      module.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
        var result = processing(domain_name, useSTD3, processing_option);
        var labels = result.string.split(".");
        labels = labels.map(function(l3) {
          try {
            return punycode.toASCII(l3);
          } catch (e3) {
            result.error = true;
            return l3;
          }
        });
        if (verifyDnsLength) {
          var total = labels.slice(0, labels.length - 1).join(".").length;
          if (total.length > 253 || total.length === 0) {
            result.error = true;
          }
          for (var i3 = 0; i3 < labels.length; ++i3) {
            if (labels.length > 63 || labels.length === 0) {
              result.error = true;
              break;
            }
          }
        }
        if (result.error)
          return null;
        return labels.join(".");
      };
      module.exports.toUnicode = function(domain_name, useSTD3) {
        var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
        return {
          domain: result.string,
          error: result.error
        };
      };
      module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
    }
  });

  // node_modules/whatwg-url/lib/url-state-machine.js
  var require_url_state_machine = __commonJS({
    "node_modules/whatwg-url/lib/url-state-machine.js"(exports, module) {
      "use strict";
      var punycode = __require("punycode");
      var tr46 = require_tr46();
      var specialSchemes = {
        ftp: 21,
        file: null,
        gopher: 70,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      };
      var failure = Symbol("failure");
      function countSymbols(str) {
        return punycode.ucs2.decode(str).length;
      }
      function at(input, idx) {
        const c3 = input[idx];
        return isNaN(c3) ? void 0 : String.fromCodePoint(c3);
      }
      function isASCIIDigit(c3) {
        return c3 >= 48 && c3 <= 57;
      }
      function isASCIIAlpha(c3) {
        return c3 >= 65 && c3 <= 90 || c3 >= 97 && c3 <= 122;
      }
      function isASCIIAlphanumeric(c3) {
        return isASCIIAlpha(c3) || isASCIIDigit(c3);
      }
      function isASCIIHex(c3) {
        return isASCIIDigit(c3) || c3 >= 65 && c3 <= 70 || c3 >= 97 && c3 <= 102;
      }
      function isSingleDot(buffer) {
        return buffer === "." || buffer.toLowerCase() === "%2e";
      }
      function isDoubleDot(buffer) {
        buffer = buffer.toLowerCase();
        return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
      }
      function isWindowsDriveLetterCodePoints(cp1, cp2) {
        return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
      }
      function isWindowsDriveLetterString(string) {
        return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
      }
      function isNormalizedWindowsDriveLetterString(string) {
        return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
      }
      function containsForbiddenHostCodePoint(string) {
        return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
      }
      function containsForbiddenHostCodePointExcludingPercent(string) {
        return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
      }
      function isSpecialScheme(scheme) {
        return specialSchemes[scheme] !== void 0;
      }
      function isSpecial(url) {
        return isSpecialScheme(url.scheme);
      }
      function defaultPort(scheme) {
        return specialSchemes[scheme];
      }
      function percentEncode(c3) {
        let hex = c3.toString(16).toUpperCase();
        if (hex.length === 1) {
          hex = "0" + hex;
        }
        return "%" + hex;
      }
      function utf8PercentEncode(c3) {
        const buf = new Buffer(c3);
        let str = "";
        for (let i3 = 0; i3 < buf.length; ++i3) {
          str += percentEncode(buf[i3]);
        }
        return str;
      }
      function utf8PercentDecode(str) {
        const input = new Buffer(str);
        const output = [];
        for (let i3 = 0; i3 < input.length; ++i3) {
          if (input[i3] !== 37) {
            output.push(input[i3]);
          } else if (input[i3] === 37 && isASCIIHex(input[i3 + 1]) && isASCIIHex(input[i3 + 2])) {
            output.push(parseInt(input.slice(i3 + 1, i3 + 3).toString(), 16));
            i3 += 2;
          } else {
            output.push(input[i3]);
          }
        }
        return new Buffer(output).toString();
      }
      function isC0ControlPercentEncode(c3) {
        return c3 <= 31 || c3 > 126;
      }
      var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
      function isPathPercentEncode(c3) {
        return isC0ControlPercentEncode(c3) || extraPathPercentEncodeSet.has(c3);
      }
      var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
      function isUserinfoPercentEncode(c3) {
        return isPathPercentEncode(c3) || extraUserinfoPercentEncodeSet.has(c3);
      }
      function percentEncodeChar(c3, encodeSetPredicate) {
        const cStr = String.fromCodePoint(c3);
        if (encodeSetPredicate(c3)) {
          return utf8PercentEncode(cStr);
        }
        return cStr;
      }
      function parseIPv4Number(input) {
        let R3 = 10;
        if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
          input = input.substring(2);
          R3 = 16;
        } else if (input.length >= 2 && input.charAt(0) === "0") {
          input = input.substring(1);
          R3 = 8;
        }
        if (input === "") {
          return 0;
        }
        const regex = R3 === 10 ? /[^0-9]/ : R3 === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
        if (regex.test(input)) {
          return failure;
        }
        return parseInt(input, R3);
      }
      function parseIPv4(input) {
        const parts = input.split(".");
        if (parts[parts.length - 1] === "") {
          if (parts.length > 1) {
            parts.pop();
          }
        }
        if (parts.length > 4) {
          return input;
        }
        const numbers = [];
        for (const part of parts) {
          if (part === "") {
            return input;
          }
          const n3 = parseIPv4Number(part);
          if (n3 === failure) {
            return input;
          }
          numbers.push(n3);
        }
        for (let i3 = 0; i3 < numbers.length - 1; ++i3) {
          if (numbers[i3] > 255) {
            return failure;
          }
        }
        if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
          return failure;
        }
        let ipv4 = numbers.pop();
        let counter2 = 0;
        for (const n3 of numbers) {
          ipv4 += n3 * Math.pow(256, 3 - counter2);
          ++counter2;
        }
        return ipv4;
      }
      function serializeIPv4(address) {
        let output = "";
        let n3 = address;
        for (let i3 = 1; i3 <= 4; ++i3) {
          output = String(n3 % 256) + output;
          if (i3 !== 4) {
            output = "." + output;
          }
          n3 = Math.floor(n3 / 256);
        }
        return output;
      }
      function parseIPv6(input) {
        const address = [0, 0, 0, 0, 0, 0, 0, 0];
        let pieceIndex = 0;
        let compress = null;
        let pointer = 0;
        input = punycode.ucs2.decode(input);
        if (input[pointer] === 58) {
          if (input[pointer + 1] !== 58) {
            return failure;
          }
          pointer += 2;
          ++pieceIndex;
          compress = pieceIndex;
        }
        while (pointer < input.length) {
          if (pieceIndex === 8) {
            return failure;
          }
          if (input[pointer] === 58) {
            if (compress !== null) {
              return failure;
            }
            ++pointer;
            ++pieceIndex;
            compress = pieceIndex;
            continue;
          }
          let value = 0;
          let length = 0;
          while (length < 4 && isASCIIHex(input[pointer])) {
            value = value * 16 + parseInt(at(input, pointer), 16);
            ++pointer;
            ++length;
          }
          if (input[pointer] === 46) {
            if (length === 0) {
              return failure;
            }
            pointer -= length;
            if (pieceIndex > 6) {
              return failure;
            }
            let numbersSeen = 0;
            while (input[pointer] !== void 0) {
              let ipv4Piece = null;
              if (numbersSeen > 0) {
                if (input[pointer] === 46 && numbersSeen < 4) {
                  ++pointer;
                } else {
                  return failure;
                }
              }
              if (!isASCIIDigit(input[pointer])) {
                return failure;
              }
              while (isASCIIDigit(input[pointer])) {
                const number = parseInt(at(input, pointer));
                if (ipv4Piece === null) {
                  ipv4Piece = number;
                } else if (ipv4Piece === 0) {
                  return failure;
                } else {
                  ipv4Piece = ipv4Piece * 10 + number;
                }
                if (ipv4Piece > 255) {
                  return failure;
                }
                ++pointer;
              }
              address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
              ++numbersSeen;
              if (numbersSeen === 2 || numbersSeen === 4) {
                ++pieceIndex;
              }
            }
            if (numbersSeen !== 4) {
              return failure;
            }
            break;
          } else if (input[pointer] === 58) {
            ++pointer;
            if (input[pointer] === void 0) {
              return failure;
            }
          } else if (input[pointer] !== void 0) {
            return failure;
          }
          address[pieceIndex] = value;
          ++pieceIndex;
        }
        if (compress !== null) {
          let swaps = pieceIndex - compress;
          pieceIndex = 7;
          while (pieceIndex !== 0 && swaps > 0) {
            const temp = address[compress + swaps - 1];
            address[compress + swaps - 1] = address[pieceIndex];
            address[pieceIndex] = temp;
            --pieceIndex;
            --swaps;
          }
        } else if (compress === null && pieceIndex !== 8) {
          return failure;
        }
        return address;
      }
      function serializeIPv6(address) {
        let output = "";
        const seqResult = findLongestZeroSequence(address);
        const compress = seqResult.idx;
        let ignore0 = false;
        for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
          if (ignore0 && address[pieceIndex] === 0) {
            continue;
          } else if (ignore0) {
            ignore0 = false;
          }
          if (compress === pieceIndex) {
            const separator = pieceIndex === 0 ? "::" : ":";
            output += separator;
            ignore0 = true;
            continue;
          }
          output += address[pieceIndex].toString(16);
          if (pieceIndex !== 7) {
            output += ":";
          }
        }
        return output;
      }
      function parseHost(input, isSpecialArg) {
        if (input[0] === "[") {
          if (input[input.length - 1] !== "]") {
            return failure;
          }
          return parseIPv6(input.substring(1, input.length - 1));
        }
        if (!isSpecialArg) {
          return parseOpaqueHost(input);
        }
        const domain = utf8PercentDecode(input);
        const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
        if (asciiDomain === null) {
          return failure;
        }
        if (containsForbiddenHostCodePoint(asciiDomain)) {
          return failure;
        }
        const ipv4Host = parseIPv4(asciiDomain);
        if (typeof ipv4Host === "number" || ipv4Host === failure) {
          return ipv4Host;
        }
        return asciiDomain;
      }
      function parseOpaqueHost(input) {
        if (containsForbiddenHostCodePointExcludingPercent(input)) {
          return failure;
        }
        let output = "";
        const decoded = punycode.ucs2.decode(input);
        for (let i3 = 0; i3 < decoded.length; ++i3) {
          output += percentEncodeChar(decoded[i3], isC0ControlPercentEncode);
        }
        return output;
      }
      function findLongestZeroSequence(arr) {
        let maxIdx = null;
        let maxLen = 1;
        let currStart = null;
        let currLen = 0;
        for (let i3 = 0; i3 < arr.length; ++i3) {
          if (arr[i3] !== 0) {
            if (currLen > maxLen) {
              maxIdx = currStart;
              maxLen = currLen;
            }
            currStart = null;
            currLen = 0;
          } else {
            if (currStart === null) {
              currStart = i3;
            }
            ++currLen;
          }
        }
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        return {
          idx: maxIdx,
          len: maxLen
        };
      }
      function serializeHost(host) {
        if (typeof host === "number") {
          return serializeIPv4(host);
        }
        if (host instanceof Array) {
          return "[" + serializeIPv6(host) + "]";
        }
        return host;
      }
      function trimControlChars(url) {
        return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
      }
      function trimTabAndNewline(url) {
        return url.replace(/\u0009|\u000A|\u000D/g, "");
      }
      function shortenPath(url) {
        const path = url.path;
        if (path.length === 0) {
          return;
        }
        if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
          return;
        }
        path.pop();
      }
      function includesCredentials(url) {
        return url.username !== "" || url.password !== "";
      }
      function cannotHaveAUsernamePasswordPort(url) {
        return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
      }
      function isNormalizedWindowsDriveLetter(string) {
        return /^[A-Za-z]:$/.test(string);
      }
      function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
        this.pointer = 0;
        this.input = input;
        this.base = base || null;
        this.encodingOverride = encodingOverride || "utf-8";
        this.stateOverride = stateOverride;
        this.url = url;
        this.failure = false;
        this.parseError = false;
        if (!this.url) {
          this.url = {
            scheme: "",
            username: "",
            password: "",
            host: null,
            port: null,
            path: [],
            query: null,
            fragment: null,
            cannotBeABaseURL: false
          };
          const res2 = trimControlChars(this.input);
          if (res2 !== this.input) {
            this.parseError = true;
          }
          this.input = res2;
        }
        const res = trimTabAndNewline(this.input);
        if (res !== this.input) {
          this.parseError = true;
        }
        this.input = res;
        this.state = stateOverride || "scheme start";
        this.buffer = "";
        this.atFlag = false;
        this.arrFlag = false;
        this.passwordTokenSeenFlag = false;
        this.input = punycode.ucs2.decode(this.input);
        for (; this.pointer <= this.input.length; ++this.pointer) {
          const c3 = this.input[this.pointer];
          const cStr = isNaN(c3) ? void 0 : String.fromCodePoint(c3);
          const ret = this["parse " + this.state](c3, cStr);
          if (!ret) {
            break;
          } else if (ret === failure) {
            this.failure = true;
            break;
          }
        }
      }
      URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c3, cStr) {
        if (isASCIIAlpha(c3)) {
          this.buffer += cStr.toLowerCase();
          this.state = "scheme";
        } else if (!this.stateOverride) {
          this.state = "no scheme";
          --this.pointer;
        } else {
          this.parseError = true;
          return failure;
        }
        return true;
      };
      URLStateMachine.prototype["parse scheme"] = function parseScheme(c3, cStr) {
        if (isASCIIAlphanumeric(c3) || c3 === 43 || c3 === 45 || c3 === 46) {
          this.buffer += cStr.toLowerCase();
        } else if (c3 === 58) {
          if (this.stateOverride) {
            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
              return false;
            }
            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
              return false;
            }
            if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
              return false;
            }
            if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
              return false;
            }
          }
          this.url.scheme = this.buffer;
          this.buffer = "";
          if (this.stateOverride) {
            return false;
          }
          if (this.url.scheme === "file") {
            if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
              this.parseError = true;
            }
            this.state = "file";
          } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
            this.state = "special relative or authority";
          } else if (isSpecial(this.url)) {
            this.state = "special authority slashes";
          } else if (this.input[this.pointer + 1] === 47) {
            this.state = "path or authority";
            ++this.pointer;
          } else {
            this.url.cannotBeABaseURL = true;
            this.url.path.push("");
            this.state = "cannot-be-a-base-URL path";
          }
        } else if (!this.stateOverride) {
          this.buffer = "";
          this.state = "no scheme";
          this.pointer = -1;
        } else {
          this.parseError = true;
          return failure;
        }
        return true;
      };
      URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c3) {
        if (this.base === null || this.base.cannotBeABaseURL && c3 !== 35) {
          return failure;
        } else if (this.base.cannotBeABaseURL && c3 === 35) {
          this.url.scheme = this.base.scheme;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.url.cannotBeABaseURL = true;
          this.state = "fragment";
        } else if (this.base.scheme === "file") {
          this.state = "file";
          --this.pointer;
        } else {
          this.state = "relative";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c3) {
        if (c3 === 47 && this.input[this.pointer + 1] === 47) {
          this.state = "special authority ignore slashes";
          ++this.pointer;
        } else {
          this.parseError = true;
          this.state = "relative";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c3) {
        if (c3 === 47) {
          this.state = "authority";
        } else {
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse relative"] = function parseRelative(c3) {
        this.url.scheme = this.base.scheme;
        if (isNaN(c3)) {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c3 === 47) {
          this.state = "relative slash";
        } else if (c3 === 63) {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c3 === 35) {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else if (isSpecial(this.url) && c3 === 92) {
          this.parseError = true;
          this.state = "relative slash";
        } else {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice(0, this.base.path.length - 1);
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c3) {
        if (isSpecial(this.url) && (c3 === 47 || c3 === 92)) {
          if (c3 === 92) {
            this.parseError = true;
          }
          this.state = "special authority ignore slashes";
        } else if (c3 === 47) {
          this.state = "authority";
        } else {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c3) {
        if (c3 === 47 && this.input[this.pointer + 1] === 47) {
          this.state = "special authority ignore slashes";
          ++this.pointer;
        } else {
          this.parseError = true;
          this.state = "special authority ignore slashes";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c3) {
        if (c3 !== 47 && c3 !== 92) {
          this.state = "authority";
          --this.pointer;
        } else {
          this.parseError = true;
        }
        return true;
      };
      URLStateMachine.prototype["parse authority"] = function parseAuthority(c3, cStr) {
        if (c3 === 64) {
          this.parseError = true;
          if (this.atFlag) {
            this.buffer = "%40" + this.buffer;
          }
          this.atFlag = true;
          const len = countSymbols(this.buffer);
          for (let pointer = 0; pointer < len; ++pointer) {
            const codePoint = this.buffer.codePointAt(pointer);
            if (codePoint === 58 && !this.passwordTokenSeenFlag) {
              this.passwordTokenSeenFlag = true;
              continue;
            }
            const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
            if (this.passwordTokenSeenFlag) {
              this.url.password += encodedCodePoints;
            } else {
              this.url.username += encodedCodePoints;
            }
          }
          this.buffer = "";
        } else if (isNaN(c3) || c3 === 47 || c3 === 63 || c3 === 35 || isSpecial(this.url) && c3 === 92) {
          if (this.atFlag && this.buffer === "") {
            this.parseError = true;
            return failure;
          }
          this.pointer -= countSymbols(this.buffer) + 1;
          this.buffer = "";
          this.state = "host";
        } else {
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c3, cStr) {
        if (this.stateOverride && this.url.scheme === "file") {
          --this.pointer;
          this.state = "file host";
        } else if (c3 === 58 && !this.arrFlag) {
          if (this.buffer === "") {
            this.parseError = true;
            return failure;
          }
          const host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          this.url.host = host;
          this.buffer = "";
          this.state = "port";
          if (this.stateOverride === "hostname") {
            return false;
          }
        } else if (isNaN(c3) || c3 === 47 || c3 === 63 || c3 === 35 || isSpecial(this.url) && c3 === 92) {
          --this.pointer;
          if (isSpecial(this.url) && this.buffer === "") {
            this.parseError = true;
            return failure;
          } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
            this.parseError = true;
            return false;
          }
          const host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          this.url.host = host;
          this.buffer = "";
          this.state = "path start";
          if (this.stateOverride) {
            return false;
          }
        } else {
          if (c3 === 91) {
            this.arrFlag = true;
          } else if (c3 === 93) {
            this.arrFlag = false;
          }
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse port"] = function parsePort(c3, cStr) {
        if (isASCIIDigit(c3)) {
          this.buffer += cStr;
        } else if (isNaN(c3) || c3 === 47 || c3 === 63 || c3 === 35 || isSpecial(this.url) && c3 === 92 || this.stateOverride) {
          if (this.buffer !== "") {
            const port = parseInt(this.buffer);
            if (port > Math.pow(2, 16) - 1) {
              this.parseError = true;
              return failure;
            }
            this.url.port = port === defaultPort(this.url.scheme) ? null : port;
            this.buffer = "";
          }
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
          --this.pointer;
        } else {
          this.parseError = true;
          return failure;
        }
        return true;
      };
      var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
      URLStateMachine.prototype["parse file"] = function parseFile(c3) {
        this.url.scheme = "file";
        if (c3 === 47 || c3 === 92) {
          if (c3 === 92) {
            this.parseError = true;
          }
          this.state = "file slash";
        } else if (this.base !== null && this.base.scheme === "file") {
          if (isNaN(c3)) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
          } else if (c3 === 63) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = "";
            this.state = "query";
          } else if (c3 === 35) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
            this.url.fragment = "";
            this.state = "fragment";
          } else {
            if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c3, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
              this.url.host = this.base.host;
              this.url.path = this.base.path.slice();
              shortenPath(this.url);
            } else {
              this.parseError = true;
            }
            this.state = "path";
            --this.pointer;
          }
        } else {
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c3) {
        if (c3 === 47 || c3 === 92) {
          if (c3 === 92) {
            this.parseError = true;
          }
          this.state = "file host";
        } else {
          if (this.base !== null && this.base.scheme === "file") {
            if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
              this.url.path.push(this.base.path[0]);
            } else {
              this.url.host = this.base.host;
            }
          }
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse file host"] = function parseFileHost(c3, cStr) {
        if (isNaN(c3) || c3 === 47 || c3 === 92 || c3 === 63 || c3 === 35) {
          --this.pointer;
          if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
            this.parseError = true;
            this.state = "path";
          } else if (this.buffer === "") {
            this.url.host = "";
            if (this.stateOverride) {
              return false;
            }
            this.state = "path start";
          } else {
            let host = parseHost(this.buffer, isSpecial(this.url));
            if (host === failure) {
              return failure;
            }
            if (host === "localhost") {
              host = "";
            }
            this.url.host = host;
            if (this.stateOverride) {
              return false;
            }
            this.buffer = "";
            this.state = "path start";
          }
        } else {
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse path start"] = function parsePathStart(c3) {
        if (isSpecial(this.url)) {
          if (c3 === 92) {
            this.parseError = true;
          }
          this.state = "path";
          if (c3 !== 47 && c3 !== 92) {
            --this.pointer;
          }
        } else if (!this.stateOverride && c3 === 63) {
          this.url.query = "";
          this.state = "query";
        } else if (!this.stateOverride && c3 === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        } else if (c3 !== void 0) {
          this.state = "path";
          if (c3 !== 47) {
            --this.pointer;
          }
        }
        return true;
      };
      URLStateMachine.prototype["parse path"] = function parsePath(c3) {
        if (isNaN(c3) || c3 === 47 || isSpecial(this.url) && c3 === 92 || !this.stateOverride && (c3 === 63 || c3 === 35)) {
          if (isSpecial(this.url) && c3 === 92) {
            this.parseError = true;
          }
          if (isDoubleDot(this.buffer)) {
            shortenPath(this.url);
            if (c3 !== 47 && !(isSpecial(this.url) && c3 === 92)) {
              this.url.path.push("");
            }
          } else if (isSingleDot(this.buffer) && c3 !== 47 && !(isSpecial(this.url) && c3 === 92)) {
            this.url.path.push("");
          } else if (!isSingleDot(this.buffer)) {
            if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
              if (this.url.host !== "" && this.url.host !== null) {
                this.parseError = true;
                this.url.host = "";
              }
              this.buffer = this.buffer[0] + ":";
            }
            this.url.path.push(this.buffer);
          }
          this.buffer = "";
          if (this.url.scheme === "file" && (c3 === void 0 || c3 === 63 || c3 === 35)) {
            while (this.url.path.length > 1 && this.url.path[0] === "") {
              this.parseError = true;
              this.url.path.shift();
            }
          }
          if (c3 === 63) {
            this.url.query = "";
            this.state = "query";
          }
          if (c3 === 35) {
            this.url.fragment = "";
            this.state = "fragment";
          }
        } else {
          if (c3 === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          this.buffer += percentEncodeChar(c3, isPathPercentEncode);
        }
        return true;
      };
      URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c3) {
        if (c3 === 63) {
          this.url.query = "";
          this.state = "query";
        } else if (c3 === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (!isNaN(c3) && c3 !== 37) {
            this.parseError = true;
          }
          if (c3 === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          if (!isNaN(c3)) {
            this.url.path[0] = this.url.path[0] + percentEncodeChar(c3, isC0ControlPercentEncode);
          }
        }
        return true;
      };
      URLStateMachine.prototype["parse query"] = function parseQuery(c3, cStr) {
        if (isNaN(c3) || !this.stateOverride && c3 === 35) {
          if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
            this.encodingOverride = "utf-8";
          }
          const buffer = new Buffer(this.buffer);
          for (let i3 = 0; i3 < buffer.length; ++i3) {
            if (buffer[i3] < 33 || buffer[i3] > 126 || buffer[i3] === 34 || buffer[i3] === 35 || buffer[i3] === 60 || buffer[i3] === 62) {
              this.url.query += percentEncode(buffer[i3]);
            } else {
              this.url.query += String.fromCodePoint(buffer[i3]);
            }
          }
          this.buffer = "";
          if (c3 === 35) {
            this.url.fragment = "";
            this.state = "fragment";
          }
        } else {
          if (c3 === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse fragment"] = function parseFragment(c3) {
        if (isNaN(c3)) {
        } else if (c3 === 0) {
          this.parseError = true;
        } else {
          if (c3 === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          this.url.fragment += percentEncodeChar(c3, isC0ControlPercentEncode);
        }
        return true;
      };
      function serializeURL(url, excludeFragment) {
        let output = url.scheme + ":";
        if (url.host !== null) {
          output += "//";
          if (url.username !== "" || url.password !== "") {
            output += url.username;
            if (url.password !== "") {
              output += ":" + url.password;
            }
            output += "@";
          }
          output += serializeHost(url.host);
          if (url.port !== null) {
            output += ":" + url.port;
          }
        } else if (url.host === null && url.scheme === "file") {
          output += "//";
        }
        if (url.cannotBeABaseURL) {
          output += url.path[0];
        } else {
          for (const string of url.path) {
            output += "/" + string;
          }
        }
        if (url.query !== null) {
          output += "?" + url.query;
        }
        if (!excludeFragment && url.fragment !== null) {
          output += "#" + url.fragment;
        }
        return output;
      }
      function serializeOrigin(tuple) {
        let result = tuple.scheme + "://";
        result += serializeHost(tuple.host);
        if (tuple.port !== null) {
          result += ":" + tuple.port;
        }
        return result;
      }
      module.exports.serializeURL = serializeURL;
      module.exports.serializeURLOrigin = function(url) {
        switch (url.scheme) {
          case "blob":
            try {
              return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
            } catch (e3) {
              return "null";
            }
          case "ftp":
          case "gopher":
          case "http":
          case "https":
          case "ws":
          case "wss":
            return serializeOrigin({
              scheme: url.scheme,
              host: url.host,
              port: url.port
            });
          case "file":
            return "file://";
          default:
            return "null";
        }
      };
      module.exports.basicURLParse = function(input, options) {
        if (options === void 0) {
          options = {};
        }
        const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
        if (usm.failure) {
          return "failure";
        }
        return usm.url;
      };
      module.exports.setTheUsername = function(url, username) {
        url.username = "";
        const decoded = punycode.ucs2.decode(username);
        for (let i3 = 0; i3 < decoded.length; ++i3) {
          url.username += percentEncodeChar(decoded[i3], isUserinfoPercentEncode);
        }
      };
      module.exports.setThePassword = function(url, password) {
        url.password = "";
        const decoded = punycode.ucs2.decode(password);
        for (let i3 = 0; i3 < decoded.length; ++i3) {
          url.password += percentEncodeChar(decoded[i3], isUserinfoPercentEncode);
        }
      };
      module.exports.serializeHost = serializeHost;
      module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
      module.exports.serializeInteger = function(integer) {
        return String(integer);
      };
      module.exports.parseURL = function(input, options) {
        if (options === void 0) {
          options = {};
        }
        return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
      };
    }
  });

  // node_modules/whatwg-url/lib/URL-impl.js
  var require_URL_impl = __commonJS({
    "node_modules/whatwg-url/lib/URL-impl.js"(exports) {
      "use strict";
      var usm = require_url_state_machine();
      exports.implementation = class URLImpl {
        constructor(constructorArgs) {
          const url = constructorArgs[0];
          const base = constructorArgs[1];
          let parsedBase = null;
          if (base !== void 0) {
            parsedBase = usm.basicURLParse(base);
            if (parsedBase === "failure") {
              throw new TypeError("Invalid base URL");
            }
          }
          const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
          if (parsedURL === "failure") {
            throw new TypeError("Invalid URL");
          }
          this._url = parsedURL;
        }
        get href() {
          return usm.serializeURL(this._url);
        }
        set href(v3) {
          const parsedURL = usm.basicURLParse(v3);
          if (parsedURL === "failure") {
            throw new TypeError("Invalid URL");
          }
          this._url = parsedURL;
        }
        get origin() {
          return usm.serializeURLOrigin(this._url);
        }
        get protocol() {
          return this._url.scheme + ":";
        }
        set protocol(v3) {
          usm.basicURLParse(v3 + ":", { url: this._url, stateOverride: "scheme start" });
        }
        get username() {
          return this._url.username;
        }
        set username(v3) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          usm.setTheUsername(this._url, v3);
        }
        get password() {
          return this._url.password;
        }
        set password(v3) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          usm.setThePassword(this._url, v3);
        }
        get host() {
          const url = this._url;
          if (url.host === null) {
            return "";
          }
          if (url.port === null) {
            return usm.serializeHost(url.host);
          }
          return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
        }
        set host(v3) {
          if (this._url.cannotBeABaseURL) {
            return;
          }
          usm.basicURLParse(v3, { url: this._url, stateOverride: "host" });
        }
        get hostname() {
          if (this._url.host === null) {
            return "";
          }
          return usm.serializeHost(this._url.host);
        }
        set hostname(v3) {
          if (this._url.cannotBeABaseURL) {
            return;
          }
          usm.basicURLParse(v3, { url: this._url, stateOverride: "hostname" });
        }
        get port() {
          if (this._url.port === null) {
            return "";
          }
          return usm.serializeInteger(this._url.port);
        }
        set port(v3) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          if (v3 === "") {
            this._url.port = null;
          } else {
            usm.basicURLParse(v3, { url: this._url, stateOverride: "port" });
          }
        }
        get pathname() {
          if (this._url.cannotBeABaseURL) {
            return this._url.path[0];
          }
          if (this._url.path.length === 0) {
            return "";
          }
          return "/" + this._url.path.join("/");
        }
        set pathname(v3) {
          if (this._url.cannotBeABaseURL) {
            return;
          }
          this._url.path = [];
          usm.basicURLParse(v3, { url: this._url, stateOverride: "path start" });
        }
        get search() {
          if (this._url.query === null || this._url.query === "") {
            return "";
          }
          return "?" + this._url.query;
        }
        set search(v3) {
          const url = this._url;
          if (v3 === "") {
            url.query = null;
            return;
          }
          const input = v3[0] === "?" ? v3.substring(1) : v3;
          url.query = "";
          usm.basicURLParse(input, { url, stateOverride: "query" });
        }
        get hash() {
          if (this._url.fragment === null || this._url.fragment === "") {
            return "";
          }
          return "#" + this._url.fragment;
        }
        set hash(v3) {
          if (v3 === "") {
            this._url.fragment = null;
            return;
          }
          const input = v3[0] === "#" ? v3.substring(1) : v3;
          this._url.fragment = "";
          usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
        }
        toJSON() {
          return this.href;
        }
      };
    }
  });

  // node_modules/whatwg-url/lib/URL.js
  var require_URL = __commonJS({
    "node_modules/whatwg-url/lib/URL.js"(exports, module) {
      "use strict";
      var conversions = require_lib2();
      var utils = require_utils();
      var Impl = require_URL_impl();
      var impl = utils.implSymbol;
      function URL2(url) {
        if (!this || this[impl] || !(this instanceof URL2)) {
          throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
        }
        if (arguments.length < 1) {
          throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
        }
        const args = [];
        for (let i3 = 0; i3 < arguments.length && i3 < 2; ++i3) {
          args[i3] = arguments[i3];
        }
        args[0] = conversions["USVString"](args[0]);
        if (args[1] !== void 0) {
          args[1] = conversions["USVString"](args[1]);
        }
        module.exports.setup(this, args);
      }
      URL2.prototype.toJSON = function toJSON() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }
        const args = [];
        for (let i3 = 0; i3 < arguments.length && i3 < 0; ++i3) {
          args[i3] = arguments[i3];
        }
        return this[impl].toJSON.apply(this[impl], args);
      };
      Object.defineProperty(URL2.prototype, "href", {
        get() {
          return this[impl].href;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].href = V2;
        },
        enumerable: true,
        configurable: true
      });
      URL2.prototype.toString = function() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }
        return this.href;
      };
      Object.defineProperty(URL2.prototype, "origin", {
        get() {
          return this[impl].origin;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "protocol", {
        get() {
          return this[impl].protocol;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].protocol = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "username", {
        get() {
          return this[impl].username;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].username = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "password", {
        get() {
          return this[impl].password;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].password = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "host", {
        get() {
          return this[impl].host;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].host = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "hostname", {
        get() {
          return this[impl].hostname;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].hostname = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "port", {
        get() {
          return this[impl].port;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].port = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "pathname", {
        get() {
          return this[impl].pathname;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].pathname = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "search", {
        get() {
          return this[impl].search;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].search = V2;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL2.prototype, "hash", {
        get() {
          return this[impl].hash;
        },
        set(V2) {
          V2 = conversions["USVString"](V2);
          this[impl].hash = V2;
        },
        enumerable: true,
        configurable: true
      });
      module.exports = {
        is(obj) {
          return !!obj && obj[impl] instanceof Impl.implementation;
        },
        create(constructorArgs, privateData) {
          let obj = Object.create(URL2.prototype);
          this.setup(obj, constructorArgs, privateData);
          return obj;
        },
        setup(obj, constructorArgs, privateData) {
          if (!privateData)
            privateData = {};
          privateData.wrapper = obj;
          obj[impl] = new Impl.implementation(constructorArgs, privateData);
          obj[impl][utils.wrapperSymbol] = obj;
        },
        interface: URL2,
        expose: {
          Window: { URL: URL2 },
          Worker: { URL: URL2 }
        }
      };
    }
  });

  // node_modules/whatwg-url/lib/public-api.js
  var require_public_api = __commonJS({
    "node_modules/whatwg-url/lib/public-api.js"(exports) {
      "use strict";
      exports.URL = require_URL().interface;
      exports.serializeURL = require_url_state_machine().serializeURL;
      exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
      exports.basicURLParse = require_url_state_machine().basicURLParse;
      exports.setTheUsername = require_url_state_machine().setTheUsername;
      exports.setThePassword = require_url_state_machine().setThePassword;
      exports.serializeHost = require_url_state_machine().serializeHost;
      exports.serializeInteger = require_url_state_machine().serializeInteger;
      exports.parseURL = require_url_state_machine().parseURL;
    }
  });

  // node_modules/node-fetch/lib/index.mjs
  var lib_exports = {};
  __export(lib_exports, {
    FetchError: () => FetchError,
    Headers: () => Headers2,
    Request: () => Request,
    Response: () => Response,
    default: () => lib_default
  });
  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;
    if (systemError) {
      this.code = this.errno = systemError.code;
    }
    Error.captureStackTrace(this, this.constructor);
  }
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === void 0 ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
    if (body == null) {
      body = null;
    } else if (isURLSearchParams(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof import_stream.default)
      ;
    else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof import_stream.default) {
      body.on("error", function(err) {
        const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
        _this[INTERNALS].error = error;
      });
    }
  }
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    if (isBlob(body)) {
      body = body.stream();
    }
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }
    if (!(body instanceof import_stream.default)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
      let resTimeout;
      if (_this4.timeout) {
        resTimeout = setTimeout(function() {
          abort = true;
          reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
        }, _this4.timeout);
      }
      body.on("error", function(err) {
        if (err.name === "AbortError") {
          abort = true;
          reject(err);
        } else {
          reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
        }
      });
      body.on("data", function(chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on("end", function() {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
        }
      });
    });
  }
  function convertBody(buffer, headers) {
    if (typeof convert !== "function") {
      throw new Error("The package `encoding` must be installed to use the textConverted() function");
    }
    const ct = headers.get("content-type");
    let charset = "utf-8";
    let res, str;
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }
    str = buffer.slice(0, 1024).toString();
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (!res) {
        res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
        if (res) {
          res.pop();
        }
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    if (res) {
      charset = res.pop();
      if (charset === "gb2312" || charset === "gbk") {
        charset = "gb18030";
      }
    }
    return convert(buffer, "UTF-8", charset).toString();
  }
  function isURLSearchParams(obj) {
    if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
      return false;
    }
    return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
  }
  function isBlob(obj) {
    return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  function clone2(instance) {
    let p1, p2;
    let body = instance.body;
    if (instance.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      instance[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }
  function extractContentType(body) {
    if (body === null) {
      return null;
    } else if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    } else if (isURLSearchParams(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isBlob(body)) {
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      return null;
    } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      return null;
    } else if (ArrayBuffer.isView(body)) {
      return null;
    } else if (typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof import_stream.default) {
      return null;
    } else {
      return "text/plain;charset=UTF-8";
    }
  }
  function getTotalBytes(instance) {
    const body = instance.body;
    if (body === null) {
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      return body.length;
    } else if (body && typeof body.getLengthSync === "function") {
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
        return body.getLengthSync();
      }
      return null;
    } else {
      return null;
    }
  }
  function writeToStream(dest, instance) {
    const body = instance.body;
    if (body === null) {
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      dest.write(body);
      dest.end();
    } else {
      body.pipe(dest);
    }
  }
  function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === "") {
      throw new TypeError(`${name} is not a legal HTTP header name`);
    }
  }
  function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`);
    }
  }
  function find(map, name) {
    name = name.toLowerCase();
    for (const key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return void 0;
  }
  function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
    const keys2 = Object.keys(headers[MAP]).sort();
    return keys2.map(kind === "key" ? function(k3) {
      return k3.toLowerCase();
    } : kind === "value" ? function(k3) {
      return headers[MAP][k3].join(", ");
    } : function(k3) {
      return [k3.toLowerCase(), headers[MAP][k3].join(", ")];
    });
  }
  function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target,
      kind,
      index: 0
    };
    return iterator;
  }
  function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({ __proto__: null }, headers[MAP]);
    const hostHeaderKey = find(headers[MAP], "Host");
    if (hostHeaderKey !== void 0) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }
  function createHeadersLenient(obj) {
    const headers = new Headers2();
    for (const name of Object.keys(obj)) {
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        for (const val of obj[name]) {
          if (invalidHeaderCharRegex.test(val)) {
            continue;
          }
          if (headers[MAP][name] === void 0) {
            headers[MAP][name] = [val];
          } else {
            headers[MAP][name].push(val);
          }
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  function parseURL(urlStr) {
    if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
      urlStr = new URL(urlStr).toString();
    }
    return parse_url(urlStr);
  }
  function isRequest(input) {
    return typeof input === "object" && typeof input[INTERNALS$2] === "object";
  }
  function isAbortSignal(signal) {
    const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === "AbortSignal");
  }
  function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers2(request[INTERNALS$2].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError("Only absolute URLs are supported");
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError("Only HTTP(S) protocols are supported");
    }
    if (request.signal && request.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
      throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
    }
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body != null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number") {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip,deflate");
    }
    let agent = request.agent;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    if (!headers.has("Connection") && !agent) {
      headers.set("Connection", "close");
    }
    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent
    });
  }
  function AbortError(message) {
    Error.call(this, message);
    this.type = "aborted";
    this.message = message;
    Error.captureStackTrace(this, this.constructor);
  }
  function fetch(url, opts) {
    if (!fetch.Promise) {
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    }
    Body.Promise = fetch.Promise;
    return new fetch.Promise(function(resolve, reject) {
      const request = new Request(url, opts);
      const options = getNodeRequestOptions(request);
      const send = (options.protocol === "https:" ? import_https.default : import_http.default).request;
      const signal = request.signal;
      let response = null;
      const abort = function abort2() {
        let error = new AbortError("The user aborted a request.");
        reject(error);
        if (request.body && request.body instanceof import_stream.default.Readable) {
          request.body.destroy(error);
        }
        if (!response || !response.body)
          return;
        response.body.emit("error", error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = function abortAndFinalize2() {
        abort();
        finalize();
      };
      const req = send(options);
      let reqTimeout;
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once("socket", function(socket) {
          reqTimeout = setTimeout(function() {
            reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
            finalize();
          }, request.timeout);
        });
      }
      req.on("error", function(err) {
        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
        finalize();
      });
      req.on("response", function(res) {
        clearTimeout(reqTimeout);
        const headers = createHeadersLenient(res.headers);
        if (fetch.isRedirect(res.statusCode)) {
          const location = headers.get("Location");
          let locationURL = null;
          try {
            locationURL = location === null ? null : new URL$1(location, request.url).toString();
          } catch (err) {
            if (request.redirect !== "manual") {
              reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
              finalize();
              return;
            }
          }
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              if (locationURL !== null) {
                try {
                  headers.set("Location", locationURL);
                } catch (err) {
                  reject(err);
                }
              }
              break;
            case "follow":
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOpts = {
                headers: new Headers2(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout,
                size: request.size
              };
              if (!isDomainOrSubdomain(request.url, locationURL)) {
                for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                  requestOpts.headers.delete(name);
                }
              }
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                requestOpts.method = "GET";
                requestOpts.body = void 0;
                requestOpts.headers.delete("content-length");
              }
              resolve(fetch(new Request(locationURL, requestOpts)));
              finalize();
              return;
          }
        }
        res.once("end", function() {
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
        });
        let body = res.pipe(new PassThrough$1());
        const response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: import_zlib.default.Z_SYNC_FLUSH,
          finishFlush: import_zlib.default.Z_SYNC_FLUSH
        };
        if (codings == "gzip" || codings == "x-gzip") {
          body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        if (codings == "deflate" || codings == "x-deflate") {
          const raw = res.pipe(new PassThrough$1());
          raw.once("data", function(chunk) {
            if ((chunk[0] & 15) === 8) {
              body = body.pipe(import_zlib.default.createInflate());
            } else {
              body = body.pipe(import_zlib.default.createInflateRaw());
            }
            response = new Response(body, response_options);
            resolve(response);
          });
          return;
        }
        if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
          body = body.pipe(import_zlib.default.createBrotliDecompress());
          response = new Response(body, response_options);
          resolve(response);
          return;
        }
        response = new Response(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  var import_stream, import_http, import_url, import_whatwg_url, import_https, import_zlib, Readable, BUFFER, TYPE, Blob2, convert, INTERNALS, PassThrough, invalidTokenRegex, invalidHeaderCharRegex, MAP, Headers2, INTERNAL, HeadersIteratorPrototype, INTERNALS$1, STATUS_CODES, Response, INTERNALS$2, URL, parse_url, format_url, streamDestructionSupported, Request, URL$1, PassThrough$1, isDomainOrSubdomain, lib_default;
  var init_lib = __esm({
    "node_modules/node-fetch/lib/index.mjs"() {
      import_stream = __toESM(__require("stream"), 1);
      import_http = __toESM(__require("http"), 1);
      import_url = __toESM(__require("url"), 1);
      import_whatwg_url = __toESM(require_public_api(), 1);
      import_https = __toESM(__require("https"), 1);
      import_zlib = __toESM(__require("zlib"), 1);
      Readable = import_stream.default.Readable;
      BUFFER = Symbol("buffer");
      TYPE = Symbol("type");
      Blob2 = class {
        constructor() {
          this[TYPE] = "";
          const blobParts = arguments[0];
          const options = arguments[1];
          const buffers = [];
          let size = 0;
          if (blobParts) {
            const a3 = blobParts;
            const length = Number(a3.length);
            for (let i3 = 0; i3 < length; i3++) {
              const element = a3[i3];
              let buffer;
              if (element instanceof Buffer) {
                buffer = element;
              } else if (ArrayBuffer.isView(element)) {
                buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
              } else if (element instanceof ArrayBuffer) {
                buffer = Buffer.from(element);
              } else if (element instanceof Blob2) {
                buffer = element[BUFFER];
              } else {
                buffer = Buffer.from(typeof element === "string" ? element : String(element));
              }
              size += buffer.length;
              buffers.push(buffer);
            }
          }
          this[BUFFER] = Buffer.concat(buffers);
          let type = options && options.type !== void 0 && String(options.type).toLowerCase();
          if (type && !/[^\u0020-\u007E]/.test(type)) {
            this[TYPE] = type;
          }
        }
        get size() {
          return this[BUFFER].length;
        }
        get type() {
          return this[TYPE];
        }
        text() {
          return Promise.resolve(this[BUFFER].toString());
        }
        arrayBuffer() {
          const buf = this[BUFFER];
          const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
          return Promise.resolve(ab);
        }
        stream() {
          const readable = new Readable();
          readable._read = function() {
          };
          readable.push(this[BUFFER]);
          readable.push(null);
          return readable;
        }
        toString() {
          return "[object Blob]";
        }
        slice() {
          const size = this.size;
          const start = arguments[0];
          const end = arguments[1];
          let relativeStart, relativeEnd;
          if (start === void 0) {
            relativeStart = 0;
          } else if (start < 0) {
            relativeStart = Math.max(size + start, 0);
          } else {
            relativeStart = Math.min(start, size);
          }
          if (end === void 0) {
            relativeEnd = size;
          } else if (end < 0) {
            relativeEnd = Math.max(size + end, 0);
          } else {
            relativeEnd = Math.min(end, size);
          }
          const span = Math.max(relativeEnd - relativeStart, 0);
          const buffer = this[BUFFER];
          const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
          const blob = new Blob2([], { type: arguments[2] });
          blob[BUFFER] = slicedBuffer;
          return blob;
        }
      };
      Object.defineProperties(Blob2.prototype, {
        size: { enumerable: true },
        type: { enumerable: true },
        slice: { enumerable: true }
      });
      Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
        value: "Blob",
        writable: false,
        enumerable: false,
        configurable: true
      });
      FetchError.prototype = Object.create(Error.prototype);
      FetchError.prototype.constructor = FetchError;
      FetchError.prototype.name = "FetchError";
      try {
        convert = __require("encoding").convert;
      } catch (e3) {
      }
      INTERNALS = Symbol("Body internals");
      PassThrough = import_stream.default.PassThrough;
      Body.prototype = {
        get body() {
          return this[INTERNALS].body;
        },
        get bodyUsed() {
          return this[INTERNALS].disturbed;
        },
        arrayBuffer() {
          return consumeBody.call(this).then(function(buf) {
            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
          });
        },
        blob() {
          let ct = this.headers && this.headers.get("content-type") || "";
          return consumeBody.call(this).then(function(buf) {
            return Object.assign(new Blob2([], {
              type: ct.toLowerCase()
            }), {
              [BUFFER]: buf
            });
          });
        },
        json() {
          var _this2 = this;
          return consumeBody.call(this).then(function(buffer) {
            try {
              return JSON.parse(buffer.toString());
            } catch (err) {
              return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
            }
          });
        },
        text() {
          return consumeBody.call(this).then(function(buffer) {
            return buffer.toString();
          });
        },
        buffer() {
          return consumeBody.call(this);
        },
        textConverted() {
          var _this3 = this;
          return consumeBody.call(this).then(function(buffer) {
            return convertBody(buffer, _this3.headers);
          });
        }
      };
      Object.defineProperties(Body.prototype, {
        body: { enumerable: true },
        bodyUsed: { enumerable: true },
        arrayBuffer: { enumerable: true },
        blob: { enumerable: true },
        json: { enumerable: true },
        text: { enumerable: true }
      });
      Body.mixIn = function(proto) {
        for (const name of Object.getOwnPropertyNames(Body.prototype)) {
          if (!(name in proto)) {
            const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
            Object.defineProperty(proto, name, desc);
          }
        }
      };
      Body.Promise = global.Promise;
      invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
      invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
      MAP = Symbol("map");
      Headers2 = class {
        constructor() {
          let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
          this[MAP] = /* @__PURE__ */ Object.create(null);
          if (init instanceof Headers2) {
            const rawHeaders = init.raw();
            const headerNames = Object.keys(rawHeaders);
            for (const headerName of headerNames) {
              for (const value of rawHeaders[headerName]) {
                this.append(headerName, value);
              }
            }
            return;
          }
          if (init == null)
            ;
          else if (typeof init === "object") {
            const method = init[Symbol.iterator];
            if (method != null) {
              if (typeof method !== "function") {
                throw new TypeError("Header pairs must be iterable");
              }
              const pairs = [];
              for (const pair of init) {
                if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                  throw new TypeError("Each header pair must be iterable");
                }
                pairs.push(Array.from(pair));
              }
              for (const pair of pairs) {
                if (pair.length !== 2) {
                  throw new TypeError("Each header pair must be a name/value tuple");
                }
                this.append(pair[0], pair[1]);
              }
            } else {
              for (const key of Object.keys(init)) {
                const value = init[key];
                this.append(key, value);
              }
            }
          } else {
            throw new TypeError("Provided initializer must be an object");
          }
        }
        get(name) {
          name = `${name}`;
          validateName(name);
          const key = find(this[MAP], name);
          if (key === void 0) {
            return null;
          }
          return this[MAP][key].join(", ");
        }
        forEach(callback) {
          let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
          let pairs = getHeaders(this);
          let i3 = 0;
          while (i3 < pairs.length) {
            var _pairs$i = pairs[i3];
            const name = _pairs$i[0], value = _pairs$i[1];
            callback.call(thisArg, value, name, this);
            pairs = getHeaders(this);
            i3++;
          }
        }
        set(name, value) {
          name = `${name}`;
          value = `${value}`;
          validateName(name);
          validateValue(value);
          const key = find(this[MAP], name);
          this[MAP][key !== void 0 ? key : name] = [value];
        }
        append(name, value) {
          name = `${name}`;
          value = `${value}`;
          validateName(name);
          validateValue(value);
          const key = find(this[MAP], name);
          if (key !== void 0) {
            this[MAP][key].push(value);
          } else {
            this[MAP][name] = [value];
          }
        }
        has(name) {
          name = `${name}`;
          validateName(name);
          return find(this[MAP], name) !== void 0;
        }
        delete(name) {
          name = `${name}`;
          validateName(name);
          const key = find(this[MAP], name);
          if (key !== void 0) {
            delete this[MAP][key];
          }
        }
        raw() {
          return this[MAP];
        }
        keys() {
          return createHeadersIterator(this, "key");
        }
        values() {
          return createHeadersIterator(this, "value");
        }
        [Symbol.iterator]() {
          return createHeadersIterator(this, "key+value");
        }
      };
      Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
      Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
        value: "Headers",
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperties(Headers2.prototype, {
        get: { enumerable: true },
        forEach: { enumerable: true },
        set: { enumerable: true },
        append: { enumerable: true },
        has: { enumerable: true },
        delete: { enumerable: true },
        keys: { enumerable: true },
        values: { enumerable: true },
        entries: { enumerable: true }
      });
      INTERNAL = Symbol("internal");
      HeadersIteratorPrototype = Object.setPrototypeOf({
        next() {
          if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
            throw new TypeError("Value of `this` is not a HeadersIterator");
          }
          var _INTERNAL = this[INTERNAL];
          const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
          const values = getHeaders(target, kind);
          const len = values.length;
          if (index >= len) {
            return {
              value: void 0,
              done: true
            };
          }
          this[INTERNAL].index = index + 1;
          return {
            value: values[index],
            done: false
          };
        }
      }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
      Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
        value: "HeadersIterator",
        writable: false,
        enumerable: false,
        configurable: true
      });
      INTERNALS$1 = Symbol("Response internals");
      STATUS_CODES = import_http.default.STATUS_CODES;
      Response = class {
        constructor() {
          let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Body.call(this, body, opts);
          const status = opts.status || 200;
          const headers = new Headers2(opts.headers);
          if (body != null && !headers.has("Content-Type")) {
            const contentType = extractContentType(body);
            if (contentType) {
              headers.append("Content-Type", contentType);
            }
          }
          this[INTERNALS$1] = {
            url: opts.url,
            status,
            statusText: opts.statusText || STATUS_CODES[status],
            headers,
            counter: opts.counter
          };
        }
        get url() {
          return this[INTERNALS$1].url || "";
        }
        get status() {
          return this[INTERNALS$1].status;
        }
        get ok() {
          return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
        }
        get redirected() {
          return this[INTERNALS$1].counter > 0;
        }
        get statusText() {
          return this[INTERNALS$1].statusText;
        }
        get headers() {
          return this[INTERNALS$1].headers;
        }
        clone() {
          return new Response(clone2(this), {
            url: this.url,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
            ok: this.ok,
            redirected: this.redirected
          });
        }
      };
      Body.mixIn(Response.prototype);
      Object.defineProperties(Response.prototype, {
        url: { enumerable: true },
        status: { enumerable: true },
        ok: { enumerable: true },
        redirected: { enumerable: true },
        statusText: { enumerable: true },
        headers: { enumerable: true },
        clone: { enumerable: true }
      });
      Object.defineProperty(Response.prototype, Symbol.toStringTag, {
        value: "Response",
        writable: false,
        enumerable: false,
        configurable: true
      });
      INTERNALS$2 = Symbol("Request internals");
      URL = import_url.default.URL || import_whatwg_url.default.URL;
      parse_url = import_url.default.parse;
      format_url = import_url.default.format;
      streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
      Request = class {
        constructor(input) {
          let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let parsedURL;
          if (!isRequest(input)) {
            if (input && input.href) {
              parsedURL = parseURL(input.href);
            } else {
              parsedURL = parseURL(`${input}`);
            }
            input = {};
          } else {
            parsedURL = parseURL(input.url);
          }
          let method = init.method || input.method || "GET";
          method = method.toUpperCase();
          if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
            throw new TypeError("Request with GET/HEAD method cannot have body");
          }
          let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone2(input) : null;
          Body.call(this, inputBody, {
            timeout: init.timeout || input.timeout || 0,
            size: init.size || input.size || 0
          });
          const headers = new Headers2(init.headers || input.headers || {});
          if (inputBody != null && !headers.has("Content-Type")) {
            const contentType = extractContentType(inputBody);
            if (contentType) {
              headers.append("Content-Type", contentType);
            }
          }
          let signal = isRequest(input) ? input.signal : null;
          if ("signal" in init)
            signal = init.signal;
          if (signal != null && !isAbortSignal(signal)) {
            throw new TypeError("Expected signal to be an instanceof AbortSignal");
          }
          this[INTERNALS$2] = {
            method,
            redirect: init.redirect || input.redirect || "follow",
            headers,
            parsedURL,
            signal
          };
          this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
          this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
          this.counter = init.counter || input.counter || 0;
          this.agent = init.agent || input.agent;
        }
        get method() {
          return this[INTERNALS$2].method;
        }
        get url() {
          return format_url(this[INTERNALS$2].parsedURL);
        }
        get headers() {
          return this[INTERNALS$2].headers;
        }
        get redirect() {
          return this[INTERNALS$2].redirect;
        }
        get signal() {
          return this[INTERNALS$2].signal;
        }
        clone() {
          return new Request(this);
        }
      };
      Body.mixIn(Request.prototype);
      Object.defineProperty(Request.prototype, Symbol.toStringTag, {
        value: "Request",
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperties(Request.prototype, {
        method: { enumerable: true },
        url: { enumerable: true },
        headers: { enumerable: true },
        redirect: { enumerable: true },
        clone: { enumerable: true },
        signal: { enumerable: true }
      });
      AbortError.prototype = Object.create(Error.prototype);
      AbortError.prototype.constructor = AbortError;
      AbortError.prototype.name = "AbortError";
      URL$1 = import_url.default.URL || import_whatwg_url.default.URL;
      PassThrough$1 = import_stream.default.PassThrough;
      isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
        const orig = new URL$1(original).hostname;
        const dest = new URL$1(destination).hostname;
        return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
      };
      fetch.isRedirect = function(code) {
        return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
      };
      fetch.Promise = global.Promise;
      lib_default = fetch;
    }
  });

  // node_modules/cross-fetch/dist/node-ponyfill.js
  var require_node_ponyfill = __commonJS({
    "node_modules/cross-fetch/dist/node-ponyfill.js"(exports, module) {
      var nodeFetch = (init_lib(), __toCommonJS(lib_exports));
      var realFetch = nodeFetch.default || nodeFetch;
      var fetch2 = function(url, options) {
        if (/^\/\//.test(url)) {
          url = "https:" + url;
        }
        return realFetch.call(this, url, options);
      };
      fetch2.ponyfill = true;
      module.exports = exports = fetch2;
      exports.fetch = fetch2;
      exports.Headers = nodeFetch.Headers;
      exports.Request = nodeFetch.Request;
      exports.Response = nodeFetch.Response;
      exports.default = fetch2;
    }
  });

  // node_modules/graphql/jsutils/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/graphql/jsutils/isObjectLike.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isObjectLike = isObjectLike;
      function isObjectLike(value) {
        return typeof value == "object" && value !== null;
      }
    }
  });

  // node_modules/graphql/jsutils/invariant.js
  var require_invariant = __commonJS({
    "node_modules/graphql/jsutils/invariant.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.invariant = invariant2;
      function invariant2(condition, message) {
        const booleanCondition = Boolean(condition);
        if (!booleanCondition) {
          throw new Error(message != null ? message : "Unexpected invariant triggered.");
        }
      }
    }
  });

  // node_modules/graphql/language/location.js
  var require_location = __commonJS({
    "node_modules/graphql/language/location.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getLocation = getLocation;
      var _invariant = require_invariant();
      var LineRegExp = /\r\n|[\n\r]/g;
      function getLocation(source, position) {
        let lastLineStart = 0;
        let line = 1;
        for (const match of source.body.matchAll(LineRegExp)) {
          typeof match.index === "number" || (0, _invariant.invariant)(false);
          if (match.index >= position) {
            break;
          }
          lastLineStart = match.index + match[0].length;
          line += 1;
        }
        return {
          line,
          column: position + 1 - lastLineStart
        };
      }
    }
  });

  // node_modules/graphql/language/printLocation.js
  var require_printLocation = __commonJS({
    "node_modules/graphql/language/printLocation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.printLocation = printLocation;
      exports.printSourceLocation = printSourceLocation;
      var _location = require_location();
      function printLocation(location) {
        return printSourceLocation(location.source, (0, _location.getLocation)(location.source, location.start));
      }
      function printSourceLocation(source, sourceLocation) {
        const firstLineColumnOffset = source.locationOffset.column - 1;
        const body = "".padStart(firstLineColumnOffset) + source.body;
        const lineIndex = sourceLocation.line - 1;
        const lineOffset = source.locationOffset.line - 1;
        const lineNum = sourceLocation.line + lineOffset;
        const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
        const columnNum = sourceLocation.column + columnOffset;
        const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
        const lines = body.split(/\r\n|[\n\r]/g);
        const locationLine = lines[lineIndex];
        if (locationLine.length > 120) {
          const subLineIndex = Math.floor(columnNum / 80);
          const subLineColumnNum = columnNum % 80;
          const subLines = [];
          for (let i3 = 0; i3 < locationLine.length; i3 += 80) {
            subLines.push(locationLine.slice(i3, i3 + 80));
          }
          return locationStr + printPrefixedLines([
            [`${lineNum} |`, subLines[0]],
            ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
            ["|", "^".padStart(subLineColumnNum)],
            ["|", subLines[subLineIndex + 1]]
          ]);
        }
        return locationStr + printPrefixedLines([
          [`${lineNum - 1} |`, lines[lineIndex - 1]],
          [`${lineNum} |`, locationLine],
          ["|", "^".padStart(columnNum)],
          [`${lineNum + 1} |`, lines[lineIndex + 1]]
        ]);
      }
      function printPrefixedLines(lines) {
        const existingLines = lines.filter(([_3, line]) => line !== void 0);
        const padLen = Math.max(...existingLines.map(([prefix2]) => prefix2.length));
        return existingLines.map(([prefix2, line]) => prefix2.padStart(padLen) + (line ? " " + line : "")).join("\n");
      }
    }
  });

  // node_modules/graphql/error/GraphQLError.js
  var require_GraphQLError = __commonJS({
    "node_modules/graphql/error/GraphQLError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.GraphQLError = void 0;
      exports.formatError = formatError;
      exports.printError = printError;
      var _isObjectLike = require_isObjectLike();
      var _location = require_location();
      var _printLocation = require_printLocation();
      function toNormalizedOptions(args) {
        const firstArg = args[0];
        if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
          return {
            nodes: firstArg,
            source: args[1],
            positions: args[2],
            path: args[3],
            originalError: args[4],
            extensions: args[5]
          };
        }
        return firstArg;
      }
      var GraphQLError = class extends Error {
        constructor(message, ...rawArgs) {
          var _this$nodes, _nodeLocations$, _ref;
          const { nodes, source, positions, path, originalError, extensions } = toNormalizedOptions(rawArgs);
          super(message);
          this.name = "GraphQLError";
          this.path = path !== null && path !== void 0 ? path : void 0;
          this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
          this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0);
          const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null));
          this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
          this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
          this.locations = positions && source ? positions.map((pos) => (0, _location.getLocation)(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => (0, _location.getLocation)(loc.source, loc.start));
          const originalExtensions = (0, _isObjectLike.isObjectLike)(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
          this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
          Object.defineProperties(this, {
            message: {
              writable: true,
              enumerable: true
            },
            name: {
              enumerable: false
            },
            nodes: {
              enumerable: false
            },
            source: {
              enumerable: false
            },
            positions: {
              enumerable: false
            },
            originalError: {
              enumerable: false
            }
          });
          if (originalError !== null && originalError !== void 0 && originalError.stack) {
            Object.defineProperty(this, "stack", {
              value: originalError.stack,
              writable: true,
              configurable: true
            });
          } else if (Error.captureStackTrace) {
            Error.captureStackTrace(this, GraphQLError);
          } else {
            Object.defineProperty(this, "stack", {
              value: Error().stack,
              writable: true,
              configurable: true
            });
          }
        }
        get [Symbol.toStringTag]() {
          return "GraphQLError";
        }
        toString() {
          let output = this.message;
          if (this.nodes) {
            for (const node of this.nodes) {
              if (node.loc) {
                output += "\n\n" + (0, _printLocation.printLocation)(node.loc);
              }
            }
          } else if (this.source && this.locations) {
            for (const location of this.locations) {
              output += "\n\n" + (0, _printLocation.printSourceLocation)(this.source, location);
            }
          }
          return output;
        }
        toJSON() {
          const formattedError = {
            message: this.message
          };
          if (this.locations != null) {
            formattedError.locations = this.locations;
          }
          if (this.path != null) {
            formattedError.path = this.path;
          }
          if (this.extensions != null && Object.keys(this.extensions).length > 0) {
            formattedError.extensions = this.extensions;
          }
          return formattedError;
        }
      };
      exports.GraphQLError = GraphQLError;
      function undefinedIfEmpty(array) {
        return array === void 0 || array.length === 0 ? void 0 : array;
      }
      function printError(error) {
        return error.toString();
      }
      function formatError(error) {
        return error.toJSON();
      }
    }
  });

  // node_modules/graphql/error/syntaxError.js
  var require_syntaxError = __commonJS({
    "node_modules/graphql/error/syntaxError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.syntaxError = syntaxError;
      var _GraphQLError = require_GraphQLError();
      function syntaxError(source, position, description) {
        return new _GraphQLError.GraphQLError(`Syntax Error: ${description}`, {
          source,
          positions: [position]
        });
      }
    }
  });

  // node_modules/graphql/language/ast.js
  var require_ast = __commonJS({
    "node_modules/graphql/language/ast.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Token = exports.QueryDocumentKeys = exports.OperationTypeNode = exports.Location = void 0;
      exports.isNode = isNode;
      var Location = class {
        constructor(startToken, endToken, source) {
          this.start = startToken.start;
          this.end = endToken.end;
          this.startToken = startToken;
          this.endToken = endToken;
          this.source = source;
        }
        get [Symbol.toStringTag]() {
          return "Location";
        }
        toJSON() {
          return {
            start: this.start,
            end: this.end
          };
        }
      };
      exports.Location = Location;
      var Token = class {
        constructor(kind, start, end, line, column, value) {
          this.kind = kind;
          this.start = start;
          this.end = end;
          this.line = line;
          this.column = column;
          this.value = value;
          this.prev = null;
          this.next = null;
        }
        get [Symbol.toStringTag]() {
          return "Token";
        }
        toJSON() {
          return {
            kind: this.kind,
            value: this.value,
            line: this.line,
            column: this.column
          };
        }
      };
      exports.Token = Token;
      var QueryDocumentKeys = {
        Name: [],
        Document: ["definitions"],
        OperationDefinition: [
          "name",
          "variableDefinitions",
          "directives",
          "selectionSet"
        ],
        VariableDefinition: ["variable", "type", "defaultValue", "directives"],
        Variable: ["name"],
        SelectionSet: ["selections"],
        Field: ["alias", "name", "arguments", "directives", "selectionSet"],
        Argument: ["name", "value"],
        FragmentSpread: ["name", "directives"],
        InlineFragment: ["typeCondition", "directives", "selectionSet"],
        FragmentDefinition: [
          "name",
          "variableDefinitions",
          "typeCondition",
          "directives",
          "selectionSet"
        ],
        IntValue: [],
        FloatValue: [],
        StringValue: [],
        BooleanValue: [],
        NullValue: [],
        EnumValue: [],
        ListValue: ["values"],
        ObjectValue: ["fields"],
        ObjectField: ["name", "value"],
        Directive: ["name", "arguments"],
        NamedType: ["name"],
        ListType: ["type"],
        NonNullType: ["type"],
        SchemaDefinition: ["description", "directives", "operationTypes"],
        OperationTypeDefinition: ["type"],
        ScalarTypeDefinition: ["description", "name", "directives"],
        ObjectTypeDefinition: [
          "description",
          "name",
          "interfaces",
          "directives",
          "fields"
        ],
        FieldDefinition: ["description", "name", "arguments", "type", "directives"],
        InputValueDefinition: [
          "description",
          "name",
          "type",
          "defaultValue",
          "directives"
        ],
        InterfaceTypeDefinition: [
          "description",
          "name",
          "interfaces",
          "directives",
          "fields"
        ],
        UnionTypeDefinition: ["description", "name", "directives", "types"],
        EnumTypeDefinition: ["description", "name", "directives", "values"],
        EnumValueDefinition: ["description", "name", "directives"],
        InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
        DirectiveDefinition: ["description", "name", "arguments", "locations"],
        SchemaExtension: ["directives", "operationTypes"],
        ScalarTypeExtension: ["name", "directives"],
        ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
        InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
        UnionTypeExtension: ["name", "directives", "types"],
        EnumTypeExtension: ["name", "directives", "values"],
        InputObjectTypeExtension: ["name", "directives", "fields"]
      };
      exports.QueryDocumentKeys = QueryDocumentKeys;
      var kindValues = new Set(Object.keys(QueryDocumentKeys));
      function isNode(maybeNode) {
        const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
        return typeof maybeKind === "string" && kindValues.has(maybeKind);
      }
      var OperationTypeNode;
      exports.OperationTypeNode = OperationTypeNode;
      (function(OperationTypeNode2) {
        OperationTypeNode2["QUERY"] = "query";
        OperationTypeNode2["MUTATION"] = "mutation";
        OperationTypeNode2["SUBSCRIPTION"] = "subscription";
      })(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));
    }
  });

  // node_modules/graphql/language/directiveLocation.js
  var require_directiveLocation = __commonJS({
    "node_modules/graphql/language/directiveLocation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DirectiveLocation = void 0;
      var DirectiveLocation;
      exports.DirectiveLocation = DirectiveLocation;
      (function(DirectiveLocation2) {
        DirectiveLocation2["QUERY"] = "QUERY";
        DirectiveLocation2["MUTATION"] = "MUTATION";
        DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
        DirectiveLocation2["FIELD"] = "FIELD";
        DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
        DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
        DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
        DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
        DirectiveLocation2["SCHEMA"] = "SCHEMA";
        DirectiveLocation2["SCALAR"] = "SCALAR";
        DirectiveLocation2["OBJECT"] = "OBJECT";
        DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
        DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
        DirectiveLocation2["INTERFACE"] = "INTERFACE";
        DirectiveLocation2["UNION"] = "UNION";
        DirectiveLocation2["ENUM"] = "ENUM";
        DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
        DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
        DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
      })(DirectiveLocation || (exports.DirectiveLocation = DirectiveLocation = {}));
    }
  });

  // node_modules/graphql/language/kinds.js
  var require_kinds = __commonJS({
    "node_modules/graphql/language/kinds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Kind = void 0;
      var Kind;
      exports.Kind = Kind;
      (function(Kind2) {
        Kind2["NAME"] = "Name";
        Kind2["DOCUMENT"] = "Document";
        Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
        Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
        Kind2["SELECTION_SET"] = "SelectionSet";
        Kind2["FIELD"] = "Field";
        Kind2["ARGUMENT"] = "Argument";
        Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
        Kind2["INLINE_FRAGMENT"] = "InlineFragment";
        Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
        Kind2["VARIABLE"] = "Variable";
        Kind2["INT"] = "IntValue";
        Kind2["FLOAT"] = "FloatValue";
        Kind2["STRING"] = "StringValue";
        Kind2["BOOLEAN"] = "BooleanValue";
        Kind2["NULL"] = "NullValue";
        Kind2["ENUM"] = "EnumValue";
        Kind2["LIST"] = "ListValue";
        Kind2["OBJECT"] = "ObjectValue";
        Kind2["OBJECT_FIELD"] = "ObjectField";
        Kind2["DIRECTIVE"] = "Directive";
        Kind2["NAMED_TYPE"] = "NamedType";
        Kind2["LIST_TYPE"] = "ListType";
        Kind2["NON_NULL_TYPE"] = "NonNullType";
        Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
        Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
        Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
        Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
        Kind2["FIELD_DEFINITION"] = "FieldDefinition";
        Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
        Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
        Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
        Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
        Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
        Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
        Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
        Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
        Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
        Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
        Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
        Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
        Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
        Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
      })(Kind || (exports.Kind = Kind = {}));
    }
  });

  // node_modules/graphql/language/characterClasses.js
  var require_characterClasses = __commonJS({
    "node_modules/graphql/language/characterClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isDigit = isDigit;
      exports.isLetter = isLetter;
      exports.isNameContinue = isNameContinue;
      exports.isNameStart = isNameStart;
      exports.isWhiteSpace = isWhiteSpace;
      function isWhiteSpace(code) {
        return code === 9 || code === 32;
      }
      function isDigit(code) {
        return code >= 48 && code <= 57;
      }
      function isLetter(code) {
        return code >= 97 && code <= 122 || code >= 65 && code <= 90;
      }
      function isNameStart(code) {
        return isLetter(code) || code === 95;
      }
      function isNameContinue(code) {
        return isLetter(code) || isDigit(code) || code === 95;
      }
    }
  });

  // node_modules/graphql/language/blockString.js
  var require_blockString = __commonJS({
    "node_modules/graphql/language/blockString.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dedentBlockStringLines = dedentBlockStringLines;
      exports.isPrintableAsBlockString = isPrintableAsBlockString;
      exports.printBlockString = printBlockString;
      var _characterClasses = require_characterClasses();
      function dedentBlockStringLines(lines) {
        var _firstNonEmptyLine2;
        let commonIndent = Number.MAX_SAFE_INTEGER;
        let firstNonEmptyLine = null;
        let lastNonEmptyLine = -1;
        for (let i3 = 0; i3 < lines.length; ++i3) {
          var _firstNonEmptyLine;
          const line = lines[i3];
          const indent = leadingWhitespace(line);
          if (indent === line.length) {
            continue;
          }
          firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i3;
          lastNonEmptyLine = i3;
          if (i3 !== 0 && indent < commonIndent) {
            commonIndent = indent;
          }
        }
        return lines.map((line, i3) => i3 === 0 ? line : line.slice(commonIndent)).slice((_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0, lastNonEmptyLine + 1);
      }
      function leadingWhitespace(str) {
        let i3 = 0;
        while (i3 < str.length && (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i3))) {
          ++i3;
        }
        return i3;
      }
      function isPrintableAsBlockString(value) {
        if (value === "") {
          return true;
        }
        let isEmptyLine = true;
        let hasIndent = false;
        let hasCommonIndent = true;
        let seenNonEmptyLine = false;
        for (let i3 = 0; i3 < value.length; ++i3) {
          switch (value.codePointAt(i3)) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 11:
            case 12:
            case 14:
            case 15:
              return false;
            case 13:
              return false;
            case 10:
              if (isEmptyLine && !seenNonEmptyLine) {
                return false;
              }
              seenNonEmptyLine = true;
              isEmptyLine = true;
              hasIndent = false;
              break;
            case 9:
            case 32:
              hasIndent || (hasIndent = isEmptyLine);
              break;
            default:
              hasCommonIndent && (hasCommonIndent = hasIndent);
              isEmptyLine = false;
          }
        }
        if (isEmptyLine) {
          return false;
        }
        if (hasCommonIndent && seenNonEmptyLine) {
          return false;
        }
        return true;
      }
      function printBlockString(value, options) {
        const escapedValue = value.replace(/"""/g, '\\"""');
        const lines = escapedValue.split(/\r\n|[\n\r]/g);
        const isSingleLine = lines.length === 1;
        const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0)));
        const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
        const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
        const hasTrailingSlash = value.endsWith("\\");
        const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
        const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
        let result = "";
        const skipLeadingNewLine = isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));
        if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
          result += "\n";
        }
        result += escapedValue;
        if (printAsMultipleLines || forceTrailingNewline) {
          result += "\n";
        }
        return '"""' + result + '"""';
      }
    }
  });

  // node_modules/graphql/language/tokenKind.js
  var require_tokenKind = __commonJS({
    "node_modules/graphql/language/tokenKind.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TokenKind = void 0;
      var TokenKind;
      exports.TokenKind = TokenKind;
      (function(TokenKind2) {
        TokenKind2["SOF"] = "<SOF>";
        TokenKind2["EOF"] = "<EOF>";
        TokenKind2["BANG"] = "!";
        TokenKind2["DOLLAR"] = "$";
        TokenKind2["AMP"] = "&";
        TokenKind2["PAREN_L"] = "(";
        TokenKind2["PAREN_R"] = ")";
        TokenKind2["SPREAD"] = "...";
        TokenKind2["COLON"] = ":";
        TokenKind2["EQUALS"] = "=";
        TokenKind2["AT"] = "@";
        TokenKind2["BRACKET_L"] = "[";
        TokenKind2["BRACKET_R"] = "]";
        TokenKind2["BRACE_L"] = "{";
        TokenKind2["PIPE"] = "|";
        TokenKind2["BRACE_R"] = "}";
        TokenKind2["NAME"] = "Name";
        TokenKind2["INT"] = "Int";
        TokenKind2["FLOAT"] = "Float";
        TokenKind2["STRING"] = "String";
        TokenKind2["BLOCK_STRING"] = "BlockString";
        TokenKind2["COMMENT"] = "Comment";
      })(TokenKind || (exports.TokenKind = TokenKind = {}));
    }
  });

  // node_modules/graphql/language/lexer.js
  var require_lexer = __commonJS({
    "node_modules/graphql/language/lexer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Lexer = void 0;
      exports.isPunctuatorTokenKind = isPunctuatorTokenKind;
      var _syntaxError = require_syntaxError();
      var _ast = require_ast();
      var _blockString = require_blockString();
      var _characterClasses = require_characterClasses();
      var _tokenKind = require_tokenKind();
      var Lexer = class {
        constructor(source) {
          const startOfFileToken = new _ast.Token(_tokenKind.TokenKind.SOF, 0, 0, 0, 0);
          this.source = source;
          this.lastToken = startOfFileToken;
          this.token = startOfFileToken;
          this.line = 1;
          this.lineStart = 0;
        }
        get [Symbol.toStringTag]() {
          return "Lexer";
        }
        advance() {
          this.lastToken = this.token;
          const token = this.token = this.lookahead();
          return token;
        }
        lookahead() {
          let token = this.token;
          if (token.kind !== _tokenKind.TokenKind.EOF) {
            do {
              if (token.next) {
                token = token.next;
              } else {
                const nextToken = readNextToken(this, token.end);
                token.next = nextToken;
                nextToken.prev = token;
                token = nextToken;
              }
            } while (token.kind === _tokenKind.TokenKind.COMMENT);
          }
          return token;
        }
      };
      exports.Lexer = Lexer;
      function isPunctuatorTokenKind(kind) {
        return kind === _tokenKind.TokenKind.BANG || kind === _tokenKind.TokenKind.DOLLAR || kind === _tokenKind.TokenKind.AMP || kind === _tokenKind.TokenKind.PAREN_L || kind === _tokenKind.TokenKind.PAREN_R || kind === _tokenKind.TokenKind.SPREAD || kind === _tokenKind.TokenKind.COLON || kind === _tokenKind.TokenKind.EQUALS || kind === _tokenKind.TokenKind.AT || kind === _tokenKind.TokenKind.BRACKET_L || kind === _tokenKind.TokenKind.BRACKET_R || kind === _tokenKind.TokenKind.BRACE_L || kind === _tokenKind.TokenKind.PIPE || kind === _tokenKind.TokenKind.BRACE_R;
      }
      function isUnicodeScalarValue(code) {
        return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
      }
      function isSupplementaryCodePoint(body, location) {
        return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
      }
      function isLeadingSurrogate(code) {
        return code >= 55296 && code <= 56319;
      }
      function isTrailingSurrogate(code) {
        return code >= 56320 && code <= 57343;
      }
      function printCodePointAt(lexer, location) {
        const code = lexer.source.body.codePointAt(location);
        if (code === void 0) {
          return _tokenKind.TokenKind.EOF;
        } else if (code >= 32 && code <= 126) {
          const char = String.fromCodePoint(code);
          return char === '"' ? `'"'` : `"${char}"`;
        }
        return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
      }
      function createToken(lexer, kind, start, end, value) {
        const line = lexer.line;
        const col = 1 + start - lexer.lineStart;
        return new _ast.Token(kind, start, end, line, col, value);
      }
      function readNextToken(lexer, start) {
        const body = lexer.source.body;
        const bodyLength = body.length;
        let position = start;
        while (position < bodyLength) {
          const code = body.charCodeAt(position);
          switch (code) {
            case 65279:
            case 9:
            case 32:
            case 44:
              ++position;
              continue;
            case 10:
              ++position;
              ++lexer.line;
              lexer.lineStart = position;
              continue;
            case 13:
              if (body.charCodeAt(position + 1) === 10) {
                position += 2;
              } else {
                ++position;
              }
              ++lexer.line;
              lexer.lineStart = position;
              continue;
            case 35:
              return readComment(lexer, position);
            case 33:
              return createToken(lexer, _tokenKind.TokenKind.BANG, position, position + 1);
            case 36:
              return createToken(lexer, _tokenKind.TokenKind.DOLLAR, position, position + 1);
            case 38:
              return createToken(lexer, _tokenKind.TokenKind.AMP, position, position + 1);
            case 40:
              return createToken(lexer, _tokenKind.TokenKind.PAREN_L, position, position + 1);
            case 41:
              return createToken(lexer, _tokenKind.TokenKind.PAREN_R, position, position + 1);
            case 46:
              if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
                return createToken(lexer, _tokenKind.TokenKind.SPREAD, position, position + 3);
              }
              break;
            case 58:
              return createToken(lexer, _tokenKind.TokenKind.COLON, position, position + 1);
            case 61:
              return createToken(lexer, _tokenKind.TokenKind.EQUALS, position, position + 1);
            case 64:
              return createToken(lexer, _tokenKind.TokenKind.AT, position, position + 1);
            case 91:
              return createToken(lexer, _tokenKind.TokenKind.BRACKET_L, position, position + 1);
            case 93:
              return createToken(lexer, _tokenKind.TokenKind.BRACKET_R, position, position + 1);
            case 123:
              return createToken(lexer, _tokenKind.TokenKind.BRACE_L, position, position + 1);
            case 124:
              return createToken(lexer, _tokenKind.TokenKind.PIPE, position, position + 1);
            case 125:
              return createToken(lexer, _tokenKind.TokenKind.BRACE_R, position, position + 1);
            case 34:
              if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
                return readBlockString(lexer, position);
              }
              return readString(lexer, position);
          }
          if ((0, _characterClasses.isDigit)(code) || code === 45) {
            return readNumber(lexer, position, code);
          }
          if ((0, _characterClasses.isNameStart)(code)) {
            return readName(lexer, position);
          }
          throw (0, _syntaxError.syntaxError)(lexer.source, position, code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`);
        }
        return createToken(lexer, _tokenKind.TokenKind.EOF, bodyLength, bodyLength);
      }
      function readComment(lexer, start) {
        const body = lexer.source.body;
        const bodyLength = body.length;
        let position = start + 1;
        while (position < bodyLength) {
          const code = body.charCodeAt(position);
          if (code === 10 || code === 13) {
            break;
          }
          if (isUnicodeScalarValue(code)) {
            ++position;
          } else if (isSupplementaryCodePoint(body, position)) {
            position += 2;
          } else {
            break;
          }
        }
        return createToken(lexer, _tokenKind.TokenKind.COMMENT, start, position, body.slice(start + 1, position));
      }
      function readNumber(lexer, start, firstCode) {
        const body = lexer.source.body;
        let position = start;
        let code = firstCode;
        let isFloat = false;
        if (code === 45) {
          code = body.charCodeAt(++position);
        }
        if (code === 48) {
          code = body.charCodeAt(++position);
          if ((0, _characterClasses.isDigit)(code)) {
            throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid number, unexpected digit after 0: ${printCodePointAt(lexer, position)}.`);
          }
        } else {
          position = readDigits(lexer, position, code);
          code = body.charCodeAt(position);
        }
        if (code === 46) {
          isFloat = true;
          code = body.charCodeAt(++position);
          position = readDigits(lexer, position, code);
          code = body.charCodeAt(position);
        }
        if (code === 69 || code === 101) {
          isFloat = true;
          code = body.charCodeAt(++position);
          if (code === 43 || code === 45) {
            code = body.charCodeAt(++position);
          }
          position = readDigits(lexer, position, code);
          code = body.charCodeAt(position);
        }
        if (code === 46 || (0, _characterClasses.isNameStart)(code)) {
          throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid number, expected digit but got: ${printCodePointAt(lexer, position)}.`);
        }
        return createToken(lexer, isFloat ? _tokenKind.TokenKind.FLOAT : _tokenKind.TokenKind.INT, start, position, body.slice(start, position));
      }
      function readDigits(lexer, start, firstCode) {
        if (!(0, _characterClasses.isDigit)(firstCode)) {
          throw (0, _syntaxError.syntaxError)(lexer.source, start, `Invalid number, expected digit but got: ${printCodePointAt(lexer, start)}.`);
        }
        const body = lexer.source.body;
        let position = start + 1;
        while ((0, _characterClasses.isDigit)(body.charCodeAt(position))) {
          ++position;
        }
        return position;
      }
      function readString(lexer, start) {
        const body = lexer.source.body;
        const bodyLength = body.length;
        let position = start + 1;
        let chunkStart = position;
        let value = "";
        while (position < bodyLength) {
          const code = body.charCodeAt(position);
          if (code === 34) {
            value += body.slice(chunkStart, position);
            return createToken(lexer, _tokenKind.TokenKind.STRING, start, position + 1, value);
          }
          if (code === 92) {
            value += body.slice(chunkStart, position);
            const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
            value += escape.value;
            position += escape.size;
            chunkStart = position;
            continue;
          }
          if (code === 10 || code === 13) {
            break;
          }
          if (isUnicodeScalarValue(code)) {
            ++position;
          } else if (isSupplementaryCodePoint(body, position)) {
            position += 2;
          } else {
            throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);
          }
        }
        throw (0, _syntaxError.syntaxError)(lexer.source, position, "Unterminated string.");
      }
      function readEscapedUnicodeVariableWidth(lexer, position) {
        const body = lexer.source.body;
        let point = 0;
        let size = 3;
        while (size < 12) {
          const code = body.charCodeAt(position + size++);
          if (code === 125) {
            if (size < 5 || !isUnicodeScalarValue(point)) {
              break;
            }
            return {
              value: String.fromCodePoint(point),
              size
            };
          }
          point = point << 4 | readHexDigit(code);
          if (point < 0) {
            break;
          }
        }
        throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid Unicode escape sequence: "${body.slice(position, position + size)}".`);
      }
      function readEscapedUnicodeFixedWidth(lexer, position) {
        const body = lexer.source.body;
        const code = read16BitHexCode(body, position + 2);
        if (isUnicodeScalarValue(code)) {
          return {
            value: String.fromCodePoint(code),
            size: 6
          };
        }
        if (isLeadingSurrogate(code)) {
          if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
            const trailingCode = read16BitHexCode(body, position + 8);
            if (isTrailingSurrogate(trailingCode)) {
              return {
                value: String.fromCodePoint(code, trailingCode),
                size: 12
              };
            }
          }
        }
        throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`);
      }
      function read16BitHexCode(body, position) {
        return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
      }
      function readHexDigit(code) {
        return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
      }
      function readEscapedCharacter(lexer, position) {
        const body = lexer.source.body;
        const code = body.charCodeAt(position + 1);
        switch (code) {
          case 34:
            return {
              value: '"',
              size: 2
            };
          case 92:
            return {
              value: "\\",
              size: 2
            };
          case 47:
            return {
              value: "/",
              size: 2
            };
          case 98:
            return {
              value: "\b",
              size: 2
            };
          case 102:
            return {
              value: "\f",
              size: 2
            };
          case 110:
            return {
              value: "\n",
              size: 2
            };
          case 114:
            return {
              value: "\r",
              size: 2
            };
          case 116:
            return {
              value: "	",
              size: 2
            };
        }
        throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid character escape sequence: "${body.slice(position, position + 2)}".`);
      }
      function readBlockString(lexer, start) {
        const body = lexer.source.body;
        const bodyLength = body.length;
        let lineStart = lexer.lineStart;
        let position = start + 3;
        let chunkStart = position;
        let currentLine = "";
        const blockLines = [];
        while (position < bodyLength) {
          const code = body.charCodeAt(position);
          if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
            currentLine += body.slice(chunkStart, position);
            blockLines.push(currentLine);
            const token = createToken(lexer, _tokenKind.TokenKind.BLOCK_STRING, start, position + 3, (0, _blockString.dedentBlockStringLines)(blockLines).join("\n"));
            lexer.line += blockLines.length - 1;
            lexer.lineStart = lineStart;
            return token;
          }
          if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
            currentLine += body.slice(chunkStart, position);
            chunkStart = position + 1;
            position += 4;
            continue;
          }
          if (code === 10 || code === 13) {
            currentLine += body.slice(chunkStart, position);
            blockLines.push(currentLine);
            if (code === 13 && body.charCodeAt(position + 1) === 10) {
              position += 2;
            } else {
              ++position;
            }
            currentLine = "";
            chunkStart = position;
            lineStart = position;
            continue;
          }
          if (isUnicodeScalarValue(code)) {
            ++position;
          } else if (isSupplementaryCodePoint(body, position)) {
            position += 2;
          } else {
            throw (0, _syntaxError.syntaxError)(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);
          }
        }
        throw (0, _syntaxError.syntaxError)(lexer.source, position, "Unterminated string.");
      }
      function readName(lexer, start) {
        const body = lexer.source.body;
        const bodyLength = body.length;
        let position = start + 1;
        while (position < bodyLength) {
          const code = body.charCodeAt(position);
          if ((0, _characterClasses.isNameContinue)(code)) {
            ++position;
          } else {
            break;
          }
        }
        return createToken(lexer, _tokenKind.TokenKind.NAME, start, position, body.slice(start, position));
      }
    }
  });

  // node_modules/graphql/jsutils/devAssert.js
  var require_devAssert = __commonJS({
    "node_modules/graphql/jsutils/devAssert.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.devAssert = devAssert;
      function devAssert(condition, message) {
        const booleanCondition = Boolean(condition);
        if (!booleanCondition) {
          throw new Error(message);
        }
      }
    }
  });

  // node_modules/graphql/jsutils/inspect.js
  var require_inspect = __commonJS({
    "node_modules/graphql/jsutils/inspect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.inspect = inspect;
      var MAX_ARRAY_LENGTH = 10;
      var MAX_RECURSIVE_DEPTH = 2;
      function inspect(value) {
        return formatValue(value, []);
      }
      function formatValue(value, seenValues) {
        switch (typeof value) {
          case "string":
            return JSON.stringify(value);
          case "function":
            return value.name ? `[function ${value.name}]` : "[function]";
          case "object":
            return formatObjectValue(value, seenValues);
          default:
            return String(value);
        }
      }
      function formatObjectValue(value, previouslySeenValues) {
        if (value === null) {
          return "null";
        }
        if (previouslySeenValues.includes(value)) {
          return "[Circular]";
        }
        const seenValues = [...previouslySeenValues, value];
        if (isJSONable(value)) {
          const jsonValue = value.toJSON();
          if (jsonValue !== value) {
            return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
          }
        } else if (Array.isArray(value)) {
          return formatArray(value, seenValues);
        }
        return formatObject(value, seenValues);
      }
      function isJSONable(value) {
        return typeof value.toJSON === "function";
      }
      function formatObject(object2, seenValues) {
        const entries = Object.entries(object2);
        if (entries.length === 0) {
          return "{}";
        }
        if (seenValues.length > MAX_RECURSIVE_DEPTH) {
          return "[" + getObjectTag(object2) + "]";
        }
        const properties = entries.map(([key, value]) => key + ": " + formatValue(value, seenValues));
        return "{ " + properties.join(", ") + " }";
      }
      function formatArray(array, seenValues) {
        if (array.length === 0) {
          return "[]";
        }
        if (seenValues.length > MAX_RECURSIVE_DEPTH) {
          return "[Array]";
        }
        const len = Math.min(MAX_ARRAY_LENGTH, array.length);
        const remaining = array.length - len;
        const items = [];
        for (let i3 = 0; i3 < len; ++i3) {
          items.push(formatValue(array[i3], seenValues));
        }
        if (remaining === 1) {
          items.push("... 1 more item");
        } else if (remaining > 1) {
          items.push(`... ${remaining} more items`);
        }
        return "[" + items.join(", ") + "]";
      }
      function getObjectTag(object2) {
        const tag = Object.prototype.toString.call(object2).replace(/^\[object /, "").replace(/]$/, "");
        if (tag === "Object" && typeof object2.constructor === "function") {
          const name = object2.constructor.name;
          if (typeof name === "string" && name !== "") {
            return name;
          }
        }
        return tag;
      }
    }
  });

  // node_modules/graphql/jsutils/instanceOf.js
  var require_instanceOf = __commonJS({
    "node_modules/graphql/jsutils/instanceOf.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.instanceOf = void 0;
      var _inspect = require_inspect();
      var instanceOf = process.env.NODE_ENV === "production" ? function instanceOf2(value, constructor) {
        return value instanceof constructor;
      } : function instanceOf2(value, constructor) {
        if (value instanceof constructor) {
          return true;
        }
        if (typeof value === "object" && value !== null) {
          var _value$constructor;
          const className = constructor.prototype[Symbol.toStringTag];
          const valueClassName = Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
          if (className === valueClassName) {
            const stringifiedValue = (0, _inspect.inspect)(value);
            throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
          }
        }
        return false;
      };
      exports.instanceOf = instanceOf;
    }
  });

  // node_modules/graphql/language/source.js
  var require_source = __commonJS({
    "node_modules/graphql/language/source.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Source = void 0;
      exports.isSource = isSource;
      var _devAssert = require_devAssert();
      var _inspect = require_inspect();
      var _instanceOf = require_instanceOf();
      var Source = class {
        constructor(body, name = "GraphQL request", locationOffset = {
          line: 1,
          column: 1
        }) {
          typeof body === "string" || (0, _devAssert.devAssert)(false, `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`);
          this.body = body;
          this.name = name;
          this.locationOffset = locationOffset;
          this.locationOffset.line > 0 || (0, _devAssert.devAssert)(false, "line in locationOffset is 1-indexed and must be positive.");
          this.locationOffset.column > 0 || (0, _devAssert.devAssert)(false, "column in locationOffset is 1-indexed and must be positive.");
        }
        get [Symbol.toStringTag]() {
          return "Source";
        }
      };
      exports.Source = Source;
      function isSource(source) {
        return (0, _instanceOf.instanceOf)(source, Source);
      }
    }
  });

  // node_modules/graphql/language/parser.js
  var require_parser = __commonJS({
    "node_modules/graphql/language/parser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Parser = void 0;
      exports.parse = parse;
      exports.parseConstValue = parseConstValue;
      exports.parseType = parseType;
      exports.parseValue = parseValue;
      var _syntaxError = require_syntaxError();
      var _ast = require_ast();
      var _directiveLocation = require_directiveLocation();
      var _kinds = require_kinds();
      var _lexer = require_lexer();
      var _source = require_source();
      var _tokenKind = require_tokenKind();
      function parse(source, options) {
        const parser = new Parser(source, options);
        return parser.parseDocument();
      }
      function parseValue(source, options) {
        const parser = new Parser(source, options);
        parser.expectToken(_tokenKind.TokenKind.SOF);
        const value = parser.parseValueLiteral(false);
        parser.expectToken(_tokenKind.TokenKind.EOF);
        return value;
      }
      function parseConstValue(source, options) {
        const parser = new Parser(source, options);
        parser.expectToken(_tokenKind.TokenKind.SOF);
        const value = parser.parseConstValueLiteral();
        parser.expectToken(_tokenKind.TokenKind.EOF);
        return value;
      }
      function parseType(source, options) {
        const parser = new Parser(source, options);
        parser.expectToken(_tokenKind.TokenKind.SOF);
        const type = parser.parseTypeReference();
        parser.expectToken(_tokenKind.TokenKind.EOF);
        return type;
      }
      var Parser = class {
        constructor(source, options) {
          const sourceObj = (0, _source.isSource)(source) ? source : new _source.Source(source);
          this._lexer = new _lexer.Lexer(sourceObj);
          this._options = options;
        }
        parseName() {
          const token = this.expectToken(_tokenKind.TokenKind.NAME);
          return this.node(token, {
            kind: _kinds.Kind.NAME,
            value: token.value
          });
        }
        parseDocument() {
          return this.node(this._lexer.token, {
            kind: _kinds.Kind.DOCUMENT,
            definitions: this.many(_tokenKind.TokenKind.SOF, this.parseDefinition, _tokenKind.TokenKind.EOF)
          });
        }
        parseDefinition() {
          if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
            return this.parseOperationDefinition();
          }
          const hasDescription = this.peekDescription();
          const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
          if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
            switch (keywordToken.value) {
              case "schema":
                return this.parseSchemaDefinition();
              case "scalar":
                return this.parseScalarTypeDefinition();
              case "type":
                return this.parseObjectTypeDefinition();
              case "interface":
                return this.parseInterfaceTypeDefinition();
              case "union":
                return this.parseUnionTypeDefinition();
              case "enum":
                return this.parseEnumTypeDefinition();
              case "input":
                return this.parseInputObjectTypeDefinition();
              case "directive":
                return this.parseDirectiveDefinition();
            }
            if (hasDescription) {
              throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, "Unexpected description, descriptions are supported only on type definitions.");
            }
            switch (keywordToken.value) {
              case "query":
              case "mutation":
              case "subscription":
                return this.parseOperationDefinition();
              case "fragment":
                return this.parseFragmentDefinition();
              case "extend":
                return this.parseTypeSystemExtension();
            }
          }
          throw this.unexpected(keywordToken);
        }
        parseOperationDefinition() {
          const start = this._lexer.token;
          if (this.peek(_tokenKind.TokenKind.BRACE_L)) {
            return this.node(start, {
              kind: _kinds.Kind.OPERATION_DEFINITION,
              operation: _ast.OperationTypeNode.QUERY,
              name: void 0,
              variableDefinitions: [],
              directives: [],
              selectionSet: this.parseSelectionSet()
            });
          }
          const operation = this.parseOperationType();
          let name;
          if (this.peek(_tokenKind.TokenKind.NAME)) {
            name = this.parseName();
          }
          return this.node(start, {
            kind: _kinds.Kind.OPERATION_DEFINITION,
            operation,
            name,
            variableDefinitions: this.parseVariableDefinitions(),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        parseOperationType() {
          const operationToken = this.expectToken(_tokenKind.TokenKind.NAME);
          switch (operationToken.value) {
            case "query":
              return _ast.OperationTypeNode.QUERY;
            case "mutation":
              return _ast.OperationTypeNode.MUTATION;
            case "subscription":
              return _ast.OperationTypeNode.SUBSCRIPTION;
          }
          throw this.unexpected(operationToken);
        }
        parseVariableDefinitions() {
          return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind.TokenKind.PAREN_R);
        }
        parseVariableDefinition() {
          return this.node(this._lexer.token, {
            kind: _kinds.Kind.VARIABLE_DEFINITION,
            variable: this.parseVariable(),
            type: (this.expectToken(_tokenKind.TokenKind.COLON), this.parseTypeReference()),
            defaultValue: this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
            directives: this.parseConstDirectives()
          });
        }
        parseVariable() {
          const start = this._lexer.token;
          this.expectToken(_tokenKind.TokenKind.DOLLAR);
          return this.node(start, {
            kind: _kinds.Kind.VARIABLE,
            name: this.parseName()
          });
        }
        parseSelectionSet() {
          return this.node(this._lexer.token, {
            kind: _kinds.Kind.SELECTION_SET,
            selections: this.many(_tokenKind.TokenKind.BRACE_L, this.parseSelection, _tokenKind.TokenKind.BRACE_R)
          });
        }
        parseSelection() {
          return this.peek(_tokenKind.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
        }
        parseField() {
          const start = this._lexer.token;
          const nameOrAlias = this.parseName();
          let alias;
          let name;
          if (this.expectOptionalToken(_tokenKind.TokenKind.COLON)) {
            alias = nameOrAlias;
            name = this.parseName();
          } else {
            name = nameOrAlias;
          }
          return this.node(start, {
            kind: _kinds.Kind.FIELD,
            alias,
            name,
            arguments: this.parseArguments(false),
            directives: this.parseDirectives(false),
            selectionSet: this.peek(_tokenKind.TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
          });
        }
        parseArguments(isConst) {
          const item = isConst ? this.parseConstArgument : this.parseArgument;
          return this.optionalMany(_tokenKind.TokenKind.PAREN_L, item, _tokenKind.TokenKind.PAREN_R);
        }
        parseArgument(isConst = false) {
          const start = this._lexer.token;
          const name = this.parseName();
          this.expectToken(_tokenKind.TokenKind.COLON);
          return this.node(start, {
            kind: _kinds.Kind.ARGUMENT,
            name,
            value: this.parseValueLiteral(isConst)
          });
        }
        parseConstArgument() {
          return this.parseArgument(true);
        }
        parseFragment() {
          const start = this._lexer.token;
          this.expectToken(_tokenKind.TokenKind.SPREAD);
          const hasTypeCondition = this.expectOptionalKeyword("on");
          if (!hasTypeCondition && this.peek(_tokenKind.TokenKind.NAME)) {
            return this.node(start, {
              kind: _kinds.Kind.FRAGMENT_SPREAD,
              name: this.parseFragmentName(),
              directives: this.parseDirectives(false)
            });
          }
          return this.node(start, {
            kind: _kinds.Kind.INLINE_FRAGMENT,
            typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        parseFragmentDefinition() {
          var _this$_options;
          const start = this._lexer.token;
          this.expectKeyword("fragment");
          if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.allowLegacyFragmentVariables) === true) {
            return this.node(start, {
              kind: _kinds.Kind.FRAGMENT_DEFINITION,
              name: this.parseFragmentName(),
              variableDefinitions: this.parseVariableDefinitions(),
              typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
              directives: this.parseDirectives(false),
              selectionSet: this.parseSelectionSet()
            });
          }
          return this.node(start, {
            kind: _kinds.Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        parseFragmentName() {
          if (this._lexer.token.value === "on") {
            throw this.unexpected();
          }
          return this.parseName();
        }
        parseValueLiteral(isConst) {
          const token = this._lexer.token;
          switch (token.kind) {
            case _tokenKind.TokenKind.BRACKET_L:
              return this.parseList(isConst);
            case _tokenKind.TokenKind.BRACE_L:
              return this.parseObject(isConst);
            case _tokenKind.TokenKind.INT:
              this._lexer.advance();
              return this.node(token, {
                kind: _kinds.Kind.INT,
                value: token.value
              });
            case _tokenKind.TokenKind.FLOAT:
              this._lexer.advance();
              return this.node(token, {
                kind: _kinds.Kind.FLOAT,
                value: token.value
              });
            case _tokenKind.TokenKind.STRING:
            case _tokenKind.TokenKind.BLOCK_STRING:
              return this.parseStringLiteral();
            case _tokenKind.TokenKind.NAME:
              this._lexer.advance();
              switch (token.value) {
                case "true":
                  return this.node(token, {
                    kind: _kinds.Kind.BOOLEAN,
                    value: true
                  });
                case "false":
                  return this.node(token, {
                    kind: _kinds.Kind.BOOLEAN,
                    value: false
                  });
                case "null":
                  return this.node(token, {
                    kind: _kinds.Kind.NULL
                  });
                default:
                  return this.node(token, {
                    kind: _kinds.Kind.ENUM,
                    value: token.value
                  });
              }
            case _tokenKind.TokenKind.DOLLAR:
              if (isConst) {
                this.expectToken(_tokenKind.TokenKind.DOLLAR);
                if (this._lexer.token.kind === _tokenKind.TokenKind.NAME) {
                  const varName = this._lexer.token.value;
                  throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Unexpected variable "$${varName}" in constant value.`);
                } else {
                  throw this.unexpected(token);
                }
              }
              return this.parseVariable();
            default:
              throw this.unexpected();
          }
        }
        parseConstValueLiteral() {
          return this.parseValueLiteral(true);
        }
        parseStringLiteral() {
          const token = this._lexer.token;
          this._lexer.advance();
          return this.node(token, {
            kind: _kinds.Kind.STRING,
            value: token.value,
            block: token.kind === _tokenKind.TokenKind.BLOCK_STRING
          });
        }
        parseList(isConst) {
          const item = () => this.parseValueLiteral(isConst);
          return this.node(this._lexer.token, {
            kind: _kinds.Kind.LIST,
            values: this.any(_tokenKind.TokenKind.BRACKET_L, item, _tokenKind.TokenKind.BRACKET_R)
          });
        }
        parseObject(isConst) {
          const item = () => this.parseObjectField(isConst);
          return this.node(this._lexer.token, {
            kind: _kinds.Kind.OBJECT,
            fields: this.any(_tokenKind.TokenKind.BRACE_L, item, _tokenKind.TokenKind.BRACE_R)
          });
        }
        parseObjectField(isConst) {
          const start = this._lexer.token;
          const name = this.parseName();
          this.expectToken(_tokenKind.TokenKind.COLON);
          return this.node(start, {
            kind: _kinds.Kind.OBJECT_FIELD,
            name,
            value: this.parseValueLiteral(isConst)
          });
        }
        parseDirectives(isConst) {
          const directives = [];
          while (this.peek(_tokenKind.TokenKind.AT)) {
            directives.push(this.parseDirective(isConst));
          }
          return directives;
        }
        parseConstDirectives() {
          return this.parseDirectives(true);
        }
        parseDirective(isConst) {
          const start = this._lexer.token;
          this.expectToken(_tokenKind.TokenKind.AT);
          return this.node(start, {
            kind: _kinds.Kind.DIRECTIVE,
            name: this.parseName(),
            arguments: this.parseArguments(isConst)
          });
        }
        parseTypeReference() {
          const start = this._lexer.token;
          let type;
          if (this.expectOptionalToken(_tokenKind.TokenKind.BRACKET_L)) {
            const innerType = this.parseTypeReference();
            this.expectToken(_tokenKind.TokenKind.BRACKET_R);
            type = this.node(start, {
              kind: _kinds.Kind.LIST_TYPE,
              type: innerType
            });
          } else {
            type = this.parseNamedType();
          }
          if (this.expectOptionalToken(_tokenKind.TokenKind.BANG)) {
            return this.node(start, {
              kind: _kinds.Kind.NON_NULL_TYPE,
              type
            });
          }
          return type;
        }
        parseNamedType() {
          return this.node(this._lexer.token, {
            kind: _kinds.Kind.NAMED_TYPE,
            name: this.parseName()
          });
        }
        peekDescription() {
          return this.peek(_tokenKind.TokenKind.STRING) || this.peek(_tokenKind.TokenKind.BLOCK_STRING);
        }
        parseDescription() {
          if (this.peekDescription()) {
            return this.parseStringLiteral();
          }
        }
        parseSchemaDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("schema");
          const directives = this.parseConstDirectives();
          const operationTypes = this.many(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
          return this.node(start, {
            kind: _kinds.Kind.SCHEMA_DEFINITION,
            description,
            directives,
            operationTypes
          });
        }
        parseOperationTypeDefinition() {
          const start = this._lexer.token;
          const operation = this.parseOperationType();
          this.expectToken(_tokenKind.TokenKind.COLON);
          const type = this.parseNamedType();
          return this.node(start, {
            kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
            operation,
            type
          });
        }
        parseScalarTypeDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("scalar");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          return this.node(start, {
            kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
            description,
            name,
            directives
          });
        }
        parseObjectTypeDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("type");
          const name = this.parseName();
          const interfaces = this.parseImplementsInterfaces();
          const directives = this.parseConstDirectives();
          const fields = this.parseFieldsDefinition();
          return this.node(start, {
            kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
            description,
            name,
            interfaces,
            directives,
            fields
          });
        }
        parseImplementsInterfaces() {
          return this.expectOptionalKeyword("implements") ? this.delimitedMany(_tokenKind.TokenKind.AMP, this.parseNamedType) : [];
        }
        parseFieldsDefinition() {
          return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind.TokenKind.BRACE_R);
        }
        parseFieldDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          const name = this.parseName();
          const args = this.parseArgumentDefs();
          this.expectToken(_tokenKind.TokenKind.COLON);
          const type = this.parseTypeReference();
          const directives = this.parseConstDirectives();
          return this.node(start, {
            kind: _kinds.Kind.FIELD_DEFINITION,
            description,
            name,
            arguments: args,
            type,
            directives
          });
        }
        parseArgumentDefs() {
          return this.optionalMany(_tokenKind.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind.TokenKind.PAREN_R);
        }
        parseInputValueDef() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          const name = this.parseName();
          this.expectToken(_tokenKind.TokenKind.COLON);
          const type = this.parseTypeReference();
          let defaultValue;
          if (this.expectOptionalToken(_tokenKind.TokenKind.EQUALS)) {
            defaultValue = this.parseConstValueLiteral();
          }
          const directives = this.parseConstDirectives();
          return this.node(start, {
            kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
            description,
            name,
            type,
            defaultValue,
            directives
          });
        }
        parseInterfaceTypeDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("interface");
          const name = this.parseName();
          const interfaces = this.parseImplementsInterfaces();
          const directives = this.parseConstDirectives();
          const fields = this.parseFieldsDefinition();
          return this.node(start, {
            kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
            description,
            name,
            interfaces,
            directives,
            fields
          });
        }
        parseUnionTypeDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("union");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          const types = this.parseUnionMemberTypes();
          return this.node(start, {
            kind: _kinds.Kind.UNION_TYPE_DEFINITION,
            description,
            name,
            directives,
            types
          });
        }
        parseUnionMemberTypes() {
          return this.expectOptionalToken(_tokenKind.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseNamedType) : [];
        }
        parseEnumTypeDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("enum");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          const values = this.parseEnumValuesDefinition();
          return this.node(start, {
            kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
            description,
            name,
            directives,
            values
          });
        }
        parseEnumValuesDefinition() {
          return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind.TokenKind.BRACE_R);
        }
        parseEnumValueDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          const name = this.parseEnumValueName();
          const directives = this.parseConstDirectives();
          return this.node(start, {
            kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
            description,
            name,
            directives
          });
        }
        parseEnumValueName() {
          if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
            throw (0, _syntaxError.syntaxError)(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);
          }
          return this.parseName();
        }
        parseInputObjectTypeDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("input");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          const fields = this.parseInputFieldsDefinition();
          return this.node(start, {
            kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
            description,
            name,
            directives,
            fields
          });
        }
        parseInputFieldsDefinition() {
          return this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind.TokenKind.BRACE_R);
        }
        parseTypeSystemExtension() {
          const keywordToken = this._lexer.lookahead();
          if (keywordToken.kind === _tokenKind.TokenKind.NAME) {
            switch (keywordToken.value) {
              case "schema":
                return this.parseSchemaExtension();
              case "scalar":
                return this.parseScalarTypeExtension();
              case "type":
                return this.parseObjectTypeExtension();
              case "interface":
                return this.parseInterfaceTypeExtension();
              case "union":
                return this.parseUnionTypeExtension();
              case "enum":
                return this.parseEnumTypeExtension();
              case "input":
                return this.parseInputObjectTypeExtension();
            }
          }
          throw this.unexpected(keywordToken);
        }
        parseSchemaExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("schema");
          const directives = this.parseConstDirectives();
          const operationTypes = this.optionalMany(_tokenKind.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind.TokenKind.BRACE_R);
          if (directives.length === 0 && operationTypes.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.SCHEMA_EXTENSION,
            directives,
            operationTypes
          });
        }
        parseScalarTypeExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("scalar");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          if (directives.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
            name,
            directives
          });
        }
        parseObjectTypeExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("type");
          const name = this.parseName();
          const interfaces = this.parseImplementsInterfaces();
          const directives = this.parseConstDirectives();
          const fields = this.parseFieldsDefinition();
          if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
            name,
            interfaces,
            directives,
            fields
          });
        }
        parseInterfaceTypeExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("interface");
          const name = this.parseName();
          const interfaces = this.parseImplementsInterfaces();
          const directives = this.parseConstDirectives();
          const fields = this.parseFieldsDefinition();
          if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
            name,
            interfaces,
            directives,
            fields
          });
        }
        parseUnionTypeExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("union");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          const types = this.parseUnionMemberTypes();
          if (directives.length === 0 && types.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.UNION_TYPE_EXTENSION,
            name,
            directives,
            types
          });
        }
        parseEnumTypeExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("enum");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          const values = this.parseEnumValuesDefinition();
          if (directives.length === 0 && values.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
            name,
            directives,
            values
          });
        }
        parseInputObjectTypeExtension() {
          const start = this._lexer.token;
          this.expectKeyword("extend");
          this.expectKeyword("input");
          const name = this.parseName();
          const directives = this.parseConstDirectives();
          const fields = this.parseInputFieldsDefinition();
          if (directives.length === 0 && fields.length === 0) {
            throw this.unexpected();
          }
          return this.node(start, {
            kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
            name,
            directives,
            fields
          });
        }
        parseDirectiveDefinition() {
          const start = this._lexer.token;
          const description = this.parseDescription();
          this.expectKeyword("directive");
          this.expectToken(_tokenKind.TokenKind.AT);
          const name = this.parseName();
          const args = this.parseArgumentDefs();
          const repeatable = this.expectOptionalKeyword("repeatable");
          this.expectKeyword("on");
          const locations = this.parseDirectiveLocations();
          return this.node(start, {
            kind: _kinds.Kind.DIRECTIVE_DEFINITION,
            description,
            name,
            arguments: args,
            repeatable,
            locations
          });
        }
        parseDirectiveLocations() {
          return this.delimitedMany(_tokenKind.TokenKind.PIPE, this.parseDirectiveLocation);
        }
        parseDirectiveLocation() {
          const start = this._lexer.token;
          const name = this.parseName();
          if (Object.prototype.hasOwnProperty.call(_directiveLocation.DirectiveLocation, name.value)) {
            return name;
          }
          throw this.unexpected(start);
        }
        node(startToken, node) {
          var _this$_options2;
          if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.noLocation) !== true) {
            node.loc = new _ast.Location(startToken, this._lexer.lastToken, this._lexer.source);
          }
          return node;
        }
        peek(kind) {
          return this._lexer.token.kind === kind;
        }
        expectToken(kind) {
          const token = this._lexer.token;
          if (token.kind === kind) {
            this._lexer.advance();
            return token;
          }
          throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);
        }
        expectOptionalToken(kind) {
          const token = this._lexer.token;
          if (token.kind === kind) {
            this._lexer.advance();
            return true;
          }
          return false;
        }
        expectKeyword(value) {
          const token = this._lexer.token;
          if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
            this._lexer.advance();
          } else {
            throw (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Expected "${value}", found ${getTokenDesc(token)}.`);
          }
        }
        expectOptionalKeyword(value) {
          const token = this._lexer.token;
          if (token.kind === _tokenKind.TokenKind.NAME && token.value === value) {
            this._lexer.advance();
            return true;
          }
          return false;
        }
        unexpected(atToken) {
          const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
          return (0, _syntaxError.syntaxError)(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);
        }
        any(openKind, parseFn, closeKind) {
          this.expectToken(openKind);
          const nodes = [];
          while (!this.expectOptionalToken(closeKind)) {
            nodes.push(parseFn.call(this));
          }
          return nodes;
        }
        optionalMany(openKind, parseFn, closeKind) {
          if (this.expectOptionalToken(openKind)) {
            const nodes = [];
            do {
              nodes.push(parseFn.call(this));
            } while (!this.expectOptionalToken(closeKind));
            return nodes;
          }
          return [];
        }
        many(openKind, parseFn, closeKind) {
          this.expectToken(openKind);
          const nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        delimitedMany(delimiterKind, parseFn) {
          this.expectOptionalToken(delimiterKind);
          const nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (this.expectOptionalToken(delimiterKind));
          return nodes;
        }
      };
      exports.Parser = Parser;
      function getTokenDesc(token) {
        const value = token.value;
        return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
      }
      function getTokenKindDesc(kind) {
        return (0, _lexer.isPunctuatorTokenKind)(kind) ? `"${kind}"` : kind;
      }
    }
  });

  // node_modules/graphql/language/printString.js
  var require_printString = __commonJS({
    "node_modules/graphql/language/printString.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.printString = printString;
      function printString(str) {
        return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
      }
      var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
      function escapedReplacer(str) {
        return escapeSequences[str.charCodeAt(0)];
      }
      var escapeSequences = [
        "\\u0000",
        "\\u0001",
        "\\u0002",
        "\\u0003",
        "\\u0004",
        "\\u0005",
        "\\u0006",
        "\\u0007",
        "\\b",
        "\\t",
        "\\n",
        "\\u000B",
        "\\f",
        "\\r",
        "\\u000E",
        "\\u000F",
        "\\u0010",
        "\\u0011",
        "\\u0012",
        "\\u0013",
        "\\u0014",
        "\\u0015",
        "\\u0016",
        "\\u0017",
        "\\u0018",
        "\\u0019",
        "\\u001A",
        "\\u001B",
        "\\u001C",
        "\\u001D",
        "\\u001E",
        "\\u001F",
        "",
        "",
        '\\"',
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "\\\\",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "\\u007F",
        "\\u0080",
        "\\u0081",
        "\\u0082",
        "\\u0083",
        "\\u0084",
        "\\u0085",
        "\\u0086",
        "\\u0087",
        "\\u0088",
        "\\u0089",
        "\\u008A",
        "\\u008B",
        "\\u008C",
        "\\u008D",
        "\\u008E",
        "\\u008F",
        "\\u0090",
        "\\u0091",
        "\\u0092",
        "\\u0093",
        "\\u0094",
        "\\u0095",
        "\\u0096",
        "\\u0097",
        "\\u0098",
        "\\u0099",
        "\\u009A",
        "\\u009B",
        "\\u009C",
        "\\u009D",
        "\\u009E",
        "\\u009F"
      ];
    }
  });

  // node_modules/graphql/language/visitor.js
  var require_visitor = __commonJS({
    "node_modules/graphql/language/visitor.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.BREAK = void 0;
      exports.getEnterLeaveForKind = getEnterLeaveForKind;
      exports.getVisitFn = getVisitFn;
      exports.visit = visit;
      exports.visitInParallel = visitInParallel;
      var _devAssert = require_devAssert();
      var _inspect = require_inspect();
      var _ast = require_ast();
      var _kinds = require_kinds();
      var BREAK = Object.freeze({});
      exports.BREAK = BREAK;
      function visit(root, visitor, visitorKeys = _ast.QueryDocumentKeys) {
        const enterLeaveMap = /* @__PURE__ */ new Map();
        for (const kind of Object.values(_kinds.Kind)) {
          enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
        }
        let stack = void 0;
        let inArray = Array.isArray(root);
        let keys2 = [root];
        let index = -1;
        let edits = [];
        let node = root;
        let key = void 0;
        let parent = void 0;
        const path = [];
        const ancestors = [];
        do {
          index++;
          const isLeaving = index === keys2.length;
          const isEdited = isLeaving && edits.length !== 0;
          if (isLeaving) {
            key = ancestors.length === 0 ? void 0 : path[path.length - 1];
            node = parent;
            parent = ancestors.pop();
            if (isEdited) {
              if (inArray) {
                node = node.slice();
                let editOffset = 0;
                for (const [editKey, editValue] of edits) {
                  const arrayKey = editKey - editOffset;
                  if (editValue === null) {
                    node.splice(arrayKey, 1);
                    editOffset++;
                  } else {
                    node[arrayKey] = editValue;
                  }
                }
              } else {
                node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));
                for (const [editKey, editValue] of edits) {
                  node[editKey] = editValue;
                }
              }
            }
            index = stack.index;
            keys2 = stack.keys;
            edits = stack.edits;
            inArray = stack.inArray;
            stack = stack.prev;
          } else if (parent) {
            key = inArray ? index : keys2[index];
            node = parent[key];
            if (node === null || node === void 0) {
              continue;
            }
            path.push(key);
          }
          let result;
          if (!Array.isArray(node)) {
            var _enterLeaveMap$get, _enterLeaveMap$get2;
            (0, _ast.isNode)(node) || (0, _devAssert.devAssert)(false, `Invalid AST Node: ${(0, _inspect.inspect)(node)}.`);
            const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
            result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
            if (result === BREAK) {
              break;
            }
            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== void 0) {
              edits.push([key, result]);
              if (!isLeaving) {
                if ((0, _ast.isNode)(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
          if (result === void 0 && isEdited) {
            edits.push([key, node]);
          }
          if (isLeaving) {
            path.pop();
          } else {
            var _node$kind;
            stack = {
              inArray,
              index,
              keys: keys2,
              edits,
              prev: stack
            };
            inArray = Array.isArray(node);
            keys2 = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
            index = -1;
            edits = [];
            if (parent) {
              ancestors.push(parent);
            }
            parent = node;
          }
        } while (stack !== void 0);
        if (edits.length !== 0) {
          return edits[edits.length - 1][1];
        }
        return root;
      }
      function visitInParallel(visitors) {
        const skipping = new Array(visitors.length).fill(null);
        const mergedVisitor = /* @__PURE__ */ Object.create(null);
        for (const kind of Object.values(_kinds.Kind)) {
          let hasVisitor = false;
          const enterList = new Array(visitors.length).fill(void 0);
          const leaveList = new Array(visitors.length).fill(void 0);
          for (let i3 = 0; i3 < visitors.length; ++i3) {
            const { enter, leave } = getEnterLeaveForKind(visitors[i3], kind);
            hasVisitor || (hasVisitor = enter != null || leave != null);
            enterList[i3] = enter;
            leaveList[i3] = leave;
          }
          if (!hasVisitor) {
            continue;
          }
          const mergedEnterLeave = {
            enter(...args) {
              const node = args[0];
              for (let i3 = 0; i3 < visitors.length; i3++) {
                if (skipping[i3] === null) {
                  var _enterList$i;
                  const result = (_enterList$i = enterList[i3]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i3], args);
                  if (result === false) {
                    skipping[i3] = node;
                  } else if (result === BREAK) {
                    skipping[i3] = BREAK;
                  } else if (result !== void 0) {
                    return result;
                  }
                }
              }
            },
            leave(...args) {
              const node = args[0];
              for (let i3 = 0; i3 < visitors.length; i3++) {
                if (skipping[i3] === null) {
                  var _leaveList$i;
                  const result = (_leaveList$i = leaveList[i3]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i3], args);
                  if (result === BREAK) {
                    skipping[i3] = BREAK;
                  } else if (result !== void 0 && result !== false) {
                    return result;
                  }
                } else if (skipping[i3] === node) {
                  skipping[i3] = null;
                }
              }
            }
          };
          mergedVisitor[kind] = mergedEnterLeave;
        }
        return mergedVisitor;
      }
      function getEnterLeaveForKind(visitor, kind) {
        const kindVisitor = visitor[kind];
        if (typeof kindVisitor === "object") {
          return kindVisitor;
        } else if (typeof kindVisitor === "function") {
          return {
            enter: kindVisitor,
            leave: void 0
          };
        }
        return {
          enter: visitor.enter,
          leave: visitor.leave
        };
      }
      function getVisitFn(visitor, kind, isLeaving) {
        const { enter, leave } = getEnterLeaveForKind(visitor, kind);
        return isLeaving ? leave : enter;
      }
    }
  });

  // node_modules/graphql/language/printer.js
  var require_printer = __commonJS({
    "node_modules/graphql/language/printer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.print = print;
      var _blockString = require_blockString();
      var _printString = require_printString();
      var _visitor = require_visitor();
      function print(ast) {
        return (0, _visitor.visit)(ast, printDocASTReducer);
      }
      var MAX_LINE_LENGTH = 80;
      var printDocASTReducer = {
        Name: {
          leave: (node) => node.value
        },
        Variable: {
          leave: (node) => "$" + node.name
        },
        Document: {
          leave: (node) => join(node.definitions, "\n\n")
        },
        OperationDefinition: {
          leave(node) {
            const varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
            const prefix2 = join([
              node.operation,
              join([node.name, varDefs]),
              join(node.directives, " ")
            ], " ");
            return (prefix2 === "query" ? "" : prefix2 + " ") + node.selectionSet;
          }
        },
        VariableDefinition: {
          leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
        },
        SelectionSet: {
          leave: ({ selections }) => block(selections)
        },
        Field: {
          leave({ alias, name, arguments: args, directives, selectionSet }) {
            const prefix2 = wrap("", alias, ": ") + name;
            let argsLine = prefix2 + wrap("(", join(args, ", "), ")");
            if (argsLine.length > MAX_LINE_LENGTH) {
              argsLine = prefix2 + wrap("(\n", indent(join(args, "\n")), "\n)");
            }
            return join([argsLine, join(directives, " "), selectionSet], " ");
          }
        },
        Argument: {
          leave: ({ name, value }) => name + ": " + value
        },
        FragmentSpread: {
          leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
        },
        InlineFragment: {
          leave: ({ typeCondition, directives, selectionSet }) => join([
            "...",
            wrap("on ", typeCondition),
            join(directives, " "),
            selectionSet
          ], " ")
        },
        FragmentDefinition: {
          leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
        },
        IntValue: {
          leave: ({ value }) => value
        },
        FloatValue: {
          leave: ({ value }) => value
        },
        StringValue: {
          leave: ({ value, block: isBlockString }) => isBlockString ? (0, _blockString.printBlockString)(value) : (0, _printString.printString)(value)
        },
        BooleanValue: {
          leave: ({ value }) => value ? "true" : "false"
        },
        NullValue: {
          leave: () => "null"
        },
        EnumValue: {
          leave: ({ value }) => value
        },
        ListValue: {
          leave: ({ values }) => "[" + join(values, ", ") + "]"
        },
        ObjectValue: {
          leave: ({ fields }) => "{" + join(fields, ", ") + "}"
        },
        ObjectField: {
          leave: ({ name, value }) => name + ": " + value
        },
        Directive: {
          leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
        },
        NamedType: {
          leave: ({ name }) => name
        },
        ListType: {
          leave: ({ type }) => "[" + type + "]"
        },
        NonNullType: {
          leave: ({ type }) => type + "!"
        },
        SchemaDefinition: {
          leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
        },
        OperationTypeDefinition: {
          leave: ({ operation, type }) => operation + ": " + type
        },
        ScalarTypeDefinition: {
          leave: ({ description, name, directives }) => wrap("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
        },
        ObjectTypeDefinition: {
          leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join([
            "type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ], " ")
        },
        FieldDefinition: {
          leave: ({ description, name, arguments: args, type, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "))
        },
        InputValueDefinition: {
          leave: ({ description, name, type, defaultValue, directives }) => wrap("", description, "\n") + join([name + ": " + type, wrap("= ", defaultValue), join(directives, " ")], " ")
        },
        InterfaceTypeDefinition: {
          leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join([
            "interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ], " ")
        },
        UnionTypeDefinition: {
          leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join(["union", name, join(directives, " "), wrap("= ", join(types, " | "))], " ")
        },
        EnumTypeDefinition: {
          leave: ({ description, name, directives, values }) => wrap("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
        },
        EnumValueDefinition: {
          leave: ({ description, name, directives }) => wrap("", description, "\n") + join([name, join(directives, " ")], " ")
        },
        InputObjectTypeDefinition: {
          leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
        },
        DirectiveDefinition: {
          leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
        },
        SchemaExtension: {
          leave: ({ directives, operationTypes }) => join(["extend schema", join(directives, " "), block(operationTypes)], " ")
        },
        ScalarTypeExtension: {
          leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
        },
        ObjectTypeExtension: {
          leave: ({ name, interfaces, directives, fields }) => join([
            "extend type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ], " ")
        },
        InterfaceTypeExtension: {
          leave: ({ name, interfaces, directives, fields }) => join([
            "extend interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ], " ")
        },
        UnionTypeExtension: {
          leave: ({ name, directives, types }) => join([
            "extend union",
            name,
            join(directives, " "),
            wrap("= ", join(types, " | "))
          ], " ")
        },
        EnumTypeExtension: {
          leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
        },
        InputObjectTypeExtension: {
          leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
        }
      };
      function join(maybeArray, separator = "") {
        var _maybeArray$filter$jo;
        return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x3) => x3).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
      }
      function block(array) {
        return wrap("{\n", indent(join(array, "\n")), "\n}");
      }
      function wrap(start, maybeString, end = "") {
        return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
      }
      function indent(str) {
        return wrap("  ", str.replace(/\n/g, "\n  "));
      }
      function hasMultilineItems(maybeArray) {
        var _maybeArray$some;
        return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
      }
    }
  });

  // node_modules/extract-files/public/ReactNativeFile.js
  var require_ReactNativeFile = __commonJS({
    "node_modules/extract-files/public/ReactNativeFile.js"(exports, module) {
      "use strict";
      module.exports = function ReactNativeFile(_ref) {
        var uri = _ref.uri, name = _ref.name, type = _ref.type;
        this.uri = uri;
        this.name = name;
        this.type = type;
      };
    }
  });

  // node_modules/extract-files/public/isExtractableFile.js
  var require_isExtractableFile = __commonJS({
    "node_modules/extract-files/public/isExtractableFile.js"(exports, module) {
      "use strict";
      var ReactNativeFile = require_ReactNativeFile();
      module.exports = function isExtractableFile(value) {
        return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob || value instanceof ReactNativeFile;
      };
    }
  });

  // node_modules/extract-files/public/extractFiles.js
  var require_extractFiles = __commonJS({
    "node_modules/extract-files/public/extractFiles.js"(exports, module) {
      "use strict";
      var defaultIsExtractableFile = require_isExtractableFile();
      module.exports = function extractFiles(value, path, isExtractableFile) {
        if (path === void 0) {
          path = "";
        }
        if (isExtractableFile === void 0) {
          isExtractableFile = defaultIsExtractableFile;
        }
        var clone3;
        var files = /* @__PURE__ */ new Map();
        function addFile(paths, file) {
          var storedPaths = files.get(file);
          if (storedPaths)
            storedPaths.push.apply(storedPaths, paths);
          else
            files.set(file, paths);
        }
        if (isExtractableFile(value)) {
          clone3 = null;
          addFile([path], value);
        } else {
          var prefix2 = path ? path + "." : "";
          if (typeof FileList !== "undefined" && value instanceof FileList)
            clone3 = Array.prototype.map.call(value, function(file, i4) {
              addFile(["" + prefix2 + i4], file);
              return null;
            });
          else if (Array.isArray(value))
            clone3 = value.map(function(child, i4) {
              var result2 = extractFiles(child, "" + prefix2 + i4, isExtractableFile);
              result2.files.forEach(addFile);
              return result2.clone;
            });
          else if (value && value.constructor === Object) {
            clone3 = {};
            for (var i3 in value) {
              var result = extractFiles(value[i3], "" + prefix2 + i3, isExtractableFile);
              result.files.forEach(addFile);
              clone3[i3] = result.clone;
            }
          } else
            clone3 = value;
        }
        return {
          clone: clone3,
          files
        };
      };
    }
  });

  // node_modules/extract-files/public/index.js
  var require_public = __commonJS({
    "node_modules/extract-files/public/index.js"(exports) {
      "use strict";
      exports.ReactNativeFile = require_ReactNativeFile();
      exports.extractFiles = require_extractFiles();
      exports.isExtractableFile = require_isExtractableFile();
    }
  });

  // node_modules/delayed-stream/lib/delayed_stream.js
  var require_delayed_stream = __commonJS({
    "node_modules/delayed-stream/lib/delayed_stream.js"(exports, module) {
      var Stream2 = __require("stream").Stream;
      var util = __require("util");
      module.exports = DelayedStream;
      function DelayedStream() {
        this.source = null;
        this.dataSize = 0;
        this.maxDataSize = 1024 * 1024;
        this.pauseStream = true;
        this._maxDataSizeExceeded = false;
        this._released = false;
        this._bufferedEvents = [];
      }
      util.inherits(DelayedStream, Stream2);
      DelayedStream.create = function(source, options) {
        var delayedStream = new this();
        options = options || {};
        for (var option in options) {
          delayedStream[option] = options[option];
        }
        delayedStream.source = source;
        var realEmit = source.emit;
        source.emit = function() {
          delayedStream._handleEmit(arguments);
          return realEmit.apply(source, arguments);
        };
        source.on("error", function() {
        });
        if (delayedStream.pauseStream) {
          source.pause();
        }
        return delayedStream;
      };
      Object.defineProperty(DelayedStream.prototype, "readable", {
        configurable: true,
        enumerable: true,
        get: function() {
          return this.source.readable;
        }
      });
      DelayedStream.prototype.setEncoding = function() {
        return this.source.setEncoding.apply(this.source, arguments);
      };
      DelayedStream.prototype.resume = function() {
        if (!this._released) {
          this.release();
        }
        this.source.resume();
      };
      DelayedStream.prototype.pause = function() {
        this.source.pause();
      };
      DelayedStream.prototype.release = function() {
        this._released = true;
        this._bufferedEvents.forEach(function(args) {
          this.emit.apply(this, args);
        }.bind(this));
        this._bufferedEvents = [];
      };
      DelayedStream.prototype.pipe = function() {
        var r3 = Stream2.prototype.pipe.apply(this, arguments);
        this.resume();
        return r3;
      };
      DelayedStream.prototype._handleEmit = function(args) {
        if (this._released) {
          this.emit.apply(this, args);
          return;
        }
        if (args[0] === "data") {
          this.dataSize += args[1].length;
          this._checkIfMaxDataSizeExceeded();
        }
        this._bufferedEvents.push(args);
      };
      DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
        if (this._maxDataSizeExceeded) {
          return;
        }
        if (this.dataSize <= this.maxDataSize) {
          return;
        }
        this._maxDataSizeExceeded = true;
        var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
        this.emit("error", new Error(message));
      };
    }
  });

  // node_modules/combined-stream/lib/combined_stream.js
  var require_combined_stream = __commonJS({
    "node_modules/combined-stream/lib/combined_stream.js"(exports, module) {
      var util = __require("util");
      var Stream2 = __require("stream").Stream;
      var DelayedStream = require_delayed_stream();
      module.exports = CombinedStream;
      function CombinedStream() {
        this.writable = false;
        this.readable = true;
        this.dataSize = 0;
        this.maxDataSize = 2 * 1024 * 1024;
        this.pauseStreams = true;
        this._released = false;
        this._streams = [];
        this._currentStream = null;
        this._insideLoop = false;
        this._pendingNext = false;
      }
      util.inherits(CombinedStream, Stream2);
      CombinedStream.create = function(options) {
        var combinedStream = new this();
        options = options || {};
        for (var option in options) {
          combinedStream[option] = options[option];
        }
        return combinedStream;
      };
      CombinedStream.isStreamLike = function(stream) {
        return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
      };
      CombinedStream.prototype.append = function(stream) {
        var isStreamLike = CombinedStream.isStreamLike(stream);
        if (isStreamLike) {
          if (!(stream instanceof DelayedStream)) {
            var newStream = DelayedStream.create(stream, {
              maxDataSize: Infinity,
              pauseStream: this.pauseStreams
            });
            stream.on("data", this._checkDataSize.bind(this));
            stream = newStream;
          }
          this._handleErrors(stream);
          if (this.pauseStreams) {
            stream.pause();
          }
        }
        this._streams.push(stream);
        return this;
      };
      CombinedStream.prototype.pipe = function(dest, options) {
        Stream2.prototype.pipe.call(this, dest, options);
        this.resume();
        return dest;
      };
      CombinedStream.prototype._getNext = function() {
        this._currentStream = null;
        if (this._insideLoop) {
          this._pendingNext = true;
          return;
        }
        this._insideLoop = true;
        try {
          do {
            this._pendingNext = false;
            this._realGetNext();
          } while (this._pendingNext);
        } finally {
          this._insideLoop = false;
        }
      };
      CombinedStream.prototype._realGetNext = function() {
        var stream = this._streams.shift();
        if (typeof stream == "undefined") {
          this.end();
          return;
        }
        if (typeof stream !== "function") {
          this._pipeNext(stream);
          return;
        }
        var getStream = stream;
        getStream(function(stream2) {
          var isStreamLike = CombinedStream.isStreamLike(stream2);
          if (isStreamLike) {
            stream2.on("data", this._checkDataSize.bind(this));
            this._handleErrors(stream2);
          }
          this._pipeNext(stream2);
        }.bind(this));
      };
      CombinedStream.prototype._pipeNext = function(stream) {
        this._currentStream = stream;
        var isStreamLike = CombinedStream.isStreamLike(stream);
        if (isStreamLike) {
          stream.on("end", this._getNext.bind(this));
          stream.pipe(this, { end: false });
          return;
        }
        var value = stream;
        this.write(value);
        this._getNext();
      };
      CombinedStream.prototype._handleErrors = function(stream) {
        var self2 = this;
        stream.on("error", function(err) {
          self2._emitError(err);
        });
      };
      CombinedStream.prototype.write = function(data) {
        this.emit("data", data);
      };
      CombinedStream.prototype.pause = function() {
        if (!this.pauseStreams) {
          return;
        }
        if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
          this._currentStream.pause();
        this.emit("pause");
      };
      CombinedStream.prototype.resume = function() {
        if (!this._released) {
          this._released = true;
          this.writable = true;
          this._getNext();
        }
        if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
          this._currentStream.resume();
        this.emit("resume");
      };
      CombinedStream.prototype.end = function() {
        this._reset();
        this.emit("end");
      };
      CombinedStream.prototype.destroy = function() {
        this._reset();
        this.emit("close");
      };
      CombinedStream.prototype._reset = function() {
        this.writable = false;
        this._streams = [];
        this._currentStream = null;
      };
      CombinedStream.prototype._checkDataSize = function() {
        this._updateDataSize();
        if (this.dataSize <= this.maxDataSize) {
          return;
        }
        var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
        this._emitError(new Error(message));
      };
      CombinedStream.prototype._updateDataSize = function() {
        this.dataSize = 0;
        var self2 = this;
        this._streams.forEach(function(stream) {
          if (!stream.dataSize) {
            return;
          }
          self2.dataSize += stream.dataSize;
        });
        if (this._currentStream && this._currentStream.dataSize) {
          this.dataSize += this._currentStream.dataSize;
        }
      };
      CombinedStream.prototype._emitError = function(err) {
        this._reset();
        this.emit("error", err);
      };
    }
  });

  // node_modules/mime-db/db.json
  var require_db = __commonJS({
    "node_modules/mime-db/db.json"(exports, module) {
      module.exports = {
        "application/1d-interleaved-parityfec": {
          source: "iana"
        },
        "application/3gpdash-qoe-report+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/3gpp-ims+xml": {
          source: "iana",
          compressible: true
        },
        "application/3gpphal+json": {
          source: "iana",
          compressible: true
        },
        "application/3gpphalforms+json": {
          source: "iana",
          compressible: true
        },
        "application/a2l": {
          source: "iana"
        },
        "application/ace+cbor": {
          source: "iana"
        },
        "application/activemessage": {
          source: "iana"
        },
        "application/activity+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-costmap+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-costmapfilter+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-directory+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-endpointcost+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-endpointcostparams+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-endpointprop+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-endpointpropparams+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-error+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-networkmap+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-networkmapfilter+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-updatestreamcontrol+json": {
          source: "iana",
          compressible: true
        },
        "application/alto-updatestreamparams+json": {
          source: "iana",
          compressible: true
        },
        "application/aml": {
          source: "iana"
        },
        "application/andrew-inset": {
          source: "iana",
          extensions: ["ez"]
        },
        "application/applefile": {
          source: "iana"
        },
        "application/applixware": {
          source: "apache",
          extensions: ["aw"]
        },
        "application/at+jwt": {
          source: "iana"
        },
        "application/atf": {
          source: "iana"
        },
        "application/atfx": {
          source: "iana"
        },
        "application/atom+xml": {
          source: "iana",
          compressible: true,
          extensions: ["atom"]
        },
        "application/atomcat+xml": {
          source: "iana",
          compressible: true,
          extensions: ["atomcat"]
        },
        "application/atomdeleted+xml": {
          source: "iana",
          compressible: true,
          extensions: ["atomdeleted"]
        },
        "application/atomicmail": {
          source: "iana"
        },
        "application/atomsvc+xml": {
          source: "iana",
          compressible: true,
          extensions: ["atomsvc"]
        },
        "application/atsc-dwd+xml": {
          source: "iana",
          compressible: true,
          extensions: ["dwd"]
        },
        "application/atsc-dynamic-event-message": {
          source: "iana"
        },
        "application/atsc-held+xml": {
          source: "iana",
          compressible: true,
          extensions: ["held"]
        },
        "application/atsc-rdt+json": {
          source: "iana",
          compressible: true
        },
        "application/atsc-rsat+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rsat"]
        },
        "application/atxml": {
          source: "iana"
        },
        "application/auth-policy+xml": {
          source: "iana",
          compressible: true
        },
        "application/bacnet-xdd+zip": {
          source: "iana",
          compressible: false
        },
        "application/batch-smtp": {
          source: "iana"
        },
        "application/bdoc": {
          compressible: false,
          extensions: ["bdoc"]
        },
        "application/beep+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/calendar+json": {
          source: "iana",
          compressible: true
        },
        "application/calendar+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xcs"]
        },
        "application/call-completion": {
          source: "iana"
        },
        "application/cals-1840": {
          source: "iana"
        },
        "application/captive+json": {
          source: "iana",
          compressible: true
        },
        "application/cbor": {
          source: "iana"
        },
        "application/cbor-seq": {
          source: "iana"
        },
        "application/cccex": {
          source: "iana"
        },
        "application/ccmp+xml": {
          source: "iana",
          compressible: true
        },
        "application/ccxml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["ccxml"]
        },
        "application/cdfx+xml": {
          source: "iana",
          compressible: true,
          extensions: ["cdfx"]
        },
        "application/cdmi-capability": {
          source: "iana",
          extensions: ["cdmia"]
        },
        "application/cdmi-container": {
          source: "iana",
          extensions: ["cdmic"]
        },
        "application/cdmi-domain": {
          source: "iana",
          extensions: ["cdmid"]
        },
        "application/cdmi-object": {
          source: "iana",
          extensions: ["cdmio"]
        },
        "application/cdmi-queue": {
          source: "iana",
          extensions: ["cdmiq"]
        },
        "application/cdni": {
          source: "iana"
        },
        "application/cea": {
          source: "iana"
        },
        "application/cea-2018+xml": {
          source: "iana",
          compressible: true
        },
        "application/cellml+xml": {
          source: "iana",
          compressible: true
        },
        "application/cfw": {
          source: "iana"
        },
        "application/city+json": {
          source: "iana",
          compressible: true
        },
        "application/clr": {
          source: "iana"
        },
        "application/clue+xml": {
          source: "iana",
          compressible: true
        },
        "application/clue_info+xml": {
          source: "iana",
          compressible: true
        },
        "application/cms": {
          source: "iana"
        },
        "application/cnrp+xml": {
          source: "iana",
          compressible: true
        },
        "application/coap-group+json": {
          source: "iana",
          compressible: true
        },
        "application/coap-payload": {
          source: "iana"
        },
        "application/commonground": {
          source: "iana"
        },
        "application/conference-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/cose": {
          source: "iana"
        },
        "application/cose-key": {
          source: "iana"
        },
        "application/cose-key-set": {
          source: "iana"
        },
        "application/cpl+xml": {
          source: "iana",
          compressible: true,
          extensions: ["cpl"]
        },
        "application/csrattrs": {
          source: "iana"
        },
        "application/csta+xml": {
          source: "iana",
          compressible: true
        },
        "application/cstadata+xml": {
          source: "iana",
          compressible: true
        },
        "application/csvm+json": {
          source: "iana",
          compressible: true
        },
        "application/cu-seeme": {
          source: "apache",
          extensions: ["cu"]
        },
        "application/cwt": {
          source: "iana"
        },
        "application/cybercash": {
          source: "iana"
        },
        "application/dart": {
          compressible: true
        },
        "application/dash+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mpd"]
        },
        "application/dash-patch+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mpp"]
        },
        "application/dashdelta": {
          source: "iana"
        },
        "application/davmount+xml": {
          source: "iana",
          compressible: true,
          extensions: ["davmount"]
        },
        "application/dca-rft": {
          source: "iana"
        },
        "application/dcd": {
          source: "iana"
        },
        "application/dec-dx": {
          source: "iana"
        },
        "application/dialog-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/dicom": {
          source: "iana"
        },
        "application/dicom+json": {
          source: "iana",
          compressible: true
        },
        "application/dicom+xml": {
          source: "iana",
          compressible: true
        },
        "application/dii": {
          source: "iana"
        },
        "application/dit": {
          source: "iana"
        },
        "application/dns": {
          source: "iana"
        },
        "application/dns+json": {
          source: "iana",
          compressible: true
        },
        "application/dns-message": {
          source: "iana"
        },
        "application/docbook+xml": {
          source: "apache",
          compressible: true,
          extensions: ["dbk"]
        },
        "application/dots+cbor": {
          source: "iana"
        },
        "application/dskpp+xml": {
          source: "iana",
          compressible: true
        },
        "application/dssc+der": {
          source: "iana",
          extensions: ["dssc"]
        },
        "application/dssc+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xdssc"]
        },
        "application/dvcs": {
          source: "iana"
        },
        "application/ecmascript": {
          source: "iana",
          compressible: true,
          extensions: ["es", "ecma"]
        },
        "application/edi-consent": {
          source: "iana"
        },
        "application/edi-x12": {
          source: "iana",
          compressible: false
        },
        "application/edifact": {
          source: "iana",
          compressible: false
        },
        "application/efi": {
          source: "iana"
        },
        "application/elm+json": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/elm+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.cap+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/emergencycalldata.comment+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.control+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.deviceinfo+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.ecall.msd": {
          source: "iana"
        },
        "application/emergencycalldata.providerinfo+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.serviceinfo+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.subscriberinfo+xml": {
          source: "iana",
          compressible: true
        },
        "application/emergencycalldata.veds+xml": {
          source: "iana",
          compressible: true
        },
        "application/emma+xml": {
          source: "iana",
          compressible: true,
          extensions: ["emma"]
        },
        "application/emotionml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["emotionml"]
        },
        "application/encaprtp": {
          source: "iana"
        },
        "application/epp+xml": {
          source: "iana",
          compressible: true
        },
        "application/epub+zip": {
          source: "iana",
          compressible: false,
          extensions: ["epub"]
        },
        "application/eshop": {
          source: "iana"
        },
        "application/exi": {
          source: "iana",
          extensions: ["exi"]
        },
        "application/expect-ct-report+json": {
          source: "iana",
          compressible: true
        },
        "application/express": {
          source: "iana",
          extensions: ["exp"]
        },
        "application/fastinfoset": {
          source: "iana"
        },
        "application/fastsoap": {
          source: "iana"
        },
        "application/fdt+xml": {
          source: "iana",
          compressible: true,
          extensions: ["fdt"]
        },
        "application/fhir+json": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/fhir+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/fido.trusted-apps+json": {
          compressible: true
        },
        "application/fits": {
          source: "iana"
        },
        "application/flexfec": {
          source: "iana"
        },
        "application/font-sfnt": {
          source: "iana"
        },
        "application/font-tdpfr": {
          source: "iana",
          extensions: ["pfr"]
        },
        "application/font-woff": {
          source: "iana",
          compressible: false
        },
        "application/framework-attributes+xml": {
          source: "iana",
          compressible: true
        },
        "application/geo+json": {
          source: "iana",
          compressible: true,
          extensions: ["geojson"]
        },
        "application/geo+json-seq": {
          source: "iana"
        },
        "application/geopackage+sqlite3": {
          source: "iana"
        },
        "application/geoxacml+xml": {
          source: "iana",
          compressible: true
        },
        "application/gltf-buffer": {
          source: "iana"
        },
        "application/gml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["gml"]
        },
        "application/gpx+xml": {
          source: "apache",
          compressible: true,
          extensions: ["gpx"]
        },
        "application/gxf": {
          source: "apache",
          extensions: ["gxf"]
        },
        "application/gzip": {
          source: "iana",
          compressible: false,
          extensions: ["gz"]
        },
        "application/h224": {
          source: "iana"
        },
        "application/held+xml": {
          source: "iana",
          compressible: true
        },
        "application/hjson": {
          extensions: ["hjson"]
        },
        "application/http": {
          source: "iana"
        },
        "application/hyperstudio": {
          source: "iana",
          extensions: ["stk"]
        },
        "application/ibe-key-request+xml": {
          source: "iana",
          compressible: true
        },
        "application/ibe-pkg-reply+xml": {
          source: "iana",
          compressible: true
        },
        "application/ibe-pp-data": {
          source: "iana"
        },
        "application/iges": {
          source: "iana"
        },
        "application/im-iscomposing+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/index": {
          source: "iana"
        },
        "application/index.cmd": {
          source: "iana"
        },
        "application/index.obj": {
          source: "iana"
        },
        "application/index.response": {
          source: "iana"
        },
        "application/index.vnd": {
          source: "iana"
        },
        "application/inkml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["ink", "inkml"]
        },
        "application/iotp": {
          source: "iana"
        },
        "application/ipfix": {
          source: "iana",
          extensions: ["ipfix"]
        },
        "application/ipp": {
          source: "iana"
        },
        "application/isup": {
          source: "iana"
        },
        "application/its+xml": {
          source: "iana",
          compressible: true,
          extensions: ["its"]
        },
        "application/java-archive": {
          source: "apache",
          compressible: false,
          extensions: ["jar", "war", "ear"]
        },
        "application/java-serialized-object": {
          source: "apache",
          compressible: false,
          extensions: ["ser"]
        },
        "application/java-vm": {
          source: "apache",
          compressible: false,
          extensions: ["class"]
        },
        "application/javascript": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["js", "mjs"]
        },
        "application/jf2feed+json": {
          source: "iana",
          compressible: true
        },
        "application/jose": {
          source: "iana"
        },
        "application/jose+json": {
          source: "iana",
          compressible: true
        },
        "application/jrd+json": {
          source: "iana",
          compressible: true
        },
        "application/jscalendar+json": {
          source: "iana",
          compressible: true
        },
        "application/json": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["json", "map"]
        },
        "application/json-patch+json": {
          source: "iana",
          compressible: true
        },
        "application/json-seq": {
          source: "iana"
        },
        "application/json5": {
          extensions: ["json5"]
        },
        "application/jsonml+json": {
          source: "apache",
          compressible: true,
          extensions: ["jsonml"]
        },
        "application/jwk+json": {
          source: "iana",
          compressible: true
        },
        "application/jwk-set+json": {
          source: "iana",
          compressible: true
        },
        "application/jwt": {
          source: "iana"
        },
        "application/kpml-request+xml": {
          source: "iana",
          compressible: true
        },
        "application/kpml-response+xml": {
          source: "iana",
          compressible: true
        },
        "application/ld+json": {
          source: "iana",
          compressible: true,
          extensions: ["jsonld"]
        },
        "application/lgr+xml": {
          source: "iana",
          compressible: true,
          extensions: ["lgr"]
        },
        "application/link-format": {
          source: "iana"
        },
        "application/load-control+xml": {
          source: "iana",
          compressible: true
        },
        "application/lost+xml": {
          source: "iana",
          compressible: true,
          extensions: ["lostxml"]
        },
        "application/lostsync+xml": {
          source: "iana",
          compressible: true
        },
        "application/lpf+zip": {
          source: "iana",
          compressible: false
        },
        "application/lxf": {
          source: "iana"
        },
        "application/mac-binhex40": {
          source: "iana",
          extensions: ["hqx"]
        },
        "application/mac-compactpro": {
          source: "apache",
          extensions: ["cpt"]
        },
        "application/macwriteii": {
          source: "iana"
        },
        "application/mads+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mads"]
        },
        "application/manifest+json": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["webmanifest"]
        },
        "application/marc": {
          source: "iana",
          extensions: ["mrc"]
        },
        "application/marcxml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mrcx"]
        },
        "application/mathematica": {
          source: "iana",
          extensions: ["ma", "nb", "mb"]
        },
        "application/mathml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mathml"]
        },
        "application/mathml-content+xml": {
          source: "iana",
          compressible: true
        },
        "application/mathml-presentation+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-associated-procedure-description+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-deregister+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-envelope+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-msk+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-msk-response+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-protection-description+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-reception-report+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-register+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-register-response+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-schedule+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbms-user-service-description+xml": {
          source: "iana",
          compressible: true
        },
        "application/mbox": {
          source: "iana",
          extensions: ["mbox"]
        },
        "application/media-policy-dataset+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mpf"]
        },
        "application/media_control+xml": {
          source: "iana",
          compressible: true
        },
        "application/mediaservercontrol+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mscml"]
        },
        "application/merge-patch+json": {
          source: "iana",
          compressible: true
        },
        "application/metalink+xml": {
          source: "apache",
          compressible: true,
          extensions: ["metalink"]
        },
        "application/metalink4+xml": {
          source: "iana",
          compressible: true,
          extensions: ["meta4"]
        },
        "application/mets+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mets"]
        },
        "application/mf4": {
          source: "iana"
        },
        "application/mikey": {
          source: "iana"
        },
        "application/mipc": {
          source: "iana"
        },
        "application/missing-blocks+cbor-seq": {
          source: "iana"
        },
        "application/mmt-aei+xml": {
          source: "iana",
          compressible: true,
          extensions: ["maei"]
        },
        "application/mmt-usd+xml": {
          source: "iana",
          compressible: true,
          extensions: ["musd"]
        },
        "application/mods+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mods"]
        },
        "application/moss-keys": {
          source: "iana"
        },
        "application/moss-signature": {
          source: "iana"
        },
        "application/mosskey-data": {
          source: "iana"
        },
        "application/mosskey-request": {
          source: "iana"
        },
        "application/mp21": {
          source: "iana",
          extensions: ["m21", "mp21"]
        },
        "application/mp4": {
          source: "iana",
          extensions: ["mp4s", "m4p"]
        },
        "application/mpeg4-generic": {
          source: "iana"
        },
        "application/mpeg4-iod": {
          source: "iana"
        },
        "application/mpeg4-iod-xmt": {
          source: "iana"
        },
        "application/mrb-consumer+xml": {
          source: "iana",
          compressible: true
        },
        "application/mrb-publish+xml": {
          source: "iana",
          compressible: true
        },
        "application/msc-ivr+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/msc-mixer+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/msword": {
          source: "iana",
          compressible: false,
          extensions: ["doc", "dot"]
        },
        "application/mud+json": {
          source: "iana",
          compressible: true
        },
        "application/multipart-core": {
          source: "iana"
        },
        "application/mxf": {
          source: "iana",
          extensions: ["mxf"]
        },
        "application/n-quads": {
          source: "iana",
          extensions: ["nq"]
        },
        "application/n-triples": {
          source: "iana",
          extensions: ["nt"]
        },
        "application/nasdata": {
          source: "iana"
        },
        "application/news-checkgroups": {
          source: "iana",
          charset: "US-ASCII"
        },
        "application/news-groupinfo": {
          source: "iana",
          charset: "US-ASCII"
        },
        "application/news-transmission": {
          source: "iana"
        },
        "application/nlsml+xml": {
          source: "iana",
          compressible: true
        },
        "application/node": {
          source: "iana",
          extensions: ["cjs"]
        },
        "application/nss": {
          source: "iana"
        },
        "application/oauth-authz-req+jwt": {
          source: "iana"
        },
        "application/oblivious-dns-message": {
          source: "iana"
        },
        "application/ocsp-request": {
          source: "iana"
        },
        "application/ocsp-response": {
          source: "iana"
        },
        "application/octet-stream": {
          source: "iana",
          compressible: false,
          extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
        },
        "application/oda": {
          source: "iana",
          extensions: ["oda"]
        },
        "application/odm+xml": {
          source: "iana",
          compressible: true
        },
        "application/odx": {
          source: "iana"
        },
        "application/oebps-package+xml": {
          source: "iana",
          compressible: true,
          extensions: ["opf"]
        },
        "application/ogg": {
          source: "iana",
          compressible: false,
          extensions: ["ogx"]
        },
        "application/omdoc+xml": {
          source: "apache",
          compressible: true,
          extensions: ["omdoc"]
        },
        "application/onenote": {
          source: "apache",
          extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
        },
        "application/opc-nodeset+xml": {
          source: "iana",
          compressible: true
        },
        "application/oscore": {
          source: "iana"
        },
        "application/oxps": {
          source: "iana",
          extensions: ["oxps"]
        },
        "application/p21": {
          source: "iana"
        },
        "application/p21+zip": {
          source: "iana",
          compressible: false
        },
        "application/p2p-overlay+xml": {
          source: "iana",
          compressible: true,
          extensions: ["relo"]
        },
        "application/parityfec": {
          source: "iana"
        },
        "application/passport": {
          source: "iana"
        },
        "application/patch-ops-error+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xer"]
        },
        "application/pdf": {
          source: "iana",
          compressible: false,
          extensions: ["pdf"]
        },
        "application/pdx": {
          source: "iana"
        },
        "application/pem-certificate-chain": {
          source: "iana"
        },
        "application/pgp-encrypted": {
          source: "iana",
          compressible: false,
          extensions: ["pgp"]
        },
        "application/pgp-keys": {
          source: "iana",
          extensions: ["asc"]
        },
        "application/pgp-signature": {
          source: "iana",
          extensions: ["asc", "sig"]
        },
        "application/pics-rules": {
          source: "apache",
          extensions: ["prf"]
        },
        "application/pidf+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/pidf-diff+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/pkcs10": {
          source: "iana",
          extensions: ["p10"]
        },
        "application/pkcs12": {
          source: "iana"
        },
        "application/pkcs7-mime": {
          source: "iana",
          extensions: ["p7m", "p7c"]
        },
        "application/pkcs7-signature": {
          source: "iana",
          extensions: ["p7s"]
        },
        "application/pkcs8": {
          source: "iana",
          extensions: ["p8"]
        },
        "application/pkcs8-encrypted": {
          source: "iana"
        },
        "application/pkix-attr-cert": {
          source: "iana",
          extensions: ["ac"]
        },
        "application/pkix-cert": {
          source: "iana",
          extensions: ["cer"]
        },
        "application/pkix-crl": {
          source: "iana",
          extensions: ["crl"]
        },
        "application/pkix-pkipath": {
          source: "iana",
          extensions: ["pkipath"]
        },
        "application/pkixcmp": {
          source: "iana",
          extensions: ["pki"]
        },
        "application/pls+xml": {
          source: "iana",
          compressible: true,
          extensions: ["pls"]
        },
        "application/poc-settings+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/postscript": {
          source: "iana",
          compressible: true,
          extensions: ["ai", "eps", "ps"]
        },
        "application/ppsp-tracker+json": {
          source: "iana",
          compressible: true
        },
        "application/problem+json": {
          source: "iana",
          compressible: true
        },
        "application/problem+xml": {
          source: "iana",
          compressible: true
        },
        "application/provenance+xml": {
          source: "iana",
          compressible: true,
          extensions: ["provx"]
        },
        "application/prs.alvestrand.titrax-sheet": {
          source: "iana"
        },
        "application/prs.cww": {
          source: "iana",
          extensions: ["cww"]
        },
        "application/prs.cyn": {
          source: "iana",
          charset: "7-BIT"
        },
        "application/prs.hpub+zip": {
          source: "iana",
          compressible: false
        },
        "application/prs.nprend": {
          source: "iana"
        },
        "application/prs.plucker": {
          source: "iana"
        },
        "application/prs.rdf-xml-crypt": {
          source: "iana"
        },
        "application/prs.xsf+xml": {
          source: "iana",
          compressible: true
        },
        "application/pskc+xml": {
          source: "iana",
          compressible: true,
          extensions: ["pskcxml"]
        },
        "application/pvd+json": {
          source: "iana",
          compressible: true
        },
        "application/qsig": {
          source: "iana"
        },
        "application/raml+yaml": {
          compressible: true,
          extensions: ["raml"]
        },
        "application/raptorfec": {
          source: "iana"
        },
        "application/rdap+json": {
          source: "iana",
          compressible: true
        },
        "application/rdf+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rdf", "owl"]
        },
        "application/reginfo+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rif"]
        },
        "application/relax-ng-compact-syntax": {
          source: "iana",
          extensions: ["rnc"]
        },
        "application/remote-printing": {
          source: "iana"
        },
        "application/reputon+json": {
          source: "iana",
          compressible: true
        },
        "application/resource-lists+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rl"]
        },
        "application/resource-lists-diff+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rld"]
        },
        "application/rfc+xml": {
          source: "iana",
          compressible: true
        },
        "application/riscos": {
          source: "iana"
        },
        "application/rlmi+xml": {
          source: "iana",
          compressible: true
        },
        "application/rls-services+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rs"]
        },
        "application/route-apd+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rapd"]
        },
        "application/route-s-tsid+xml": {
          source: "iana",
          compressible: true,
          extensions: ["sls"]
        },
        "application/route-usd+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rusd"]
        },
        "application/rpki-ghostbusters": {
          source: "iana",
          extensions: ["gbr"]
        },
        "application/rpki-manifest": {
          source: "iana",
          extensions: ["mft"]
        },
        "application/rpki-publication": {
          source: "iana"
        },
        "application/rpki-roa": {
          source: "iana",
          extensions: ["roa"]
        },
        "application/rpki-updown": {
          source: "iana"
        },
        "application/rsd+xml": {
          source: "apache",
          compressible: true,
          extensions: ["rsd"]
        },
        "application/rss+xml": {
          source: "apache",
          compressible: true,
          extensions: ["rss"]
        },
        "application/rtf": {
          source: "iana",
          compressible: true,
          extensions: ["rtf"]
        },
        "application/rtploopback": {
          source: "iana"
        },
        "application/rtx": {
          source: "iana"
        },
        "application/samlassertion+xml": {
          source: "iana",
          compressible: true
        },
        "application/samlmetadata+xml": {
          source: "iana",
          compressible: true
        },
        "application/sarif+json": {
          source: "iana",
          compressible: true
        },
        "application/sarif-external-properties+json": {
          source: "iana",
          compressible: true
        },
        "application/sbe": {
          source: "iana"
        },
        "application/sbml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["sbml"]
        },
        "application/scaip+xml": {
          source: "iana",
          compressible: true
        },
        "application/scim+json": {
          source: "iana",
          compressible: true
        },
        "application/scvp-cv-request": {
          source: "iana",
          extensions: ["scq"]
        },
        "application/scvp-cv-response": {
          source: "iana",
          extensions: ["scs"]
        },
        "application/scvp-vp-request": {
          source: "iana",
          extensions: ["spq"]
        },
        "application/scvp-vp-response": {
          source: "iana",
          extensions: ["spp"]
        },
        "application/sdp": {
          source: "iana",
          extensions: ["sdp"]
        },
        "application/secevent+jwt": {
          source: "iana"
        },
        "application/senml+cbor": {
          source: "iana"
        },
        "application/senml+json": {
          source: "iana",
          compressible: true
        },
        "application/senml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["senmlx"]
        },
        "application/senml-etch+cbor": {
          source: "iana"
        },
        "application/senml-etch+json": {
          source: "iana",
          compressible: true
        },
        "application/senml-exi": {
          source: "iana"
        },
        "application/sensml+cbor": {
          source: "iana"
        },
        "application/sensml+json": {
          source: "iana",
          compressible: true
        },
        "application/sensml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["sensmlx"]
        },
        "application/sensml-exi": {
          source: "iana"
        },
        "application/sep+xml": {
          source: "iana",
          compressible: true
        },
        "application/sep-exi": {
          source: "iana"
        },
        "application/session-info": {
          source: "iana"
        },
        "application/set-payment": {
          source: "iana"
        },
        "application/set-payment-initiation": {
          source: "iana",
          extensions: ["setpay"]
        },
        "application/set-registration": {
          source: "iana"
        },
        "application/set-registration-initiation": {
          source: "iana",
          extensions: ["setreg"]
        },
        "application/sgml": {
          source: "iana"
        },
        "application/sgml-open-catalog": {
          source: "iana"
        },
        "application/shf+xml": {
          source: "iana",
          compressible: true,
          extensions: ["shf"]
        },
        "application/sieve": {
          source: "iana",
          extensions: ["siv", "sieve"]
        },
        "application/simple-filter+xml": {
          source: "iana",
          compressible: true
        },
        "application/simple-message-summary": {
          source: "iana"
        },
        "application/simplesymbolcontainer": {
          source: "iana"
        },
        "application/sipc": {
          source: "iana"
        },
        "application/slate": {
          source: "iana"
        },
        "application/smil": {
          source: "iana"
        },
        "application/smil+xml": {
          source: "iana",
          compressible: true,
          extensions: ["smi", "smil"]
        },
        "application/smpte336m": {
          source: "iana"
        },
        "application/soap+fastinfoset": {
          source: "iana"
        },
        "application/soap+xml": {
          source: "iana",
          compressible: true
        },
        "application/sparql-query": {
          source: "iana",
          extensions: ["rq"]
        },
        "application/sparql-results+xml": {
          source: "iana",
          compressible: true,
          extensions: ["srx"]
        },
        "application/spdx+json": {
          source: "iana",
          compressible: true
        },
        "application/spirits-event+xml": {
          source: "iana",
          compressible: true
        },
        "application/sql": {
          source: "iana"
        },
        "application/srgs": {
          source: "iana",
          extensions: ["gram"]
        },
        "application/srgs+xml": {
          source: "iana",
          compressible: true,
          extensions: ["grxml"]
        },
        "application/sru+xml": {
          source: "iana",
          compressible: true,
          extensions: ["sru"]
        },
        "application/ssdl+xml": {
          source: "apache",
          compressible: true,
          extensions: ["ssdl"]
        },
        "application/ssml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["ssml"]
        },
        "application/stix+json": {
          source: "iana",
          compressible: true
        },
        "application/swid+xml": {
          source: "iana",
          compressible: true,
          extensions: ["swidtag"]
        },
        "application/tamp-apex-update": {
          source: "iana"
        },
        "application/tamp-apex-update-confirm": {
          source: "iana"
        },
        "application/tamp-community-update": {
          source: "iana"
        },
        "application/tamp-community-update-confirm": {
          source: "iana"
        },
        "application/tamp-error": {
          source: "iana"
        },
        "application/tamp-sequence-adjust": {
          source: "iana"
        },
        "application/tamp-sequence-adjust-confirm": {
          source: "iana"
        },
        "application/tamp-status-query": {
          source: "iana"
        },
        "application/tamp-status-response": {
          source: "iana"
        },
        "application/tamp-update": {
          source: "iana"
        },
        "application/tamp-update-confirm": {
          source: "iana"
        },
        "application/tar": {
          compressible: true
        },
        "application/taxii+json": {
          source: "iana",
          compressible: true
        },
        "application/td+json": {
          source: "iana",
          compressible: true
        },
        "application/tei+xml": {
          source: "iana",
          compressible: true,
          extensions: ["tei", "teicorpus"]
        },
        "application/tetra_isi": {
          source: "iana"
        },
        "application/thraud+xml": {
          source: "iana",
          compressible: true,
          extensions: ["tfi"]
        },
        "application/timestamp-query": {
          source: "iana"
        },
        "application/timestamp-reply": {
          source: "iana"
        },
        "application/timestamped-data": {
          source: "iana",
          extensions: ["tsd"]
        },
        "application/tlsrpt+gzip": {
          source: "iana"
        },
        "application/tlsrpt+json": {
          source: "iana",
          compressible: true
        },
        "application/tnauthlist": {
          source: "iana"
        },
        "application/token-introspection+jwt": {
          source: "iana"
        },
        "application/toml": {
          compressible: true,
          extensions: ["toml"]
        },
        "application/trickle-ice-sdpfrag": {
          source: "iana"
        },
        "application/trig": {
          source: "iana",
          extensions: ["trig"]
        },
        "application/ttml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["ttml"]
        },
        "application/tve-trigger": {
          source: "iana"
        },
        "application/tzif": {
          source: "iana"
        },
        "application/tzif-leap": {
          source: "iana"
        },
        "application/ubjson": {
          compressible: false,
          extensions: ["ubj"]
        },
        "application/ulpfec": {
          source: "iana"
        },
        "application/urc-grpsheet+xml": {
          source: "iana",
          compressible: true
        },
        "application/urc-ressheet+xml": {
          source: "iana",
          compressible: true,
          extensions: ["rsheet"]
        },
        "application/urc-targetdesc+xml": {
          source: "iana",
          compressible: true,
          extensions: ["td"]
        },
        "application/urc-uisocketdesc+xml": {
          source: "iana",
          compressible: true
        },
        "application/vcard+json": {
          source: "iana",
          compressible: true
        },
        "application/vcard+xml": {
          source: "iana",
          compressible: true
        },
        "application/vemmi": {
          source: "iana"
        },
        "application/vividence.scriptfile": {
          source: "apache"
        },
        "application/vnd.1000minds.decision-model+xml": {
          source: "iana",
          compressible: true,
          extensions: ["1km"]
        },
        "application/vnd.3gpp-prose+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp-prose-pc3ch+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp-v2x-local-service-information": {
          source: "iana"
        },
        "application/vnd.3gpp.5gnas": {
          source: "iana"
        },
        "application/vnd.3gpp.access-transfer-events+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.bsf+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.gmop+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.gtpc": {
          source: "iana"
        },
        "application/vnd.3gpp.interworking-data": {
          source: "iana"
        },
        "application/vnd.3gpp.lpp": {
          source: "iana"
        },
        "application/vnd.3gpp.mc-signalling-ear": {
          source: "iana"
        },
        "application/vnd.3gpp.mcdata-affiliation-command+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcdata-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcdata-payload": {
          source: "iana"
        },
        "application/vnd.3gpp.mcdata-service-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcdata-signalling": {
          source: "iana"
        },
        "application/vnd.3gpp.mcdata-ue-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcdata-user-profile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-affiliation-command+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-floor-request+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-location-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-service-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-signed+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-ue-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-ue-init-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcptt-user-profile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-location-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-service-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-transmission-request+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-ue-config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mcvideo-user-profile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.mid-call+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.ngap": {
          source: "iana"
        },
        "application/vnd.3gpp.pfcp": {
          source: "iana"
        },
        "application/vnd.3gpp.pic-bw-large": {
          source: "iana",
          extensions: ["plb"]
        },
        "application/vnd.3gpp.pic-bw-small": {
          source: "iana",
          extensions: ["psb"]
        },
        "application/vnd.3gpp.pic-bw-var": {
          source: "iana",
          extensions: ["pvb"]
        },
        "application/vnd.3gpp.s1ap": {
          source: "iana"
        },
        "application/vnd.3gpp.sms": {
          source: "iana"
        },
        "application/vnd.3gpp.sms+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.srvcc-ext+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.srvcc-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.state-and-event-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp.ussd+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp2.bcmcsinfo+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.3gpp2.sms": {
          source: "iana"
        },
        "application/vnd.3gpp2.tcap": {
          source: "iana",
          extensions: ["tcap"]
        },
        "application/vnd.3lightssoftware.imagescal": {
          source: "iana"
        },
        "application/vnd.3m.post-it-notes": {
          source: "iana",
          extensions: ["pwn"]
        },
        "application/vnd.accpac.simply.aso": {
          source: "iana",
          extensions: ["aso"]
        },
        "application/vnd.accpac.simply.imp": {
          source: "iana",
          extensions: ["imp"]
        },
        "application/vnd.acucobol": {
          source: "iana",
          extensions: ["acu"]
        },
        "application/vnd.acucorp": {
          source: "iana",
          extensions: ["atc", "acutc"]
        },
        "application/vnd.adobe.air-application-installer-package+zip": {
          source: "apache",
          compressible: false,
          extensions: ["air"]
        },
        "application/vnd.adobe.flash.movie": {
          source: "iana"
        },
        "application/vnd.adobe.formscentral.fcdt": {
          source: "iana",
          extensions: ["fcdt"]
        },
        "application/vnd.adobe.fxp": {
          source: "iana",
          extensions: ["fxp", "fxpl"]
        },
        "application/vnd.adobe.partial-upload": {
          source: "iana"
        },
        "application/vnd.adobe.xdp+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xdp"]
        },
        "application/vnd.adobe.xfdf": {
          source: "iana",
          extensions: ["xfdf"]
        },
        "application/vnd.aether.imp": {
          source: "iana"
        },
        "application/vnd.afpc.afplinedata": {
          source: "iana"
        },
        "application/vnd.afpc.afplinedata-pagedef": {
          source: "iana"
        },
        "application/vnd.afpc.cmoca-cmresource": {
          source: "iana"
        },
        "application/vnd.afpc.foca-charset": {
          source: "iana"
        },
        "application/vnd.afpc.foca-codedfont": {
          source: "iana"
        },
        "application/vnd.afpc.foca-codepage": {
          source: "iana"
        },
        "application/vnd.afpc.modca": {
          source: "iana"
        },
        "application/vnd.afpc.modca-cmtable": {
          source: "iana"
        },
        "application/vnd.afpc.modca-formdef": {
          source: "iana"
        },
        "application/vnd.afpc.modca-mediummap": {
          source: "iana"
        },
        "application/vnd.afpc.modca-objectcontainer": {
          source: "iana"
        },
        "application/vnd.afpc.modca-overlay": {
          source: "iana"
        },
        "application/vnd.afpc.modca-pagesegment": {
          source: "iana"
        },
        "application/vnd.age": {
          source: "iana",
          extensions: ["age"]
        },
        "application/vnd.ah-barcode": {
          source: "iana"
        },
        "application/vnd.ahead.space": {
          source: "iana",
          extensions: ["ahead"]
        },
        "application/vnd.airzip.filesecure.azf": {
          source: "iana",
          extensions: ["azf"]
        },
        "application/vnd.airzip.filesecure.azs": {
          source: "iana",
          extensions: ["azs"]
        },
        "application/vnd.amadeus+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.amazon.ebook": {
          source: "apache",
          extensions: ["azw"]
        },
        "application/vnd.amazon.mobi8-ebook": {
          source: "iana"
        },
        "application/vnd.americandynamics.acc": {
          source: "iana",
          extensions: ["acc"]
        },
        "application/vnd.amiga.ami": {
          source: "iana",
          extensions: ["ami"]
        },
        "application/vnd.amundsen.maze+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.android.ota": {
          source: "iana"
        },
        "application/vnd.android.package-archive": {
          source: "apache",
          compressible: false,
          extensions: ["apk"]
        },
        "application/vnd.anki": {
          source: "iana"
        },
        "application/vnd.anser-web-certificate-issue-initiation": {
          source: "iana",
          extensions: ["cii"]
        },
        "application/vnd.anser-web-funds-transfer-initiation": {
          source: "apache",
          extensions: ["fti"]
        },
        "application/vnd.antix.game-component": {
          source: "iana",
          extensions: ["atx"]
        },
        "application/vnd.apache.arrow.file": {
          source: "iana"
        },
        "application/vnd.apache.arrow.stream": {
          source: "iana"
        },
        "application/vnd.apache.thrift.binary": {
          source: "iana"
        },
        "application/vnd.apache.thrift.compact": {
          source: "iana"
        },
        "application/vnd.apache.thrift.json": {
          source: "iana"
        },
        "application/vnd.api+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.aplextor.warrp+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.apothekende.reservation+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.apple.installer+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mpkg"]
        },
        "application/vnd.apple.keynote": {
          source: "iana",
          extensions: ["key"]
        },
        "application/vnd.apple.mpegurl": {
          source: "iana",
          extensions: ["m3u8"]
        },
        "application/vnd.apple.numbers": {
          source: "iana",
          extensions: ["numbers"]
        },
        "application/vnd.apple.pages": {
          source: "iana",
          extensions: ["pages"]
        },
        "application/vnd.apple.pkpass": {
          compressible: false,
          extensions: ["pkpass"]
        },
        "application/vnd.arastra.swi": {
          source: "iana"
        },
        "application/vnd.aristanetworks.swi": {
          source: "iana",
          extensions: ["swi"]
        },
        "application/vnd.artisan+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.artsquare": {
          source: "iana"
        },
        "application/vnd.astraea-software.iota": {
          source: "iana",
          extensions: ["iota"]
        },
        "application/vnd.audiograph": {
          source: "iana",
          extensions: ["aep"]
        },
        "application/vnd.autopackage": {
          source: "iana"
        },
        "application/vnd.avalon+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.avistar+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.balsamiq.bmml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["bmml"]
        },
        "application/vnd.balsamiq.bmpr": {
          source: "iana"
        },
        "application/vnd.banana-accounting": {
          source: "iana"
        },
        "application/vnd.bbf.usp.error": {
          source: "iana"
        },
        "application/vnd.bbf.usp.msg": {
          source: "iana"
        },
        "application/vnd.bbf.usp.msg+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.bekitzur-stech+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.bint.med-content": {
          source: "iana"
        },
        "application/vnd.biopax.rdf+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.blink-idb-value-wrapper": {
          source: "iana"
        },
        "application/vnd.blueice.multipass": {
          source: "iana",
          extensions: ["mpm"]
        },
        "application/vnd.bluetooth.ep.oob": {
          source: "iana"
        },
        "application/vnd.bluetooth.le.oob": {
          source: "iana"
        },
        "application/vnd.bmi": {
          source: "iana",
          extensions: ["bmi"]
        },
        "application/vnd.bpf": {
          source: "iana"
        },
        "application/vnd.bpf3": {
          source: "iana"
        },
        "application/vnd.businessobjects": {
          source: "iana",
          extensions: ["rep"]
        },
        "application/vnd.byu.uapi+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.cab-jscript": {
          source: "iana"
        },
        "application/vnd.canon-cpdl": {
          source: "iana"
        },
        "application/vnd.canon-lips": {
          source: "iana"
        },
        "application/vnd.capasystems-pg+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.cendio.thinlinc.clientconf": {
          source: "iana"
        },
        "application/vnd.century-systems.tcp_stream": {
          source: "iana"
        },
        "application/vnd.chemdraw+xml": {
          source: "iana",
          compressible: true,
          extensions: ["cdxml"]
        },
        "application/vnd.chess-pgn": {
          source: "iana"
        },
        "application/vnd.chipnuts.karaoke-mmd": {
          source: "iana",
          extensions: ["mmd"]
        },
        "application/vnd.ciedi": {
          source: "iana"
        },
        "application/vnd.cinderella": {
          source: "iana",
          extensions: ["cdy"]
        },
        "application/vnd.cirpack.isdn-ext": {
          source: "iana"
        },
        "application/vnd.citationstyles.style+xml": {
          source: "iana",
          compressible: true,
          extensions: ["csl"]
        },
        "application/vnd.claymore": {
          source: "iana",
          extensions: ["cla"]
        },
        "application/vnd.cloanto.rp9": {
          source: "iana",
          extensions: ["rp9"]
        },
        "application/vnd.clonk.c4group": {
          source: "iana",
          extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
        },
        "application/vnd.cluetrust.cartomobile-config": {
          source: "iana",
          extensions: ["c11amc"]
        },
        "application/vnd.cluetrust.cartomobile-config-pkg": {
          source: "iana",
          extensions: ["c11amz"]
        },
        "application/vnd.coffeescript": {
          source: "iana"
        },
        "application/vnd.collabio.xodocuments.document": {
          source: "iana"
        },
        "application/vnd.collabio.xodocuments.document-template": {
          source: "iana"
        },
        "application/vnd.collabio.xodocuments.presentation": {
          source: "iana"
        },
        "application/vnd.collabio.xodocuments.presentation-template": {
          source: "iana"
        },
        "application/vnd.collabio.xodocuments.spreadsheet": {
          source: "iana"
        },
        "application/vnd.collabio.xodocuments.spreadsheet-template": {
          source: "iana"
        },
        "application/vnd.collection+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.collection.doc+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.collection.next+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.comicbook+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.comicbook-rar": {
          source: "iana"
        },
        "application/vnd.commerce-battelle": {
          source: "iana"
        },
        "application/vnd.commonspace": {
          source: "iana",
          extensions: ["csp"]
        },
        "application/vnd.contact.cmsg": {
          source: "iana",
          extensions: ["cdbcmsg"]
        },
        "application/vnd.coreos.ignition+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.cosmocaller": {
          source: "iana",
          extensions: ["cmc"]
        },
        "application/vnd.crick.clicker": {
          source: "iana",
          extensions: ["clkx"]
        },
        "application/vnd.crick.clicker.keyboard": {
          source: "iana",
          extensions: ["clkk"]
        },
        "application/vnd.crick.clicker.palette": {
          source: "iana",
          extensions: ["clkp"]
        },
        "application/vnd.crick.clicker.template": {
          source: "iana",
          extensions: ["clkt"]
        },
        "application/vnd.crick.clicker.wordbank": {
          source: "iana",
          extensions: ["clkw"]
        },
        "application/vnd.criticaltools.wbs+xml": {
          source: "iana",
          compressible: true,
          extensions: ["wbs"]
        },
        "application/vnd.cryptii.pipe+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.crypto-shade-file": {
          source: "iana"
        },
        "application/vnd.cryptomator.encrypted": {
          source: "iana"
        },
        "application/vnd.cryptomator.vault": {
          source: "iana"
        },
        "application/vnd.ctc-posml": {
          source: "iana",
          extensions: ["pml"]
        },
        "application/vnd.ctct.ws+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.cups-pdf": {
          source: "iana"
        },
        "application/vnd.cups-postscript": {
          source: "iana"
        },
        "application/vnd.cups-ppd": {
          source: "iana",
          extensions: ["ppd"]
        },
        "application/vnd.cups-raster": {
          source: "iana"
        },
        "application/vnd.cups-raw": {
          source: "iana"
        },
        "application/vnd.curl": {
          source: "iana"
        },
        "application/vnd.curl.car": {
          source: "apache",
          extensions: ["car"]
        },
        "application/vnd.curl.pcurl": {
          source: "apache",
          extensions: ["pcurl"]
        },
        "application/vnd.cyan.dean.root+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.cybank": {
          source: "iana"
        },
        "application/vnd.cyclonedx+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.cyclonedx+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.d2l.coursepackage1p0+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.d3m-dataset": {
          source: "iana"
        },
        "application/vnd.d3m-problem": {
          source: "iana"
        },
        "application/vnd.dart": {
          source: "iana",
          compressible: true,
          extensions: ["dart"]
        },
        "application/vnd.data-vision.rdz": {
          source: "iana",
          extensions: ["rdz"]
        },
        "application/vnd.datapackage+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dataresource+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dbf": {
          source: "iana",
          extensions: ["dbf"]
        },
        "application/vnd.debian.binary-package": {
          source: "iana"
        },
        "application/vnd.dece.data": {
          source: "iana",
          extensions: ["uvf", "uvvf", "uvd", "uvvd"]
        },
        "application/vnd.dece.ttml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["uvt", "uvvt"]
        },
        "application/vnd.dece.unspecified": {
          source: "iana",
          extensions: ["uvx", "uvvx"]
        },
        "application/vnd.dece.zip": {
          source: "iana",
          extensions: ["uvz", "uvvz"]
        },
        "application/vnd.denovo.fcselayout-link": {
          source: "iana",
          extensions: ["fe_launch"]
        },
        "application/vnd.desmume.movie": {
          source: "iana"
        },
        "application/vnd.dir-bi.plate-dl-nosuffix": {
          source: "iana"
        },
        "application/vnd.dm.delegation+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dna": {
          source: "iana",
          extensions: ["dna"]
        },
        "application/vnd.document+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dolby.mlp": {
          source: "apache",
          extensions: ["mlp"]
        },
        "application/vnd.dolby.mobile.1": {
          source: "iana"
        },
        "application/vnd.dolby.mobile.2": {
          source: "iana"
        },
        "application/vnd.doremir.scorecloud-binary-document": {
          source: "iana"
        },
        "application/vnd.dpgraph": {
          source: "iana",
          extensions: ["dpg"]
        },
        "application/vnd.dreamfactory": {
          source: "iana",
          extensions: ["dfac"]
        },
        "application/vnd.drive+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ds-keypoint": {
          source: "apache",
          extensions: ["kpxx"]
        },
        "application/vnd.dtg.local": {
          source: "iana"
        },
        "application/vnd.dtg.local.flash": {
          source: "iana"
        },
        "application/vnd.dtg.local.html": {
          source: "iana"
        },
        "application/vnd.dvb.ait": {
          source: "iana",
          extensions: ["ait"]
        },
        "application/vnd.dvb.dvbisl+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.dvbj": {
          source: "iana"
        },
        "application/vnd.dvb.esgcontainer": {
          source: "iana"
        },
        "application/vnd.dvb.ipdcdftnotifaccess": {
          source: "iana"
        },
        "application/vnd.dvb.ipdcesgaccess": {
          source: "iana"
        },
        "application/vnd.dvb.ipdcesgaccess2": {
          source: "iana"
        },
        "application/vnd.dvb.ipdcesgpdd": {
          source: "iana"
        },
        "application/vnd.dvb.ipdcroaming": {
          source: "iana"
        },
        "application/vnd.dvb.iptv.alfec-base": {
          source: "iana"
        },
        "application/vnd.dvb.iptv.alfec-enhancement": {
          source: "iana"
        },
        "application/vnd.dvb.notif-aggregate-root+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.notif-container+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.notif-generic+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.notif-ia-msglist+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.notif-ia-registration-request+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.notif-ia-registration-response+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.notif-init+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.dvb.pfr": {
          source: "iana"
        },
        "application/vnd.dvb.service": {
          source: "iana",
          extensions: ["svc"]
        },
        "application/vnd.dxr": {
          source: "iana"
        },
        "application/vnd.dynageo": {
          source: "iana",
          extensions: ["geo"]
        },
        "application/vnd.dzr": {
          source: "iana"
        },
        "application/vnd.easykaraoke.cdgdownload": {
          source: "iana"
        },
        "application/vnd.ecdis-update": {
          source: "iana"
        },
        "application/vnd.ecip.rlp": {
          source: "iana"
        },
        "application/vnd.eclipse.ditto+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ecowin.chart": {
          source: "iana",
          extensions: ["mag"]
        },
        "application/vnd.ecowin.filerequest": {
          source: "iana"
        },
        "application/vnd.ecowin.fileupdate": {
          source: "iana"
        },
        "application/vnd.ecowin.series": {
          source: "iana"
        },
        "application/vnd.ecowin.seriesrequest": {
          source: "iana"
        },
        "application/vnd.ecowin.seriesupdate": {
          source: "iana"
        },
        "application/vnd.efi.img": {
          source: "iana"
        },
        "application/vnd.efi.iso": {
          source: "iana"
        },
        "application/vnd.emclient.accessrequest+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.enliven": {
          source: "iana",
          extensions: ["nml"]
        },
        "application/vnd.enphase.envoy": {
          source: "iana"
        },
        "application/vnd.eprints.data+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.epson.esf": {
          source: "iana",
          extensions: ["esf"]
        },
        "application/vnd.epson.msf": {
          source: "iana",
          extensions: ["msf"]
        },
        "application/vnd.epson.quickanime": {
          source: "iana",
          extensions: ["qam"]
        },
        "application/vnd.epson.salt": {
          source: "iana",
          extensions: ["slt"]
        },
        "application/vnd.epson.ssf": {
          source: "iana",
          extensions: ["ssf"]
        },
        "application/vnd.ericsson.quickcall": {
          source: "iana"
        },
        "application/vnd.espass-espass+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.eszigno3+xml": {
          source: "iana",
          compressible: true,
          extensions: ["es3", "et3"]
        },
        "application/vnd.etsi.aoc+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.asic-e+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.etsi.asic-s+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.etsi.cug+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvcommand+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvdiscovery+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvprofile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvsad-bc+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvsad-cod+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvsad-npvr+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvservice+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvsync+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.iptvueprofile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.mcid+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.mheg5": {
          source: "iana"
        },
        "application/vnd.etsi.overload-control-policy-dataset+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.pstn+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.sci+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.simservs+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.timestamp-token": {
          source: "iana"
        },
        "application/vnd.etsi.tsl+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.etsi.tsl.der": {
          source: "iana"
        },
        "application/vnd.eu.kasparian.car+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.eudora.data": {
          source: "iana"
        },
        "application/vnd.evolv.ecig.profile": {
          source: "iana"
        },
        "application/vnd.evolv.ecig.settings": {
          source: "iana"
        },
        "application/vnd.evolv.ecig.theme": {
          source: "iana"
        },
        "application/vnd.exstream-empower+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.exstream-package": {
          source: "iana"
        },
        "application/vnd.ezpix-album": {
          source: "iana",
          extensions: ["ez2"]
        },
        "application/vnd.ezpix-package": {
          source: "iana",
          extensions: ["ez3"]
        },
        "application/vnd.f-secure.mobile": {
          source: "iana"
        },
        "application/vnd.familysearch.gedcom+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.fastcopy-disk-image": {
          source: "iana"
        },
        "application/vnd.fdf": {
          source: "iana",
          extensions: ["fdf"]
        },
        "application/vnd.fdsn.mseed": {
          source: "iana",
          extensions: ["mseed"]
        },
        "application/vnd.fdsn.seed": {
          source: "iana",
          extensions: ["seed", "dataless"]
        },
        "application/vnd.ffsns": {
          source: "iana"
        },
        "application/vnd.ficlab.flb+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.filmit.zfc": {
          source: "iana"
        },
        "application/vnd.fints": {
          source: "iana"
        },
        "application/vnd.firemonkeys.cloudcell": {
          source: "iana"
        },
        "application/vnd.flographit": {
          source: "iana",
          extensions: ["gph"]
        },
        "application/vnd.fluxtime.clip": {
          source: "iana",
          extensions: ["ftc"]
        },
        "application/vnd.font-fontforge-sfd": {
          source: "iana"
        },
        "application/vnd.framemaker": {
          source: "iana",
          extensions: ["fm", "frame", "maker", "book"]
        },
        "application/vnd.frogans.fnc": {
          source: "iana",
          extensions: ["fnc"]
        },
        "application/vnd.frogans.ltf": {
          source: "iana",
          extensions: ["ltf"]
        },
        "application/vnd.fsc.weblaunch": {
          source: "iana",
          extensions: ["fsc"]
        },
        "application/vnd.fujifilm.fb.docuworks": {
          source: "iana"
        },
        "application/vnd.fujifilm.fb.docuworks.binder": {
          source: "iana"
        },
        "application/vnd.fujifilm.fb.docuworks.container": {
          source: "iana"
        },
        "application/vnd.fujifilm.fb.jfi+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.fujitsu.oasys": {
          source: "iana",
          extensions: ["oas"]
        },
        "application/vnd.fujitsu.oasys2": {
          source: "iana",
          extensions: ["oa2"]
        },
        "application/vnd.fujitsu.oasys3": {
          source: "iana",
          extensions: ["oa3"]
        },
        "application/vnd.fujitsu.oasysgp": {
          source: "iana",
          extensions: ["fg5"]
        },
        "application/vnd.fujitsu.oasysprs": {
          source: "iana",
          extensions: ["bh2"]
        },
        "application/vnd.fujixerox.art-ex": {
          source: "iana"
        },
        "application/vnd.fujixerox.art4": {
          source: "iana"
        },
        "application/vnd.fujixerox.ddd": {
          source: "iana",
          extensions: ["ddd"]
        },
        "application/vnd.fujixerox.docuworks": {
          source: "iana",
          extensions: ["xdw"]
        },
        "application/vnd.fujixerox.docuworks.binder": {
          source: "iana",
          extensions: ["xbd"]
        },
        "application/vnd.fujixerox.docuworks.container": {
          source: "iana"
        },
        "application/vnd.fujixerox.hbpl": {
          source: "iana"
        },
        "application/vnd.fut-misnet": {
          source: "iana"
        },
        "application/vnd.futoin+cbor": {
          source: "iana"
        },
        "application/vnd.futoin+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.fuzzysheet": {
          source: "iana",
          extensions: ["fzs"]
        },
        "application/vnd.genomatix.tuxedo": {
          source: "iana",
          extensions: ["txd"]
        },
        "application/vnd.gentics.grd+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.geo+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.geocube+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.geogebra.file": {
          source: "iana",
          extensions: ["ggb"]
        },
        "application/vnd.geogebra.slides": {
          source: "iana"
        },
        "application/vnd.geogebra.tool": {
          source: "iana",
          extensions: ["ggt"]
        },
        "application/vnd.geometry-explorer": {
          source: "iana",
          extensions: ["gex", "gre"]
        },
        "application/vnd.geonext": {
          source: "iana",
          extensions: ["gxt"]
        },
        "application/vnd.geoplan": {
          source: "iana",
          extensions: ["g2w"]
        },
        "application/vnd.geospace": {
          source: "iana",
          extensions: ["g3w"]
        },
        "application/vnd.gerber": {
          source: "iana"
        },
        "application/vnd.globalplatform.card-content-mgt": {
          source: "iana"
        },
        "application/vnd.globalplatform.card-content-mgt-response": {
          source: "iana"
        },
        "application/vnd.gmx": {
          source: "iana",
          extensions: ["gmx"]
        },
        "application/vnd.google-apps.document": {
          compressible: false,
          extensions: ["gdoc"]
        },
        "application/vnd.google-apps.presentation": {
          compressible: false,
          extensions: ["gslides"]
        },
        "application/vnd.google-apps.spreadsheet": {
          compressible: false,
          extensions: ["gsheet"]
        },
        "application/vnd.google-earth.kml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["kml"]
        },
        "application/vnd.google-earth.kmz": {
          source: "iana",
          compressible: false,
          extensions: ["kmz"]
        },
        "application/vnd.gov.sk.e-form+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.gov.sk.e-form+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.gov.sk.xmldatacontainer+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.grafeq": {
          source: "iana",
          extensions: ["gqf", "gqs"]
        },
        "application/vnd.gridmp": {
          source: "iana"
        },
        "application/vnd.groove-account": {
          source: "iana",
          extensions: ["gac"]
        },
        "application/vnd.groove-help": {
          source: "iana",
          extensions: ["ghf"]
        },
        "application/vnd.groove-identity-message": {
          source: "iana",
          extensions: ["gim"]
        },
        "application/vnd.groove-injector": {
          source: "iana",
          extensions: ["grv"]
        },
        "application/vnd.groove-tool-message": {
          source: "iana",
          extensions: ["gtm"]
        },
        "application/vnd.groove-tool-template": {
          source: "iana",
          extensions: ["tpl"]
        },
        "application/vnd.groove-vcard": {
          source: "iana",
          extensions: ["vcg"]
        },
        "application/vnd.hal+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.hal+xml": {
          source: "iana",
          compressible: true,
          extensions: ["hal"]
        },
        "application/vnd.handheld-entertainment+xml": {
          source: "iana",
          compressible: true,
          extensions: ["zmm"]
        },
        "application/vnd.hbci": {
          source: "iana",
          extensions: ["hbci"]
        },
        "application/vnd.hc+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.hcl-bireports": {
          source: "iana"
        },
        "application/vnd.hdt": {
          source: "iana"
        },
        "application/vnd.heroku+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.hhe.lesson-player": {
          source: "iana",
          extensions: ["les"]
        },
        "application/vnd.hl7cda+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/vnd.hl7v2+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/vnd.hp-hpgl": {
          source: "iana",
          extensions: ["hpgl"]
        },
        "application/vnd.hp-hpid": {
          source: "iana",
          extensions: ["hpid"]
        },
        "application/vnd.hp-hps": {
          source: "iana",
          extensions: ["hps"]
        },
        "application/vnd.hp-jlyt": {
          source: "iana",
          extensions: ["jlt"]
        },
        "application/vnd.hp-pcl": {
          source: "iana",
          extensions: ["pcl"]
        },
        "application/vnd.hp-pclxl": {
          source: "iana",
          extensions: ["pclxl"]
        },
        "application/vnd.httphone": {
          source: "iana"
        },
        "application/vnd.hydrostatix.sof-data": {
          source: "iana",
          extensions: ["sfd-hdstx"]
        },
        "application/vnd.hyper+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.hyper-item+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.hyperdrive+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.hzn-3d-crossword": {
          source: "iana"
        },
        "application/vnd.ibm.afplinedata": {
          source: "iana"
        },
        "application/vnd.ibm.electronic-media": {
          source: "iana"
        },
        "application/vnd.ibm.minipay": {
          source: "iana",
          extensions: ["mpy"]
        },
        "application/vnd.ibm.modcap": {
          source: "iana",
          extensions: ["afp", "listafp", "list3820"]
        },
        "application/vnd.ibm.rights-management": {
          source: "iana",
          extensions: ["irm"]
        },
        "application/vnd.ibm.secure-container": {
          source: "iana",
          extensions: ["sc"]
        },
        "application/vnd.iccprofile": {
          source: "iana",
          extensions: ["icc", "icm"]
        },
        "application/vnd.ieee.1905": {
          source: "iana"
        },
        "application/vnd.igloader": {
          source: "iana",
          extensions: ["igl"]
        },
        "application/vnd.imagemeter.folder+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.imagemeter.image+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.immervision-ivp": {
          source: "iana",
          extensions: ["ivp"]
        },
        "application/vnd.immervision-ivu": {
          source: "iana",
          extensions: ["ivu"]
        },
        "application/vnd.ims.imsccv1p1": {
          source: "iana"
        },
        "application/vnd.ims.imsccv1p2": {
          source: "iana"
        },
        "application/vnd.ims.imsccv1p3": {
          source: "iana"
        },
        "application/vnd.ims.lis.v2.result+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ims.lti.v2.toolproxy+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ims.lti.v2.toolproxy.id+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ims.lti.v2.toolsettings+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ims.lti.v2.toolsettings.simple+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.informedcontrol.rms+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.informix-visionary": {
          source: "iana"
        },
        "application/vnd.infotech.project": {
          source: "iana"
        },
        "application/vnd.infotech.project+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.innopath.wamp.notification": {
          source: "iana"
        },
        "application/vnd.insors.igm": {
          source: "iana",
          extensions: ["igm"]
        },
        "application/vnd.intercon.formnet": {
          source: "iana",
          extensions: ["xpw", "xpx"]
        },
        "application/vnd.intergeo": {
          source: "iana",
          extensions: ["i2g"]
        },
        "application/vnd.intertrust.digibox": {
          source: "iana"
        },
        "application/vnd.intertrust.nncp": {
          source: "iana"
        },
        "application/vnd.intu.qbo": {
          source: "iana",
          extensions: ["qbo"]
        },
        "application/vnd.intu.qfx": {
          source: "iana",
          extensions: ["qfx"]
        },
        "application/vnd.iptc.g2.catalogitem+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.iptc.g2.conceptitem+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.iptc.g2.knowledgeitem+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.iptc.g2.newsitem+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.iptc.g2.newsmessage+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.iptc.g2.packageitem+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.iptc.g2.planningitem+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ipunplugged.rcprofile": {
          source: "iana",
          extensions: ["rcprofile"]
        },
        "application/vnd.irepository.package+xml": {
          source: "iana",
          compressible: true,
          extensions: ["irp"]
        },
        "application/vnd.is-xpr": {
          source: "iana",
          extensions: ["xpr"]
        },
        "application/vnd.isac.fcs": {
          source: "iana",
          extensions: ["fcs"]
        },
        "application/vnd.iso11783-10+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.jam": {
          source: "iana",
          extensions: ["jam"]
        },
        "application/vnd.japannet-directory-service": {
          source: "iana"
        },
        "application/vnd.japannet-jpnstore-wakeup": {
          source: "iana"
        },
        "application/vnd.japannet-payment-wakeup": {
          source: "iana"
        },
        "application/vnd.japannet-registration": {
          source: "iana"
        },
        "application/vnd.japannet-registration-wakeup": {
          source: "iana"
        },
        "application/vnd.japannet-setstore-wakeup": {
          source: "iana"
        },
        "application/vnd.japannet-verification": {
          source: "iana"
        },
        "application/vnd.japannet-verification-wakeup": {
          source: "iana"
        },
        "application/vnd.jcp.javame.midlet-rms": {
          source: "iana",
          extensions: ["rms"]
        },
        "application/vnd.jisp": {
          source: "iana",
          extensions: ["jisp"]
        },
        "application/vnd.joost.joda-archive": {
          source: "iana",
          extensions: ["joda"]
        },
        "application/vnd.jsk.isdn-ngn": {
          source: "iana"
        },
        "application/vnd.kahootz": {
          source: "iana",
          extensions: ["ktz", "ktr"]
        },
        "application/vnd.kde.karbon": {
          source: "iana",
          extensions: ["karbon"]
        },
        "application/vnd.kde.kchart": {
          source: "iana",
          extensions: ["chrt"]
        },
        "application/vnd.kde.kformula": {
          source: "iana",
          extensions: ["kfo"]
        },
        "application/vnd.kde.kivio": {
          source: "iana",
          extensions: ["flw"]
        },
        "application/vnd.kde.kontour": {
          source: "iana",
          extensions: ["kon"]
        },
        "application/vnd.kde.kpresenter": {
          source: "iana",
          extensions: ["kpr", "kpt"]
        },
        "application/vnd.kde.kspread": {
          source: "iana",
          extensions: ["ksp"]
        },
        "application/vnd.kde.kword": {
          source: "iana",
          extensions: ["kwd", "kwt"]
        },
        "application/vnd.kenameaapp": {
          source: "iana",
          extensions: ["htke"]
        },
        "application/vnd.kidspiration": {
          source: "iana",
          extensions: ["kia"]
        },
        "application/vnd.kinar": {
          source: "iana",
          extensions: ["kne", "knp"]
        },
        "application/vnd.koan": {
          source: "iana",
          extensions: ["skp", "skd", "skt", "skm"]
        },
        "application/vnd.kodak-descriptor": {
          source: "iana",
          extensions: ["sse"]
        },
        "application/vnd.las": {
          source: "iana"
        },
        "application/vnd.las.las+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.las.las+xml": {
          source: "iana",
          compressible: true,
          extensions: ["lasxml"]
        },
        "application/vnd.laszip": {
          source: "iana"
        },
        "application/vnd.leap+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.liberty-request+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.llamagraphics.life-balance.desktop": {
          source: "iana",
          extensions: ["lbd"]
        },
        "application/vnd.llamagraphics.life-balance.exchange+xml": {
          source: "iana",
          compressible: true,
          extensions: ["lbe"]
        },
        "application/vnd.logipipe.circuit+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.loom": {
          source: "iana"
        },
        "application/vnd.lotus-1-2-3": {
          source: "iana",
          extensions: ["123"]
        },
        "application/vnd.lotus-approach": {
          source: "iana",
          extensions: ["apr"]
        },
        "application/vnd.lotus-freelance": {
          source: "iana",
          extensions: ["pre"]
        },
        "application/vnd.lotus-notes": {
          source: "iana",
          extensions: ["nsf"]
        },
        "application/vnd.lotus-organizer": {
          source: "iana",
          extensions: ["org"]
        },
        "application/vnd.lotus-screencam": {
          source: "iana",
          extensions: ["scm"]
        },
        "application/vnd.lotus-wordpro": {
          source: "iana",
          extensions: ["lwp"]
        },
        "application/vnd.macports.portpkg": {
          source: "iana",
          extensions: ["portpkg"]
        },
        "application/vnd.mapbox-vector-tile": {
          source: "iana",
          extensions: ["mvt"]
        },
        "application/vnd.marlin.drm.actiontoken+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.marlin.drm.conftoken+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.marlin.drm.license+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.marlin.drm.mdcf": {
          source: "iana"
        },
        "application/vnd.mason+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.maxar.archive.3tz+zip": {
          source: "iana",
          compressible: false
        },
        "application/vnd.maxmind.maxmind-db": {
          source: "iana"
        },
        "application/vnd.mcd": {
          source: "iana",
          extensions: ["mcd"]
        },
        "application/vnd.medcalcdata": {
          source: "iana",
          extensions: ["mc1"]
        },
        "application/vnd.mediastation.cdkey": {
          source: "iana",
          extensions: ["cdkey"]
        },
        "application/vnd.meridian-slingshot": {
          source: "iana"
        },
        "application/vnd.mfer": {
          source: "iana",
          extensions: ["mwf"]
        },
        "application/vnd.mfmp": {
          source: "iana",
          extensions: ["mfm"]
        },
        "application/vnd.micro+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.micrografx.flo": {
          source: "iana",
          extensions: ["flo"]
        },
        "application/vnd.micrografx.igx": {
          source: "iana",
          extensions: ["igx"]
        },
        "application/vnd.microsoft.portable-executable": {
          source: "iana"
        },
        "application/vnd.microsoft.windows.thumbnail-cache": {
          source: "iana"
        },
        "application/vnd.miele+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.mif": {
          source: "iana",
          extensions: ["mif"]
        },
        "application/vnd.minisoft-hp3000-save": {
          source: "iana"
        },
        "application/vnd.mitsubishi.misty-guard.trustweb": {
          source: "iana"
        },
        "application/vnd.mobius.daf": {
          source: "iana",
          extensions: ["daf"]
        },
        "application/vnd.mobius.dis": {
          source: "iana",
          extensions: ["dis"]
        },
        "application/vnd.mobius.mbk": {
          source: "iana",
          extensions: ["mbk"]
        },
        "application/vnd.mobius.mqy": {
          source: "iana",
          extensions: ["mqy"]
        },
        "application/vnd.mobius.msl": {
          source: "iana",
          extensions: ["msl"]
        },
        "application/vnd.mobius.plc": {
          source: "iana",
          extensions: ["plc"]
        },
        "application/vnd.mobius.txf": {
          source: "iana",
          extensions: ["txf"]
        },
        "application/vnd.mophun.application": {
          source: "iana",
          extensions: ["mpn"]
        },
        "application/vnd.mophun.certificate": {
          source: "iana",
          extensions: ["mpc"]
        },
        "application/vnd.motorola.flexsuite": {
          source: "iana"
        },
        "application/vnd.motorola.flexsuite.adsi": {
          source: "iana"
        },
        "application/vnd.motorola.flexsuite.fis": {
          source: "iana"
        },
        "application/vnd.motorola.flexsuite.gotap": {
          source: "iana"
        },
        "application/vnd.motorola.flexsuite.kmr": {
          source: "iana"
        },
        "application/vnd.motorola.flexsuite.ttc": {
          source: "iana"
        },
        "application/vnd.motorola.flexsuite.wem": {
          source: "iana"
        },
        "application/vnd.motorola.iprm": {
          source: "iana"
        },
        "application/vnd.mozilla.xul+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xul"]
        },
        "application/vnd.ms-3mfdocument": {
          source: "iana"
        },
        "application/vnd.ms-artgalry": {
          source: "iana",
          extensions: ["cil"]
        },
        "application/vnd.ms-asf": {
          source: "iana"
        },
        "application/vnd.ms-cab-compressed": {
          source: "iana",
          extensions: ["cab"]
        },
        "application/vnd.ms-color.iccprofile": {
          source: "apache"
        },
        "application/vnd.ms-excel": {
          source: "iana",
          compressible: false,
          extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
        },
        "application/vnd.ms-excel.addin.macroenabled.12": {
          source: "iana",
          extensions: ["xlam"]
        },
        "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
          source: "iana",
          extensions: ["xlsb"]
        },
        "application/vnd.ms-excel.sheet.macroenabled.12": {
          source: "iana",
          extensions: ["xlsm"]
        },
        "application/vnd.ms-excel.template.macroenabled.12": {
          source: "iana",
          extensions: ["xltm"]
        },
        "application/vnd.ms-fontobject": {
          source: "iana",
          compressible: true,
          extensions: ["eot"]
        },
        "application/vnd.ms-htmlhelp": {
          source: "iana",
          extensions: ["chm"]
        },
        "application/vnd.ms-ims": {
          source: "iana",
          extensions: ["ims"]
        },
        "application/vnd.ms-lrm": {
          source: "iana",
          extensions: ["lrm"]
        },
        "application/vnd.ms-office.activex+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ms-officetheme": {
          source: "iana",
          extensions: ["thmx"]
        },
        "application/vnd.ms-opentype": {
          source: "apache",
          compressible: true
        },
        "application/vnd.ms-outlook": {
          compressible: false,
          extensions: ["msg"]
        },
        "application/vnd.ms-package.obfuscated-opentype": {
          source: "apache"
        },
        "application/vnd.ms-pki.seccat": {
          source: "apache",
          extensions: ["cat"]
        },
        "application/vnd.ms-pki.stl": {
          source: "apache",
          extensions: ["stl"]
        },
        "application/vnd.ms-playready.initiator+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ms-powerpoint": {
          source: "iana",
          compressible: false,
          extensions: ["ppt", "pps", "pot"]
        },
        "application/vnd.ms-powerpoint.addin.macroenabled.12": {
          source: "iana",
          extensions: ["ppam"]
        },
        "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
          source: "iana",
          extensions: ["pptm"]
        },
        "application/vnd.ms-powerpoint.slide.macroenabled.12": {
          source: "iana",
          extensions: ["sldm"]
        },
        "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
          source: "iana",
          extensions: ["ppsm"]
        },
        "application/vnd.ms-powerpoint.template.macroenabled.12": {
          source: "iana",
          extensions: ["potm"]
        },
        "application/vnd.ms-printdevicecapabilities+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ms-printing.printticket+xml": {
          source: "apache",
          compressible: true
        },
        "application/vnd.ms-printschematicket+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ms-project": {
          source: "iana",
          extensions: ["mpp", "mpt"]
        },
        "application/vnd.ms-tnef": {
          source: "iana"
        },
        "application/vnd.ms-windows.devicepairing": {
          source: "iana"
        },
        "application/vnd.ms-windows.nwprinting.oob": {
          source: "iana"
        },
        "application/vnd.ms-windows.printerpairing": {
          source: "iana"
        },
        "application/vnd.ms-windows.wsd.oob": {
          source: "iana"
        },
        "application/vnd.ms-wmdrm.lic-chlg-req": {
          source: "iana"
        },
        "application/vnd.ms-wmdrm.lic-resp": {
          source: "iana"
        },
        "application/vnd.ms-wmdrm.meter-chlg-req": {
          source: "iana"
        },
        "application/vnd.ms-wmdrm.meter-resp": {
          source: "iana"
        },
        "application/vnd.ms-word.document.macroenabled.12": {
          source: "iana",
          extensions: ["docm"]
        },
        "application/vnd.ms-word.template.macroenabled.12": {
          source: "iana",
          extensions: ["dotm"]
        },
        "application/vnd.ms-works": {
          source: "iana",
          extensions: ["wps", "wks", "wcm", "wdb"]
        },
        "application/vnd.ms-wpl": {
          source: "iana",
          extensions: ["wpl"]
        },
        "application/vnd.ms-xpsdocument": {
          source: "iana",
          compressible: false,
          extensions: ["xps"]
        },
        "application/vnd.msa-disk-image": {
          source: "iana"
        },
        "application/vnd.mseq": {
          source: "iana",
          extensions: ["mseq"]
        },
        "application/vnd.msign": {
          source: "iana"
        },
        "application/vnd.multiad.creator": {
          source: "iana"
        },
        "application/vnd.multiad.creator.cif": {
          source: "iana"
        },
        "application/vnd.music-niff": {
          source: "iana"
        },
        "application/vnd.musician": {
          source: "iana",
          extensions: ["mus"]
        },
        "application/vnd.muvee.style": {
          source: "iana",
          extensions: ["msty"]
        },
        "application/vnd.mynfc": {
          source: "iana",
          extensions: ["taglet"]
        },
        "application/vnd.nacamar.ybrid+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.ncd.control": {
          source: "iana"
        },
        "application/vnd.ncd.reference": {
          source: "iana"
        },
        "application/vnd.nearst.inv+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.nebumind.line": {
          source: "iana"
        },
        "application/vnd.nervana": {
          source: "iana"
        },
        "application/vnd.netfpx": {
          source: "iana"
        },
        "application/vnd.neurolanguage.nlu": {
          source: "iana",
          extensions: ["nlu"]
        },
        "application/vnd.nimn": {
          source: "iana"
        },
        "application/vnd.nintendo.nitro.rom": {
          source: "iana"
        },
        "application/vnd.nintendo.snes.rom": {
          source: "iana"
        },
        "application/vnd.nitf": {
          source: "iana",
          extensions: ["ntf", "nitf"]
        },
        "application/vnd.noblenet-directory": {
          source: "iana",
          extensions: ["nnd"]
        },
        "application/vnd.noblenet-sealer": {
          source: "iana",
          extensions: ["nns"]
        },
        "application/vnd.noblenet-web": {
          source: "iana",
          extensions: ["nnw"]
        },
        "application/vnd.nokia.catalogs": {
          source: "iana"
        },
        "application/vnd.nokia.conml+wbxml": {
          source: "iana"
        },
        "application/vnd.nokia.conml+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.nokia.iptv.config+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.nokia.isds-radio-presets": {
          source: "iana"
        },
        "application/vnd.nokia.landmark+wbxml": {
          source: "iana"
        },
        "application/vnd.nokia.landmark+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.nokia.landmarkcollection+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.nokia.n-gage.ac+xml": {
          source: "iana",
          compressible: true,
          extensions: ["ac"]
        },
        "application/vnd.nokia.n-gage.data": {
          source: "iana",
          extensions: ["ngdat"]
        },
        "application/vnd.nokia.n-gage.symbian.install": {
          source: "iana",
          extensions: ["n-gage"]
        },
        "application/vnd.nokia.ncd": {
          source: "iana"
        },
        "application/vnd.nokia.pcd+wbxml": {
          source: "iana"
        },
        "application/vnd.nokia.pcd+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.nokia.radio-preset": {
          source: "iana",
          extensions: ["rpst"]
        },
        "application/vnd.nokia.radio-presets": {
          source: "iana",
          extensions: ["rpss"]
        },
        "application/vnd.novadigm.edm": {
          source: "iana",
          extensions: ["edm"]
        },
        "application/vnd.novadigm.edx": {
          source: "iana",
          extensions: ["edx"]
        },
        "application/vnd.novadigm.ext": {
          source: "iana",
          extensions: ["ext"]
        },
        "application/vnd.ntt-local.content-share": {
          source: "iana"
        },
        "application/vnd.ntt-local.file-transfer": {
          source: "iana"
        },
        "application/vnd.ntt-local.ogw_remote-access": {
          source: "iana"
        },
        "application/vnd.ntt-local.sip-ta_remote": {
          source: "iana"
        },
        "application/vnd.ntt-local.sip-ta_tcp_stream": {
          source: "iana"
        },
        "application/vnd.oasis.opendocument.chart": {
          source: "iana",
          extensions: ["odc"]
        },
        "application/vnd.oasis.opendocument.chart-template": {
          source: "iana",
          extensions: ["otc"]
        },
        "application/vnd.oasis.opendocument.database": {
          source: "iana",
          extensions: ["odb"]
        },
        "application/vnd.oasis.opendocument.formula": {
          source: "iana",
          extensions: ["odf"]
        },
        "application/vnd.oasis.opendocument.formula-template": {
          source: "iana",
          extensions: ["odft"]
        },
        "application/vnd.oasis.opendocument.graphics": {
          source: "iana",
          compressible: false,
          extensions: ["odg"]
        },
        "application/vnd.oasis.opendocument.graphics-template": {
          source: "iana",
          extensions: ["otg"]
        },
        "application/vnd.oasis.opendocument.image": {
          source: "iana",
          extensions: ["odi"]
        },
        "application/vnd.oasis.opendocument.image-template": {
          source: "iana",
          extensions: ["oti"]
        },
        "application/vnd.oasis.opendocument.presentation": {
          source: "iana",
          compressible: false,
          extensions: ["odp"]
        },
        "application/vnd.oasis.opendocument.presentation-template": {
          source: "iana",
          extensions: ["otp"]
        },
        "application/vnd.oasis.opendocument.spreadsheet": {
          source: "iana",
          compressible: false,
          extensions: ["ods"]
        },
        "application/vnd.oasis.opendocument.spreadsheet-template": {
          source: "iana",
          extensions: ["ots"]
        },
        "application/vnd.oasis.opendocument.text": {
          source: "iana",
          compressible: false,
          extensions: ["odt"]
        },
        "application/vnd.oasis.opendocument.text-master": {
          source: "iana",
          extensions: ["odm"]
        },
        "application/vnd.oasis.opendocument.text-template": {
          source: "iana",
          extensions: ["ott"]
        },
        "application/vnd.oasis.opendocument.text-web": {
          source: "iana",
          extensions: ["oth"]
        },
        "application/vnd.obn": {
          source: "iana"
        },
        "application/vnd.ocf+cbor": {
          source: "iana"
        },
        "application/vnd.oci.image.manifest.v1+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oftn.l10n+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.contentaccessdownload+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.contentaccessstreaming+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.cspg-hexbinary": {
          source: "iana"
        },
        "application/vnd.oipf.dae.svg+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.dae.xhtml+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.mippvcontrolmessage+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.pae.gem": {
          source: "iana"
        },
        "application/vnd.oipf.spdiscovery+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.spdlist+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.ueprofile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oipf.userprofile+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.olpc-sugar": {
          source: "iana",
          extensions: ["xo"]
        },
        "application/vnd.oma-scws-config": {
          source: "iana"
        },
        "application/vnd.oma-scws-http-request": {
          source: "iana"
        },
        "application/vnd.oma-scws-http-response": {
          source: "iana"
        },
        "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.drm-trigger+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.imd+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.ltkm": {
          source: "iana"
        },
        "application/vnd.oma.bcast.notification+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.provisioningtrigger": {
          source: "iana"
        },
        "application/vnd.oma.bcast.sgboot": {
          source: "iana"
        },
        "application/vnd.oma.bcast.sgdd+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.sgdu": {
          source: "iana"
        },
        "application/vnd.oma.bcast.simple-symbol-container": {
          source: "iana"
        },
        "application/vnd.oma.bcast.smartcard-trigger+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.sprov+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.bcast.stkm": {
          source: "iana"
        },
        "application/vnd.oma.cab-address-book+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.cab-feature-handler+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.cab-pcc+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.cab-subs-invite+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.cab-user-prefs+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.dcd": {
          source: "iana"
        },
        "application/vnd.oma.dcdc": {
          source: "iana"
        },
        "application/vnd.oma.dd2+xml": {
          source: "iana",
          compressible: true,
          extensions: ["dd2"]
        },
        "application/vnd.oma.drm.risd+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.group-usage-list+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.lwm2m+cbor": {
          source: "iana"
        },
        "application/vnd.oma.lwm2m+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.lwm2m+tlv": {
          source: "iana"
        },
        "application/vnd.oma.pal+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.poc.detailed-progress-report+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.poc.final-report+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.poc.groups+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.poc.invocation-descriptor+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.poc.optimized-progress-report+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.push": {
          source: "iana"
        },
        "application/vnd.oma.scidm.messages+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oma.xcap-directory+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.omads-email+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/vnd.omads-file+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/vnd.omads-folder+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/vnd.omaloc-supl-init": {
          source: "iana"
        },
        "application/vnd.onepager": {
          source: "iana"
        },
        "application/vnd.onepagertamp": {
          source: "iana"
        },
        "application/vnd.onepagertamx": {
          source: "iana"
        },
        "application/vnd.onepagertat": {
          source: "iana"
        },
        "application/vnd.onepagertatp": {
          source: "iana"
        },
        "application/vnd.onepagertatx": {
          source: "iana"
        },
        "application/vnd.openblox.game+xml": {
          source: "iana",
          compressible: true,
          extensions: ["obgx"]
        },
        "application/vnd.openblox.game-binary": {
          source: "iana"
        },
        "application/vnd.openeye.oeb": {
          source: "iana"
        },
        "application/vnd.openofficeorg.extension": {
          source: "apache",
          extensions: ["oxt"]
        },
        "application/vnd.openstreetmap.data+xml": {
          source: "iana",
          compressible: true,
          extensions: ["osm"]
        },
        "application/vnd.opentimestamps.ots": {
          source: "iana"
        },
        "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawing+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
          source: "iana",
          compressible: false,
          extensions: ["pptx"]
        },
        "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slide": {
          source: "iana",
          extensions: ["sldx"]
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
          source: "iana",
          extensions: ["ppsx"]
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.template": {
          source: "iana",
          extensions: ["potx"]
        },
        "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
          source: "iana",
          compressible: false,
          extensions: ["xlsx"]
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
          source: "iana",
          extensions: ["xltx"]
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.theme+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.vmldrawing": {
          source: "iana"
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
          source: "iana",
          compressible: false,
          extensions: ["docx"]
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
          source: "iana",
          extensions: ["dotx"]
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-package.core-properties+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.openxmlformats-package.relationships+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oracle.resource+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.orange.indata": {
          source: "iana"
        },
        "application/vnd.osa.netdeploy": {
          source: "iana"
        },
        "application/vnd.osgeo.mapguide.package": {
          source: "iana",
          extensions: ["mgp"]
        },
        "application/vnd.osgi.bundle": {
          source: "iana"
        },
        "application/vnd.osgi.dp": {
          source: "iana",
          extensions: ["dp"]
        },
        "application/vnd.osgi.subsystem": {
          source: "iana",
          extensions: ["esa"]
        },
        "application/vnd.otps.ct-kip+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.oxli.countgraph": {
          source: "iana"
        },
        "application/vnd.pagerduty+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.palm": {
          source: "iana",
          extensions: ["pdb", "pqa", "oprc"]
        },
        "application/vnd.panoply": {
          source: "iana"
        },
        "application/vnd.paos.xml": {
          source: "iana"
        },
        "application/vnd.patentdive": {
          source: "iana"
        },
        "application/vnd.patientecommsdoc": {
          source: "iana"
        },
        "application/vnd.pawaafile": {
          source: "iana",
          extensions: ["paw"]
        },
        "application/vnd.pcos": {
          source: "iana"
        },
        "application/vnd.pg.format": {
          source: "iana",
          extensions: ["str"]
        },
        "application/vnd.pg.osasli": {
          source: "iana",
          extensions: ["ei6"]
        },
        "application/vnd.piaccess.application-licence": {
          source: "iana"
        },
        "application/vnd.picsel": {
          source: "iana",
          extensions: ["efif"]
        },
        "application/vnd.pmi.widget": {
          source: "iana",
          extensions: ["wg"]
        },
        "application/vnd.poc.group-advertisement+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.pocketlearn": {
          source: "iana",
          extensions: ["plf"]
        },
        "application/vnd.powerbuilder6": {
          source: "iana",
          extensions: ["pbd"]
        },
        "application/vnd.powerbuilder6-s": {
          source: "iana"
        },
        "application/vnd.powerbuilder7": {
          source: "iana"
        },
        "application/vnd.powerbuilder7-s": {
          source: "iana"
        },
        "application/vnd.powerbuilder75": {
          source: "iana"
        },
        "application/vnd.powerbuilder75-s": {
          source: "iana"
        },
        "application/vnd.preminet": {
          source: "iana"
        },
        "application/vnd.previewsystems.box": {
          source: "iana",
          extensions: ["box"]
        },
        "application/vnd.proteus.magazine": {
          source: "iana",
          extensions: ["mgz"]
        },
        "application/vnd.psfs": {
          source: "iana"
        },
        "application/vnd.publishare-delta-tree": {
          source: "iana",
          extensions: ["qps"]
        },
        "application/vnd.pvi.ptid1": {
          source: "iana",
          extensions: ["ptid"]
        },
        "application/vnd.pwg-multiplexed": {
          source: "iana"
        },
        "application/vnd.pwg-xhtml-print+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.qualcomm.brew-app-res": {
          source: "iana"
        },
        "application/vnd.quarantainenet": {
          source: "iana"
        },
        "application/vnd.quark.quarkxpress": {
          source: "iana",
          extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
        },
        "application/vnd.quobject-quoxdocument": {
          source: "iana"
        },
        "application/vnd.radisys.moml+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-audit+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-audit-conf+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-audit-conn+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-audit-dialog+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-audit-stream+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-conf+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog-base+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog-fax-detect+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog-group+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog-speech+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.radisys.msml-dialog-transform+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.rainstor.data": {
          source: "iana"
        },
        "application/vnd.rapid": {
          source: "iana"
        },
        "application/vnd.rar": {
          source: "iana",
          extensions: ["rar"]
        },
        "application/vnd.realvnc.bed": {
          source: "iana",
          extensions: ["bed"]
        },
        "application/vnd.recordare.musicxml": {
          source: "iana",
          extensions: ["mxl"]
        },
        "application/vnd.recordare.musicxml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["musicxml"]
        },
        "application/vnd.renlearn.rlprint": {
          source: "iana"
        },
        "application/vnd.resilient.logic": {
          source: "iana"
        },
        "application/vnd.restful+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.rig.cryptonote": {
          source: "iana",
          extensions: ["cryptonote"]
        },
        "application/vnd.rim.cod": {
          source: "apache",
          extensions: ["cod"]
        },
        "application/vnd.rn-realmedia": {
          source: "apache",
          extensions: ["rm"]
        },
        "application/vnd.rn-realmedia-vbr": {
          source: "apache",
          extensions: ["rmvb"]
        },
        "application/vnd.route66.link66+xml": {
          source: "iana",
          compressible: true,
          extensions: ["link66"]
        },
        "application/vnd.rs-274x": {
          source: "iana"
        },
        "application/vnd.ruckus.download": {
          source: "iana"
        },
        "application/vnd.s3sms": {
          source: "iana"
        },
        "application/vnd.sailingtracker.track": {
          source: "iana",
          extensions: ["st"]
        },
        "application/vnd.sar": {
          source: "iana"
        },
        "application/vnd.sbm.cid": {
          source: "iana"
        },
        "application/vnd.sbm.mid2": {
          source: "iana"
        },
        "application/vnd.scribus": {
          source: "iana"
        },
        "application/vnd.sealed.3df": {
          source: "iana"
        },
        "application/vnd.sealed.csf": {
          source: "iana"
        },
        "application/vnd.sealed.doc": {
          source: "iana"
        },
        "application/vnd.sealed.eml": {
          source: "iana"
        },
        "application/vnd.sealed.mht": {
          source: "iana"
        },
        "application/vnd.sealed.net": {
          source: "iana"
        },
        "application/vnd.sealed.ppt": {
          source: "iana"
        },
        "application/vnd.sealed.tiff": {
          source: "iana"
        },
        "application/vnd.sealed.xls": {
          source: "iana"
        },
        "application/vnd.sealedmedia.softseal.html": {
          source: "iana"
        },
        "application/vnd.sealedmedia.softseal.pdf": {
          source: "iana"
        },
        "application/vnd.seemail": {
          source: "iana",
          extensions: ["see"]
        },
        "application/vnd.seis+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.sema": {
          source: "iana",
          extensions: ["sema"]
        },
        "application/vnd.semd": {
          source: "iana",
          extensions: ["semd"]
        },
        "application/vnd.semf": {
          source: "iana",
          extensions: ["semf"]
        },
        "application/vnd.shade-save-file": {
          source: "iana"
        },
        "application/vnd.shana.informed.formdata": {
          source: "iana",
          extensions: ["ifm"]
        },
        "application/vnd.shana.informed.formtemplate": {
          source: "iana",
          extensions: ["itp"]
        },
        "application/vnd.shana.informed.interchange": {
          source: "iana",
          extensions: ["iif"]
        },
        "application/vnd.shana.informed.package": {
          source: "iana",
          extensions: ["ipk"]
        },
        "application/vnd.shootproof+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.shopkick+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.shp": {
          source: "iana"
        },
        "application/vnd.shx": {
          source: "iana"
        },
        "application/vnd.sigrok.session": {
          source: "iana"
        },
        "application/vnd.simtech-mindmapper": {
          source: "iana",
          extensions: ["twd", "twds"]
        },
        "application/vnd.siren+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.smaf": {
          source: "iana",
          extensions: ["mmf"]
        },
        "application/vnd.smart.notebook": {
          source: "iana"
        },
        "application/vnd.smart.teacher": {
          source: "iana",
          extensions: ["teacher"]
        },
        "application/vnd.snesdev-page-table": {
          source: "iana"
        },
        "application/vnd.software602.filler.form+xml": {
          source: "iana",
          compressible: true,
          extensions: ["fo"]
        },
        "application/vnd.software602.filler.form-xml-zip": {
          source: "iana"
        },
        "application/vnd.solent.sdkm+xml": {
          source: "iana",
          compressible: true,
          extensions: ["sdkm", "sdkd"]
        },
        "application/vnd.spotfire.dxp": {
          source: "iana",
          extensions: ["dxp"]
        },
        "application/vnd.spotfire.sfs": {
          source: "iana",
          extensions: ["sfs"]
        },
        "application/vnd.sqlite3": {
          source: "iana"
        },
        "application/vnd.sss-cod": {
          source: "iana"
        },
        "application/vnd.sss-dtf": {
          source: "iana"
        },
        "application/vnd.sss-ntf": {
          source: "iana"
        },
        "application/vnd.stardivision.calc": {
          source: "apache",
          extensions: ["sdc"]
        },
        "application/vnd.stardivision.draw": {
          source: "apache",
          extensions: ["sda"]
        },
        "application/vnd.stardivision.impress": {
          source: "apache",
          extensions: ["sdd"]
        },
        "application/vnd.stardivision.math": {
          source: "apache",
          extensions: ["smf"]
        },
        "application/vnd.stardivision.writer": {
          source: "apache",
          extensions: ["sdw", "vor"]
        },
        "application/vnd.stardivision.writer-global": {
          source: "apache",
          extensions: ["sgl"]
        },
        "application/vnd.stepmania.package": {
          source: "iana",
          extensions: ["smzip"]
        },
        "application/vnd.stepmania.stepchart": {
          source: "iana",
          extensions: ["sm"]
        },
        "application/vnd.street-stream": {
          source: "iana"
        },
        "application/vnd.sun.wadl+xml": {
          source: "iana",
          compressible: true,
          extensions: ["wadl"]
        },
        "application/vnd.sun.xml.calc": {
          source: "apache",
          extensions: ["sxc"]
        },
        "application/vnd.sun.xml.calc.template": {
          source: "apache",
          extensions: ["stc"]
        },
        "application/vnd.sun.xml.draw": {
          source: "apache",
          extensions: ["sxd"]
        },
        "application/vnd.sun.xml.draw.template": {
          source: "apache",
          extensions: ["std"]
        },
        "application/vnd.sun.xml.impress": {
          source: "apache",
          extensions: ["sxi"]
        },
        "application/vnd.sun.xml.impress.template": {
          source: "apache",
          extensions: ["sti"]
        },
        "application/vnd.sun.xml.math": {
          source: "apache",
          extensions: ["sxm"]
        },
        "application/vnd.sun.xml.writer": {
          source: "apache",
          extensions: ["sxw"]
        },
        "application/vnd.sun.xml.writer.global": {
          source: "apache",
          extensions: ["sxg"]
        },
        "application/vnd.sun.xml.writer.template": {
          source: "apache",
          extensions: ["stw"]
        },
        "application/vnd.sus-calendar": {
          source: "iana",
          extensions: ["sus", "susp"]
        },
        "application/vnd.svd": {
          source: "iana",
          extensions: ["svd"]
        },
        "application/vnd.swiftview-ics": {
          source: "iana"
        },
        "application/vnd.sycle+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.syft+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.symbian.install": {
          source: "apache",
          extensions: ["sis", "sisx"]
        },
        "application/vnd.syncml+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["xsm"]
        },
        "application/vnd.syncml.dm+wbxml": {
          source: "iana",
          charset: "UTF-8",
          extensions: ["bdm"]
        },
        "application/vnd.syncml.dm+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["xdm"]
        },
        "application/vnd.syncml.dm.notification": {
          source: "iana"
        },
        "application/vnd.syncml.dmddf+wbxml": {
          source: "iana"
        },
        "application/vnd.syncml.dmddf+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["ddf"]
        },
        "application/vnd.syncml.dmtnds+wbxml": {
          source: "iana"
        },
        "application/vnd.syncml.dmtnds+xml": {
          source: "iana",
          charset: "UTF-8",
          compressible: true
        },
        "application/vnd.syncml.ds.notification": {
          source: "iana"
        },
        "application/vnd.tableschema+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.tao.intent-module-archive": {
          source: "iana",
          extensions: ["tao"]
        },
        "application/vnd.tcpdump.pcap": {
          source: "iana",
          extensions: ["pcap", "cap", "dmp"]
        },
        "application/vnd.think-cell.ppttc+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.tmd.mediaflex.api+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.tml": {
          source: "iana"
        },
        "application/vnd.tmobile-livetv": {
          source: "iana",
          extensions: ["tmo"]
        },
        "application/vnd.tri.onesource": {
          source: "iana"
        },
        "application/vnd.trid.tpt": {
          source: "iana",
          extensions: ["tpt"]
        },
        "application/vnd.triscape.mxs": {
          source: "iana",
          extensions: ["mxs"]
        },
        "application/vnd.trueapp": {
          source: "iana",
          extensions: ["tra"]
        },
        "application/vnd.truedoc": {
          source: "iana"
        },
        "application/vnd.ubisoft.webplayer": {
          source: "iana"
        },
        "application/vnd.ufdl": {
          source: "iana",
          extensions: ["ufd", "ufdl"]
        },
        "application/vnd.uiq.theme": {
          source: "iana",
          extensions: ["utz"]
        },
        "application/vnd.umajin": {
          source: "iana",
          extensions: ["umj"]
        },
        "application/vnd.unity": {
          source: "iana",
          extensions: ["unityweb"]
        },
        "application/vnd.uoml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["uoml"]
        },
        "application/vnd.uplanet.alert": {
          source: "iana"
        },
        "application/vnd.uplanet.alert-wbxml": {
          source: "iana"
        },
        "application/vnd.uplanet.bearer-choice": {
          source: "iana"
        },
        "application/vnd.uplanet.bearer-choice-wbxml": {
          source: "iana"
        },
        "application/vnd.uplanet.cacheop": {
          source: "iana"
        },
        "application/vnd.uplanet.cacheop-wbxml": {
          source: "iana"
        },
        "application/vnd.uplanet.channel": {
          source: "iana"
        },
        "application/vnd.uplanet.channel-wbxml": {
          source: "iana"
        },
        "application/vnd.uplanet.list": {
          source: "iana"
        },
        "application/vnd.uplanet.list-wbxml": {
          source: "iana"
        },
        "application/vnd.uplanet.listcmd": {
          source: "iana"
        },
        "application/vnd.uplanet.listcmd-wbxml": {
          source: "iana"
        },
        "application/vnd.uplanet.signal": {
          source: "iana"
        },
        "application/vnd.uri-map": {
          source: "iana"
        },
        "application/vnd.valve.source.material": {
          source: "iana"
        },
        "application/vnd.vcx": {
          source: "iana",
          extensions: ["vcx"]
        },
        "application/vnd.vd-study": {
          source: "iana"
        },
        "application/vnd.vectorworks": {
          source: "iana"
        },
        "application/vnd.vel+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.verimatrix.vcas": {
          source: "iana"
        },
        "application/vnd.veritone.aion+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.veryant.thin": {
          source: "iana"
        },
        "application/vnd.ves.encrypted": {
          source: "iana"
        },
        "application/vnd.vidsoft.vidconference": {
          source: "iana"
        },
        "application/vnd.visio": {
          source: "iana",
          extensions: ["vsd", "vst", "vss", "vsw"]
        },
        "application/vnd.visionary": {
          source: "iana",
          extensions: ["vis"]
        },
        "application/vnd.vividence.scriptfile": {
          source: "iana"
        },
        "application/vnd.vsf": {
          source: "iana",
          extensions: ["vsf"]
        },
        "application/vnd.wap.sic": {
          source: "iana"
        },
        "application/vnd.wap.slc": {
          source: "iana"
        },
        "application/vnd.wap.wbxml": {
          source: "iana",
          charset: "UTF-8",
          extensions: ["wbxml"]
        },
        "application/vnd.wap.wmlc": {
          source: "iana",
          extensions: ["wmlc"]
        },
        "application/vnd.wap.wmlscriptc": {
          source: "iana",
          extensions: ["wmlsc"]
        },
        "application/vnd.webturbo": {
          source: "iana",
          extensions: ["wtb"]
        },
        "application/vnd.wfa.dpp": {
          source: "iana"
        },
        "application/vnd.wfa.p2p": {
          source: "iana"
        },
        "application/vnd.wfa.wsc": {
          source: "iana"
        },
        "application/vnd.windows.devicepairing": {
          source: "iana"
        },
        "application/vnd.wmc": {
          source: "iana"
        },
        "application/vnd.wmf.bootstrap": {
          source: "iana"
        },
        "application/vnd.wolfram.mathematica": {
          source: "iana"
        },
        "application/vnd.wolfram.mathematica.package": {
          source: "iana"
        },
        "application/vnd.wolfram.player": {
          source: "iana",
          extensions: ["nbp"]
        },
        "application/vnd.wordperfect": {
          source: "iana",
          extensions: ["wpd"]
        },
        "application/vnd.wqd": {
          source: "iana",
          extensions: ["wqd"]
        },
        "application/vnd.wrq-hp3000-labelled": {
          source: "iana"
        },
        "application/vnd.wt.stf": {
          source: "iana",
          extensions: ["stf"]
        },
        "application/vnd.wv.csp+wbxml": {
          source: "iana"
        },
        "application/vnd.wv.csp+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.wv.ssp+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.xacml+json": {
          source: "iana",
          compressible: true
        },
        "application/vnd.xara": {
          source: "iana",
          extensions: ["xar"]
        },
        "application/vnd.xfdl": {
          source: "iana",
          extensions: ["xfdl"]
        },
        "application/vnd.xfdl.webform": {
          source: "iana"
        },
        "application/vnd.xmi+xml": {
          source: "iana",
          compressible: true
        },
        "application/vnd.xmpie.cpkg": {
          source: "iana"
        },
        "application/vnd.xmpie.dpkg": {
          source: "iana"
        },
        "application/vnd.xmpie.plan": {
          source: "iana"
        },
        "application/vnd.xmpie.ppkg": {
          source: "iana"
        },
        "application/vnd.xmpie.xlim": {
          source: "iana"
        },
        "application/vnd.yamaha.hv-dic": {
          source: "iana",
          extensions: ["hvd"]
        },
        "application/vnd.yamaha.hv-script": {
          source: "iana",
          extensions: ["hvs"]
        },
        "application/vnd.yamaha.hv-voice": {
          source: "iana",
          extensions: ["hvp"]
        },
        "application/vnd.yamaha.openscoreformat": {
          source: "iana",
          extensions: ["osf"]
        },
        "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
          source: "iana",
          compressible: true,
          extensions: ["osfpvg"]
        },
        "application/vnd.yamaha.remote-setup": {
          source: "iana"
        },
        "application/vnd.yamaha.smaf-audio": {
          source: "iana",
          extensions: ["saf"]
        },
        "application/vnd.yamaha.smaf-phrase": {
          source: "iana",
          extensions: ["spf"]
        },
        "application/vnd.yamaha.through-ngn": {
          source: "iana"
        },
        "application/vnd.yamaha.tunnel-udpencap": {
          source: "iana"
        },
        "application/vnd.yaoweme": {
          source: "iana"
        },
        "application/vnd.yellowriver-custom-menu": {
          source: "iana",
          extensions: ["cmp"]
        },
        "application/vnd.youtube.yt": {
          source: "iana"
        },
        "application/vnd.zul": {
          source: "iana",
          extensions: ["zir", "zirz"]
        },
        "application/vnd.zzazz.deck+xml": {
          source: "iana",
          compressible: true,
          extensions: ["zaz"]
        },
        "application/voicexml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["vxml"]
        },
        "application/voucher-cms+json": {
          source: "iana",
          compressible: true
        },
        "application/vq-rtcpxr": {
          source: "iana"
        },
        "application/wasm": {
          source: "iana",
          compressible: true,
          extensions: ["wasm"]
        },
        "application/watcherinfo+xml": {
          source: "iana",
          compressible: true,
          extensions: ["wif"]
        },
        "application/webpush-options+json": {
          source: "iana",
          compressible: true
        },
        "application/whoispp-query": {
          source: "iana"
        },
        "application/whoispp-response": {
          source: "iana"
        },
        "application/widget": {
          source: "iana",
          extensions: ["wgt"]
        },
        "application/winhlp": {
          source: "apache",
          extensions: ["hlp"]
        },
        "application/wita": {
          source: "iana"
        },
        "application/wordperfect5.1": {
          source: "iana"
        },
        "application/wsdl+xml": {
          source: "iana",
          compressible: true,
          extensions: ["wsdl"]
        },
        "application/wspolicy+xml": {
          source: "iana",
          compressible: true,
          extensions: ["wspolicy"]
        },
        "application/x-7z-compressed": {
          source: "apache",
          compressible: false,
          extensions: ["7z"]
        },
        "application/x-abiword": {
          source: "apache",
          extensions: ["abw"]
        },
        "application/x-ace-compressed": {
          source: "apache",
          extensions: ["ace"]
        },
        "application/x-amf": {
          source: "apache"
        },
        "application/x-apple-diskimage": {
          source: "apache",
          extensions: ["dmg"]
        },
        "application/x-arj": {
          compressible: false,
          extensions: ["arj"]
        },
        "application/x-authorware-bin": {
          source: "apache",
          extensions: ["aab", "x32", "u32", "vox"]
        },
        "application/x-authorware-map": {
          source: "apache",
          extensions: ["aam"]
        },
        "application/x-authorware-seg": {
          source: "apache",
          extensions: ["aas"]
        },
        "application/x-bcpio": {
          source: "apache",
          extensions: ["bcpio"]
        },
        "application/x-bdoc": {
          compressible: false,
          extensions: ["bdoc"]
        },
        "application/x-bittorrent": {
          source: "apache",
          extensions: ["torrent"]
        },
        "application/x-blorb": {
          source: "apache",
          extensions: ["blb", "blorb"]
        },
        "application/x-bzip": {
          source: "apache",
          compressible: false,
          extensions: ["bz"]
        },
        "application/x-bzip2": {
          source: "apache",
          compressible: false,
          extensions: ["bz2", "boz"]
        },
        "application/x-cbr": {
          source: "apache",
          extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
        },
        "application/x-cdlink": {
          source: "apache",
          extensions: ["vcd"]
        },
        "application/x-cfs-compressed": {
          source: "apache",
          extensions: ["cfs"]
        },
        "application/x-chat": {
          source: "apache",
          extensions: ["chat"]
        },
        "application/x-chess-pgn": {
          source: "apache",
          extensions: ["pgn"]
        },
        "application/x-chrome-extension": {
          extensions: ["crx"]
        },
        "application/x-cocoa": {
          source: "nginx",
          extensions: ["cco"]
        },
        "application/x-compress": {
          source: "apache"
        },
        "application/x-conference": {
          source: "apache",
          extensions: ["nsc"]
        },
        "application/x-cpio": {
          source: "apache",
          extensions: ["cpio"]
        },
        "application/x-csh": {
          source: "apache",
          extensions: ["csh"]
        },
        "application/x-deb": {
          compressible: false
        },
        "application/x-debian-package": {
          source: "apache",
          extensions: ["deb", "udeb"]
        },
        "application/x-dgc-compressed": {
          source: "apache",
          extensions: ["dgc"]
        },
        "application/x-director": {
          source: "apache",
          extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
        },
        "application/x-doom": {
          source: "apache",
          extensions: ["wad"]
        },
        "application/x-dtbncx+xml": {
          source: "apache",
          compressible: true,
          extensions: ["ncx"]
        },
        "application/x-dtbook+xml": {
          source: "apache",
          compressible: true,
          extensions: ["dtb"]
        },
        "application/x-dtbresource+xml": {
          source: "apache",
          compressible: true,
          extensions: ["res"]
        },
        "application/x-dvi": {
          source: "apache",
          compressible: false,
          extensions: ["dvi"]
        },
        "application/x-envoy": {
          source: "apache",
          extensions: ["evy"]
        },
        "application/x-eva": {
          source: "apache",
          extensions: ["eva"]
        },
        "application/x-font-bdf": {
          source: "apache",
          extensions: ["bdf"]
        },
        "application/x-font-dos": {
          source: "apache"
        },
        "application/x-font-framemaker": {
          source: "apache"
        },
        "application/x-font-ghostscript": {
          source: "apache",
          extensions: ["gsf"]
        },
        "application/x-font-libgrx": {
          source: "apache"
        },
        "application/x-font-linux-psf": {
          source: "apache",
          extensions: ["psf"]
        },
        "application/x-font-pcf": {
          source: "apache",
          extensions: ["pcf"]
        },
        "application/x-font-snf": {
          source: "apache",
          extensions: ["snf"]
        },
        "application/x-font-speedo": {
          source: "apache"
        },
        "application/x-font-sunos-news": {
          source: "apache"
        },
        "application/x-font-type1": {
          source: "apache",
          extensions: ["pfa", "pfb", "pfm", "afm"]
        },
        "application/x-font-vfont": {
          source: "apache"
        },
        "application/x-freearc": {
          source: "apache",
          extensions: ["arc"]
        },
        "application/x-futuresplash": {
          source: "apache",
          extensions: ["spl"]
        },
        "application/x-gca-compressed": {
          source: "apache",
          extensions: ["gca"]
        },
        "application/x-glulx": {
          source: "apache",
          extensions: ["ulx"]
        },
        "application/x-gnumeric": {
          source: "apache",
          extensions: ["gnumeric"]
        },
        "application/x-gramps-xml": {
          source: "apache",
          extensions: ["gramps"]
        },
        "application/x-gtar": {
          source: "apache",
          extensions: ["gtar"]
        },
        "application/x-gzip": {
          source: "apache"
        },
        "application/x-hdf": {
          source: "apache",
          extensions: ["hdf"]
        },
        "application/x-httpd-php": {
          compressible: true,
          extensions: ["php"]
        },
        "application/x-install-instructions": {
          source: "apache",
          extensions: ["install"]
        },
        "application/x-iso9660-image": {
          source: "apache",
          extensions: ["iso"]
        },
        "application/x-iwork-keynote-sffkey": {
          extensions: ["key"]
        },
        "application/x-iwork-numbers-sffnumbers": {
          extensions: ["numbers"]
        },
        "application/x-iwork-pages-sffpages": {
          extensions: ["pages"]
        },
        "application/x-java-archive-diff": {
          source: "nginx",
          extensions: ["jardiff"]
        },
        "application/x-java-jnlp-file": {
          source: "apache",
          compressible: false,
          extensions: ["jnlp"]
        },
        "application/x-javascript": {
          compressible: true
        },
        "application/x-keepass2": {
          extensions: ["kdbx"]
        },
        "application/x-latex": {
          source: "apache",
          compressible: false,
          extensions: ["latex"]
        },
        "application/x-lua-bytecode": {
          extensions: ["luac"]
        },
        "application/x-lzh-compressed": {
          source: "apache",
          extensions: ["lzh", "lha"]
        },
        "application/x-makeself": {
          source: "nginx",
          extensions: ["run"]
        },
        "application/x-mie": {
          source: "apache",
          extensions: ["mie"]
        },
        "application/x-mobipocket-ebook": {
          source: "apache",
          extensions: ["prc", "mobi"]
        },
        "application/x-mpegurl": {
          compressible: false
        },
        "application/x-ms-application": {
          source: "apache",
          extensions: ["application"]
        },
        "application/x-ms-shortcut": {
          source: "apache",
          extensions: ["lnk"]
        },
        "application/x-ms-wmd": {
          source: "apache",
          extensions: ["wmd"]
        },
        "application/x-ms-wmz": {
          source: "apache",
          extensions: ["wmz"]
        },
        "application/x-ms-xbap": {
          source: "apache",
          extensions: ["xbap"]
        },
        "application/x-msaccess": {
          source: "apache",
          extensions: ["mdb"]
        },
        "application/x-msbinder": {
          source: "apache",
          extensions: ["obd"]
        },
        "application/x-mscardfile": {
          source: "apache",
          extensions: ["crd"]
        },
        "application/x-msclip": {
          source: "apache",
          extensions: ["clp"]
        },
        "application/x-msdos-program": {
          extensions: ["exe"]
        },
        "application/x-msdownload": {
          source: "apache",
          extensions: ["exe", "dll", "com", "bat", "msi"]
        },
        "application/x-msmediaview": {
          source: "apache",
          extensions: ["mvb", "m13", "m14"]
        },
        "application/x-msmetafile": {
          source: "apache",
          extensions: ["wmf", "wmz", "emf", "emz"]
        },
        "application/x-msmoney": {
          source: "apache",
          extensions: ["mny"]
        },
        "application/x-mspublisher": {
          source: "apache",
          extensions: ["pub"]
        },
        "application/x-msschedule": {
          source: "apache",
          extensions: ["scd"]
        },
        "application/x-msterminal": {
          source: "apache",
          extensions: ["trm"]
        },
        "application/x-mswrite": {
          source: "apache",
          extensions: ["wri"]
        },
        "application/x-netcdf": {
          source: "apache",
          extensions: ["nc", "cdf"]
        },
        "application/x-ns-proxy-autoconfig": {
          compressible: true,
          extensions: ["pac"]
        },
        "application/x-nzb": {
          source: "apache",
          extensions: ["nzb"]
        },
        "application/x-perl": {
          source: "nginx",
          extensions: ["pl", "pm"]
        },
        "application/x-pilot": {
          source: "nginx",
          extensions: ["prc", "pdb"]
        },
        "application/x-pkcs12": {
          source: "apache",
          compressible: false,
          extensions: ["p12", "pfx"]
        },
        "application/x-pkcs7-certificates": {
          source: "apache",
          extensions: ["p7b", "spc"]
        },
        "application/x-pkcs7-certreqresp": {
          source: "apache",
          extensions: ["p7r"]
        },
        "application/x-pki-message": {
          source: "iana"
        },
        "application/x-rar-compressed": {
          source: "apache",
          compressible: false,
          extensions: ["rar"]
        },
        "application/x-redhat-package-manager": {
          source: "nginx",
          extensions: ["rpm"]
        },
        "application/x-research-info-systems": {
          source: "apache",
          extensions: ["ris"]
        },
        "application/x-sea": {
          source: "nginx",
          extensions: ["sea"]
        },
        "application/x-sh": {
          source: "apache",
          compressible: true,
          extensions: ["sh"]
        },
        "application/x-shar": {
          source: "apache",
          extensions: ["shar"]
        },
        "application/x-shockwave-flash": {
          source: "apache",
          compressible: false,
          extensions: ["swf"]
        },
        "application/x-silverlight-app": {
          source: "apache",
          extensions: ["xap"]
        },
        "application/x-sql": {
          source: "apache",
          extensions: ["sql"]
        },
        "application/x-stuffit": {
          source: "apache",
          compressible: false,
          extensions: ["sit"]
        },
        "application/x-stuffitx": {
          source: "apache",
          extensions: ["sitx"]
        },
        "application/x-subrip": {
          source: "apache",
          extensions: ["srt"]
        },
        "application/x-sv4cpio": {
          source: "apache",
          extensions: ["sv4cpio"]
        },
        "application/x-sv4crc": {
          source: "apache",
          extensions: ["sv4crc"]
        },
        "application/x-t3vm-image": {
          source: "apache",
          extensions: ["t3"]
        },
        "application/x-tads": {
          source: "apache",
          extensions: ["gam"]
        },
        "application/x-tar": {
          source: "apache",
          compressible: true,
          extensions: ["tar"]
        },
        "application/x-tcl": {
          source: "apache",
          extensions: ["tcl", "tk"]
        },
        "application/x-tex": {
          source: "apache",
          extensions: ["tex"]
        },
        "application/x-tex-tfm": {
          source: "apache",
          extensions: ["tfm"]
        },
        "application/x-texinfo": {
          source: "apache",
          extensions: ["texinfo", "texi"]
        },
        "application/x-tgif": {
          source: "apache",
          extensions: ["obj"]
        },
        "application/x-ustar": {
          source: "apache",
          extensions: ["ustar"]
        },
        "application/x-virtualbox-hdd": {
          compressible: true,
          extensions: ["hdd"]
        },
        "application/x-virtualbox-ova": {
          compressible: true,
          extensions: ["ova"]
        },
        "application/x-virtualbox-ovf": {
          compressible: true,
          extensions: ["ovf"]
        },
        "application/x-virtualbox-vbox": {
          compressible: true,
          extensions: ["vbox"]
        },
        "application/x-virtualbox-vbox-extpack": {
          compressible: false,
          extensions: ["vbox-extpack"]
        },
        "application/x-virtualbox-vdi": {
          compressible: true,
          extensions: ["vdi"]
        },
        "application/x-virtualbox-vhd": {
          compressible: true,
          extensions: ["vhd"]
        },
        "application/x-virtualbox-vmdk": {
          compressible: true,
          extensions: ["vmdk"]
        },
        "application/x-wais-source": {
          source: "apache",
          extensions: ["src"]
        },
        "application/x-web-app-manifest+json": {
          compressible: true,
          extensions: ["webapp"]
        },
        "application/x-www-form-urlencoded": {
          source: "iana",
          compressible: true
        },
        "application/x-x509-ca-cert": {
          source: "iana",
          extensions: ["der", "crt", "pem"]
        },
        "application/x-x509-ca-ra-cert": {
          source: "iana"
        },
        "application/x-x509-next-ca-cert": {
          source: "iana"
        },
        "application/x-xfig": {
          source: "apache",
          extensions: ["fig"]
        },
        "application/x-xliff+xml": {
          source: "apache",
          compressible: true,
          extensions: ["xlf"]
        },
        "application/x-xpinstall": {
          source: "apache",
          compressible: false,
          extensions: ["xpi"]
        },
        "application/x-xz": {
          source: "apache",
          extensions: ["xz"]
        },
        "application/x-zmachine": {
          source: "apache",
          extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
        },
        "application/x400-bp": {
          source: "iana"
        },
        "application/xacml+xml": {
          source: "iana",
          compressible: true
        },
        "application/xaml+xml": {
          source: "apache",
          compressible: true,
          extensions: ["xaml"]
        },
        "application/xcap-att+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xav"]
        },
        "application/xcap-caps+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xca"]
        },
        "application/xcap-diff+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xdf"]
        },
        "application/xcap-el+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xel"]
        },
        "application/xcap-error+xml": {
          source: "iana",
          compressible: true
        },
        "application/xcap-ns+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xns"]
        },
        "application/xcon-conference-info+xml": {
          source: "iana",
          compressible: true
        },
        "application/xcon-conference-info-diff+xml": {
          source: "iana",
          compressible: true
        },
        "application/xenc+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xenc"]
        },
        "application/xhtml+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xhtml", "xht"]
        },
        "application/xhtml-voice+xml": {
          source: "apache",
          compressible: true
        },
        "application/xliff+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xlf"]
        },
        "application/xml": {
          source: "iana",
          compressible: true,
          extensions: ["xml", "xsl", "xsd", "rng"]
        },
        "application/xml-dtd": {
          source: "iana",
          compressible: true,
          extensions: ["dtd"]
        },
        "application/xml-external-parsed-entity": {
          source: "iana"
        },
        "application/xml-patch+xml": {
          source: "iana",
          compressible: true
        },
        "application/xmpp+xml": {
          source: "iana",
          compressible: true
        },
        "application/xop+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xop"]
        },
        "application/xproc+xml": {
          source: "apache",
          compressible: true,
          extensions: ["xpl"]
        },
        "application/xslt+xml": {
          source: "iana",
          compressible: true,
          extensions: ["xsl", "xslt"]
        },
        "application/xspf+xml": {
          source: "apache",
          compressible: true,
          extensions: ["xspf"]
        },
        "application/xv+xml": {
          source: "iana",
          compressible: true,
          extensions: ["mxml", "xhvml", "xvml", "xvm"]
        },
        "application/yang": {
          source: "iana",
          extensions: ["yang"]
        },
        "application/yang-data+json": {
          source: "iana",
          compressible: true
        },
        "application/yang-data+xml": {
          source: "iana",
          compressible: true
        },
        "application/yang-patch+json": {
          source: "iana",
          compressible: true
        },
        "application/yang-patch+xml": {
          source: "iana",
          compressible: true
        },
        "application/yin+xml": {
          source: "iana",
          compressible: true,
          extensions: ["yin"]
        },
        "application/zip": {
          source: "iana",
          compressible: false,
          extensions: ["zip"]
        },
        "application/zlib": {
          source: "iana"
        },
        "application/zstd": {
          source: "iana"
        },
        "audio/1d-interleaved-parityfec": {
          source: "iana"
        },
        "audio/32kadpcm": {
          source: "iana"
        },
        "audio/3gpp": {
          source: "iana",
          compressible: false,
          extensions: ["3gpp"]
        },
        "audio/3gpp2": {
          source: "iana"
        },
        "audio/aac": {
          source: "iana"
        },
        "audio/ac3": {
          source: "iana"
        },
        "audio/adpcm": {
          source: "apache",
          extensions: ["adp"]
        },
        "audio/amr": {
          source: "iana",
          extensions: ["amr"]
        },
        "audio/amr-wb": {
          source: "iana"
        },
        "audio/amr-wb+": {
          source: "iana"
        },
        "audio/aptx": {
          source: "iana"
        },
        "audio/asc": {
          source: "iana"
        },
        "audio/atrac-advanced-lossless": {
          source: "iana"
        },
        "audio/atrac-x": {
          source: "iana"
        },
        "audio/atrac3": {
          source: "iana"
        },
        "audio/basic": {
          source: "iana",
          compressible: false,
          extensions: ["au", "snd"]
        },
        "audio/bv16": {
          source: "iana"
        },
        "audio/bv32": {
          source: "iana"
        },
        "audio/clearmode": {
          source: "iana"
        },
        "audio/cn": {
          source: "iana"
        },
        "audio/dat12": {
          source: "iana"
        },
        "audio/dls": {
          source: "iana"
        },
        "audio/dsr-es201108": {
          source: "iana"
        },
        "audio/dsr-es202050": {
          source: "iana"
        },
        "audio/dsr-es202211": {
          source: "iana"
        },
        "audio/dsr-es202212": {
          source: "iana"
        },
        "audio/dv": {
          source: "iana"
        },
        "audio/dvi4": {
          source: "iana"
        },
        "audio/eac3": {
          source: "iana"
        },
        "audio/encaprtp": {
          source: "iana"
        },
        "audio/evrc": {
          source: "iana"
        },
        "audio/evrc-qcp": {
          source: "iana"
        },
        "audio/evrc0": {
          source: "iana"
        },
        "audio/evrc1": {
          source: "iana"
        },
        "audio/evrcb": {
          source: "iana"
        },
        "audio/evrcb0": {
          source: "iana"
        },
        "audio/evrcb1": {
          source: "iana"
        },
        "audio/evrcnw": {
          source: "iana"
        },
        "audio/evrcnw0": {
          source: "iana"
        },
        "audio/evrcnw1": {
          source: "iana"
        },
        "audio/evrcwb": {
          source: "iana"
        },
        "audio/evrcwb0": {
          source: "iana"
        },
        "audio/evrcwb1": {
          source: "iana"
        },
        "audio/evs": {
          source: "iana"
        },
        "audio/flexfec": {
          source: "iana"
        },
        "audio/fwdred": {
          source: "iana"
        },
        "audio/g711-0": {
          source: "iana"
        },
        "audio/g719": {
          source: "iana"
        },
        "audio/g722": {
          source: "iana"
        },
        "audio/g7221": {
          source: "iana"
        },
        "audio/g723": {
          source: "iana"
        },
        "audio/g726-16": {
          source: "iana"
        },
        "audio/g726-24": {
          source: "iana"
        },
        "audio/g726-32": {
          source: "iana"
        },
        "audio/g726-40": {
          source: "iana"
        },
        "audio/g728": {
          source: "iana"
        },
        "audio/g729": {
          source: "iana"
        },
        "audio/g7291": {
          source: "iana"
        },
        "audio/g729d": {
          source: "iana"
        },
        "audio/g729e": {
          source: "iana"
        },
        "audio/gsm": {
          source: "iana"
        },
        "audio/gsm-efr": {
          source: "iana"
        },
        "audio/gsm-hr-08": {
          source: "iana"
        },
        "audio/ilbc": {
          source: "iana"
        },
        "audio/ip-mr_v2.5": {
          source: "iana"
        },
        "audio/isac": {
          source: "apache"
        },
        "audio/l16": {
          source: "iana"
        },
        "audio/l20": {
          source: "iana"
        },
        "audio/l24": {
          source: "iana",
          compressible: false
        },
        "audio/l8": {
          source: "iana"
        },
        "audio/lpc": {
          source: "iana"
        },
        "audio/melp": {
          source: "iana"
        },
        "audio/melp1200": {
          source: "iana"
        },
        "audio/melp2400": {
          source: "iana"
        },
        "audio/melp600": {
          source: "iana"
        },
        "audio/mhas": {
          source: "iana"
        },
        "audio/midi": {
          source: "apache",
          extensions: ["mid", "midi", "kar", "rmi"]
        },
        "audio/mobile-xmf": {
          source: "iana",
          extensions: ["mxmf"]
        },
        "audio/mp3": {
          compressible: false,
          extensions: ["mp3"]
        },
        "audio/mp4": {
          source: "iana",
          compressible: false,
          extensions: ["m4a", "mp4a"]
        },
        "audio/mp4a-latm": {
          source: "iana"
        },
        "audio/mpa": {
          source: "iana"
        },
        "audio/mpa-robust": {
          source: "iana"
        },
        "audio/mpeg": {
          source: "iana",
          compressible: false,
          extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
        },
        "audio/mpeg4-generic": {
          source: "iana"
        },
        "audio/musepack": {
          source: "apache"
        },
        "audio/ogg": {
          source: "iana",
          compressible: false,
          extensions: ["oga", "ogg", "spx", "opus"]
        },
        "audio/opus": {
          source: "iana"
        },
        "audio/parityfec": {
          source: "iana"
        },
        "audio/pcma": {
          source: "iana"
        },
        "audio/pcma-wb": {
          source: "iana"
        },
        "audio/pcmu": {
          source: "iana"
        },
        "audio/pcmu-wb": {
          source: "iana"
        },
        "audio/prs.sid": {
          source: "iana"
        },
        "audio/qcelp": {
          source: "iana"
        },
        "audio/raptorfec": {
          source: "iana"
        },
        "audio/red": {
          source: "iana"
        },
        "audio/rtp-enc-aescm128": {
          source: "iana"
        },
        "audio/rtp-midi": {
          source: "iana"
        },
        "audio/rtploopback": {
          source: "iana"
        },
        "audio/rtx": {
          source: "iana"
        },
        "audio/s3m": {
          source: "apache",
          extensions: ["s3m"]
        },
        "audio/scip": {
          source: "iana"
        },
        "audio/silk": {
          source: "apache",
          extensions: ["sil"]
        },
        "audio/smv": {
          source: "iana"
        },
        "audio/smv-qcp": {
          source: "iana"
        },
        "audio/smv0": {
          source: "iana"
        },
        "audio/sofa": {
          source: "iana"
        },
        "audio/sp-midi": {
          source: "iana"
        },
        "audio/speex": {
          source: "iana"
        },
        "audio/t140c": {
          source: "iana"
        },
        "audio/t38": {
          source: "iana"
        },
        "audio/telephone-event": {
          source: "iana"
        },
        "audio/tetra_acelp": {
          source: "iana"
        },
        "audio/tetra_acelp_bb": {
          source: "iana"
        },
        "audio/tone": {
          source: "iana"
        },
        "audio/tsvcis": {
          source: "iana"
        },
        "audio/uemclip": {
          source: "iana"
        },
        "audio/ulpfec": {
          source: "iana"
        },
        "audio/usac": {
          source: "iana"
        },
        "audio/vdvi": {
          source: "iana"
        },
        "audio/vmr-wb": {
          source: "iana"
        },
        "audio/vnd.3gpp.iufp": {
          source: "iana"
        },
        "audio/vnd.4sb": {
          source: "iana"
        },
        "audio/vnd.audiokoz": {
          source: "iana"
        },
        "audio/vnd.celp": {
          source: "iana"
        },
        "audio/vnd.cisco.nse": {
          source: "iana"
        },
        "audio/vnd.cmles.radio-events": {
          source: "iana"
        },
        "audio/vnd.cns.anp1": {
          source: "iana"
        },
        "audio/vnd.cns.inf1": {
          source: "iana"
        },
        "audio/vnd.dece.audio": {
          source: "iana",
          extensions: ["uva", "uvva"]
        },
        "audio/vnd.digital-winds": {
          source: "iana",
          extensions: ["eol"]
        },
        "audio/vnd.dlna.adts": {
          source: "iana"
        },
        "audio/vnd.dolby.heaac.1": {
          source: "iana"
        },
        "audio/vnd.dolby.heaac.2": {
          source: "iana"
        },
        "audio/vnd.dolby.mlp": {
          source: "iana"
        },
        "audio/vnd.dolby.mps": {
          source: "iana"
        },
        "audio/vnd.dolby.pl2": {
          source: "iana"
        },
        "audio/vnd.dolby.pl2x": {
          source: "iana"
        },
        "audio/vnd.dolby.pl2z": {
          source: "iana"
        },
        "audio/vnd.dolby.pulse.1": {
          source: "iana"
        },
        "audio/vnd.dra": {
          source: "iana",
          extensions: ["dra"]
        },
        "audio/vnd.dts": {
          source: "iana",
          extensions: ["dts"]
        },
        "audio/vnd.dts.hd": {
          source: "iana",
          extensions: ["dtshd"]
        },
        "audio/vnd.dts.uhd": {
          source: "iana"
        },
        "audio/vnd.dvb.file": {
          source: "iana"
        },
        "audio/vnd.everad.plj": {
          source: "iana"
        },
        "audio/vnd.hns.audio": {
          source: "iana"
        },
        "audio/vnd.lucent.voice": {
          source: "iana",
          extensions: ["lvp"]
        },
        "audio/vnd.ms-playready.media.pya": {
          source: "iana",
          extensions: ["pya"]
        },
        "audio/vnd.nokia.mobile-xmf": {
          source: "iana"
        },
        "audio/vnd.nortel.vbk": {
          source: "iana"
        },
        "audio/vnd.nuera.ecelp4800": {
          source: "iana",
          extensions: ["ecelp4800"]
        },
        "audio/vnd.nuera.ecelp7470": {
          source: "iana",
          extensions: ["ecelp7470"]
        },
        "audio/vnd.nuera.ecelp9600": {
          source: "iana",
          extensions: ["ecelp9600"]
        },
        "audio/vnd.octel.sbc": {
          source: "iana"
        },
        "audio/vnd.presonus.multitrack": {
          source: "iana"
        },
        "audio/vnd.qcelp": {
          source: "iana"
        },
        "audio/vnd.rhetorex.32kadpcm": {
          source: "iana"
        },
        "audio/vnd.rip": {
          source: "iana",
          extensions: ["rip"]
        },
        "audio/vnd.rn-realaudio": {
          compressible: false
        },
        "audio/vnd.sealedmedia.softseal.mpeg": {
          source: "iana"
        },
        "audio/vnd.vmx.cvsd": {
          source: "iana"
        },
        "audio/vnd.wave": {
          compressible: false
        },
        "audio/vorbis": {
          source: "iana",
          compressible: false
        },
        "audio/vorbis-config": {
          source: "iana"
        },
        "audio/wav": {
          compressible: false,
          extensions: ["wav"]
        },
        "audio/wave": {
          compressible: false,
          extensions: ["wav"]
        },
        "audio/webm": {
          source: "apache",
          compressible: false,
          extensions: ["weba"]
        },
        "audio/x-aac": {
          source: "apache",
          compressible: false,
          extensions: ["aac"]
        },
        "audio/x-aiff": {
          source: "apache",
          extensions: ["aif", "aiff", "aifc"]
        },
        "audio/x-caf": {
          source: "apache",
          compressible: false,
          extensions: ["caf"]
        },
        "audio/x-flac": {
          source: "apache",
          extensions: ["flac"]
        },
        "audio/x-m4a": {
          source: "nginx",
          extensions: ["m4a"]
        },
        "audio/x-matroska": {
          source: "apache",
          extensions: ["mka"]
        },
        "audio/x-mpegurl": {
          source: "apache",
          extensions: ["m3u"]
        },
        "audio/x-ms-wax": {
          source: "apache",
          extensions: ["wax"]
        },
        "audio/x-ms-wma": {
          source: "apache",
          extensions: ["wma"]
        },
        "audio/x-pn-realaudio": {
          source: "apache",
          extensions: ["ram", "ra"]
        },
        "audio/x-pn-realaudio-plugin": {
          source: "apache",
          extensions: ["rmp"]
        },
        "audio/x-realaudio": {
          source: "nginx",
          extensions: ["ra"]
        },
        "audio/x-tta": {
          source: "apache"
        },
        "audio/x-wav": {
          source: "apache",
          extensions: ["wav"]
        },
        "audio/xm": {
          source: "apache",
          extensions: ["xm"]
        },
        "chemical/x-cdx": {
          source: "apache",
          extensions: ["cdx"]
        },
        "chemical/x-cif": {
          source: "apache",
          extensions: ["cif"]
        },
        "chemical/x-cmdf": {
          source: "apache",
          extensions: ["cmdf"]
        },
        "chemical/x-cml": {
          source: "apache",
          extensions: ["cml"]
        },
        "chemical/x-csml": {
          source: "apache",
          extensions: ["csml"]
        },
        "chemical/x-pdb": {
          source: "apache"
        },
        "chemical/x-xyz": {
          source: "apache",
          extensions: ["xyz"]
        },
        "font/collection": {
          source: "iana",
          extensions: ["ttc"]
        },
        "font/otf": {
          source: "iana",
          compressible: true,
          extensions: ["otf"]
        },
        "font/sfnt": {
          source: "iana"
        },
        "font/ttf": {
          source: "iana",
          compressible: true,
          extensions: ["ttf"]
        },
        "font/woff": {
          source: "iana",
          extensions: ["woff"]
        },
        "font/woff2": {
          source: "iana",
          extensions: ["woff2"]
        },
        "image/aces": {
          source: "iana",
          extensions: ["exr"]
        },
        "image/apng": {
          compressible: false,
          extensions: ["apng"]
        },
        "image/avci": {
          source: "iana",
          extensions: ["avci"]
        },
        "image/avcs": {
          source: "iana",
          extensions: ["avcs"]
        },
        "image/avif": {
          source: "iana",
          compressible: false,
          extensions: ["avif"]
        },
        "image/bmp": {
          source: "iana",
          compressible: true,
          extensions: ["bmp"]
        },
        "image/cgm": {
          source: "iana",
          extensions: ["cgm"]
        },
        "image/dicom-rle": {
          source: "iana",
          extensions: ["drle"]
        },
        "image/emf": {
          source: "iana",
          extensions: ["emf"]
        },
        "image/fits": {
          source: "iana",
          extensions: ["fits"]
        },
        "image/g3fax": {
          source: "iana",
          extensions: ["g3"]
        },
        "image/gif": {
          source: "iana",
          compressible: false,
          extensions: ["gif"]
        },
        "image/heic": {
          source: "iana",
          extensions: ["heic"]
        },
        "image/heic-sequence": {
          source: "iana",
          extensions: ["heics"]
        },
        "image/heif": {
          source: "iana",
          extensions: ["heif"]
        },
        "image/heif-sequence": {
          source: "iana",
          extensions: ["heifs"]
        },
        "image/hej2k": {
          source: "iana",
          extensions: ["hej2"]
        },
        "image/hsj2": {
          source: "iana",
          extensions: ["hsj2"]
        },
        "image/ief": {
          source: "iana",
          extensions: ["ief"]
        },
        "image/jls": {
          source: "iana",
          extensions: ["jls"]
        },
        "image/jp2": {
          source: "iana",
          compressible: false,
          extensions: ["jp2", "jpg2"]
        },
        "image/jpeg": {
          source: "iana",
          compressible: false,
          extensions: ["jpeg", "jpg", "jpe"]
        },
        "image/jph": {
          source: "iana",
          extensions: ["jph"]
        },
        "image/jphc": {
          source: "iana",
          extensions: ["jhc"]
        },
        "image/jpm": {
          source: "iana",
          compressible: false,
          extensions: ["jpm"]
        },
        "image/jpx": {
          source: "iana",
          compressible: false,
          extensions: ["jpx", "jpf"]
        },
        "image/jxr": {
          source: "iana",
          extensions: ["jxr"]
        },
        "image/jxra": {
          source: "iana",
          extensions: ["jxra"]
        },
        "image/jxrs": {
          source: "iana",
          extensions: ["jxrs"]
        },
        "image/jxs": {
          source: "iana",
          extensions: ["jxs"]
        },
        "image/jxsc": {
          source: "iana",
          extensions: ["jxsc"]
        },
        "image/jxsi": {
          source: "iana",
          extensions: ["jxsi"]
        },
        "image/jxss": {
          source: "iana",
          extensions: ["jxss"]
        },
        "image/ktx": {
          source: "iana",
          extensions: ["ktx"]
        },
        "image/ktx2": {
          source: "iana",
          extensions: ["ktx2"]
        },
        "image/naplps": {
          source: "iana"
        },
        "image/pjpeg": {
          compressible: false
        },
        "image/png": {
          source: "iana",
          compressible: false,
          extensions: ["png"]
        },
        "image/prs.btif": {
          source: "iana",
          extensions: ["btif"]
        },
        "image/prs.pti": {
          source: "iana",
          extensions: ["pti"]
        },
        "image/pwg-raster": {
          source: "iana"
        },
        "image/sgi": {
          source: "apache",
          extensions: ["sgi"]
        },
        "image/svg+xml": {
          source: "iana",
          compressible: true,
          extensions: ["svg", "svgz"]
        },
        "image/t38": {
          source: "iana",
          extensions: ["t38"]
        },
        "image/tiff": {
          source: "iana",
          compressible: false,
          extensions: ["tif", "tiff"]
        },
        "image/tiff-fx": {
          source: "iana",
          extensions: ["tfx"]
        },
        "image/vnd.adobe.photoshop": {
          source: "iana",
          compressible: true,
          extensions: ["psd"]
        },
        "image/vnd.airzip.accelerator.azv": {
          source: "iana",
          extensions: ["azv"]
        },
        "image/vnd.cns.inf2": {
          source: "iana"
        },
        "image/vnd.dece.graphic": {
          source: "iana",
          extensions: ["uvi", "uvvi", "uvg", "uvvg"]
        },
        "image/vnd.djvu": {
          source: "iana",
          extensions: ["djvu", "djv"]
        },
        "image/vnd.dvb.subtitle": {
          source: "iana",
          extensions: ["sub"]
        },
        "image/vnd.dwg": {
          source: "iana",
          extensions: ["dwg"]
        },
        "image/vnd.dxf": {
          source: "iana",
          extensions: ["dxf"]
        },
        "image/vnd.fastbidsheet": {
          source: "iana",
          extensions: ["fbs"]
        },
        "image/vnd.fpx": {
          source: "iana",
          extensions: ["fpx"]
        },
        "image/vnd.fst": {
          source: "iana",
          extensions: ["fst"]
        },
        "image/vnd.fujixerox.edmics-mmr": {
          source: "iana",
          extensions: ["mmr"]
        },
        "image/vnd.fujixerox.edmics-rlc": {
          source: "iana",
          extensions: ["rlc"]
        },
        "image/vnd.globalgraphics.pgb": {
          source: "iana"
        },
        "image/vnd.microsoft.icon": {
          source: "iana",
          compressible: true,
          extensions: ["ico"]
        },
        "image/vnd.mix": {
          source: "iana"
        },
        "image/vnd.mozilla.apng": {
          source: "iana"
        },
        "image/vnd.ms-dds": {
          compressible: true,
          extensions: ["dds"]
        },
        "image/vnd.ms-modi": {
          source: "iana",
          extensions: ["mdi"]
        },
        "image/vnd.ms-photo": {
          source: "apache",
          extensions: ["wdp"]
        },
        "image/vnd.net-fpx": {
          source: "iana",
          extensions: ["npx"]
        },
        "image/vnd.pco.b16": {
          source: "iana",
          extensions: ["b16"]
        },
        "image/vnd.radiance": {
          source: "iana"
        },
        "image/vnd.sealed.png": {
          source: "iana"
        },
        "image/vnd.sealedmedia.softseal.gif": {
          source: "iana"
        },
        "image/vnd.sealedmedia.softseal.jpg": {
          source: "iana"
        },
        "image/vnd.svf": {
          source: "iana"
        },
        "image/vnd.tencent.tap": {
          source: "iana",
          extensions: ["tap"]
        },
        "image/vnd.valve.source.texture": {
          source: "iana",
          extensions: ["vtf"]
        },
        "image/vnd.wap.wbmp": {
          source: "iana",
          extensions: ["wbmp"]
        },
        "image/vnd.xiff": {
          source: "iana",
          extensions: ["xif"]
        },
        "image/vnd.zbrush.pcx": {
          source: "iana",
          extensions: ["pcx"]
        },
        "image/webp": {
          source: "apache",
          extensions: ["webp"]
        },
        "image/wmf": {
          source: "iana",
          extensions: ["wmf"]
        },
        "image/x-3ds": {
          source: "apache",
          extensions: ["3ds"]
        },
        "image/x-cmu-raster": {
          source: "apache",
          extensions: ["ras"]
        },
        "image/x-cmx": {
          source: "apache",
          extensions: ["cmx"]
        },
        "image/x-freehand": {
          source: "apache",
          extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
        },
        "image/x-icon": {
          source: "apache",
          compressible: true,
          extensions: ["ico"]
        },
        "image/x-jng": {
          source: "nginx",
          extensions: ["jng"]
        },
        "image/x-mrsid-image": {
          source: "apache",
          extensions: ["sid"]
        },
        "image/x-ms-bmp": {
          source: "nginx",
          compressible: true,
          extensions: ["bmp"]
        },
        "image/x-pcx": {
          source: "apache",
          extensions: ["pcx"]
        },
        "image/x-pict": {
          source: "apache",
          extensions: ["pic", "pct"]
        },
        "image/x-portable-anymap": {
          source: "apache",
          extensions: ["pnm"]
        },
        "image/x-portable-bitmap": {
          source: "apache",
          extensions: ["pbm"]
        },
        "image/x-portable-graymap": {
          source: "apache",
          extensions: ["pgm"]
        },
        "image/x-portable-pixmap": {
          source: "apache",
          extensions: ["ppm"]
        },
        "image/x-rgb": {
          source: "apache",
          extensions: ["rgb"]
        },
        "image/x-tga": {
          source: "apache",
          extensions: ["tga"]
        },
        "image/x-xbitmap": {
          source: "apache",
          extensions: ["xbm"]
        },
        "image/x-xcf": {
          compressible: false
        },
        "image/x-xpixmap": {
          source: "apache",
          extensions: ["xpm"]
        },
        "image/x-xwindowdump": {
          source: "apache",
          extensions: ["xwd"]
        },
        "message/cpim": {
          source: "iana"
        },
        "message/delivery-status": {
          source: "iana"
        },
        "message/disposition-notification": {
          source: "iana",
          extensions: [
            "disposition-notification"
          ]
        },
        "message/external-body": {
          source: "iana"
        },
        "message/feedback-report": {
          source: "iana"
        },
        "message/global": {
          source: "iana",
          extensions: ["u8msg"]
        },
        "message/global-delivery-status": {
          source: "iana",
          extensions: ["u8dsn"]
        },
        "message/global-disposition-notification": {
          source: "iana",
          extensions: ["u8mdn"]
        },
        "message/global-headers": {
          source: "iana",
          extensions: ["u8hdr"]
        },
        "message/http": {
          source: "iana",
          compressible: false
        },
        "message/imdn+xml": {
          source: "iana",
          compressible: true
        },
        "message/news": {
          source: "iana"
        },
        "message/partial": {
          source: "iana",
          compressible: false
        },
        "message/rfc822": {
          source: "iana",
          compressible: true,
          extensions: ["eml", "mime"]
        },
        "message/s-http": {
          source: "iana"
        },
        "message/sip": {
          source: "iana"
        },
        "message/sipfrag": {
          source: "iana"
        },
        "message/tracking-status": {
          source: "iana"
        },
        "message/vnd.si.simp": {
          source: "iana"
        },
        "message/vnd.wfa.wsc": {
          source: "iana",
          extensions: ["wsc"]
        },
        "model/3mf": {
          source: "iana",
          extensions: ["3mf"]
        },
        "model/e57": {
          source: "iana"
        },
        "model/gltf+json": {
          source: "iana",
          compressible: true,
          extensions: ["gltf"]
        },
        "model/gltf-binary": {
          source: "iana",
          compressible: true,
          extensions: ["glb"]
        },
        "model/iges": {
          source: "iana",
          compressible: false,
          extensions: ["igs", "iges"]
        },
        "model/mesh": {
          source: "iana",
          compressible: false,
          extensions: ["msh", "mesh", "silo"]
        },
        "model/mtl": {
          source: "iana",
          extensions: ["mtl"]
        },
        "model/obj": {
          source: "iana",
          extensions: ["obj"]
        },
        "model/step": {
          source: "iana"
        },
        "model/step+xml": {
          source: "iana",
          compressible: true,
          extensions: ["stpx"]
        },
        "model/step+zip": {
          source: "iana",
          compressible: false,
          extensions: ["stpz"]
        },
        "model/step-xml+zip": {
          source: "iana",
          compressible: false,
          extensions: ["stpxz"]
        },
        "model/stl": {
          source: "iana",
          extensions: ["stl"]
        },
        "model/vnd.collada+xml": {
          source: "iana",
          compressible: true,
          extensions: ["dae"]
        },
        "model/vnd.dwf": {
          source: "iana",
          extensions: ["dwf"]
        },
        "model/vnd.flatland.3dml": {
          source: "iana"
        },
        "model/vnd.gdl": {
          source: "iana",
          extensions: ["gdl"]
        },
        "model/vnd.gs-gdl": {
          source: "apache"
        },
        "model/vnd.gs.gdl": {
          source: "iana"
        },
        "model/vnd.gtw": {
          source: "iana",
          extensions: ["gtw"]
        },
        "model/vnd.moml+xml": {
          source: "iana",
          compressible: true
        },
        "model/vnd.mts": {
          source: "iana",
          extensions: ["mts"]
        },
        "model/vnd.opengex": {
          source: "iana",
          extensions: ["ogex"]
        },
        "model/vnd.parasolid.transmit.binary": {
          source: "iana",
          extensions: ["x_b"]
        },
        "model/vnd.parasolid.transmit.text": {
          source: "iana",
          extensions: ["x_t"]
        },
        "model/vnd.pytha.pyox": {
          source: "iana"
        },
        "model/vnd.rosette.annotated-data-model": {
          source: "iana"
        },
        "model/vnd.sap.vds": {
          source: "iana",
          extensions: ["vds"]
        },
        "model/vnd.usdz+zip": {
          source: "iana",
          compressible: false,
          extensions: ["usdz"]
        },
        "model/vnd.valve.source.compiled-map": {
          source: "iana",
          extensions: ["bsp"]
        },
        "model/vnd.vtu": {
          source: "iana",
          extensions: ["vtu"]
        },
        "model/vrml": {
          source: "iana",
          compressible: false,
          extensions: ["wrl", "vrml"]
        },
        "model/x3d+binary": {
          source: "apache",
          compressible: false,
          extensions: ["x3db", "x3dbz"]
        },
        "model/x3d+fastinfoset": {
          source: "iana",
          extensions: ["x3db"]
        },
        "model/x3d+vrml": {
          source: "apache",
          compressible: false,
          extensions: ["x3dv", "x3dvz"]
        },
        "model/x3d+xml": {
          source: "iana",
          compressible: true,
          extensions: ["x3d", "x3dz"]
        },
        "model/x3d-vrml": {
          source: "iana",
          extensions: ["x3dv"]
        },
        "multipart/alternative": {
          source: "iana",
          compressible: false
        },
        "multipart/appledouble": {
          source: "iana"
        },
        "multipart/byteranges": {
          source: "iana"
        },
        "multipart/digest": {
          source: "iana"
        },
        "multipart/encrypted": {
          source: "iana",
          compressible: false
        },
        "multipart/form-data": {
          source: "iana",
          compressible: false
        },
        "multipart/header-set": {
          source: "iana"
        },
        "multipart/mixed": {
          source: "iana"
        },
        "multipart/multilingual": {
          source: "iana"
        },
        "multipart/parallel": {
          source: "iana"
        },
        "multipart/related": {
          source: "iana",
          compressible: false
        },
        "multipart/report": {
          source: "iana"
        },
        "multipart/signed": {
          source: "iana",
          compressible: false
        },
        "multipart/vnd.bint.med-plus": {
          source: "iana"
        },
        "multipart/voice-message": {
          source: "iana"
        },
        "multipart/x-mixed-replace": {
          source: "iana"
        },
        "text/1d-interleaved-parityfec": {
          source: "iana"
        },
        "text/cache-manifest": {
          source: "iana",
          compressible: true,
          extensions: ["appcache", "manifest"]
        },
        "text/calendar": {
          source: "iana",
          extensions: ["ics", "ifb"]
        },
        "text/calender": {
          compressible: true
        },
        "text/cmd": {
          compressible: true
        },
        "text/coffeescript": {
          extensions: ["coffee", "litcoffee"]
        },
        "text/cql": {
          source: "iana"
        },
        "text/cql-expression": {
          source: "iana"
        },
        "text/cql-identifier": {
          source: "iana"
        },
        "text/css": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["css"]
        },
        "text/csv": {
          source: "iana",
          compressible: true,
          extensions: ["csv"]
        },
        "text/csv-schema": {
          source: "iana"
        },
        "text/directory": {
          source: "iana"
        },
        "text/dns": {
          source: "iana"
        },
        "text/ecmascript": {
          source: "iana"
        },
        "text/encaprtp": {
          source: "iana"
        },
        "text/enriched": {
          source: "iana"
        },
        "text/fhirpath": {
          source: "iana"
        },
        "text/flexfec": {
          source: "iana"
        },
        "text/fwdred": {
          source: "iana"
        },
        "text/gff3": {
          source: "iana"
        },
        "text/grammar-ref-list": {
          source: "iana"
        },
        "text/html": {
          source: "iana",
          compressible: true,
          extensions: ["html", "htm", "shtml"]
        },
        "text/jade": {
          extensions: ["jade"]
        },
        "text/javascript": {
          source: "iana",
          compressible: true
        },
        "text/jcr-cnd": {
          source: "iana"
        },
        "text/jsx": {
          compressible: true,
          extensions: ["jsx"]
        },
        "text/less": {
          compressible: true,
          extensions: ["less"]
        },
        "text/markdown": {
          source: "iana",
          compressible: true,
          extensions: ["markdown", "md"]
        },
        "text/mathml": {
          source: "nginx",
          extensions: ["mml"]
        },
        "text/mdx": {
          compressible: true,
          extensions: ["mdx"]
        },
        "text/mizar": {
          source: "iana"
        },
        "text/n3": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["n3"]
        },
        "text/parameters": {
          source: "iana",
          charset: "UTF-8"
        },
        "text/parityfec": {
          source: "iana"
        },
        "text/plain": {
          source: "iana",
          compressible: true,
          extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
        },
        "text/provenance-notation": {
          source: "iana",
          charset: "UTF-8"
        },
        "text/prs.fallenstein.rst": {
          source: "iana"
        },
        "text/prs.lines.tag": {
          source: "iana",
          extensions: ["dsc"]
        },
        "text/prs.prop.logic": {
          source: "iana"
        },
        "text/raptorfec": {
          source: "iana"
        },
        "text/red": {
          source: "iana"
        },
        "text/rfc822-headers": {
          source: "iana"
        },
        "text/richtext": {
          source: "iana",
          compressible: true,
          extensions: ["rtx"]
        },
        "text/rtf": {
          source: "iana",
          compressible: true,
          extensions: ["rtf"]
        },
        "text/rtp-enc-aescm128": {
          source: "iana"
        },
        "text/rtploopback": {
          source: "iana"
        },
        "text/rtx": {
          source: "iana"
        },
        "text/sgml": {
          source: "iana",
          extensions: ["sgml", "sgm"]
        },
        "text/shaclc": {
          source: "iana"
        },
        "text/shex": {
          source: "iana",
          extensions: ["shex"]
        },
        "text/slim": {
          extensions: ["slim", "slm"]
        },
        "text/spdx": {
          source: "iana",
          extensions: ["spdx"]
        },
        "text/strings": {
          source: "iana"
        },
        "text/stylus": {
          extensions: ["stylus", "styl"]
        },
        "text/t140": {
          source: "iana"
        },
        "text/tab-separated-values": {
          source: "iana",
          compressible: true,
          extensions: ["tsv"]
        },
        "text/troff": {
          source: "iana",
          extensions: ["t", "tr", "roff", "man", "me", "ms"]
        },
        "text/turtle": {
          source: "iana",
          charset: "UTF-8",
          extensions: ["ttl"]
        },
        "text/ulpfec": {
          source: "iana"
        },
        "text/uri-list": {
          source: "iana",
          compressible: true,
          extensions: ["uri", "uris", "urls"]
        },
        "text/vcard": {
          source: "iana",
          compressible: true,
          extensions: ["vcard"]
        },
        "text/vnd.a": {
          source: "iana"
        },
        "text/vnd.abc": {
          source: "iana"
        },
        "text/vnd.ascii-art": {
          source: "iana"
        },
        "text/vnd.curl": {
          source: "iana",
          extensions: ["curl"]
        },
        "text/vnd.curl.dcurl": {
          source: "apache",
          extensions: ["dcurl"]
        },
        "text/vnd.curl.mcurl": {
          source: "apache",
          extensions: ["mcurl"]
        },
        "text/vnd.curl.scurl": {
          source: "apache",
          extensions: ["scurl"]
        },
        "text/vnd.debian.copyright": {
          source: "iana",
          charset: "UTF-8"
        },
        "text/vnd.dmclientscript": {
          source: "iana"
        },
        "text/vnd.dvb.subtitle": {
          source: "iana",
          extensions: ["sub"]
        },
        "text/vnd.esmertec.theme-descriptor": {
          source: "iana",
          charset: "UTF-8"
        },
        "text/vnd.familysearch.gedcom": {
          source: "iana",
          extensions: ["ged"]
        },
        "text/vnd.ficlab.flt": {
          source: "iana"
        },
        "text/vnd.fly": {
          source: "iana",
          extensions: ["fly"]
        },
        "text/vnd.fmi.flexstor": {
          source: "iana",
          extensions: ["flx"]
        },
        "text/vnd.gml": {
          source: "iana"
        },
        "text/vnd.graphviz": {
          source: "iana",
          extensions: ["gv"]
        },
        "text/vnd.hans": {
          source: "iana"
        },
        "text/vnd.hgl": {
          source: "iana"
        },
        "text/vnd.in3d.3dml": {
          source: "iana",
          extensions: ["3dml"]
        },
        "text/vnd.in3d.spot": {
          source: "iana",
          extensions: ["spot"]
        },
        "text/vnd.iptc.newsml": {
          source: "iana"
        },
        "text/vnd.iptc.nitf": {
          source: "iana"
        },
        "text/vnd.latex-z": {
          source: "iana"
        },
        "text/vnd.motorola.reflex": {
          source: "iana"
        },
        "text/vnd.ms-mediapackage": {
          source: "iana"
        },
        "text/vnd.net2phone.commcenter.command": {
          source: "iana"
        },
        "text/vnd.radisys.msml-basic-layout": {
          source: "iana"
        },
        "text/vnd.senx.warpscript": {
          source: "iana"
        },
        "text/vnd.si.uricatalogue": {
          source: "iana"
        },
        "text/vnd.sosi": {
          source: "iana"
        },
        "text/vnd.sun.j2me.app-descriptor": {
          source: "iana",
          charset: "UTF-8",
          extensions: ["jad"]
        },
        "text/vnd.trolltech.linguist": {
          source: "iana",
          charset: "UTF-8"
        },
        "text/vnd.wap.si": {
          source: "iana"
        },
        "text/vnd.wap.sl": {
          source: "iana"
        },
        "text/vnd.wap.wml": {
          source: "iana",
          extensions: ["wml"]
        },
        "text/vnd.wap.wmlscript": {
          source: "iana",
          extensions: ["wmls"]
        },
        "text/vtt": {
          source: "iana",
          charset: "UTF-8",
          compressible: true,
          extensions: ["vtt"]
        },
        "text/x-asm": {
          source: "apache",
          extensions: ["s", "asm"]
        },
        "text/x-c": {
          source: "apache",
          extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
        },
        "text/x-component": {
          source: "nginx",
          extensions: ["htc"]
        },
        "text/x-fortran": {
          source: "apache",
          extensions: ["f", "for", "f77", "f90"]
        },
        "text/x-gwt-rpc": {
          compressible: true
        },
        "text/x-handlebars-template": {
          extensions: ["hbs"]
        },
        "text/x-java-source": {
          source: "apache",
          extensions: ["java"]
        },
        "text/x-jquery-tmpl": {
          compressible: true
        },
        "text/x-lua": {
          extensions: ["lua"]
        },
        "text/x-markdown": {
          compressible: true,
          extensions: ["mkd"]
        },
        "text/x-nfo": {
          source: "apache",
          extensions: ["nfo"]
        },
        "text/x-opml": {
          source: "apache",
          extensions: ["opml"]
        },
        "text/x-org": {
          compressible: true,
          extensions: ["org"]
        },
        "text/x-pascal": {
          source: "apache",
          extensions: ["p", "pas"]
        },
        "text/x-processing": {
          compressible: true,
          extensions: ["pde"]
        },
        "text/x-sass": {
          extensions: ["sass"]
        },
        "text/x-scss": {
          extensions: ["scss"]
        },
        "text/x-setext": {
          source: "apache",
          extensions: ["etx"]
        },
        "text/x-sfv": {
          source: "apache",
          extensions: ["sfv"]
        },
        "text/x-suse-ymp": {
          compressible: true,
          extensions: ["ymp"]
        },
        "text/x-uuencode": {
          source: "apache",
          extensions: ["uu"]
        },
        "text/x-vcalendar": {
          source: "apache",
          extensions: ["vcs"]
        },
        "text/x-vcard": {
          source: "apache",
          extensions: ["vcf"]
        },
        "text/xml": {
          source: "iana",
          compressible: true,
          extensions: ["xml"]
        },
        "text/xml-external-parsed-entity": {
          source: "iana"
        },
        "text/yaml": {
          compressible: true,
          extensions: ["yaml", "yml"]
        },
        "video/1d-interleaved-parityfec": {
          source: "iana"
        },
        "video/3gpp": {
          source: "iana",
          extensions: ["3gp", "3gpp"]
        },
        "video/3gpp-tt": {
          source: "iana"
        },
        "video/3gpp2": {
          source: "iana",
          extensions: ["3g2"]
        },
        "video/av1": {
          source: "iana"
        },
        "video/bmpeg": {
          source: "iana"
        },
        "video/bt656": {
          source: "iana"
        },
        "video/celb": {
          source: "iana"
        },
        "video/dv": {
          source: "iana"
        },
        "video/encaprtp": {
          source: "iana"
        },
        "video/ffv1": {
          source: "iana"
        },
        "video/flexfec": {
          source: "iana"
        },
        "video/h261": {
          source: "iana",
          extensions: ["h261"]
        },
        "video/h263": {
          source: "iana",
          extensions: ["h263"]
        },
        "video/h263-1998": {
          source: "iana"
        },
        "video/h263-2000": {
          source: "iana"
        },
        "video/h264": {
          source: "iana",
          extensions: ["h264"]
        },
        "video/h264-rcdo": {
          source: "iana"
        },
        "video/h264-svc": {
          source: "iana"
        },
        "video/h265": {
          source: "iana"
        },
        "video/iso.segment": {
          source: "iana",
          extensions: ["m4s"]
        },
        "video/jpeg": {
          source: "iana",
          extensions: ["jpgv"]
        },
        "video/jpeg2000": {
          source: "iana"
        },
        "video/jpm": {
          source: "apache",
          extensions: ["jpm", "jpgm"]
        },
        "video/jxsv": {
          source: "iana"
        },
        "video/mj2": {
          source: "iana",
          extensions: ["mj2", "mjp2"]
        },
        "video/mp1s": {
          source: "iana"
        },
        "video/mp2p": {
          source: "iana"
        },
        "video/mp2t": {
          source: "iana",
          extensions: ["ts"]
        },
        "video/mp4": {
          source: "iana",
          compressible: false,
          extensions: ["mp4", "mp4v", "mpg4"]
        },
        "video/mp4v-es": {
          source: "iana"
        },
        "video/mpeg": {
          source: "iana",
          compressible: false,
          extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
        },
        "video/mpeg4-generic": {
          source: "iana"
        },
        "video/mpv": {
          source: "iana"
        },
        "video/nv": {
          source: "iana"
        },
        "video/ogg": {
          source: "iana",
          compressible: false,
          extensions: ["ogv"]
        },
        "video/parityfec": {
          source: "iana"
        },
        "video/pointer": {
          source: "iana"
        },
        "video/quicktime": {
          source: "iana",
          compressible: false,
          extensions: ["qt", "mov"]
        },
        "video/raptorfec": {
          source: "iana"
        },
        "video/raw": {
          source: "iana"
        },
        "video/rtp-enc-aescm128": {
          source: "iana"
        },
        "video/rtploopback": {
          source: "iana"
        },
        "video/rtx": {
          source: "iana"
        },
        "video/scip": {
          source: "iana"
        },
        "video/smpte291": {
          source: "iana"
        },
        "video/smpte292m": {
          source: "iana"
        },
        "video/ulpfec": {
          source: "iana"
        },
        "video/vc1": {
          source: "iana"
        },
        "video/vc2": {
          source: "iana"
        },
        "video/vnd.cctv": {
          source: "iana"
        },
        "video/vnd.dece.hd": {
          source: "iana",
          extensions: ["uvh", "uvvh"]
        },
        "video/vnd.dece.mobile": {
          source: "iana",
          extensions: ["uvm", "uvvm"]
        },
        "video/vnd.dece.mp4": {
          source: "iana"
        },
        "video/vnd.dece.pd": {
          source: "iana",
          extensions: ["uvp", "uvvp"]
        },
        "video/vnd.dece.sd": {
          source: "iana",
          extensions: ["uvs", "uvvs"]
        },
        "video/vnd.dece.video": {
          source: "iana",
          extensions: ["uvv", "uvvv"]
        },
        "video/vnd.directv.mpeg": {
          source: "iana"
        },
        "video/vnd.directv.mpeg-tts": {
          source: "iana"
        },
        "video/vnd.dlna.mpeg-tts": {
          source: "iana"
        },
        "video/vnd.dvb.file": {
          source: "iana",
          extensions: ["dvb"]
        },
        "video/vnd.fvt": {
          source: "iana",
          extensions: ["fvt"]
        },
        "video/vnd.hns.video": {
          source: "iana"
        },
        "video/vnd.iptvforum.1dparityfec-1010": {
          source: "iana"
        },
        "video/vnd.iptvforum.1dparityfec-2005": {
          source: "iana"
        },
        "video/vnd.iptvforum.2dparityfec-1010": {
          source: "iana"
        },
        "video/vnd.iptvforum.2dparityfec-2005": {
          source: "iana"
        },
        "video/vnd.iptvforum.ttsavc": {
          source: "iana"
        },
        "video/vnd.iptvforum.ttsmpeg2": {
          source: "iana"
        },
        "video/vnd.motorola.video": {
          source: "iana"
        },
        "video/vnd.motorola.videop": {
          source: "iana"
        },
        "video/vnd.mpegurl": {
          source: "iana",
          extensions: ["mxu", "m4u"]
        },
        "video/vnd.ms-playready.media.pyv": {
          source: "iana",
          extensions: ["pyv"]
        },
        "video/vnd.nokia.interleaved-multimedia": {
          source: "iana"
        },
        "video/vnd.nokia.mp4vr": {
          source: "iana"
        },
        "video/vnd.nokia.videovoip": {
          source: "iana"
        },
        "video/vnd.objectvideo": {
          source: "iana"
        },
        "video/vnd.radgamettools.bink": {
          source: "iana"
        },
        "video/vnd.radgamettools.smacker": {
          source: "iana"
        },
        "video/vnd.sealed.mpeg1": {
          source: "iana"
        },
        "video/vnd.sealed.mpeg4": {
          source: "iana"
        },
        "video/vnd.sealed.swf": {
          source: "iana"
        },
        "video/vnd.sealedmedia.softseal.mov": {
          source: "iana"
        },
        "video/vnd.uvvu.mp4": {
          source: "iana",
          extensions: ["uvu", "uvvu"]
        },
        "video/vnd.vivo": {
          source: "iana",
          extensions: ["viv"]
        },
        "video/vnd.youtube.yt": {
          source: "iana"
        },
        "video/vp8": {
          source: "iana"
        },
        "video/vp9": {
          source: "iana"
        },
        "video/webm": {
          source: "apache",
          compressible: false,
          extensions: ["webm"]
        },
        "video/x-f4v": {
          source: "apache",
          extensions: ["f4v"]
        },
        "video/x-fli": {
          source: "apache",
          extensions: ["fli"]
        },
        "video/x-flv": {
          source: "apache",
          compressible: false,
          extensions: ["flv"]
        },
        "video/x-m4v": {
          source: "apache",
          extensions: ["m4v"]
        },
        "video/x-matroska": {
          source: "apache",
          compressible: false,
          extensions: ["mkv", "mk3d", "mks"]
        },
        "video/x-mng": {
          source: "apache",
          extensions: ["mng"]
        },
        "video/x-ms-asf": {
          source: "apache",
          extensions: ["asf", "asx"]
        },
        "video/x-ms-vob": {
          source: "apache",
          extensions: ["vob"]
        },
        "video/x-ms-wm": {
          source: "apache",
          extensions: ["wm"]
        },
        "video/x-ms-wmv": {
          source: "apache",
          compressible: false,
          extensions: ["wmv"]
        },
        "video/x-ms-wmx": {
          source: "apache",
          extensions: ["wmx"]
        },
        "video/x-ms-wvx": {
          source: "apache",
          extensions: ["wvx"]
        },
        "video/x-msvideo": {
          source: "apache",
          extensions: ["avi"]
        },
        "video/x-sgi-movie": {
          source: "apache",
          extensions: ["movie"]
        },
        "video/x-smv": {
          source: "apache",
          extensions: ["smv"]
        },
        "x-conference/x-cooltalk": {
          source: "apache",
          extensions: ["ice"]
        },
        "x-shader/x-fragment": {
          compressible: true
        },
        "x-shader/x-vertex": {
          compressible: true
        }
      };
    }
  });

  // node_modules/mime-db/index.js
  var require_mime_db = __commonJS({
    "node_modules/mime-db/index.js"(exports, module) {
      module.exports = require_db();
    }
  });

  // node_modules/mime-types/index.js
  var require_mime_types = __commonJS({
    "node_modules/mime-types/index.js"(exports) {
      "use strict";
      var db = require_mime_db();
      var extname = __require("path").extname;
      var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
      var TEXT_TYPE_REGEXP = /^text\//i;
      exports.charset = charset;
      exports.charsets = { lookup: charset };
      exports.contentType = contentType;
      exports.extension = extension;
      exports.extensions = /* @__PURE__ */ Object.create(null);
      exports.lookup = lookup;
      exports.types = /* @__PURE__ */ Object.create(null);
      populateMaps(exports.extensions, exports.types);
      function charset(type) {
        if (!type || typeof type !== "string") {
          return false;
        }
        var match = EXTRACT_TYPE_REGEXP.exec(type);
        var mime = match && db[match[1].toLowerCase()];
        if (mime && mime.charset) {
          return mime.charset;
        }
        if (match && TEXT_TYPE_REGEXP.test(match[1])) {
          return "UTF-8";
        }
        return false;
      }
      function contentType(str) {
        if (!str || typeof str !== "string") {
          return false;
        }
        var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
        if (!mime) {
          return false;
        }
        if (mime.indexOf("charset") === -1) {
          var charset2 = exports.charset(mime);
          if (charset2)
            mime += "; charset=" + charset2.toLowerCase();
        }
        return mime;
      }
      function extension(type) {
        if (!type || typeof type !== "string") {
          return false;
        }
        var match = EXTRACT_TYPE_REGEXP.exec(type);
        var exts = match && exports.extensions[match[1].toLowerCase()];
        if (!exts || !exts.length) {
          return false;
        }
        return exts[0];
      }
      function lookup(path) {
        if (!path || typeof path !== "string") {
          return false;
        }
        var extension2 = extname("x." + path).toLowerCase().substr(1);
        if (!extension2) {
          return false;
        }
        return exports.types[extension2] || false;
      }
      function populateMaps(extensions, types) {
        var preference = ["nginx", "apache", void 0, "iana"];
        Object.keys(db).forEach(function forEachMimeType(type) {
          var mime = db[type];
          var exts = mime.extensions;
          if (!exts || !exts.length) {
            return;
          }
          extensions[type] = exts;
          for (var i3 = 0; i3 < exts.length; i3++) {
            var extension2 = exts[i3];
            if (types[extension2]) {
              var from = preference.indexOf(db[types[extension2]].source);
              var to = preference.indexOf(mime.source);
              if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
                continue;
              }
            }
            types[extension2] = type;
          }
        });
      }
    }
  });

  // node_modules/asynckit/lib/defer.js
  var require_defer = __commonJS({
    "node_modules/asynckit/lib/defer.js"(exports, module) {
      module.exports = defer;
      function defer(fn2) {
        var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
        if (nextTick) {
          nextTick(fn2);
        } else {
          setTimeout(fn2, 0);
        }
      }
    }
  });

  // node_modules/asynckit/lib/async.js
  var require_async = __commonJS({
    "node_modules/asynckit/lib/async.js"(exports, module) {
      var defer = require_defer();
      module.exports = async;
      function async(callback) {
        var isAsync = false;
        defer(function() {
          isAsync = true;
        });
        return function async_callback(err, result) {
          if (isAsync) {
            callback(err, result);
          } else {
            defer(function nextTick_callback() {
              callback(err, result);
            });
          }
        };
      }
    }
  });

  // node_modules/asynckit/lib/abort.js
  var require_abort = __commonJS({
    "node_modules/asynckit/lib/abort.js"(exports, module) {
      module.exports = abort;
      function abort(state) {
        Object.keys(state.jobs).forEach(clean.bind(state));
        state.jobs = {};
      }
      function clean(key) {
        if (typeof this.jobs[key] == "function") {
          this.jobs[key]();
        }
      }
    }
  });

  // node_modules/asynckit/lib/iterate.js
  var require_iterate = __commonJS({
    "node_modules/asynckit/lib/iterate.js"(exports, module) {
      var async = require_async();
      var abort = require_abort();
      module.exports = iterate;
      function iterate(list, iterator, state, callback) {
        var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
        state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
          if (!(key in state.jobs)) {
            return;
          }
          delete state.jobs[key];
          if (error) {
            abort(state);
          } else {
            state.results[key] = output;
          }
          callback(error, state.results);
        });
      }
      function runJob(iterator, key, item, callback) {
        var aborter;
        if (iterator.length == 2) {
          aborter = iterator(item, async(callback));
        } else {
          aborter = iterator(item, key, async(callback));
        }
        return aborter;
      }
    }
  });

  // node_modules/asynckit/lib/state.js
  var require_state = __commonJS({
    "node_modules/asynckit/lib/state.js"(exports, module) {
      module.exports = state;
      function state(list, sortMethod) {
        var isNamedList = !Array.isArray(list), initState = {
          index: 0,
          keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
          jobs: {},
          results: isNamedList ? {} : [],
          size: isNamedList ? Object.keys(list).length : list.length
        };
        if (sortMethod) {
          initState.keyedList.sort(isNamedList ? sortMethod : function(a3, b3) {
            return sortMethod(list[a3], list[b3]);
          });
        }
        return initState;
      }
    }
  });

  // node_modules/asynckit/lib/terminator.js
  var require_terminator = __commonJS({
    "node_modules/asynckit/lib/terminator.js"(exports, module) {
      var abort = require_abort();
      var async = require_async();
      module.exports = terminator;
      function terminator(callback) {
        if (!Object.keys(this.jobs).length) {
          return;
        }
        this.index = this.size;
        abort(this);
        async(callback)(null, this.results);
      }
    }
  });

  // node_modules/asynckit/parallel.js
  var require_parallel = __commonJS({
    "node_modules/asynckit/parallel.js"(exports, module) {
      var iterate = require_iterate();
      var initState = require_state();
      var terminator = require_terminator();
      module.exports = parallel;
      function parallel(list, iterator, callback) {
        var state = initState(list);
        while (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, function(error, result) {
            if (error) {
              callback(error, result);
              return;
            }
            if (Object.keys(state.jobs).length === 0) {
              callback(null, state.results);
              return;
            }
          });
          state.index++;
        }
        return terminator.bind(state, callback);
      }
    }
  });

  // node_modules/asynckit/serialOrdered.js
  var require_serialOrdered = __commonJS({
    "node_modules/asynckit/serialOrdered.js"(exports, module) {
      var iterate = require_iterate();
      var initState = require_state();
      var terminator = require_terminator();
      module.exports = serialOrdered;
      module.exports.ascending = ascending;
      module.exports.descending = descending;
      function serialOrdered(list, iterator, sortMethod, callback) {
        var state = initState(list, sortMethod);
        iterate(list, iterator, state, function iteratorHandler(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          state.index++;
          if (state.index < (state["keyedList"] || list).length) {
            iterate(list, iterator, state, iteratorHandler);
            return;
          }
          callback(null, state.results);
        });
        return terminator.bind(state, callback);
      }
      function ascending(a3, b3) {
        return a3 < b3 ? -1 : a3 > b3 ? 1 : 0;
      }
      function descending(a3, b3) {
        return -1 * ascending(a3, b3);
      }
    }
  });

  // node_modules/asynckit/serial.js
  var require_serial = __commonJS({
    "node_modules/asynckit/serial.js"(exports, module) {
      var serialOrdered = require_serialOrdered();
      module.exports = serial;
      function serial(list, iterator, callback) {
        return serialOrdered(list, iterator, null, callback);
      }
    }
  });

  // node_modules/asynckit/index.js
  var require_asynckit = __commonJS({
    "node_modules/asynckit/index.js"(exports, module) {
      module.exports = {
        parallel: require_parallel(),
        serial: require_serial(),
        serialOrdered: require_serialOrdered()
      };
    }
  });

  // node_modules/form-data/lib/populate.js
  var require_populate = __commonJS({
    "node_modules/form-data/lib/populate.js"(exports, module) {
      module.exports = function(dst, src) {
        Object.keys(src).forEach(function(prop) {
          dst[prop] = dst[prop] || src[prop];
        });
        return dst;
      };
    }
  });

  // node_modules/form-data/lib/form_data.js
  var require_form_data = __commonJS({
    "node_modules/form-data/lib/form_data.js"(exports, module) {
      var CombinedStream = require_combined_stream();
      var util = __require("util");
      var path = __require("path");
      var http2 = __require("http");
      var https2 = __require("https");
      var parseUrl = __require("url").parse;
      var fs = __require("fs");
      var mime = require_mime_types();
      var asynckit = require_asynckit();
      var populate = require_populate();
      module.exports = FormData2;
      util.inherits(FormData2, CombinedStream);
      function FormData2(options) {
        if (!(this instanceof FormData2)) {
          return new FormData2(options);
        }
        this._overheadLength = 0;
        this._valueLength = 0;
        this._valuesToMeasure = [];
        CombinedStream.call(this);
        options = options || {};
        for (var option in options) {
          this[option] = options[option];
        }
      }
      FormData2.LINE_BREAK = "\r\n";
      FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
      FormData2.prototype.append = function(field, value, options) {
        options = options || {};
        if (typeof options == "string") {
          options = { filename: options };
        }
        var append = CombinedStream.prototype.append.bind(this);
        if (typeof value == "number") {
          value = "" + value;
        }
        if (util.isArray(value)) {
          this._error(new Error("Arrays are not supported."));
          return;
        }
        var header = this._multiPartHeader(field, value, options);
        var footer = this._multiPartFooter();
        append(header);
        append(value);
        append(footer);
        this._trackLength(header, value, options);
      };
      FormData2.prototype._trackLength = function(header, value, options) {
        var valueLength = 0;
        if (options.knownLength != null) {
          valueLength += +options.knownLength;
        } else if (Buffer.isBuffer(value)) {
          valueLength = value.length;
        } else if (typeof value === "string") {
          valueLength = Buffer.byteLength(value);
        }
        this._valueLength += valueLength;
        this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
        if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion"))) {
          return;
        }
        if (!options.knownLength) {
          this._valuesToMeasure.push(value);
        }
      };
      FormData2.prototype._lengthRetriever = function(value, callback) {
        if (value.hasOwnProperty("fd")) {
          if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
            callback(null, value.end + 1 - (value.start ? value.start : 0));
          } else {
            fs.stat(value.path, function(err, stat) {
              var fileSize;
              if (err) {
                callback(err);
                return;
              }
              fileSize = stat.size - (value.start ? value.start : 0);
              callback(null, fileSize);
            });
          }
        } else if (value.hasOwnProperty("httpVersion")) {
          callback(null, +value.headers["content-length"]);
        } else if (value.hasOwnProperty("httpModule")) {
          value.on("response", function(response) {
            value.pause();
            callback(null, +response.headers["content-length"]);
          });
          value.resume();
        } else {
          callback("Unknown stream");
        }
      };
      FormData2.prototype._multiPartHeader = function(field, value, options) {
        if (typeof options.header == "string") {
          return options.header;
        }
        var contentDisposition = this._getContentDisposition(value, options);
        var contentType = this._getContentType(value, options);
        var contents = "";
        var headers = {
          "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
          "Content-Type": [].concat(contentType || [])
        };
        if (typeof options.header == "object") {
          populate(headers, options.header);
        }
        var header;
        for (var prop in headers) {
          if (!headers.hasOwnProperty(prop))
            continue;
          header = headers[prop];
          if (header == null) {
            continue;
          }
          if (!Array.isArray(header)) {
            header = [header];
          }
          if (header.length) {
            contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
          }
        }
        return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
      };
      FormData2.prototype._getContentDisposition = function(value, options) {
        var filename, contentDisposition;
        if (typeof options.filepath === "string") {
          filename = path.normalize(options.filepath).replace(/\\/g, "/");
        } else if (options.filename || value.name || value.path) {
          filename = path.basename(options.filename || value.name || value.path);
        } else if (value.readable && value.hasOwnProperty("httpVersion")) {
          filename = path.basename(value.client._httpMessage.path || "");
        }
        if (filename) {
          contentDisposition = 'filename="' + filename + '"';
        }
        return contentDisposition;
      };
      FormData2.prototype._getContentType = function(value, options) {
        var contentType = options.contentType;
        if (!contentType && value.name) {
          contentType = mime.lookup(value.name);
        }
        if (!contentType && value.path) {
          contentType = mime.lookup(value.path);
        }
        if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
          contentType = value.headers["content-type"];
        }
        if (!contentType && (options.filepath || options.filename)) {
          contentType = mime.lookup(options.filepath || options.filename);
        }
        if (!contentType && typeof value == "object") {
          contentType = FormData2.DEFAULT_CONTENT_TYPE;
        }
        return contentType;
      };
      FormData2.prototype._multiPartFooter = function() {
        return function(next) {
          var footer = FormData2.LINE_BREAK;
          var lastPart = this._streams.length === 0;
          if (lastPart) {
            footer += this._lastBoundary();
          }
          next(footer);
        }.bind(this);
      };
      FormData2.prototype._lastBoundary = function() {
        return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
      };
      FormData2.prototype.getHeaders = function(userHeaders) {
        var header;
        var formHeaders = {
          "content-type": "multipart/form-data; boundary=" + this.getBoundary()
        };
        for (header in userHeaders) {
          if (userHeaders.hasOwnProperty(header)) {
            formHeaders[header.toLowerCase()] = userHeaders[header];
          }
        }
        return formHeaders;
      };
      FormData2.prototype.setBoundary = function(boundary) {
        this._boundary = boundary;
      };
      FormData2.prototype.getBoundary = function() {
        if (!this._boundary) {
          this._generateBoundary();
        }
        return this._boundary;
      };
      FormData2.prototype.getBuffer = function() {
        var dataBuffer = new Buffer.alloc(0);
        var boundary = this.getBoundary();
        for (var i3 = 0, len = this._streams.length; i3 < len; i3++) {
          if (typeof this._streams[i3] !== "function") {
            if (Buffer.isBuffer(this._streams[i3])) {
              dataBuffer = Buffer.concat([dataBuffer, this._streams[i3]]);
            } else {
              dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i3])]);
            }
            if (typeof this._streams[i3] !== "string" || this._streams[i3].substring(2, boundary.length + 2) !== boundary) {
              dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
            }
          }
        }
        return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
      };
      FormData2.prototype._generateBoundary = function() {
        var boundary = "--------------------------";
        for (var i3 = 0; i3 < 24; i3++) {
          boundary += Math.floor(Math.random() * 10).toString(16);
        }
        this._boundary = boundary;
      };
      FormData2.prototype.getLengthSync = function() {
        var knownLength = this._overheadLength + this._valueLength;
        if (this._streams.length) {
          knownLength += this._lastBoundary().length;
        }
        if (!this.hasKnownLength()) {
          this._error(new Error("Cannot calculate proper length in synchronous way."));
        }
        return knownLength;
      };
      FormData2.prototype.hasKnownLength = function() {
        var hasKnownLength = true;
        if (this._valuesToMeasure.length) {
          hasKnownLength = false;
        }
        return hasKnownLength;
      };
      FormData2.prototype.getLength = function(cb) {
        var knownLength = this._overheadLength + this._valueLength;
        if (this._streams.length) {
          knownLength += this._lastBoundary().length;
        }
        if (!this._valuesToMeasure.length) {
          process.nextTick(cb.bind(this, null, knownLength));
          return;
        }
        asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
          if (err) {
            cb(err);
            return;
          }
          values.forEach(function(length) {
            knownLength += length;
          });
          cb(null, knownLength);
        });
      };
      FormData2.prototype.submit = function(params, cb) {
        var request, options, defaults = { method: "post" };
        if (typeof params == "string") {
          params = parseUrl(params);
          options = populate({
            port: params.port,
            path: params.pathname,
            host: params.hostname,
            protocol: params.protocol
          }, defaults);
        } else {
          options = populate(params, defaults);
          if (!options.port) {
            options.port = options.protocol == "https:" ? 443 : 80;
          }
        }
        options.headers = this.getHeaders(params.headers);
        if (options.protocol == "https:") {
          request = https2.request(options);
        } else {
          request = http2.request(options);
        }
        this.getLength(function(err, length) {
          if (err) {
            this._error(err);
            return;
          }
          request.setHeader("Content-Length", length);
          this.pipe(request);
          if (cb) {
            var onResponse;
            var callback = function(error, responce) {
              request.removeListener("error", callback);
              request.removeListener("response", onResponse);
              return cb.call(this, error, responce);
            };
            onResponse = callback.bind(this, null);
            request.on("error", callback);
            request.on("response", onResponse);
          }
        }.bind(this));
        return request;
      };
      FormData2.prototype._error = function(err) {
        if (!this.error) {
          this.error = err;
          this.pause();
          this.emit("error", err);
        }
      };
      FormData2.prototype.toString = function() {
        return "[object FormData]";
      };
    }
  });

  // node_modules/graphql-request/dist/defaultJsonSerializer.js
  var require_defaultJsonSerializer = __commonJS({
    "node_modules/graphql-request/dist/defaultJsonSerializer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.defaultJsonSerializer = void 0;
      exports.defaultJsonSerializer = {
        parse: JSON.parse,
        stringify: JSON.stringify
      };
    }
  });

  // node_modules/graphql-request/dist/createRequestBody.js
  var require_createRequestBody = __commonJS({
    "node_modules/graphql-request/dist/createRequestBody.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var extract_files_1 = require_public();
      var form_data_1 = __importDefault(require_form_data());
      var defaultJsonSerializer_1 = require_defaultJsonSerializer();
      var isExtractableFileEnhanced = function(value) {
        return extract_files_1.isExtractableFile(value) || value !== null && typeof value === "object" && typeof value.pipe === "function";
      };
      function createRequestBody(query, variables, operationName, jsonSerializer) {
        if (jsonSerializer === void 0) {
          jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;
        }
        var _a = extract_files_1.extractFiles({ query, variables, operationName }, "", isExtractableFileEnhanced), clone3 = _a.clone, files = _a.files;
        if (files.size === 0) {
          if (!Array.isArray(query)) {
            return jsonSerializer.stringify(clone3);
          }
          if (typeof variables !== "undefined" && !Array.isArray(variables)) {
            throw new Error("Cannot create request body with given variable type, array expected");
          }
          var payload = query.reduce(function(accu, currentQuery, index) {
            accu.push({ query: currentQuery, variables: variables ? variables[index] : void 0 });
            return accu;
          }, []);
          return jsonSerializer.stringify(payload);
        }
        var Form = typeof FormData === "undefined" ? form_data_1.default : FormData;
        var form = new Form();
        form.append("operations", jsonSerializer.stringify(clone3));
        var map = {};
        var i3 = 0;
        files.forEach(function(paths) {
          map[++i3] = paths;
        });
        form.append("map", jsonSerializer.stringify(map));
        i3 = 0;
        files.forEach(function(paths, file) {
          form.append("" + ++i3, file);
        });
        return form;
      }
      exports.default = createRequestBody;
    }
  });

  // node_modules/graphql-request/dist/parseArgs.js
  var require_parseArgs = __commonJS({
    "node_modules/graphql-request/dist/parseArgs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseBatchRequestsExtendedArgs = exports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;
      function parseRequestArgs(documentOrOptions, variables, requestHeaders) {
        return documentOrOptions.document ? documentOrOptions : {
          document: documentOrOptions,
          variables,
          requestHeaders,
          signal: void 0
        };
      }
      exports.parseRequestArgs = parseRequestArgs;
      function parseRawRequestArgs(queryOrOptions, variables, requestHeaders) {
        return queryOrOptions.query ? queryOrOptions : {
          query: queryOrOptions,
          variables,
          requestHeaders,
          signal: void 0
        };
      }
      exports.parseRawRequestArgs = parseRawRequestArgs;
      function parseBatchRequestArgs(documentsOrOptions, requestHeaders) {
        return documentsOrOptions.documents ? documentsOrOptions : {
          documents: documentsOrOptions,
          requestHeaders,
          signal: void 0
        };
      }
      exports.parseBatchRequestArgs = parseBatchRequestArgs;
      function parseRequestExtendedArgs(urlOrOptions, document2, variables, requestHeaders) {
        return urlOrOptions.document ? urlOrOptions : {
          url: urlOrOptions,
          document: document2,
          variables,
          requestHeaders,
          signal: void 0
        };
      }
      exports.parseRequestExtendedArgs = parseRequestExtendedArgs;
      function parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders) {
        return urlOrOptions.query ? urlOrOptions : {
          url: urlOrOptions,
          query,
          variables,
          requestHeaders,
          signal: void 0
        };
      }
      exports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;
      function parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders) {
        return urlOrOptions.documents ? urlOrOptions : {
          url: urlOrOptions,
          documents,
          requestHeaders,
          signal: void 0
        };
      }
      exports.parseBatchRequestsExtendedArgs = parseBatchRequestsExtendedArgs;
    }
  });

  // node_modules/graphql-request/dist/types.js
  var require_types = __commonJS({
    "node_modules/graphql-request/dist/types.js"(exports) {
      "use strict";
      var __extends2 = exports && exports.__extends || function() {
        var extendStatics = function(d3, b3) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
            d4.__proto__ = b4;
          } || function(d4, b4) {
            for (var p2 in b4)
              if (Object.prototype.hasOwnProperty.call(b4, p2))
                d4[p2] = b4[p2];
          };
          return extendStatics(d3, b3);
        };
        return function(d3, b3) {
          if (typeof b3 !== "function" && b3 !== null)
            throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
          extendStatics(d3, b3);
          function __() {
            this.constructor = d3;
          }
          d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ClientError = void 0;
      var ClientError = function(_super) {
        __extends2(ClientError2, _super);
        function ClientError2(response, request) {
          var _this = this;
          var message = ClientError2.extractMessage(response) + ": " + JSON.stringify({
            response,
            request
          });
          _this = _super.call(this, message) || this;
          Object.setPrototypeOf(_this, ClientError2.prototype);
          _this.response = response;
          _this.request = request;
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, ClientError2);
          }
          return _this;
        }
        ClientError2.extractMessage = function(response) {
          try {
            return response.errors[0].message;
          } catch (e3) {
            return "GraphQL Error (Code: " + response.status + ")";
          }
        };
        return ClientError2;
      }(Error);
      exports.ClientError = ClientError;
    }
  });

  // node_modules/graphql-request/dist/index.js
  var require_dist = __commonJS({
    "node_modules/graphql-request/dist/index.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t3) {
          for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
            s3 = arguments[i3];
            for (var p2 in s3)
              if (Object.prototype.hasOwnProperty.call(s3, p2))
                t3[p2] = s3[p2];
          }
          return t3;
        };
        return __assign.apply(this, arguments);
      };
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        Object.defineProperty(o3, k22, { enumerable: true, get: function() {
          return m3[k3];
        } });
      } : function(o3, m3, k3, k22) {
        if (k22 === void 0)
          k22 = k3;
        o3[k22] = m3[k3];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o3, v3) {
        Object.defineProperty(o3, "default", { enumerable: true, value: v3 });
      } : function(o3, v3) {
        o3["default"] = v3;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k3 in mod)
            if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3))
              __createBinding(result, mod, k3);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve) {
            resolve(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e3) {
              reject(e3);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e3) {
              reject(e3);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator2 = exports && exports.__generator || function(thisArg, body) {
        var _3 = { label: 0, sent: function() {
          if (t3[0] & 1)
            throw t3[1];
          return t3[1];
        }, trys: [], ops: [] }, f2, y3, t3, g3;
        return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
          return this;
        }), g3;
        function verb(n3) {
          return function(v3) {
            return step([n3, v3]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_3)
            try {
              if (f2 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
                return t3;
              if (y3 = 0, t3)
                op = [op[0] & 2, t3.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t3 = op;
                  break;
                case 4:
                  _3.label++;
                  return { value: op[1], done: false };
                case 5:
                  _3.label++;
                  y3 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _3.ops.pop();
                  _3.trys.pop();
                  continue;
                default:
                  if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _3 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                    _3.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _3.label < t3[1]) {
                    _3.label = t3[1];
                    t3 = op;
                    break;
                  }
                  if (t3 && _3.label < t3[2]) {
                    _3.label = t3[2];
                    _3.ops.push(op);
                    break;
                  }
                  if (t3[2])
                    _3.ops.pop();
                  _3.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _3);
            } catch (e3) {
              op = [6, e3];
              y3 = 0;
            } finally {
              f2 = t3 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      var __rest = exports && exports.__rest || function(s3, e3) {
        var t3 = {};
        for (var p2 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p2) && e3.indexOf(p2) < 0)
            t3[p2] = s3[p2];
        if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s3); i3 < p2.length; i3++) {
            if (e3.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p2[i3]))
              t3[p2[i3]] = s3[p2[i3]];
          }
        return t3;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;
      var cross_fetch_1 = __importStar(require_node_ponyfill());
      var CrossFetch = cross_fetch_1;
      var parser_1 = require_parser();
      var printer_1 = require_printer();
      var createRequestBody_1 = __importDefault(require_createRequestBody());
      var defaultJsonSerializer_1 = require_defaultJsonSerializer();
      var parseArgs_1 = require_parseArgs();
      var types_1 = require_types();
      Object.defineProperty(exports, "ClientError", { enumerable: true, get: function() {
        return types_1.ClientError;
      } });
      var resolveHeaders = function(headers) {
        var oHeaders = {};
        if (headers) {
          if (typeof Headers !== "undefined" && headers instanceof Headers || headers instanceof CrossFetch.Headers) {
            oHeaders = HeadersInstanceToPlainObject(headers);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(_a) {
              var name = _a[0], value = _a[1];
              oHeaders[name] = value;
            });
          } else {
            oHeaders = headers;
          }
        }
        return oHeaders;
      };
      var queryCleanner = function(str) {
        return str.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
      };
      var buildGetQueryParams = function(_a) {
        var query = _a.query, variables = _a.variables, operationName = _a.operationName, jsonSerializer = _a.jsonSerializer;
        if (!Array.isArray(query)) {
          var search = ["query=" + encodeURIComponent(queryCleanner(query))];
          if (variables) {
            search.push("variables=" + encodeURIComponent(jsonSerializer.stringify(variables)));
          }
          if (operationName) {
            search.push("operationName=" + encodeURIComponent(operationName));
          }
          return search.join("&");
        }
        if (typeof variables !== "undefined" && !Array.isArray(variables)) {
          throw new Error("Cannot create query with given variable type, array expected");
        }
        var payload = query.reduce(function(accu, currentQuery, index) {
          accu.push({
            query: queryCleanner(currentQuery),
            variables: variables ? jsonSerializer.stringify(variables[index]) : void 0
          });
          return accu;
        }, []);
        return "query=" + encodeURIComponent(jsonSerializer.stringify(payload));
      };
      var post = function(_a) {
        var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch2 = _a.fetch, fetchOptions = _a.fetchOptions;
        return __awaiter(void 0, void 0, void 0, function() {
          var body;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                body = createRequestBody_1.default(query, variables, operationName, fetchOptions.jsonSerializer);
                return [4, fetch2(url, __assign({ method: "POST", headers: __assign(__assign({}, typeof body === "string" ? { "Content-Type": "application/json" } : {}), headers), body }, fetchOptions))];
              case 1:
                return [2, _b.sent()];
            }
          });
        });
      };
      var get2 = function(_a) {
        var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch2 = _a.fetch, fetchOptions = _a.fetchOptions;
        return __awaiter(void 0, void 0, void 0, function() {
          var queryParams;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                queryParams = buildGetQueryParams({
                  query,
                  variables,
                  operationName,
                  jsonSerializer: fetchOptions.jsonSerializer
                });
                return [4, fetch2(url + "?" + queryParams, __assign({ method: "GET", headers }, fetchOptions))];
              case 1:
                return [2, _b.sent()];
            }
          });
        });
      };
      var GraphQLClient2 = function() {
        function GraphQLClient3(url, options) {
          this.url = url;
          this.options = options || {};
        }
        GraphQLClient3.prototype.rawRequest = function(queryOrOptions, variables, requestHeaders) {
          return __awaiter(this, void 0, void 0, function() {
            var rawRequestOptions, _a, headers, _b, fetch2, _c, method, fetchOptions, url, operationName;
            return __generator2(this, function(_d) {
              rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
              _a = this.options, headers = _a.headers, _b = _a.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
              url = this.url;
              if (rawRequestOptions.signal !== void 0) {
                fetchOptions.signal = rawRequestOptions.signal;
              }
              operationName = resolveRequestDocument(rawRequestOptions.query).operationName;
              return [2, makeRequest({
                url,
                query: rawRequestOptions.query,
                variables: rawRequestOptions.variables,
                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(rawRequestOptions.requestHeaders)),
                operationName,
                fetch: fetch2,
                method,
                fetchOptions
              })];
            });
          });
        };
        GraphQLClient3.prototype.request = function(documentOrOptions, variables, requestHeaders) {
          return __awaiter(this, void 0, void 0, function() {
            var requestOptions, _a, headers, _b, fetch2, _c, method, fetchOptions, url, _d, query, operationName, data;
            return __generator2(this, function(_e2) {
              switch (_e2.label) {
                case 0:
                  requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);
                  _a = this.options, headers = _a.headers, _b = _a.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                  url = this.url;
                  if (requestOptions.signal !== void 0) {
                    fetchOptions.signal = requestOptions.signal;
                  }
                  _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;
                  return [4, makeRequest({
                    url,
                    query,
                    variables: requestOptions.variables,
                    headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestOptions.requestHeaders)),
                    operationName,
                    fetch: fetch2,
                    method,
                    fetchOptions
                  })];
                case 1:
                  data = _e2.sent().data;
                  return [2, data];
              }
            });
          });
        };
        GraphQLClient3.prototype.batchRequests = function(documentsOrOptions, requestHeaders) {
          return __awaiter(this, void 0, void 0, function() {
            var batchRequestOptions, _a, headers, _b, fetch2, _c, method, fetchOptions, url, queries, variables, data;
            return __generator2(this, function(_d) {
              switch (_d.label) {
                case 0:
                  batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);
                  _a = this.options, headers = _a.headers, _b = _a.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                  url = this.url;
                  if (batchRequestOptions.signal !== void 0) {
                    fetchOptions.signal = batchRequestOptions.signal;
                  }
                  queries = batchRequestOptions.documents.map(function(_a2) {
                    var document2 = _a2.document;
                    return resolveRequestDocument(document2).query;
                  });
                  variables = batchRequestOptions.documents.map(function(_a2) {
                    var variables2 = _a2.variables;
                    return variables2;
                  });
                  return [4, makeRequest({
                    url,
                    query: queries,
                    variables,
                    headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(batchRequestOptions.requestHeaders)),
                    operationName: void 0,
                    fetch: fetch2,
                    method,
                    fetchOptions
                  })];
                case 1:
                  data = _d.sent().data;
                  return [2, data];
              }
            });
          });
        };
        GraphQLClient3.prototype.setHeaders = function(headers) {
          this.options.headers = headers;
          return this;
        };
        GraphQLClient3.prototype.setHeader = function(key, value) {
          var _a;
          var headers = this.options.headers;
          if (headers) {
            headers[key] = value;
          } else {
            this.options.headers = (_a = {}, _a[key] = value, _a);
          }
          return this;
        };
        GraphQLClient3.prototype.setEndpoint = function(value) {
          this.url = value;
          return this;
        };
        return GraphQLClient3;
      }();
      exports.GraphQLClient = GraphQLClient2;
      function makeRequest(_a) {
        var url = _a.url, query = _a.query, variables = _a.variables, headers = _a.headers, operationName = _a.operationName, fetch2 = _a.fetch, _b = _a.method, method = _b === void 0 ? "POST" : _b, fetchOptions = _a.fetchOptions;
        return __awaiter(this, void 0, void 0, function() {
          var fetcher, isBathchingQuery, response, result, successfullyReceivedData, headers_1, status_1, errorResult;
          return __generator2(this, function(_c) {
            switch (_c.label) {
              case 0:
                fetcher = method.toUpperCase() === "POST" ? post : get2;
                isBathchingQuery = Array.isArray(query);
                return [4, fetcher({
                  url,
                  query,
                  variables,
                  operationName,
                  headers,
                  fetch: fetch2,
                  fetchOptions
                })];
              case 1:
                response = _c.sent();
                return [4, getResult(response, fetchOptions.jsonSerializer)];
              case 2:
                result = _c.sent();
                successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function(_a2) {
                  var data = _a2.data;
                  return !data;
                }) : !!result.data;
                if (response.ok && !result.errors && successfullyReceivedData) {
                  headers_1 = response.headers, status_1 = response.status;
                  return [2, __assign(__assign({}, isBathchingQuery ? { data: result } : result), { headers: headers_1, status: status_1 })];
                } else {
                  errorResult = typeof result === "string" ? { error: result } : result;
                  throw new types_1.ClientError(__assign(__assign({}, errorResult), { status: response.status, headers: response.headers }), { query, variables });
                }
                return [2];
            }
          });
        });
      }
      function rawRequest(urlOrOptions, query, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function() {
          var requestOptions, client;
          return __generator2(this, function(_a) {
            requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);
            client = new GraphQLClient2(requestOptions.url);
            return [2, client.rawRequest(__assign({}, requestOptions))];
          });
        });
      }
      exports.rawRequest = rawRequest;
      function request(urlOrOptions, document2, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function() {
          var requestOptions, client;
          return __generator2(this, function(_a) {
            requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document2, variables, requestHeaders);
            client = new GraphQLClient2(requestOptions.url);
            return [2, client.request(__assign({}, requestOptions))];
          });
        });
      }
      exports.request = request;
      function batchRequests(urlOrOptions, documents, requestHeaders) {
        return __awaiter(this, void 0, void 0, function() {
          var requestOptions, client;
          return __generator2(this, function(_a) {
            requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);
            client = new GraphQLClient2(requestOptions.url);
            return [2, client.batchRequests(__assign({}, requestOptions))];
          });
        });
      }
      exports.batchRequests = batchRequests;
      exports.default = request;
      function getResult(response, jsonSerializer) {
        if (jsonSerializer === void 0) {
          jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;
        }
        return __awaiter(this, void 0, void 0, function() {
          var contentType, _a, _b;
          return __generator2(this, function(_c) {
            switch (_c.label) {
              case 0:
                response.headers.forEach(function(value, key) {
                  if (key.toLowerCase() === "content-type") {
                    contentType = value;
                  }
                });
                if (!(contentType && contentType.toLowerCase().startsWith("application/json")))
                  return [3, 2];
                _b = (_a = jsonSerializer).parse;
                return [4, response.text()];
              case 1:
                return [2, _b.apply(_a, [_c.sent()])];
              case 2:
                return [2, response.text()];
            }
          });
        });
      }
      function extractOperationName(document2) {
        var _a;
        var operationName = void 0;
        var operationDefinitions = document2.definitions.filter(function(definition) {
          return definition.kind === "OperationDefinition";
        });
        if (operationDefinitions.length === 1) {
          operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;
        }
        return operationName;
      }
      function resolveRequestDocument(document2) {
        if (typeof document2 === "string") {
          var operationName_1 = void 0;
          try {
            var parsedDocument = parser_1.parse(document2);
            operationName_1 = extractOperationName(parsedDocument);
          } catch (err) {
          }
          return { query: document2, operationName: operationName_1 };
        }
        var operationName = extractOperationName(document2);
        return { query: printer_1.print(document2), operationName };
      }
      function gql2(chunks) {
        var variables = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          variables[_i - 1] = arguments[_i];
        }
        return chunks.reduce(function(accumulator, chunk, index) {
          return "" + accumulator + chunk + (index in variables ? variables[index] : "");
        }, "");
      }
      exports.gql = gql2;
      function HeadersInstanceToPlainObject(headers) {
        var o3 = {};
        headers.forEach(function(v3, k3) {
          o3[k3] = v3;
        });
        return o3;
      }
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER2 = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e3) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object2) {
            return object2 == null ? undefined2 : object2[key];
          };
        }
        function basePropertyOf(object2) {
          return function(key) {
            return object2 == null ? undefined2 : object2[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n3, iteratee) {
          var index = -1, result = Array(n3);
          while (++index < n3) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object2, props) {
          return arrayMap(props, function(key) {
            return [key, object2[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object2, props) {
          return arrayMap(props, function(key) {
            return object2[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object2, key) {
          return object2 == null ? undefined2 : object2[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set2) {
          var index = -1, result = Array(set2.size);
          set2.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        function setToPairs(set2) {
          var index = -1, result = Array(set2.size);
          set2.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _3.defaults(root.Object(), context, _3.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e3) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object2() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object2.prototype = proto;
              var result2 = new object2();
              object2.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n3) {
            return shuffleSelf(copyArray(array), baseClamp(n3, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object2, key, value) {
            if (value !== undefined2 && !eq(object2[key], value) || value === undefined2 && !(key in object2)) {
              baseAssignValue(object2, key, value);
            }
          }
          function assignValue(object2, key, value) {
            var objValue = object2[key];
            if (!(hasOwnProperty.call(object2, key) && eq(objValue, value)) || value === undefined2 && !(key in object2)) {
              baseAssignValue(object2, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object2, source) {
            return object2 && copyObject(source, keys2(source), object2);
          }
          function baseAssignIn(object2, source) {
            return object2 && copyObject(source, keysIn(source), object2);
          }
          function baseAssignValue(object2, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object2, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object2[key] = value;
            }
          }
          function baseAt(object2, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object2 == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get2(object2, paths[index]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object2, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object2 ? customizer(value, key, object2, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object2) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object2 ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys2(source);
            return function(object2) {
              return baseConformsTo(object2, source, props);
            };
          }
          function baseConformsTo(object2, source, props) {
            var length = props.length;
            if (object2 == null) {
              return !length;
            }
            object2 = Object2(object2);
            while (length--) {
              var key = props[length], predicate = source[key], value = object2[key];
              if (value === undefined2 && !(key in object2) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end === undefined2 || end > length ? length : toInteger(end);
            if (end < 0) {
              end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
              array[start++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object2, iteratee2) {
            return object2 && baseFor(object2, iteratee2, keys2);
          }
          function baseForOwnRight(object2, iteratee2) {
            return object2 && baseForRight(object2, iteratee2, keys2);
          }
          function baseFunctions(object2, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object2[key]);
            });
          }
          function baseGet(object2, path) {
            path = castPath(path, object2);
            var index = 0, length = path.length;
            while (object2 != null && index < length) {
              object2 = object2[toKey(path[index++])];
            }
            return index && index == length ? object2 : undefined2;
          }
          function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object2);
            return isArray(object2) ? result2 : arrayPush(result2, symbolsFunc(object2));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object2, key) {
            return object2 != null && hasOwnProperty.call(object2, key);
          }
          function baseHasIn(object2, key) {
            return object2 != null && key in Object2(object2);
          }
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object2, setter, iteratee2, accumulator) {
            baseForOwn(object2, function(value, key, object3) {
              setter(accumulator, iteratee2(value), key, object3);
            });
            return accumulator;
          }
          function baseInvoke(object2, path, args) {
            path = castPath(path, object2);
            object2 = parent(object2, path);
            var func = object2 == null ? object2 : object2[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object2, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object2), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object2)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object2, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object2 == null) {
              return !length;
            }
            object2 = Object2(object2);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object2[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object2)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object2, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object2) {
            if (!isPrototype(object2)) {
              return nativeKeys(object2);
            }
            var result2 = [];
            for (var key in Object2(object2)) {
              if (hasOwnProperty.call(object2, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object2) {
            if (!isObject(object2)) {
              return nativeKeysIn(object2);
            }
            var isProto = isPrototype(object2), result2 = [];
            for (var key in object2) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object2, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object2) {
              return object2 === source || baseIsMatch(object2, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object2) {
              var objValue = get2(object2, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object2, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object2, source, srcIndex, customizer, stack) {
            if (object2 === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object2, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object2, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object2, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object2, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject4(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object2, key, newValue);
          }
          function baseNth(array, n3) {
            var length = array.length;
            if (!length) {
              return;
            }
            n3 += n3 < 0 ? length : 0;
            return isIndex(n3, length) ? array[n3] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object2, other) {
              return compareMultiple(object2, other, orders);
            });
          }
          function basePick(object2, paths) {
            return basePickBy(object2, paths, function(value, path) {
              return hasIn(object2, path);
            });
          }
          function basePickBy(object2, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object2, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object2), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object2) {
              return baseGet(object2, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start;
              start += step;
            }
            return result2;
          }
          function baseRepeat(string, n3) {
            var result2 = "";
            if (!string || n3 < 1 || n3 > MAX_SAFE_INTEGER2) {
              return result2;
            }
            do {
              if (n3 % 2) {
                result2 += string;
              }
              n3 = nativeFloor(n3 / 2);
              if (n3) {
                string += string;
              }
            } while (n3);
            return result2;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n3) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n3, 0, array.length));
          }
          function baseSet(object2, path, value, customizer) {
            if (!isObject(object2)) {
              return object2;
            }
            path = castPath(path, object2);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object2;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object2;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object2;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set3 = iteratee2 ? null : createSet(array);
              if (set3) {
                return setToArray(set3);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object2, path) {
            path = castPath(path, object2);
            object2 = parent(object2, path);
            return object2 == null || delete object2[toKey(last(path))];
          }
          function baseUpdate(object2, path, updater, customizer) {
            return baseSet(object2, path, updater(baseGet(object2, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object2) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object2) ? [value] : stringToPath(toString(value));
          }
          var castRest = baseRest;
          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined2 ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object2, other, orders) {
            var index = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order = orders[index];
                return result2 * (order == "desc" ? -1 : 1);
              }
            }
            return object2.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object2, customizer) {
            var isNew = !object2;
            object2 || (object2 = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object2, key, newValue);
              } else {
                assignValue(object2, key, newValue);
              }
            }
            return object2;
          }
          function copySymbols(source, object2) {
            return copyObject(source, getSymbols(source), object2);
          }
          function copySymbolsIn(source, object2) {
            return copyObject(source, getSymbolsIn(source), object2);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object2, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object2 = Object2(object2);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object2, source, index, customizer);
                }
              }
              return object2;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object2, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object2), props = keysFunc(object2), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object2;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn2.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
              }
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn2, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys2(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
              }
              var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn2 = Ctor || createCtor(fn2);
              }
              return fn2.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object2, iteratee2) {
              return baseInverter(object2, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn2, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object2) {
              var tag = getTag(object2);
              if (tag == mapTag) {
                return mapToArray(object2);
              }
              if (tag == setTag) {
                return setToPairs(object2);
              }
              return baseToPairs(object2, keysFunc(object2));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object2) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object2, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object2, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject4(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
                  return false;
                }
                object2 = object2.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object2, +other);
              case errorTag:
                return object2.name == other.name && object2.message == other.message;
              case regexpTag:
              case stringTag:
                return object2 == other + "";
              case mapTag:
                var convert2 = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert2 || (convert2 = setToArray);
                if (object2.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object2);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object2, other);
                var result2 = equalArrays(convert2(object2), convert2(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object2);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object2) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object2, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object2);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object2;
            }
            var result2 = true;
            stack.set(object2, other);
            stack.set(other, object2);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object2[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object2.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object2);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object2) {
            return baseGetAllKeys(object2, keys2, getSymbols);
          }
          function getAllKeysIn(object2) {
            return baseGetAllKeys(object2, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop2 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object2 = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object2.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object2) {
            var result2 = keys2(object2), length = result2.length;
            while (length--) {
              var key = result2[length], value = object2[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object2, key) {
            var value = getValue(object2, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e3) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
            if (object2 == null) {
              return [];
            }
            object2 = Object2(object2);
            return arrayFilter(nativeGetSymbols(object2), function(symbol) {
              return propertyIsEnumerable.call(object2, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object2) {
            var result2 = [];
            while (object2) {
              arrayPush(result2, getSymbols(object2));
              object2 = getPrototype(object2);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object2, path, hasFunc) {
            path = castPath(path, object2);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object2 != null && hasFunc(object2, key))) {
                break;
              }
              object2 = object2[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object2 == null ? 0 : object2.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object2) || isArguments(object2));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object2) {
            return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
          }
          function initCloneByTag(object2, tag, isDeep) {
            var Ctor = object2.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object2);
              case boolTag:
              case dateTag:
                return new Ctor(+object2);
              case dataViewTag:
                return cloneDataView(object2, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object2, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object2);
              case regexpTag:
                return cloneRegExp(object2);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object2);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER2 : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index, object2) {
            if (!isObject(object2)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object2) && isIndex(index, object2.length) : type == "string" && index in object2) {
              return eq(object2[index], value);
            }
            return false;
          }
          function isKey(value, object2) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object2(object2);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object2) {
              if (object2 == null) {
                return false;
              }
              return object2[key] === srcValue && (srcValue !== undefined2 || key in Object2(object2));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize2(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object2) {
            var result2 = [];
            if (object2 != null) {
              for (var key in Object2(object2)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start, transform2) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start + index];
              }
              index = -1;
              var otherArgs = Array2(start + 1);
              while (++index < start) {
                otherArgs[index] = args[index];
              }
              otherArgs[start] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object2, path) {
            return path.length < 2 ? object2 : baseGet(object2, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object2, key) {
            if (key === "constructor" && typeof object2[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object2[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e3) {
              }
              try {
                return func + "";
              } catch (e3) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n3, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
            return baseSlice(array, n3 < 0 ? 0 : n3, length);
          }
          function dropRight(array, n3, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
            n3 = length - n3;
            return baseSlice(array, 0, n3 < 0 ? 0 : n3);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
              start = 0;
              end = length;
            }
            return baseFill(array, value, start, end);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n3) {
            return array && array.length ? baseNth(array, toInteger(n3)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined2 ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n3, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
            return baseSlice(array, 0, n3 < 0 ? 0 : n3);
          }
          function takeRight(array, n3, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n3 = guard || n3 === undefined2 ? 1 : toInteger(n3);
            n3 = length - n3;
            return baseSlice(array, n3 < 0 ? 0 : n3, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq2(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object2) {
              return baseAt(object2, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone4 = wrapperClone(parent2);
              clone4.__index__ = 0;
              clone4.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone4;
              } else {
                result2 = clone4;
              }
              var previous = clone4;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find2 = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n3, guard) {
            if (guard ? isIterateeCall(collection, n3, guard) : n3 === undefined2) {
              n3 = 1;
            } else {
              n3 = toInteger(n3);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n3);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n3, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n3 = toInteger(n3);
            return function() {
              if (--n3 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n3, guard) {
            n3 = guard ? undefined2 : n3;
            n3 = func && n3 == null ? func.length : n3;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n3);
          }
          function before(n3, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n3 = toInteger(n3);
            return function() {
              if (--n3 > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n3 <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object2, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object2, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce2(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize2(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize2.Cache || MapCache)();
            return memoized;
          }
          memoize2.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
              var array = args[start], otherArgs = castSlice(args, 0, start);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce2(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone3(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object2, source) {
            return source == null || baseConformsTo(object2, source, keys2(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean2(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject4(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError2(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject4(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
          }
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object2, source) {
            return object2 === source || baseIsMatch(object2, source, getMatchData(source));
          }
          function isMatchWith(object2, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object2, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject4(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER2 && value <= MAX_SAFE_INTEGER2;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2) : value === 0 ? value : 0;
          }
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign = createAssigner(function(object2, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys2(source), object2);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object2, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object2, source) {
            copyObject(source, keysIn(source), object2);
          });
          var assignInWith = createAssigner(function(object2, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object2, customizer);
          });
          var assignWith = createAssigner(function(object2, source, srcIndex, customizer) {
            copyObject(source, keys2(source), object2, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object2, sources) {
            object2 = Object2(object2);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object2[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object2, key)) {
                  object2[key] = source[key];
                }
              }
            }
            return object2;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object2, predicate) {
            return baseFindKey(object2, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object2, predicate) {
            return baseFindKey(object2, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object2, iteratee2) {
            return object2 == null ? object2 : baseFor(object2, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object2, iteratee2) {
            return object2 == null ? object2 : baseForRight(object2, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object2, iteratee2) {
            return object2 && baseForOwn(object2, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object2, iteratee2) {
            return object2 && baseForOwnRight(object2, getIteratee(iteratee2, 3));
          }
          function functions(object2) {
            return object2 == null ? [] : baseFunctions(object2, keys2(object2));
          }
          function functionsIn(object2) {
            return object2 == null ? [] : baseFunctions(object2, keysIn(object2));
          }
          function get2(object2, path, defaultValue) {
            var result2 = object2 == null ? undefined2 : baseGet(object2, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object2, path) {
            return object2 != null && hasPath(object2, path, baseHas);
          }
          function hasIn(object2, path) {
            return object2 != null && hasPath(object2, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys2(object2) {
            return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
          }
          function keysIn(object2) {
            return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
          }
          function mapKeys(object2, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object2, function(value, key, object3) {
              baseAssignValue(result2, iteratee2(value, key, object3), value);
            });
            return result2;
          }
          function mapValues(object2, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object2, function(value, key, object3) {
              baseAssignValue(result2, key, iteratee2(value, key, object3));
            });
            return result2;
          }
          var merge = createAssigner(function(object2, source, srcIndex) {
            baseMerge(object2, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object2, source, srcIndex, customizer) {
            baseMerge(object2, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object2, paths) {
            var result2 = {};
            if (object2 == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object2);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object2, getAllKeysIn(object2), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy5(object2, predicate) {
            return pickBy(object2, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object2, paths) {
            return object2 == null ? {} : basePick(object2, paths);
          });
          function pickBy(object2, predicate) {
            if (object2 == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object2), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object2, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object2, path, defaultValue) {
            path = castPath(path, object2);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object2 = undefined2;
            }
            while (++index < length) {
              var value = object2 == null ? undefined2 : object2[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object2 = isFunction(value) ? value.call(object2) : value;
            }
            return object2;
          }
          function set2(object2, path, value) {
            return object2 == null ? object2 : baseSet(object2, path, value);
          }
          function setWith(object2, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object2 == null ? object2 : baseSet(object2, path, value, customizer);
          }
          var toPairs = createToPairs(keys2);
          var toPairsIn = createToPairs(keysIn);
          function transform(object2, iteratee2, accumulator) {
            var isArr = isArray(object2), isArrLike = isArr || isBuffer(object2) || isTypedArray(object2);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object2 && object2.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object2)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object2)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object2, function(value, index, object3) {
              return iteratee2(accumulator, value, index, object3);
            });
            return accumulator;
          }
          function unset(object2, path) {
            return object2 == null ? true : baseUnset(object2, path);
          }
          function update(object2, path, updater) {
            return object2 == null ? object2 : baseUpdate(object2, path, castFunction(updater));
          }
          function updateWith(object2, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object2 == null ? object2 : baseUpdate(object2, path, castFunction(updater), customizer);
          }
          function values(object2) {
            return object2 == null ? [] : baseValues(object2, keys2(object2));
          }
          function valuesIn(object2) {
            return object2 == null ? [] : baseValues(object2, keysIn(object2));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
          }
          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n3, guard) {
            if (guard ? isIterateeCall(string, n3, guard) : n3 === undefined2) {
              n3 = 1;
            } else {
              n3 = toInteger(n3);
            }
            return baseRepeat(toString(string), n3);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError2(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end += result2.length - end;
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e3) {
              return isError2(e3) ? e3 : new Error2(e3);
            }
          });
          var bindAll = flatRest(function(object2, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object2, key, bind(object2[key], object2));
            });
            return object2;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object2) {
              return baseInvoke(object2, path, args);
            };
          });
          var methodOf = baseRest(function(object2, args) {
            return function(path) {
              return baseInvoke(object2, path, args);
            };
          });
          function mixin(object2, source, options) {
            var props = keys2(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object2;
              object2 = this;
              methodNames = baseFunctions(source, keys2(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object2);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object2[methodName] = func;
              if (isFunc) {
                object2.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object2(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object2 });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object2, arrayPush([this.value()], arguments));
                };
              }
            });
            return object2;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop2() {
          }
          function nthArg(n3) {
            n3 = toInteger(n3);
            return baseRest(function(args) {
              return baseNth(args, n3);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object2) {
            return function(path) {
              return object2 == null ? undefined2 : baseGet(object2, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n3, iteratee2) {
            n3 = toInteger(n3);
            if (n3 < 1 || n3 > MAX_SAFE_INTEGER2) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n3, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n3 -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n3) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          function uniqueId(prefix2) {
            var id = ++idCounter;
            return toString(prefix2) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce2;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys2;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize2;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy5;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set2;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq2;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone3;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find2;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get2;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean2;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate2;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError2;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject4;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop2;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n3) {
              n3 = n3 === undefined2 ? 1 : nativeMax(toInteger(n3), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n3, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n3, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n3) {
              return this.reverse()[methodName](n3).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result2 = this;
            if (result2.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result2);
            }
            if (start < 0) {
              result2 = result2.takeRight(-start);
            } else if (start) {
              result2 = result2.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger(end);
              result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _3 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _3;
          define(function() {
            return _3;
          });
        } else if (freeModule) {
          (freeModule.exports = _3)._ = _3;
          freeExports._ = _3;
        } else {
          root._ = _3;
        }
      }).call(exports);
    }
  });

  // node_modules/react-is/cjs/react-is.production.min.js
  var require_react_is_production_min4 = __commonJS({
    "node_modules/react-is/cjs/react-is.production.min.js"(exports) {
      "use strict";
      var b3 = Symbol.for("react.element");
      var c3 = Symbol.for("react.portal");
      var d3 = Symbol.for("react.fragment");
      var e3 = Symbol.for("react.strict_mode");
      var f2 = Symbol.for("react.profiler");
      var g3 = Symbol.for("react.provider");
      var h2 = Symbol.for("react.context");
      var k3 = Symbol.for("react.server_context");
      var l3 = Symbol.for("react.forward_ref");
      var m3 = Symbol.for("react.suspense");
      var n3 = Symbol.for("react.suspense_list");
      var p2 = Symbol.for("react.memo");
      var q3 = Symbol.for("react.lazy");
      var t3 = Symbol.for("react.offscreen");
      var u3;
      u3 = Symbol.for("react.module.reference");
      function v3(a3) {
        if (typeof a3 === "object" && a3 !== null) {
          var r3 = a3.$$typeof;
          switch (r3) {
            case b3:
              switch (a3 = a3.type, a3) {
                case d3:
                case f2:
                case e3:
                case m3:
                case n3:
                  return a3;
                default:
                  switch (a3 = a3 && a3.$$typeof, a3) {
                    case k3:
                    case h2:
                    case l3:
                    case q3:
                    case p2:
                    case g3:
                      return a3;
                    default:
                      return r3;
                  }
              }
            case c3:
              return r3;
          }
        }
      }
      exports.ContextConsumer = h2;
      exports.ContextProvider = g3;
      exports.Element = b3;
      exports.ForwardRef = l3;
      exports.Fragment = d3;
      exports.Lazy = q3;
      exports.Memo = p2;
      exports.Portal = c3;
      exports.Profiler = f2;
      exports.StrictMode = e3;
      exports.Suspense = m3;
      exports.SuspenseList = n3;
      exports.isAsyncMode = function() {
        return false;
      };
      exports.isConcurrentMode = function() {
        return false;
      };
      exports.isContextConsumer = function(a3) {
        return v3(a3) === h2;
      };
      exports.isContextProvider = function(a3) {
        return v3(a3) === g3;
      };
      exports.isElement = function(a3) {
        return typeof a3 === "object" && a3 !== null && a3.$$typeof === b3;
      };
      exports.isForwardRef = function(a3) {
        return v3(a3) === l3;
      };
      exports.isFragment = function(a3) {
        return v3(a3) === d3;
      };
      exports.isLazy = function(a3) {
        return v3(a3) === q3;
      };
      exports.isMemo = function(a3) {
        return v3(a3) === p2;
      };
      exports.isPortal = function(a3) {
        return v3(a3) === c3;
      };
      exports.isProfiler = function(a3) {
        return v3(a3) === f2;
      };
      exports.isStrictMode = function(a3) {
        return v3(a3) === e3;
      };
      exports.isSuspense = function(a3) {
        return v3(a3) === m3;
      };
      exports.isSuspenseList = function(a3) {
        return v3(a3) === n3;
      };
      exports.isValidElementType = function(a3) {
        return typeof a3 === "string" || typeof a3 === "function" || a3 === d3 || a3 === f2 || a3 === e3 || a3 === m3 || a3 === n3 || a3 === t3 || typeof a3 === "object" && a3 !== null && (a3.$$typeof === q3 || a3.$$typeof === p2 || a3.$$typeof === g3 || a3.$$typeof === h2 || a3.$$typeof === l3 || a3.$$typeof === u3 || a3.getModuleId !== void 0) ? true : false;
      };
      exports.typeOf = v3;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development4 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (process.env.NODE_ENV !== "production") {
        (function() {
          "use strict";
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment2 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer2(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object2) {
            return typeOf(object2) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment2;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is4 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_react_is_production_min4();
      } else {
        module.exports = require_react_is_development4();
      }
    }
  });

  // node_modules/shallowequal/index.js
  var require_shallowequal = __commonJS({
    "node_modules/shallowequal/index.js"(exports, module) {
      module.exports = function shallowEqual2(objA, objB, compare2, compareContext) {
        var ret = compare2 ? compare2.call(compareContext, objA, objB) : void 0;
        if (ret !== void 0) {
          return !!ret;
        }
        if (objA === objB) {
          return true;
        }
        if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var idx = 0; idx < keysA.length; idx++) {
          var key = keysA[idx];
          if (!bHasOwnProperty(key)) {
            return false;
          }
          var valueA = objA[key];
          var valueB = objB[key];
          ret = compare2 ? compare2.call(compareContext, valueA, valueB, key) : void 0;
          if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/lodash.debounce/index.js
  var require_lodash2 = __commonJS({
    "node_modules/lodash.debounce/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      var now = function() {
        return root.Date.now();
      };
      function debounce2(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = debounce2;
    }
  });

  // src/searchbar/index.tsx
  var import_react60 = __toESM(require_react());

  // node_modules/react-redux/es/components/Provider.js
  var import_react3 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());

  // node_modules/react-redux/es/components/Context.js
  var import_react = __toESM(require_react());
  var ReactReduxContext = /* @__PURE__ */ import_react.default.createContext(null);
  if (process.env.NODE_ENV !== "production") {
    ReactReduxContext.displayName = "ReactRedux";
  }

  // node_modules/react-redux/es/utils/batch.js
  function defaultNoopBatch(callback) {
    callback();
  }
  var batch = defaultNoopBatch;
  var setBatch = function setBatch2(newBatch) {
    return batch = newBatch;
  };
  var getBatch = function getBatch2() {
    return batch;
  };

  // node_modules/react-redux/es/utils/Subscription.js
  function createListenerCollection() {
    var batch2 = getBatch();
    var first = null;
    var last = null;
    return {
      clear: function clear() {
        first = null;
        last = null;
      },
      notify: function notify2() {
        batch2(function() {
          var listener2 = first;
          while (listener2) {
            listener2.callback();
            listener2 = listener2.next;
          }
        });
      },
      get: function get2() {
        var listeners = [];
        var listener2 = first;
        while (listener2) {
          listeners.push(listener2);
          listener2 = listener2.next;
        }
        return listeners;
      },
      subscribe: function subscribe(callback) {
        var isSubscribed = true;
        var listener2 = last = {
          callback,
          next: null,
          prev: last
        };
        if (listener2.prev) {
          listener2.prev.next = listener2;
        } else {
          first = listener2;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null)
            return;
          isSubscribed = false;
          if (listener2.next) {
            listener2.next.prev = listener2.prev;
          } else {
            last = listener2.prev;
          }
          if (listener2.prev) {
            listener2.prev.next = listener2.next;
          } else {
            first = listener2.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify: function notify() {
    },
    get: function get() {
      return [];
    }
  };
  function createSubscription(store2, parentSub) {
    var unsubscribe;
    var listeners = nullListeners;
    function addNestedSub(listener2) {
      trySubscribe();
      return listeners.subscribe(listener2);
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return Boolean(unsubscribe);
    }
    function trySubscribe() {
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store2.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      if (unsubscribe) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    var subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe,
      tryUnsubscribe,
      getListeners: function getListeners() {
        return listeners;
      }
    };
    return subscription;
  }

  // node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
  var import_react2 = __toESM(require_react());
  var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;

  // node_modules/react-redux/es/components/Provider.js
  function Provider(_ref) {
    var store2 = _ref.store, context = _ref.context, children = _ref.children;
    var contextValue = (0, import_react3.useMemo)(function() {
      var subscription = createSubscription(store2);
      return {
        store: store2,
        subscription
      };
    }, [store2]);
    var previousState = (0, import_react3.useMemo)(function() {
      return store2.getState();
    }, [store2]);
    useIsomorphicLayoutEffect(function() {
      var subscription = contextValue.subscription;
      subscription.onStateChange = subscription.notifyNestedSubs;
      subscription.trySubscribe();
      if (previousState !== store2.getState()) {
        subscription.notifyNestedSubs();
      }
      return function() {
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
      };
    }, [contextValue, previousState]);
    var Context2 = context || ReactReduxContext;
    return /* @__PURE__ */ import_react3.default.createElement(Context2.Provider, {
      value: contextValue
    }, children);
  }
  if (process.env.NODE_ENV !== "production") {
    Provider.propTypes = {
      store: import_prop_types.default.shape({
        subscribe: import_prop_types.default.func.isRequired,
        dispatch: import_prop_types.default.func.isRequired,
        getState: import_prop_types.default.func.isRequired
      }),
      context: import_prop_types.default.object,
      children: import_prop_types.default.any
    };
  }
  var Provider_default = Provider;

  // node_modules/react-redux/es/components/connectAdvanced.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var import_react4 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is3());

  // node_modules/react-redux/es/hooks/useStore.js
  var import_react6 = __toESM(require_react());

  // node_modules/react-redux/es/hooks/useReduxContext.js
  var import_react5 = __toESM(require_react());
  function useReduxContext() {
    var contextValue = (0, import_react5.useContext)(ReactReduxContext);
    if (process.env.NODE_ENV !== "production" && !contextValue) {
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    }
    return contextValue;
  }

  // node_modules/react-redux/es/hooks/useStore.js
  function createStoreHook(context) {
    if (context === void 0) {
      context = ReactReduxContext;
    }
    var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
      return (0, import_react6.useContext)(context);
    };
    return function useStore2() {
      var _useReduxContext = useReduxContext2(), store2 = _useReduxContext.store;
      return store2;
    };
  }
  var useStore = /* @__PURE__ */ createStoreHook();

  // node_modules/react-redux/es/hooks/useDispatch.js
  function createDispatchHook(context) {
    if (context === void 0) {
      context = ReactReduxContext;
    }
    var useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
    return function useDispatch2() {
      var store2 = useStore2();
      return store2.dispatch;
    };
  }
  var useDispatch = /* @__PURE__ */ createDispatchHook();

  // node_modules/react-redux/es/hooks/useSelector.js
  var import_react7 = __toESM(require_react());
  var refEquality = function refEquality2(a3, b3) {
    return a3 === b3;
  };
  function useSelectorWithStoreAndSubscription(selector, equalityFn, store2, contextSub) {
    var _useReducer = (0, import_react7.useReducer)(function(s3) {
      return s3 + 1;
    }, 0), forceRender = _useReducer[1];
    var subscription = (0, import_react7.useMemo)(function() {
      return createSubscription(store2, contextSub);
    }, [store2, contextSub]);
    var latestSubscriptionCallbackError = (0, import_react7.useRef)();
    var latestSelector = (0, import_react7.useRef)();
    var latestStoreState = (0, import_react7.useRef)();
    var latestSelectedState = (0, import_react7.useRef)();
    var storeState = store2.getState();
    var selectedState;
    try {
      if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
        var newSelectedState = selector(storeState);
        if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
          selectedState = newSelectedState;
        } else {
          selectedState = latestSelectedState.current;
        }
      } else {
        selectedState = latestSelectedState.current;
      }
    } catch (err) {
      if (latestSubscriptionCallbackError.current) {
        err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
      }
      throw err;
    }
    useIsomorphicLayoutEffect(function() {
      latestSelector.current = selector;
      latestStoreState.current = storeState;
      latestSelectedState.current = selectedState;
      latestSubscriptionCallbackError.current = void 0;
    });
    useIsomorphicLayoutEffect(function() {
      function checkForUpdates() {
        try {
          var newStoreState = store2.getState();
          if (newStoreState === latestStoreState.current) {
            return;
          }
          var _newSelectedState = latestSelector.current(newStoreState);
          if (equalityFn(_newSelectedState, latestSelectedState.current)) {
            return;
          }
          latestSelectedState.current = _newSelectedState;
          latestStoreState.current = newStoreState;
        } catch (err) {
          latestSubscriptionCallbackError.current = err;
        }
        forceRender();
      }
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      return function() {
        return subscription.tryUnsubscribe();
      };
    }, [store2, subscription]);
    return selectedState;
  }
  function createSelectorHook(context) {
    if (context === void 0) {
      context = ReactReduxContext;
    }
    var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
      return (0, import_react7.useContext)(context);
    };
    return function useSelector2(selector, equalityFn) {
      if (equalityFn === void 0) {
        equalityFn = refEquality;
      }
      if (process.env.NODE_ENV !== "production") {
        if (!selector) {
          throw new Error("You must pass a selector to useSelector");
        }
        if (typeof selector !== "function") {
          throw new Error("You must pass a function as a selector to useSelector");
        }
        if (typeof equalityFn !== "function") {
          throw new Error("You must pass a function as an equality function to useSelector");
        }
      }
      var _useReduxContext = useReduxContext2(), store2 = _useReduxContext.store, contextSub = _useReduxContext.subscription;
      var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store2, contextSub);
      (0, import_react7.useDebugValue)(selectedState);
      return selectedState;
    };
  }
  var useSelector = /* @__PURE__ */ createSelectorHook();

  // node_modules/react-redux/es/utils/reactBatchedUpdates.js
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-redux/es/index.js
  setBatch(import_react_dom.unstable_batchedUpdates);

  // node_modules/immer/dist/immer.esm.mjs
  function n(n3) {
    for (var r3 = arguments.length, t3 = Array(r3 > 1 ? r3 - 1 : 0), e3 = 1; e3 < r3; e3++)
      t3[e3 - 1] = arguments[e3];
    if (process.env.NODE_ENV !== "production") {
      var i3 = Y[n3], o3 = i3 ? typeof i3 == "function" ? i3.apply(null, t3) : i3 : "unknown error nr: " + n3;
      throw Error("[Immer] " + o3);
    }
    throw Error("[Immer] minified error nr: " + n3 + (t3.length ? " " + t3.map(function(n4) {
      return "'" + n4 + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
  }
  function r(n3) {
    return !!n3 && !!n3[Q];
  }
  function t(n3) {
    return !!n3 && (function(n4) {
      if (!n4 || typeof n4 != "object")
        return false;
      var r3 = Object.getPrototypeOf(n4);
      if (r3 === null)
        return true;
      var t3 = Object.hasOwnProperty.call(r3, "constructor") && r3.constructor;
      return t3 === Object || typeof t3 == "function" && Function.toString.call(t3) === Z;
    }(n3) || Array.isArray(n3) || !!n3[L] || !!n3.constructor[L] || s(n3) || v(n3));
  }
  function i(n3, r3, t3) {
    t3 === void 0 && (t3 = false), o(n3) === 0 ? (t3 ? Object.keys : nn)(n3).forEach(function(e3) {
      t3 && typeof e3 == "symbol" || r3(e3, n3[e3], n3);
    }) : n3.forEach(function(t4, e3) {
      return r3(e3, t4, n3);
    });
  }
  function o(n3) {
    var r3 = n3[Q];
    return r3 ? r3.i > 3 ? r3.i - 4 : r3.i : Array.isArray(n3) ? 1 : s(n3) ? 2 : v(n3) ? 3 : 0;
  }
  function u(n3, r3) {
    return o(n3) === 2 ? n3.has(r3) : Object.prototype.hasOwnProperty.call(n3, r3);
  }
  function a(n3, r3) {
    return o(n3) === 2 ? n3.get(r3) : n3[r3];
  }
  function f(n3, r3, t3) {
    var e3 = o(n3);
    e3 === 2 ? n3.set(r3, t3) : e3 === 3 ? (n3.delete(r3), n3.add(t3)) : n3[r3] = t3;
  }
  function c(n3, r3) {
    return n3 === r3 ? n3 !== 0 || 1 / n3 == 1 / r3 : n3 != n3 && r3 != r3;
  }
  function s(n3) {
    return X && n3 instanceof Map;
  }
  function v(n3) {
    return q && n3 instanceof Set;
  }
  function p(n3) {
    return n3.o || n3.t;
  }
  function l(n3) {
    if (Array.isArray(n3))
      return Array.prototype.slice.call(n3);
    var r3 = rn(n3);
    delete r3[Q];
    for (var t3 = nn(r3), e3 = 0; e3 < t3.length; e3++) {
      var i3 = t3[e3], o3 = r3[i3];
      o3.writable === false && (o3.writable = true, o3.configurable = true), (o3.get || o3.set) && (r3[i3] = { configurable: true, writable: true, enumerable: o3.enumerable, value: n3[i3] });
    }
    return Object.create(Object.getPrototypeOf(n3), r3);
  }
  function d(n3, e3) {
    return e3 === void 0 && (e3 = false), y(n3) || r(n3) || !t(n3) ? n3 : (o(n3) > 1 && (n3.set = n3.add = n3.clear = n3.delete = h), Object.freeze(n3), e3 && i(n3, function(n4, r3) {
      return d(r3, true);
    }, true), n3);
  }
  function h() {
    n(2);
  }
  function y(n3) {
    return n3 == null || typeof n3 != "object" || Object.isFrozen(n3);
  }
  function b(r3) {
    var t3 = tn[r3];
    return t3 || n(18, r3), t3;
  }
  function m(n3, r3) {
    tn[n3] || (tn[n3] = r3);
  }
  function _() {
    return process.env.NODE_ENV === "production" || U || n(0), U;
  }
  function j(n3, r3) {
    r3 && (b("Patches"), n3.u = [], n3.s = [], n3.v = r3);
  }
  function O(n3) {
    g(n3), n3.p.forEach(S), n3.p = null;
  }
  function g(n3) {
    n3 === U && (U = n3.l);
  }
  function w(n3) {
    return U = { p: [], l: U, h: n3, m: true, _: 0 };
  }
  function S(n3) {
    var r3 = n3[Q];
    r3.i === 0 || r3.i === 1 ? r3.j() : r3.O = true;
  }
  function P(r3, e3) {
    e3._ = e3.p.length;
    var i3 = e3.p[0], o3 = r3 !== void 0 && r3 !== i3;
    return e3.h.g || b("ES5").S(e3, r3, o3), o3 ? (i3[Q].P && (O(e3), n(4)), t(r3) && (r3 = M(e3, r3), e3.l || x(e3, r3)), e3.u && b("Patches").M(i3[Q].t, r3, e3.u, e3.s)) : r3 = M(e3, i3, []), O(e3), e3.u && e3.v(e3.u, e3.s), r3 !== H ? r3 : void 0;
  }
  function M(n3, r3, t3) {
    if (y(r3))
      return r3;
    var e3 = r3[Q];
    if (!e3)
      return i(r3, function(i3, o4) {
        return A(n3, e3, r3, i3, o4, t3);
      }, true), r3;
    if (e3.A !== n3)
      return r3;
    if (!e3.P)
      return x(n3, e3.t, true), e3.t;
    if (!e3.I) {
      e3.I = true, e3.A._--;
      var o3 = e3.i === 4 || e3.i === 5 ? e3.o = l(e3.k) : e3.o;
      i(e3.i === 3 ? new Set(o3) : o3, function(r4, i3) {
        return A(n3, e3, o3, r4, i3, t3);
      }), x(n3, o3, false), t3 && n3.u && b("Patches").R(e3, t3, n3.u, n3.s);
    }
    return e3.o;
  }
  function A(e3, i3, o3, a3, c3, s3) {
    if (process.env.NODE_ENV !== "production" && c3 === o3 && n(5), r(c3)) {
      var v3 = M(e3, c3, s3 && i3 && i3.i !== 3 && !u(i3.D, a3) ? s3.concat(a3) : void 0);
      if (f(o3, a3, v3), !r(v3))
        return;
      e3.m = false;
    }
    if (t(c3) && !y(c3)) {
      if (!e3.h.F && e3._ < 1)
        return;
      M(e3, c3), i3 && i3.A.l || x(e3, c3);
    }
  }
  function x(n3, r3, t3) {
    t3 === void 0 && (t3 = false), n3.h.F && n3.m && d(r3, t3);
  }
  function z(n3, r3) {
    var t3 = n3[Q];
    return (t3 ? p(t3) : n3)[r3];
  }
  function I(n3, r3) {
    if (r3 in n3)
      for (var t3 = Object.getPrototypeOf(n3); t3; ) {
        var e3 = Object.getOwnPropertyDescriptor(t3, r3);
        if (e3)
          return e3;
        t3 = Object.getPrototypeOf(t3);
      }
  }
  function k(n3) {
    n3.P || (n3.P = true, n3.l && k(n3.l));
  }
  function E(n3) {
    n3.o || (n3.o = l(n3.t));
  }
  function R(n3, r3, t3) {
    var e3 = s(r3) ? b("MapSet").N(r3, t3) : v(r3) ? b("MapSet").T(r3, t3) : n3.g ? function(n4, r4) {
      var t4 = Array.isArray(n4), e4 = { i: t4 ? 1 : 0, A: r4 ? r4.A : _(), P: false, I: false, D: {}, l: r4, t: n4, k: null, o: null, j: null, C: false }, i3 = e4, o3 = en;
      t4 && (i3 = [e4], o3 = on);
      var u3 = Proxy.revocable(i3, o3), a3 = u3.revoke, f2 = u3.proxy;
      return e4.k = f2, e4.j = a3, f2;
    }(r3, t3) : b("ES5").J(r3, t3);
    return (t3 ? t3.A : _()).p.push(e3), e3;
  }
  function D(e3) {
    return r(e3) || n(22, e3), function n3(r3) {
      if (!t(r3))
        return r3;
      var e4, u3 = r3[Q], c3 = o(r3);
      if (u3) {
        if (!u3.P && (u3.i < 4 || !b("ES5").K(u3)))
          return u3.t;
        u3.I = true, e4 = F(r3, c3), u3.I = false;
      } else
        e4 = F(r3, c3);
      return i(e4, function(r4, t3) {
        u3 && a(u3.t, r4) === t3 || f(e4, r4, n3(t3));
      }), c3 === 3 ? new Set(e4) : e4;
    }(e3);
  }
  function F(n3, r3) {
    switch (r3) {
      case 2:
        return new Map(n3);
      case 3:
        return Array.from(n3);
    }
    return l(n3);
  }
  function N() {
    function t3(n3, r3) {
      var t4 = s3[n3];
      return t4 ? t4.enumerable = r3 : s3[n3] = t4 = { configurable: true, enumerable: r3, get: function() {
        var r4 = this[Q];
        return process.env.NODE_ENV !== "production" && f2(r4), en.get(r4, n3);
      }, set: function(r4) {
        var t5 = this[Q];
        process.env.NODE_ENV !== "production" && f2(t5), en.set(t5, n3, r4);
      } }, t4;
    }
    function e3(n3) {
      for (var r3 = n3.length - 1; r3 >= 0; r3--) {
        var t4 = n3[r3][Q];
        if (!t4.P)
          switch (t4.i) {
            case 5:
              a3(t4) && k(t4);
              break;
            case 4:
              o3(t4) && k(t4);
          }
      }
    }
    function o3(n3) {
      for (var r3 = n3.t, t4 = n3.k, e4 = nn(t4), i3 = e4.length - 1; i3 >= 0; i3--) {
        var o4 = e4[i3];
        if (o4 !== Q) {
          var a4 = r3[o4];
          if (a4 === void 0 && !u(r3, o4))
            return true;
          var f3 = t4[o4], s4 = f3 && f3[Q];
          if (s4 ? s4.t !== a4 : !c(f3, a4))
            return true;
        }
      }
      var v3 = !!r3[Q];
      return e4.length !== nn(r3).length + (v3 ? 0 : 1);
    }
    function a3(n3) {
      var r3 = n3.k;
      if (r3.length !== n3.t.length)
        return true;
      var t4 = Object.getOwnPropertyDescriptor(r3, r3.length - 1);
      if (t4 && !t4.get)
        return true;
      for (var e4 = 0; e4 < r3.length; e4++)
        if (!r3.hasOwnProperty(e4))
          return true;
      return false;
    }
    function f2(r3) {
      r3.O && n(3, JSON.stringify(p(r3)));
    }
    var s3 = {};
    m("ES5", { J: function(n3, r3) {
      var e4 = Array.isArray(n3), i3 = function(n4, r4) {
        if (n4) {
          for (var e5 = Array(r4.length), i4 = 0; i4 < r4.length; i4++)
            Object.defineProperty(e5, "" + i4, t3(i4, true));
          return e5;
        }
        var o5 = rn(r4);
        delete o5[Q];
        for (var u3 = nn(o5), a4 = 0; a4 < u3.length; a4++) {
          var f3 = u3[a4];
          o5[f3] = t3(f3, n4 || !!o5[f3].enumerable);
        }
        return Object.create(Object.getPrototypeOf(r4), o5);
      }(e4, n3), o4 = { i: e4 ? 5 : 4, A: r3 ? r3.A : _(), P: false, I: false, D: {}, l: r3, t: n3, k: i3, o: null, O: false, C: false };
      return Object.defineProperty(i3, Q, { value: o4, writable: true }), i3;
    }, S: function(n3, t4, o4) {
      o4 ? r(t4) && t4[Q].A === n3 && e3(n3.p) : (n3.u && function n4(r3) {
        if (r3 && typeof r3 == "object") {
          var t5 = r3[Q];
          if (t5) {
            var e4 = t5.t, o5 = t5.k, f3 = t5.D, c3 = t5.i;
            if (c3 === 4)
              i(o5, function(r4) {
                r4 !== Q && (e4[r4] !== void 0 || u(e4, r4) ? f3[r4] || n4(o5[r4]) : (f3[r4] = true, k(t5)));
              }), i(e4, function(n5) {
                o5[n5] !== void 0 || u(o5, n5) || (f3[n5] = false, k(t5));
              });
            else if (c3 === 5) {
              if (a3(t5) && (k(t5), f3.length = true), o5.length < e4.length)
                for (var s4 = o5.length; s4 < e4.length; s4++)
                  f3[s4] = false;
              else
                for (var v3 = e4.length; v3 < o5.length; v3++)
                  f3[v3] = true;
              for (var p2 = Math.min(o5.length, e4.length), l3 = 0; l3 < p2; l3++)
                o5.hasOwnProperty(l3) || (f3[l3] = true), f3[l3] === void 0 && n4(o5[l3]);
            }
          }
        }
      }(n3.p[0]), e3(n3.p));
    }, K: function(n3) {
      return n3.i === 4 ? o3(n3) : a3(n3);
    } });
  }
  var G;
  var U;
  var W = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol";
  var X = typeof Map != "undefined";
  var q = typeof Set != "undefined";
  var B = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined";
  var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
  var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
  var Q = W ? Symbol.for("immer-state") : "__$immer_state";
  var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n3) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n3;
  }, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n3) {
    return "Cannot apply patch, path doesn't resolve: " + n3;
  }, 16: 'Sets cannot have "replace" patches.', 17: function(n3) {
    return "Unsupported patch operation: " + n3;
  }, 18: function(n3) {
    return "The plugin for '" + n3 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n3 + "()` when initializing your application.";
  }, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n3) {
    return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n3 + "'";
  }, 22: function(n3) {
    return "'current' expects a draft, got: " + n3;
  }, 23: function(n3) {
    return "'original' expects a draft, got: " + n3;
  }, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
  var Z = "" + Object.prototype.constructor;
  var nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n3) {
    return Object.getOwnPropertyNames(n3).concat(Object.getOwnPropertySymbols(n3));
  } : Object.getOwnPropertyNames;
  var rn = Object.getOwnPropertyDescriptors || function(n3) {
    var r3 = {};
    return nn(n3).forEach(function(t3) {
      r3[t3] = Object.getOwnPropertyDescriptor(n3, t3);
    }), r3;
  };
  var tn = {};
  var en = { get: function(n3, r3) {
    if (r3 === Q)
      return n3;
    var e3 = p(n3);
    if (!u(e3, r3))
      return function(n4, r4, t3) {
        var e4, i4 = I(r4, t3);
        return i4 ? "value" in i4 ? i4.value : (e4 = i4.get) === null || e4 === void 0 ? void 0 : e4.call(n4.k) : void 0;
      }(n3, e3, r3);
    var i3 = e3[r3];
    return n3.I || !t(i3) ? i3 : i3 === z(n3.t, r3) ? (E(n3), n3.o[r3] = R(n3.A.h, i3, n3)) : i3;
  }, has: function(n3, r3) {
    return r3 in p(n3);
  }, ownKeys: function(n3) {
    return Reflect.ownKeys(p(n3));
  }, set: function(n3, r3, t3) {
    var e3 = I(p(n3), r3);
    if (e3 == null ? void 0 : e3.set)
      return e3.set.call(n3.k, t3), true;
    if (!n3.P) {
      var i3 = z(p(n3), r3), o3 = i3 == null ? void 0 : i3[Q];
      if (o3 && o3.t === t3)
        return n3.o[r3] = t3, n3.D[r3] = false, true;
      if (c(t3, i3) && (t3 !== void 0 || u(n3.t, r3)))
        return true;
      E(n3), k(n3);
    }
    return n3.o[r3] === t3 && typeof t3 != "number" && (t3 !== void 0 || r3 in n3.o) || (n3.o[r3] = t3, n3.D[r3] = true, true);
  }, deleteProperty: function(n3, r3) {
    return z(n3.t, r3) !== void 0 || r3 in n3.t ? (n3.D[r3] = false, E(n3), k(n3)) : delete n3.D[r3], n3.o && delete n3.o[r3], true;
  }, getOwnPropertyDescriptor: function(n3, r3) {
    var t3 = p(n3), e3 = Reflect.getOwnPropertyDescriptor(t3, r3);
    return e3 ? { writable: true, configurable: n3.i !== 1 || r3 !== "length", enumerable: e3.enumerable, value: t3[r3] } : e3;
  }, defineProperty: function() {
    n(11);
  }, getPrototypeOf: function(n3) {
    return Object.getPrototypeOf(n3.t);
  }, setPrototypeOf: function() {
    n(12);
  } };
  var on = {};
  i(en, function(n3, r3) {
    on[n3] = function() {
      return arguments[0] = arguments[0][0], r3.apply(this, arguments);
    };
  }), on.deleteProperty = function(r3, t3) {
    return process.env.NODE_ENV !== "production" && isNaN(parseInt(t3)) && n(13), on.set.call(this, r3, t3, void 0);
  }, on.set = function(r3, t3, e3) {
    return process.env.NODE_ENV !== "production" && t3 !== "length" && isNaN(parseInt(t3)) && n(14), en.set.call(this, r3[0], t3, e3, r3[0]);
  };
  var un = function() {
    function e3(r3) {
      var e4 = this;
      this.g = B, this.F = true, this.produce = function(r4, i4, o3) {
        if (typeof r4 == "function" && typeof i4 != "function") {
          var u3 = i4;
          i4 = r4;
          var a3 = e4;
          return function(n3) {
            var r5 = this;
            n3 === void 0 && (n3 = u3);
            for (var t3 = arguments.length, e5 = Array(t3 > 1 ? t3 - 1 : 0), o4 = 1; o4 < t3; o4++)
              e5[o4 - 1] = arguments[o4];
            return a3.produce(n3, function(n4) {
              var t4;
              return (t4 = i4).call.apply(t4, [r5, n4].concat(e5));
            });
          };
        }
        var f2;
        if (typeof i4 != "function" && n(6), o3 !== void 0 && typeof o3 != "function" && n(7), t(r4)) {
          var c3 = w(e4), s3 = R(e4, r4, void 0), v3 = true;
          try {
            f2 = i4(s3), v3 = false;
          } finally {
            v3 ? O(c3) : g(c3);
          }
          return typeof Promise != "undefined" && f2 instanceof Promise ? f2.then(function(n3) {
            return j(c3, o3), P(n3, c3);
          }, function(n3) {
            throw O(c3), n3;
          }) : (j(c3, o3), P(f2, c3));
        }
        if (!r4 || typeof r4 != "object") {
          if ((f2 = i4(r4)) === void 0 && (f2 = r4), f2 === H && (f2 = void 0), e4.F && d(f2, true), o3) {
            var p2 = [], l3 = [];
            b("Patches").M(r4, f2, p2, l3), o3(p2, l3);
          }
          return f2;
        }
        n(21, r4);
      }, this.produceWithPatches = function(n3, r4) {
        if (typeof n3 == "function")
          return function(r5) {
            for (var t4 = arguments.length, i5 = Array(t4 > 1 ? t4 - 1 : 0), o4 = 1; o4 < t4; o4++)
              i5[o4 - 1] = arguments[o4];
            return e4.produceWithPatches(r5, function(r6) {
              return n3.apply(void 0, [r6].concat(i5));
            });
          };
        var t3, i4, o3 = e4.produce(n3, r4, function(n4, r5) {
          t3 = n4, i4 = r5;
        });
        return typeof Promise != "undefined" && o3 instanceof Promise ? o3.then(function(n4) {
          return [n4, t3, i4];
        }) : [o3, t3, i4];
      }, typeof (r3 == null ? void 0 : r3.useProxies) == "boolean" && this.setUseProxies(r3.useProxies), typeof (r3 == null ? void 0 : r3.autoFreeze) == "boolean" && this.setAutoFreeze(r3.autoFreeze);
    }
    var i3 = e3.prototype;
    return i3.createDraft = function(e4) {
      t(e4) || n(8), r(e4) && (e4 = D(e4));
      var i4 = w(this), o3 = R(this, e4, void 0);
      return o3[Q].C = true, g(i4), o3;
    }, i3.finishDraft = function(r3, t3) {
      var e4 = r3 && r3[Q];
      process.env.NODE_ENV !== "production" && (e4 && e4.C || n(9), e4.I && n(10));
      var i4 = e4.A;
      return j(i4, t3), P(void 0, i4);
    }, i3.setAutoFreeze = function(n3) {
      this.F = n3;
    }, i3.setUseProxies = function(r3) {
      r3 && !B && n(20), this.g = r3;
    }, i3.applyPatches = function(n3, t3) {
      var e4;
      for (e4 = t3.length - 1; e4 >= 0; e4--) {
        var i4 = t3[e4];
        if (i4.path.length === 0 && i4.op === "replace") {
          n3 = i4.value;
          break;
        }
      }
      e4 > -1 && (t3 = t3.slice(e4 + 1));
      var o3 = b("Patches").$;
      return r(n3) ? o3(n3, t3) : this.produce(n3, function(n4) {
        return o3(n4, t3);
      });
    }, e3;
  }();
  var an = new un();
  var fn = an.produce;
  var cn = an.produceWithPatches.bind(an);
  var sn = an.setAutoFreeze.bind(an);
  var vn = an.setUseProxies.bind(an);
  var pn = an.applyPatches.bind(an);
  var ln = an.createDraft.bind(an);
  var dn = an.finishDraft.bind(an);
  var immer_esm_default = fn;

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      i3 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }

  // node_modules/redux/es/redux.js
  function formatProdErrorMessage(code) {
    return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or use the non-minified dev environment for full errors. ";
  }
  var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };
  function isPlainObject2(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    var type = typeof val;
    switch (type) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    var constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    var typeOfVal = typeof val;
    if (process.env.NODE_ENV !== "production") {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
      }
      return enhancer(createStore)(reducer, preloadedState);
    }
    if (typeof reducer !== "function") {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
    }
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener2) + "'");
      }
      if (isDispatching) {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener2);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener2);
        nextListeners.splice(index, 1);
        currentListeners = null;
      };
    }
    function dispatch(action) {
      if (!isPlainObject2(action)) {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }
      if (typeof action.type === "undefined") {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (isDispatching) {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i3 = 0; i3 < listeners.length; i3++) {
        var listener2 = listeners[i3];
        listener2();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
      }
      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.REPLACE
      });
    }
    function observable() {
      var _ref;
      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe2(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        }
      }, _ref[$$observable] = function() {
        return this;
      }, _ref;
    }
    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch,
      subscribe,
      getState,
      replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }
  function warning2(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
      return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject2(inputState)) {
      return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
      return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
      unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE)
      return;
    if (unexpectedKeys.length > 0) {
      return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }
  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function(key) {
      var reducer = reducers[key];
      var initialState2 = reducer(void 0, {
        type: ActionTypes.INIT
      });
      if (typeof initialState2 === "undefined") {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer(void 0, {
        type: ActionTypes.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
      }
    });
  }
  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};
    for (var i3 = 0; i3 < reducerKeys.length; i3++) {
      var key = reducerKeys[i3];
      if (process.env.NODE_ENV !== "production") {
        if (typeof reducers[key] === "undefined") {
          warning2('No reducer provided for key "' + key + '"');
        }
      }
      if (typeof reducers[key] === "function") {
        finalReducers[key] = reducers[key];
      }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    if (process.env.NODE_ENV !== "production") {
      unexpectedKeyCache = {};
    }
    var shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e3) {
      shapeAssertionError = e3;
    }
    return function combination(state, action) {
      if (state === void 0) {
        state = {};
      }
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (process.env.NODE_ENV !== "production") {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning2(warningMessage);
        }
      }
      var hasChanged = false;
      var nextState = {};
      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          var actionType = action && action.type;
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
        }
        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a3, b3) {
      return function() {
        return a3(b3.apply(void 0, arguments));
      };
    });
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function(createStore2) {
      return function() {
        var store2 = createStore2.apply(void 0, arguments);
        var _dispatch = function dispatch() {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        var middlewareAPI = {
          getState: store2.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function(middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store2.dispatch);
        return _objectSpread2(_objectSpread2({}, store2), {}, {
          dispatch: _dispatch
        });
      };
    };
  }
  function isCrushed() {
  }
  if (process.env.NODE_ENV !== "production" && typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
    warning2('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
  }

  // node_modules/redux-thunk/es/index.js
  function createThunkMiddleware(extraArgument) {
    var middleware = function middleware2(_ref) {
      var dispatch = _ref.dispatch, getState = _ref.getState;
      return function(next) {
        return function(action) {
          if (typeof action === "function") {
            return action(dispatch, getState, extraArgument);
          }
          return next(action);
        };
      };
    };
    return middleware;
  }
  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;
  var es_default = thunk;

  // node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js
  var __extends = function() {
    var extendStatics = function(d3, b3) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
        d4.__proto__ = b4;
      } || function(d4, b4) {
        for (var p2 in b4)
          if (Object.prototype.hasOwnProperty.call(b4, p2))
            d4[p2] = b4[p2];
      };
      return extendStatics(d3, b3);
    };
    return function(d3, b3) {
      if (typeof b3 !== "function" && b3 !== null)
        throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
      extendStatics(d3, b3);
      function __() {
        this.constructor = d3;
      }
      d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
    };
  }();
  var __generator = function(thisArg, body) {
    var _3 = { label: 0, sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    }, trys: [], ops: [] }, f2, y3, t3, g3;
    return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
      return this;
    }), g3;
    function verb(n3) {
      return function(v3) {
        return step([n3, v3]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (_3)
        try {
          if (f2 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
            return t3;
          if (y3 = 0, t3)
            op = [op[0] & 2, t3.value];
          switch (op[0]) {
            case 0:
            case 1:
              t3 = op;
              break;
            case 4:
              _3.label++;
              return { value: op[1], done: false };
            case 5:
              _3.label++;
              y3 = op[1];
              op = [0];
              continue;
            case 7:
              op = _3.ops.pop();
              _3.trys.pop();
              continue;
            default:
              if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _3 = 0;
                continue;
              }
              if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                _3.label = op[1];
                break;
              }
              if (op[0] === 6 && _3.label < t3[1]) {
                _3.label = t3[1];
                t3 = op;
                break;
              }
              if (t3 && _3.label < t3[2]) {
                _3.label = t3[2];
                _3.ops.push(op);
                break;
              }
              if (t3[2])
                _3.ops.pop();
              _3.trys.pop();
              continue;
          }
          op = body.call(thisArg, _3);
        } catch (e3) {
          op = [6, e3];
          y3 = 0;
        } finally {
          f2 = t3 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
  var __spreadArray = function(to, from) {
    for (var i3 = 0, il = from.length, j3 = to.length; i3 < il; i3++, j3++)
      to[j3] = from[i3];
    return to;
  };
  var __defProp2 = Object.defineProperty;
  var __defProps2 = Object.defineProperties;
  var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = function(obj, key, value) {
    return key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  };
  var __spreadValues2 = function(a3, b3) {
    for (var prop in b3 || (b3 = {}))
      if (__hasOwnProp2.call(b3, prop))
        __defNormalProp2(a3, prop, b3[prop]);
    if (__getOwnPropSymbols2)
      for (var _i = 0, _c = __getOwnPropSymbols2(b3); _i < _c.length; _i++) {
        var prop = _c[_i];
        if (__propIsEnum2.call(b3, prop))
          __defNormalProp2(a3, prop, b3[prop]);
      }
    return a3;
  };
  var __spreadProps2 = function(a3, b3) {
    return __defProps2(a3, __getOwnPropDescs2(b3));
  };
  var __async = function(__this, __arguments, generator) {
    return new Promise(function(resolve, reject) {
      var fulfilled = function(value) {
        try {
          step(generator.next(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var rejected = function(value) {
        try {
          step(generator.throw(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var step = function(x3) {
        return x3.done ? resolve(x3.value) : Promise.resolve(x3.value).then(fulfilled, rejected);
      };
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
    if (arguments.length === 0)
      return void 0;
    if (typeof arguments[0] === "object")
      return compose;
    return compose.apply(null, arguments);
  };
  var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
    return function(noop2) {
      return noop2;
    };
  };
  function isPlainObject3(value) {
    if (typeof value !== "object" || value === null)
      return false;
    var proto = Object.getPrototypeOf(value);
    if (proto === null)
      return true;
    var baseProto = proto;
    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }
    return proto === baseProto;
  }
  function getTimeMeasureUtils(maxDelay, fnName) {
    var elapsed = 0;
    return {
      measureTime: function(fn2) {
        var started = Date.now();
        try {
          return fn2();
        } finally {
          var finished = Date.now();
          elapsed += finished - started;
        }
      },
      warnIfExceeded: function() {
        if (elapsed > maxDelay) {
          console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
        }
      }
    };
  }
  var MiddlewareArray = function(_super) {
    __extends(MiddlewareArray2, _super);
    function MiddlewareArray2() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var _this = _super.apply(this, args) || this;
      Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
      return _this;
    }
    Object.defineProperty(MiddlewareArray2, Symbol.species, {
      get: function() {
        return MiddlewareArray2;
      },
      enumerable: false,
      configurable: true
    });
    MiddlewareArray2.prototype.concat = function() {
      var arr = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
      }
      return _super.prototype.concat.apply(this, arr);
    };
    MiddlewareArray2.prototype.prepend = function() {
      var arr = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
      }
      if (arr.length === 1 && Array.isArray(arr[0])) {
        return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
      }
      return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
    };
    return MiddlewareArray2;
  }(Array);
  var isProduction = process.env.NODE_ENV === "production";
  var prefix = "Invariant failed";
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ""));
  }
  function stringify(obj, serializer, indent, decycler) {
    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
  }
  function getSerialize(serializer, decycler) {
    var stack = [], keys2 = [];
    if (!decycler)
      decycler = function(_3, value) {
        if (stack[0] === value)
          return "[Circular ~]";
        return "[Circular ~." + keys2.slice(0, stack.indexOf(value)).join(".") + "]";
      };
    return function(key, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
        ~thisPos ? keys2.splice(thisPos, Infinity, key) : keys2.push(key);
        if (~stack.indexOf(value))
          value = decycler.call(this, key, value);
      } else
        stack.push(value);
      return serializer == null ? value : serializer.call(this, key, value);
    };
  }
  function isImmutableDefault(value) {
    return typeof value !== "object" || value === null || typeof value === "undefined" || Object.isFrozen(value);
  }
  function trackForMutations(isImmutable, ignorePaths, obj) {
    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
    return {
      detectMutations: function() {
        return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
      }
    };
  }
  function trackProperties(isImmutable, ignorePaths, obj, path) {
    if (ignorePaths === void 0) {
      ignorePaths = [];
    }
    if (path === void 0) {
      path = "";
    }
    var tracked = { value: obj };
    if (!isImmutable(obj)) {
      tracked.children = {};
      for (var key in obj) {
        var childPath = path ? path + "." + key : key;
        if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
          continue;
        }
        tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
      }
    }
    return tracked;
  }
  function detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
    if (ignorePaths === void 0) {
      ignorePaths = [];
    }
    if (sameParentRef === void 0) {
      sameParentRef = false;
    }
    if (path === void 0) {
      path = "";
    }
    var prevObj = trackedProperty ? trackedProperty.value : void 0;
    var sameRef = prevObj === obj;
    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
      return { wasMutated: true, path };
    }
    if (isImmutable(prevObj) || isImmutable(obj)) {
      return { wasMutated: false };
    }
    var keysToDetect = {};
    for (var key in trackedProperty.children) {
      keysToDetect[key] = true;
    }
    for (var key in obj) {
      keysToDetect[key] = true;
    }
    for (var key in keysToDetect) {
      var childPath = path ? path + "." + key : key;
      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }
      var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);
      if (result.wasMutated) {
        return result;
      }
    }
    return { wasMutated: false };
  }
  function createImmutableStateInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (process.env.NODE_ENV === "production") {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;
    ignoredPaths = ignoredPaths || ignore;
    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
    return function(_c2) {
      var getState = _c2.getState;
      var state = getState();
      var tracker = track(state);
      var result;
      return function(next) {
        return function(action) {
          var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
          measureUtils.measureTime(function() {
            state = getState();
            result = tracker.detectMutations();
            tracker = track(state);
            invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
          });
          var dispatchedAction = next(action);
          measureUtils.measureTime(function() {
            state = getState();
            result = tracker.detectMutations();
            tracker = track(state);
            result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
          });
          measureUtils.warnIfExceeded();
          return dispatchedAction;
        };
      };
    };
  }
  function isPlain(val) {
    var type = typeof val;
    return type === "undefined" || val === null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject3(val);
  }
  function findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
    if (path === void 0) {
      path = "";
    }
    if (isSerializable === void 0) {
      isSerializable = isPlain;
    }
    if (ignoredPaths === void 0) {
      ignoredPaths = [];
    }
    var foundNestedSerializable;
    if (!isSerializable(value)) {
      return {
        keyPath: path || "<root>",
        value
      };
    }
    if (typeof value !== "object" || value === null) {
      return false;
    }
    var entries = getEntries != null ? getEntries(value) : Object.entries(value);
    var hasIgnoredPaths = ignoredPaths.length > 0;
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];
      var nestedPath = path ? path + "." + key : key;
      if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
        continue;
      }
      if (!isSerializable(nestedValue)) {
        return {
          keyPath: nestedPath,
          value: nestedValue
        };
      }
      if (typeof nestedValue === "object") {
        foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);
        if (foundNestedSerializable) {
          return foundNestedSerializable;
        }
      }
    }
    return false;
  }
  function createSerializableStateInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (process.env.NODE_ENV === "production") {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e2 = options.ignoredActionPaths, ignoredActionPaths = _e2 === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e2, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j;
    return function(storeAPI) {
      return function(next) {
        return function(action) {
          var result = next(action);
          var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
          if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
            measureUtils.measureTime(function() {
              var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);
              if (foundActionNonSerializableValue) {
                var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
                console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
              }
            });
          }
          if (!ignoreState) {
            measureUtils.measureTime(function() {
              var state = storeAPI.getState();
              var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);
              if (foundStateNonSerializableValue) {
                var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
                console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
              }
            });
            measureUtils.warnIfExceeded();
          }
          return result;
        };
      };
    };
  }
  function isBoolean(x3) {
    return typeof x3 === "boolean";
  }
  function curryGetDefaultMiddleware() {
    return function curriedGetDefaultMiddleware(options) {
      return getDefaultMiddleware(options);
    };
  }
  function getDefaultMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    var _c = options.thunk, thunk2 = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e2 = options.serializableCheck, serializableCheck = _e2 === void 0 ? true : _e2;
    var middlewareArray = new MiddlewareArray();
    if (thunk2) {
      if (isBoolean(thunk2)) {
        middlewareArray.push(es_default);
      } else {
        middlewareArray.push(es_default.withExtraArgument(thunk2.extraArgument));
      }
    }
    if (process.env.NODE_ENV !== "production") {
      if (immutableCheck) {
        var immutableOptions = {};
        if (!isBoolean(immutableCheck)) {
          immutableOptions = immutableCheck;
        }
        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
      }
      if (serializableCheck) {
        var serializableOptions = {};
        if (!isBoolean(serializableCheck)) {
          serializableOptions = serializableCheck;
        }
        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
      }
    }
    return middlewareArray;
  }
  var IS_PRODUCTION = process.env.NODE_ENV === "production";
  function configureStore(options) {
    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
    var _c = options || {}, _d = _c.reducer, reducer = _d === void 0 ? void 0 : _d, _e2 = _c.middleware, middleware = _e2 === void 0 ? curriedGetDefaultMiddleware() : _e2, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
    var rootReducer2;
    if (typeof reducer === "function") {
      rootReducer2 = reducer;
    } else if (isPlainObject3(reducer)) {
      rootReducer2 = combineReducers(reducer);
    } else {
      throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
    }
    var finalMiddleware = middleware;
    if (typeof finalMiddleware === "function") {
      finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
      if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
        throw new Error("when using a middleware builder function, an array of middleware must be returned");
      }
    }
    if (!IS_PRODUCTION && finalMiddleware.some(function(item) {
      return typeof item !== "function";
    })) {
      throw new Error("each middleware provided to configureStore must be a function");
    }
    var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
    var finalCompose = compose;
    if (devTools) {
      finalCompose = composeWithDevTools(__spreadValues2({
        trace: !IS_PRODUCTION
      }, typeof devTools === "object" && devTools));
    }
    var storeEnhancers = [middlewareEnhancer];
    if (Array.isArray(enhancers)) {
      storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
    } else if (typeof enhancers === "function") {
      storeEnhancers = enhancers(storeEnhancers);
    }
    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
    return createStore(rootReducer2, preloadedState, composedEnhancer);
  }
  function createAction(type, prepareAction) {
    function actionCreator() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (prepareAction) {
        var prepared = prepareAction.apply(void 0, args);
        if (!prepared) {
          throw new Error("prepareAction did not return an object");
        }
        return __spreadValues2(__spreadValues2({
          type,
          payload: prepared.payload
        }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
      }
      return { type, payload: args[0] };
    }
    actionCreator.toString = function() {
      return "" + type;
    };
    actionCreator.type = type;
    actionCreator.match = function(action) {
      return action.type === type;
    };
    return actionCreator;
  }
  function executeReducerBuilderCallback(builderCallback) {
    var actionsMap = {};
    var actionMatchers = [];
    var defaultCaseReducer;
    var builder = {
      addCase: function(typeOrActionCreator, reducer) {
        if (process.env.NODE_ENV !== "production") {
          if (actionMatchers.length > 0) {
            throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
          }
          if (defaultCaseReducer) {
            throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
          }
        }
        var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (type in actionsMap) {
          throw new Error("addCase cannot be called with two reducers for the same action type");
        }
        actionsMap[type] = reducer;
        return builder;
      },
      addMatcher: function(matcher, reducer) {
        if (process.env.NODE_ENV !== "production") {
          if (defaultCaseReducer) {
            throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
          }
        }
        actionMatchers.push({ matcher, reducer });
        return builder;
      },
      addDefaultCase: function(reducer) {
        if (process.env.NODE_ENV !== "production") {
          if (defaultCaseReducer) {
            throw new Error("`builder.addDefaultCase` can only be called once");
          }
        }
        defaultCaseReducer = reducer;
        return builder;
      }
    };
    builderCallback(builder);
    return [actionsMap, actionMatchers, defaultCaseReducer];
  }
  function isStateFunction(x3) {
    return typeof x3 === "function";
  }
  function createReducer(initialState2, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
    if (actionMatchers === void 0) {
      actionMatchers = [];
    }
    var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
    var getInitialState;
    if (isStateFunction(initialState2)) {
      getInitialState = function() {
        return immer_esm_default(initialState2(), function() {
        });
      };
    } else {
      var frozenInitialState_1 = immer_esm_default(initialState2, function() {
      });
      getInitialState = function() {
        return frozenInitialState_1;
      };
    }
    function reducer(state, action) {
      if (state === void 0) {
        state = getInitialState();
      }
      var caseReducers = __spreadArray([
        actionsMap[action.type]
      ], finalActionMatchers.filter(function(_c2) {
        var matcher = _c2.matcher;
        return matcher(action);
      }).map(function(_c2) {
        var reducer2 = _c2.reducer;
        return reducer2;
      }));
      if (caseReducers.filter(function(cr) {
        return !!cr;
      }).length === 0) {
        caseReducers = [finalDefaultCaseReducer];
      }
      return caseReducers.reduce(function(previousState, caseReducer) {
        if (caseReducer) {
          if (r(previousState)) {
            var draft = previousState;
            var result = caseReducer(draft, action);
            if (typeof result === "undefined") {
              return previousState;
            }
            return result;
          } else if (!t(previousState)) {
            var result = caseReducer(previousState, action);
            if (typeof result === "undefined") {
              if (previousState === null) {
                return previousState;
              }
              throw Error("A case reducer on a non-draftable value must not return undefined");
            }
            return result;
          } else {
            return immer_esm_default(previousState, function(draft2) {
              return caseReducer(draft2, action);
            });
          }
        }
        return previousState;
      }, state);
    }
    reducer.getInitialState = getInitialState;
    return reducer;
  }
  function getType2(slice, actionKey) {
    return slice + "/" + actionKey;
  }
  function createSlice(options) {
    var name = options.name;
    if (!name) {
      throw new Error("`name` is a required option for createSlice");
    }
    var initialState2 = typeof options.initialState == "function" ? options.initialState : immer_esm_default(options.initialState, function() {
    });
    var reducers = options.reducers || {};
    var reducerNames = Object.keys(reducers);
    var sliceCaseReducersByName = {};
    var sliceCaseReducersByType = {};
    var actionCreators = {};
    reducerNames.forEach(function(reducerName) {
      var maybeReducerWithPrepare = reducers[reducerName];
      var type = getType2(name, reducerName);
      var caseReducer;
      var prepareCallback;
      if ("reducer" in maybeReducerWithPrepare) {
        caseReducer = maybeReducerWithPrepare.reducer;
        prepareCallback = maybeReducerWithPrepare.prepare;
      } else {
        caseReducer = maybeReducerWithPrepare;
      }
      sliceCaseReducersByName[reducerName] = caseReducer;
      sliceCaseReducersByType[type] = caseReducer;
      actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
    });
    function buildReducer() {
      var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e2 = _c[1], actionMatchers = _e2 === void 0 ? [] : _e2, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
      var finalCaseReducers = __spreadValues2(__spreadValues2({}, extraReducers), sliceCaseReducersByType);
      return createReducer(initialState2, finalCaseReducers, actionMatchers, defaultCaseReducer);
    }
    var _reducer;
    return {
      name,
      reducer: function(state, action) {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer(state, action);
      },
      actions: actionCreators,
      caseReducers: sliceCaseReducersByName,
      getInitialState: function() {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer.getInitialState();
      }
    };
  }
  var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
  var nanoid = function(size) {
    if (size === void 0) {
      size = 21;
    }
    var id = "";
    var i3 = size;
    while (i3--) {
      id += urlAlphabet[Math.random() * 64 | 0];
    }
    return id;
  };
  var commonProperties = [
    "name",
    "message",
    "stack",
    "code"
  ];
  var RejectWithValue = function() {
    function RejectWithValue2(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    return RejectWithValue2;
  }();
  var FulfillWithMeta = function() {
    function FulfillWithMeta2(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    return FulfillWithMeta2;
  }();
  var miniSerializeError = function(value) {
    if (typeof value === "object" && value !== null) {
      var simpleError = {};
      for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
        var property = commonProperties_1[_i];
        if (typeof value[property] === "string") {
          simpleError[property] = value[property];
        }
      }
      return simpleError;
    }
    return { message: String(value) };
  };
  function createAsyncThunk(typePrefix, payloadCreator, options) {
    var fulfilled = createAction(typePrefix + "/fulfilled", function(payload, requestId, arg, meta) {
      return {
        payload,
        meta: __spreadProps2(__spreadValues2({}, meta || {}), {
          arg,
          requestId,
          requestStatus: "fulfilled"
        })
      };
    });
    var pending = createAction(typePrefix + "/pending", function(requestId, arg, meta) {
      return {
        payload: void 0,
        meta: __spreadProps2(__spreadValues2({}, meta || {}), {
          arg,
          requestId,
          requestStatus: "pending"
        })
      };
    });
    var rejected = createAction(typePrefix + "/rejected", function(error, requestId, arg, payload, meta) {
      return {
        payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: __spreadProps2(__spreadValues2({}, meta || {}), {
          arg,
          requestId,
          rejectedWithValue: !!payload,
          requestStatus: "rejected",
          aborted: (error == null ? void 0 : error.name) === "AbortError",
          condition: (error == null ? void 0 : error.name) === "ConditionError"
        })
      };
    });
    var displayedWarning = false;
    var AC = typeof AbortController !== "undefined" ? AbortController : function() {
      function class_1() {
        this.signal = {
          aborted: false,
          addEventListener: function() {
          },
          dispatchEvent: function() {
            return false;
          },
          onabort: function() {
          },
          removeEventListener: function() {
          }
        };
      }
      class_1.prototype.abort = function() {
        if (process.env.NODE_ENV !== "production") {
          if (!displayedWarning) {
            displayedWarning = true;
            console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
          }
        }
      };
      return class_1;
    }();
    function actionCreator(arg) {
      return function(dispatch, getState, extra) {
        var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
        var abortController = new AC();
        var abortReason;
        var abortedPromise = new Promise(function(_3, reject) {
          return abortController.signal.addEventListener("abort", function() {
            return reject({ name: "AbortError", message: abortReason || "Aborted" });
          });
        });
        var started = false;
        function abort(reason) {
          if (started) {
            abortReason = reason;
            abortController.abort();
          }
        }
        var promise = function() {
          return __async(this, null, function() {
            var _a, _b, finalAction, conditionResult, err_1, skipDispatch;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _c.trys.push([0, 4, , 5]);
                  conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, { getState, extra });
                  if (!isThenable(conditionResult))
                    return [3, 2];
                  return [4, conditionResult];
                case 1:
                  conditionResult = _c.sent();
                  _c.label = 2;
                case 2:
                  if (conditionResult === false) {
                    throw {
                      name: "ConditionError",
                      message: "Aborted due to condition callback returning false."
                    };
                  }
                  started = true;
                  dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId, arg }, { getState, extra })));
                  return [4, Promise.race([
                    abortedPromise,
                    Promise.resolve(payloadCreator(arg, {
                      dispatch,
                      getState,
                      extra,
                      requestId,
                      signal: abortController.signal,
                      rejectWithValue: function(value, meta) {
                        return new RejectWithValue(value, meta);
                      },
                      fulfillWithValue: function(value, meta) {
                        return new FulfillWithMeta(value, meta);
                      }
                    })).then(function(result) {
                      if (result instanceof RejectWithValue) {
                        throw result;
                      }
                      if (result instanceof FulfillWithMeta) {
                        return fulfilled(result.payload, requestId, arg, result.meta);
                      }
                      return fulfilled(result, requestId, arg);
                    })
                  ])];
                case 3:
                  finalAction = _c.sent();
                  return [3, 5];
                case 4:
                  err_1 = _c.sent();
                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                  return [3, 5];
                case 5:
                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                  if (!skipDispatch) {
                    dispatch(finalAction);
                  }
                  return [2, finalAction];
              }
            });
          });
        }();
        return Object.assign(promise, {
          abort,
          requestId,
          arg,
          unwrap: function() {
            return promise.then(unwrapResult);
          }
        });
      };
    }
    return Object.assign(actionCreator, {
      pending,
      rejected,
      fulfilled,
      typePrefix
    });
  }
  function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) {
      throw action.payload;
    }
    if (action.error) {
      throw action.error;
    }
    return action.payload;
  }
  function isThenable(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
  }
  var task = "task";
  var listener = "listener";
  var completed = "completed";
  var cancelled = "cancelled";
  var taskCancelled = "task-" + cancelled;
  var taskCompleted = "task-" + completed;
  var listenerCancelled = listener + "-" + cancelled;
  var listenerCompleted = listener + "-" + completed;
  var TaskAbortError = function() {
    function TaskAbortError2(code) {
      this.code = code;
      this.name = "TaskAbortError";
      this.message = task + " " + cancelled + " (reason: " + code + ")";
    }
    return TaskAbortError2;
  }();
  var alm = "listenerMiddleware";
  var addListener = createAction(alm + "/add");
  var clearAllListeners = createAction(alm + "/removeAll");
  var removeListener = createAction(alm + "/remove");
  N();

  // src/searchbar/redux/tokenSearchSlice.ts
  var import_async_retry = __toESM(require_lib());

  // node_modules/flatted/esm/index.js
  var { parse: $parse, stringify: $stringify } = JSON;
  var { keys } = Object;
  var Primitive = String;
  var primitive = "string";
  var object = "object";
  var noop = (_3, value) => value;
  var set = (known, input, value) => {
    const index = Primitive(input.push(value) - 1);
    known.set(value, index);
    return index;
  };
  var stringify2 = (value, replacer, space) => {
    const $2 = replacer && typeof replacer === object ? (k3, v3) => k3 === "" || -1 < replacer.indexOf(k3) ? v3 : void 0 : replacer || noop;
    const known = /* @__PURE__ */ new Map();
    const input = [];
    const output = [];
    let i3 = +set(known, input, $2.call({ "": value }, "", value));
    let firstRun = !i3;
    while (i3 < input.length) {
      firstRun = true;
      output[i3] = $stringify(input[i3++], replace, space);
    }
    return "[" + output.join(",") + "]";
    function replace(key, value2) {
      if (firstRun) {
        firstRun = !firstRun;
        return value2;
      }
      const after = $2.call(this, key, value2);
      switch (typeof after) {
        case object:
          if (after === null)
            return after;
        case primitive:
          return known.get(after) || set(known, input, after);
      }
      return after;
    }
  };

  // node_modules/bignumber.js/bignumber.mjs
  var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i;
  var mathceil = Math.ceil;
  var mathfloor = Math.floor;
  var bignumberError = "[BigNumber Error] ";
  var tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ";
  var BASE = 1e14;
  var LOG_BASE = 14;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13];
  var SQRT_BASE = 1e7;
  var MAX = 1e9;
  function clone(configObject) {
    var div, convertBase, parseNumeric, P2 = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
      prefix: "",
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ",",
      decimalSeparator: ".",
      fractionGroupSize: 0,
      fractionGroupSeparator: "\xA0",
      suffix: ""
    }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
    function BigNumber2(v3, b3) {
      var alphabet, c3, caseChanged, e3, i3, isNum, len, str, x3 = this;
      if (!(x3 instanceof BigNumber2))
        return new BigNumber2(v3, b3);
      if (b3 == null) {
        if (v3 && v3._isBigNumber === true) {
          x3.s = v3.s;
          if (!v3.c || v3.e > MAX_EXP) {
            x3.c = x3.e = null;
          } else if (v3.e < MIN_EXP) {
            x3.c = [x3.e = 0];
          } else {
            x3.e = v3.e;
            x3.c = v3.c.slice();
          }
          return;
        }
        if ((isNum = typeof v3 == "number") && v3 * 0 == 0) {
          x3.s = 1 / v3 < 0 ? (v3 = -v3, -1) : 1;
          if (v3 === ~~v3) {
            for (e3 = 0, i3 = v3; i3 >= 10; i3 /= 10, e3++)
              ;
            if (e3 > MAX_EXP) {
              x3.c = x3.e = null;
            } else {
              x3.e = e3;
              x3.c = [v3];
            }
            return;
          }
          str = String(v3);
        } else {
          if (!isNumeric.test(str = String(v3)))
            return parseNumeric(x3, str, isNum);
          x3.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }
        if ((e3 = str.indexOf(".")) > -1)
          str = str.replace(".", "");
        if ((i3 = str.search(/e/i)) > 0) {
          if (e3 < 0)
            e3 = i3;
          e3 += +str.slice(i3 + 1);
          str = str.substring(0, i3);
        } else if (e3 < 0) {
          e3 = str.length;
        }
      } else {
        intCheck(b3, 2, ALPHABET.length, "Base");
        if (b3 == 10 && alphabetHasNormalDecimalDigits) {
          x3 = new BigNumber2(v3);
          return round(x3, DECIMAL_PLACES + x3.e + 1, ROUNDING_MODE);
        }
        str = String(v3);
        if (isNum = typeof v3 == "number") {
          if (v3 * 0 != 0)
            return parseNumeric(x3, str, isNum, b3);
          x3.s = 1 / v3 < 0 ? (str = str.slice(1), -1) : 1;
          if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
            throw Error(tooManyDigits + v3);
          }
        } else {
          x3.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }
        alphabet = ALPHABET.slice(0, b3);
        e3 = i3 = 0;
        for (len = str.length; i3 < len; i3++) {
          if (alphabet.indexOf(c3 = str.charAt(i3)) < 0) {
            if (c3 == ".") {
              if (i3 > e3) {
                e3 = len;
                continue;
              }
            } else if (!caseChanged) {
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i3 = -1;
                e3 = 0;
                continue;
              }
            }
            return parseNumeric(x3, String(v3), isNum, b3);
          }
        }
        isNum = false;
        str = convertBase(str, b3, 10, x3.s);
        if ((e3 = str.indexOf(".")) > -1)
          str = str.replace(".", "");
        else
          e3 = str.length;
      }
      for (i3 = 0; str.charCodeAt(i3) === 48; i3++)
        ;
      for (len = str.length; str.charCodeAt(--len) === 48; )
        ;
      if (str = str.slice(i3, ++len)) {
        len -= i3;
        if (isNum && BigNumber2.DEBUG && len > 15 && (v3 > MAX_SAFE_INTEGER || v3 !== mathfloor(v3))) {
          throw Error(tooManyDigits + x3.s * v3);
        }
        if ((e3 = e3 - i3 - 1) > MAX_EXP) {
          x3.c = x3.e = null;
        } else if (e3 < MIN_EXP) {
          x3.c = [x3.e = 0];
        } else {
          x3.e = e3;
          x3.c = [];
          i3 = (e3 + 1) % LOG_BASE;
          if (e3 < 0)
            i3 += LOG_BASE;
          if (i3 < len) {
            if (i3)
              x3.c.push(+str.slice(0, i3));
            for (len -= LOG_BASE; i3 < len; ) {
              x3.c.push(+str.slice(i3, i3 += LOG_BASE));
            }
            i3 = LOG_BASE - (str = str.slice(i3)).length;
          } else {
            i3 -= len;
          }
          for (; i3--; str += "0")
            ;
          x3.c.push(+str);
        }
      } else {
        x3.c = [x3.e = 0];
      }
    }
    BigNumber2.clone = clone;
    BigNumber2.ROUND_UP = 0;
    BigNumber2.ROUND_DOWN = 1;
    BigNumber2.ROUND_CEIL = 2;
    BigNumber2.ROUND_FLOOR = 3;
    BigNumber2.ROUND_HALF_UP = 4;
    BigNumber2.ROUND_HALF_DOWN = 5;
    BigNumber2.ROUND_HALF_EVEN = 6;
    BigNumber2.ROUND_HALF_CEIL = 7;
    BigNumber2.ROUND_HALF_FLOOR = 8;
    BigNumber2.EUCLID = 9;
    BigNumber2.config = BigNumber2.set = function(obj) {
      var p2, v3;
      if (obj != null) {
        if (typeof obj == "object") {
          if (obj.hasOwnProperty(p2 = "DECIMAL_PLACES")) {
            v3 = obj[p2];
            intCheck(v3, 0, MAX, p2);
            DECIMAL_PLACES = v3;
          }
          if (obj.hasOwnProperty(p2 = "ROUNDING_MODE")) {
            v3 = obj[p2];
            intCheck(v3, 0, 8, p2);
            ROUNDING_MODE = v3;
          }
          if (obj.hasOwnProperty(p2 = "EXPONENTIAL_AT")) {
            v3 = obj[p2];
            if (v3 && v3.pop) {
              intCheck(v3[0], -MAX, 0, p2);
              intCheck(v3[1], 0, MAX, p2);
              TO_EXP_NEG = v3[0];
              TO_EXP_POS = v3[1];
            } else {
              intCheck(v3, -MAX, MAX, p2);
              TO_EXP_NEG = -(TO_EXP_POS = v3 < 0 ? -v3 : v3);
            }
          }
          if (obj.hasOwnProperty(p2 = "RANGE")) {
            v3 = obj[p2];
            if (v3 && v3.pop) {
              intCheck(v3[0], -MAX, -1, p2);
              intCheck(v3[1], 1, MAX, p2);
              MIN_EXP = v3[0];
              MAX_EXP = v3[1];
            } else {
              intCheck(v3, -MAX, MAX, p2);
              if (v3) {
                MIN_EXP = -(MAX_EXP = v3 < 0 ? -v3 : v3);
              } else {
                throw Error(bignumberError + p2 + " cannot be zero: " + v3);
              }
            }
          }
          if (obj.hasOwnProperty(p2 = "CRYPTO")) {
            v3 = obj[p2];
            if (v3 === !!v3) {
              if (v3) {
                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v3;
                } else {
                  CRYPTO = !v3;
                  throw Error(bignumberError + "crypto unavailable");
                }
              } else {
                CRYPTO = v3;
              }
            } else {
              throw Error(bignumberError + p2 + " not true or false: " + v3);
            }
          }
          if (obj.hasOwnProperty(p2 = "MODULO_MODE")) {
            v3 = obj[p2];
            intCheck(v3, 0, 9, p2);
            MODULO_MODE = v3;
          }
          if (obj.hasOwnProperty(p2 = "POW_PRECISION")) {
            v3 = obj[p2];
            intCheck(v3, 0, MAX, p2);
            POW_PRECISION = v3;
          }
          if (obj.hasOwnProperty(p2 = "FORMAT")) {
            v3 = obj[p2];
            if (typeof v3 == "object")
              FORMAT = v3;
            else
              throw Error(bignumberError + p2 + " not an object: " + v3);
          }
          if (obj.hasOwnProperty(p2 = "ALPHABET")) {
            v3 = obj[p2];
            if (typeof v3 == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v3)) {
              alphabetHasNormalDecimalDigits = v3.slice(0, 10) == "0123456789";
              ALPHABET = v3;
            } else {
              throw Error(bignumberError + p2 + " invalid: " + v3);
            }
          }
        } else {
          throw Error(bignumberError + "Object expected: " + obj);
        }
      }
      return {
        DECIMAL_PLACES,
        ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO,
        MODULO_MODE,
        POW_PRECISION,
        FORMAT,
        ALPHABET
      };
    };
    BigNumber2.isBigNumber = function(v3) {
      if (!v3 || v3._isBigNumber !== true)
        return false;
      if (!BigNumber2.DEBUG)
        return true;
      var i3, n3, c3 = v3.c, e3 = v3.e, s3 = v3.s;
      out:
        if ({}.toString.call(c3) == "[object Array]") {
          if ((s3 === 1 || s3 === -1) && e3 >= -MAX && e3 <= MAX && e3 === mathfloor(e3)) {
            if (c3[0] === 0) {
              if (e3 === 0 && c3.length === 1)
                return true;
              break out;
            }
            i3 = (e3 + 1) % LOG_BASE;
            if (i3 < 1)
              i3 += LOG_BASE;
            if (String(c3[0]).length == i3) {
              for (i3 = 0; i3 < c3.length; i3++) {
                n3 = c3[i3];
                if (n3 < 0 || n3 >= BASE || n3 !== mathfloor(n3))
                  break out;
              }
              if (n3 !== 0)
                return true;
            }
          }
        } else if (c3 === null && e3 === null && (s3 === null || s3 === 1 || s3 === -1)) {
          return true;
        }
      throw Error(bignumberError + "Invalid BigNumber: " + v3);
    };
    BigNumber2.maximum = BigNumber2.max = function() {
      return maxOrMin(arguments, P2.lt);
    };
    BigNumber2.minimum = BigNumber2.min = function() {
      return maxOrMin(arguments, P2.gt);
    };
    BigNumber2.random = function() {
      var pow2_53 = 9007199254740992;
      var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
        return mathfloor(Math.random() * pow2_53);
      } : function() {
        return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
      };
      return function(dp) {
        var a3, b3, e3, k3, v3, i3 = 0, c3 = [], rand = new BigNumber2(ONE);
        if (dp == null)
          dp = DECIMAL_PLACES;
        else
          intCheck(dp, 0, MAX);
        k3 = mathceil(dp / LOG_BASE);
        if (CRYPTO) {
          if (crypto.getRandomValues) {
            a3 = crypto.getRandomValues(new Uint32Array(k3 *= 2));
            for (; i3 < k3; ) {
              v3 = a3[i3] * 131072 + (a3[i3 + 1] >>> 11);
              if (v3 >= 9e15) {
                b3 = crypto.getRandomValues(new Uint32Array(2));
                a3[i3] = b3[0];
                a3[i3 + 1] = b3[1];
              } else {
                c3.push(v3 % 1e14);
                i3 += 2;
              }
            }
            i3 = k3 / 2;
          } else if (crypto.randomBytes) {
            a3 = crypto.randomBytes(k3 *= 7);
            for (; i3 < k3; ) {
              v3 = (a3[i3] & 31) * 281474976710656 + a3[i3 + 1] * 1099511627776 + a3[i3 + 2] * 4294967296 + a3[i3 + 3] * 16777216 + (a3[i3 + 4] << 16) + (a3[i3 + 5] << 8) + a3[i3 + 6];
              if (v3 >= 9e15) {
                crypto.randomBytes(7).copy(a3, i3);
              } else {
                c3.push(v3 % 1e14);
                i3 += 7;
              }
            }
            i3 = k3 / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + "crypto unavailable");
          }
        }
        if (!CRYPTO) {
          for (; i3 < k3; ) {
            v3 = random53bitInt();
            if (v3 < 9e15)
              c3[i3++] = v3 % 1e14;
          }
        }
        k3 = c3[--i3];
        dp %= LOG_BASE;
        if (k3 && dp) {
          v3 = POWS_TEN[LOG_BASE - dp];
          c3[i3] = mathfloor(k3 / v3) * v3;
        }
        for (; c3[i3] === 0; c3.pop(), i3--)
          ;
        if (i3 < 0) {
          c3 = [e3 = 0];
        } else {
          for (e3 = -1; c3[0] === 0; c3.splice(0, 1), e3 -= LOG_BASE)
            ;
          for (i3 = 1, v3 = c3[0]; v3 >= 10; v3 /= 10, i3++)
            ;
          if (i3 < LOG_BASE)
            e3 -= LOG_BASE - i3;
        }
        rand.e = e3;
        rand.c = c3;
        return rand;
      };
    }();
    BigNumber2.sum = function() {
      var i3 = 1, args = arguments, sum = new BigNumber2(args[0]);
      for (; i3 < args.length; )
        sum = sum.plus(args[i3++]);
      return sum;
    };
    convertBase = function() {
      var decimal = "0123456789";
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j3, arr = [0], arrL, i3 = 0, len = str.length;
        for (; i3 < len; ) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
            ;
          arr[0] += alphabet.indexOf(str.charAt(i3++));
          for (j3 = 0; j3 < arr.length; j3++) {
            if (arr[j3] > baseOut - 1) {
              if (arr[j3 + 1] == null)
                arr[j3 + 1] = 0;
              arr[j3 + 1] += arr[j3] / baseOut | 0;
              arr[j3] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }
      return function(str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d3, e3, k3, r3, x3, xc, y3, i3 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
        if (i3 >= 0) {
          k3 = POW_PRECISION;
          POW_PRECISION = 0;
          str = str.replace(".", "");
          y3 = new BigNumber2(baseIn);
          x3 = y3.pow(str.length - i3);
          POW_PRECISION = k3;
          y3.c = toBaseOut(toFixedPoint(coeffToString(x3.c), x3.e, "0"), 10, baseOut, decimal);
          y3.e = y3.c.length;
        }
        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
        e3 = k3 = xc.length;
        for (; xc[--k3] == 0; xc.pop())
          ;
        if (!xc[0])
          return alphabet.charAt(0);
        if (i3 < 0) {
          --e3;
        } else {
          x3.c = xc;
          x3.e = e3;
          x3.s = sign;
          x3 = div(x3, y3, dp, rm, baseOut);
          xc = x3.c;
          r3 = x3.r;
          e3 = x3.e;
        }
        d3 = e3 + dp + 1;
        i3 = xc[d3];
        k3 = baseOut / 2;
        r3 = r3 || d3 < 0 || xc[d3 + 1] != null;
        r3 = rm < 4 ? (i3 != null || r3) && (rm == 0 || rm == (x3.s < 0 ? 3 : 2)) : i3 > k3 || i3 == k3 && (rm == 4 || r3 || rm == 6 && xc[d3 - 1] & 1 || rm == (x3.s < 0 ? 8 : 7));
        if (d3 < 1 || !xc[0]) {
          str = r3 ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          xc.length = d3;
          if (r3) {
            for (--baseOut; ++xc[--d3] > baseOut; ) {
              xc[d3] = 0;
              if (!d3) {
                ++e3;
                xc = [1].concat(xc);
              }
            }
          }
          for (k3 = xc.length; !xc[--k3]; )
            ;
          for (i3 = 0, str = ""; i3 <= k3; str += alphabet.charAt(xc[i3++]))
            ;
          str = toFixedPoint(str, e3, alphabet.charAt(0));
        }
        return str;
      };
    }();
    div = function() {
      function multiply(x3, k3, base) {
        var m3, temp, xlo, xhi, carry = 0, i3 = x3.length, klo = k3 % SQRT_BASE, khi = k3 / SQRT_BASE | 0;
        for (x3 = x3.slice(); i3--; ) {
          xlo = x3[i3] % SQRT_BASE;
          xhi = x3[i3] / SQRT_BASE | 0;
          m3 = khi * xlo + xhi * klo;
          temp = klo * xlo + m3 % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base | 0) + (m3 / SQRT_BASE | 0) + khi * xhi;
          x3[i3] = temp % base;
        }
        if (carry)
          x3 = [carry].concat(x3);
        return x3;
      }
      function compare2(a3, b3, aL, bL) {
        var i3, cmp;
        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {
          for (i3 = cmp = 0; i3 < aL; i3++) {
            if (a3[i3] != b3[i3]) {
              cmp = a3[i3] > b3[i3] ? 1 : -1;
              break;
            }
          }
        }
        return cmp;
      }
      function subtract(a3, b3, aL, base) {
        var i3 = 0;
        for (; aL--; ) {
          a3[aL] -= i3;
          i3 = a3[aL] < b3[aL] ? 1 : 0;
          a3[aL] = i3 * base + a3[aL] - b3[aL];
        }
        for (; !a3[0] && a3.length > 1; a3.splice(0, 1))
          ;
      }
      return function(x3, y3, dp, rm, base) {
        var cmp, e3, i3, more, n3, prod, prodL, q3, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s3 = x3.s == y3.s ? 1 : -1, xc = x3.c, yc = y3.c;
        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber2(!x3.s || !y3.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : xc && xc[0] == 0 || !yc ? s3 * 0 : s3 / 0);
        }
        q3 = new BigNumber2(s3);
        qc = q3.c = [];
        e3 = x3.e - y3.e;
        s3 = dp + e3 + 1;
        if (!base) {
          base = BASE;
          e3 = bitFloor(x3.e / LOG_BASE) - bitFloor(y3.e / LOG_BASE);
          s3 = s3 / LOG_BASE | 0;
        }
        for (i3 = 0; yc[i3] == (xc[i3] || 0); i3++)
          ;
        if (yc[i3] > (xc[i3] || 0))
          e3--;
        if (s3 < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i3 = 0;
          s3 += 2;
          n3 = mathfloor(base / (yc[0] + 1));
          if (n3 > 1) {
            yc = multiply(yc, n3, base);
            xc = multiply(xc, n3, base);
            yL = yc.length;
            xL = xc.length;
          }
          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; rem[remL++] = 0)
            ;
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2)
            yc0++;
          do {
            n3 = 0;
            cmp = compare2(yc, rem, yL, remL);
            if (cmp < 0) {
              rem0 = rem[0];
              if (yL != remL)
                rem0 = rem0 * base + (rem[1] || 0);
              n3 = mathfloor(rem0 / yc0);
              if (n3 > 1) {
                if (n3 >= base)
                  n3 = base - 1;
                prod = multiply(yc, n3, base);
                prodL = prod.length;
                remL = rem.length;
                while (compare2(prod, rem, prodL, remL) == 1) {
                  n3--;
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {
                if (n3 == 0) {
                  cmp = n3 = 1;
                }
                prod = yc.slice();
                prodL = prod.length;
              }
              if (prodL < remL)
                prod = [0].concat(prod);
              subtract(rem, prod, remL, base);
              remL = rem.length;
              if (cmp == -1) {
                while (compare2(yc, rem, yL, remL) < 1) {
                  n3++;
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n3++;
              rem = [0];
            }
            qc[i3++] = n3;
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s3--);
          more = rem[0] != null;
          if (!qc[0])
            qc.splice(0, 1);
        }
        if (base == BASE) {
          for (i3 = 1, s3 = qc[0]; s3 >= 10; s3 /= 10, i3++)
            ;
          round(q3, dp + (q3.e = i3 + e3 * LOG_BASE - 1) + 1, rm, more);
        } else {
          q3.e = e3;
          q3.r = +more;
        }
        return q3;
      };
    }();
    function format(n3, i3, rm, id) {
      var c0, e3, ne2, len, str;
      if (rm == null)
        rm = ROUNDING_MODE;
      else
        intCheck(rm, 0, 8);
      if (!n3.c)
        return n3.toString();
      c0 = n3.c[0];
      ne2 = n3.e;
      if (i3 == null) {
        str = coeffToString(n3.c);
        str = id == 1 || id == 2 && (ne2 <= TO_EXP_NEG || ne2 >= TO_EXP_POS) ? toExponential(str, ne2) : toFixedPoint(str, ne2, "0");
      } else {
        n3 = round(new BigNumber2(n3), i3, rm);
        e3 = n3.e;
        str = coeffToString(n3.c);
        len = str.length;
        if (id == 1 || id == 2 && (i3 <= e3 || e3 <= TO_EXP_NEG)) {
          for (; len < i3; str += "0", len++)
            ;
          str = toExponential(str, e3);
        } else {
          i3 -= ne2;
          str = toFixedPoint(str, e3, "0");
          if (e3 + 1 > len) {
            if (--i3 > 0)
              for (str += "."; i3--; str += "0")
                ;
          } else {
            i3 += e3 - len;
            if (i3 > 0) {
              if (e3 + 1 == len)
                str += ".";
              for (; i3--; str += "0")
                ;
            }
          }
        }
      }
      return n3.s < 0 && c0 ? "-" + str : str;
    }
    function maxOrMin(args, method) {
      var n3, i3 = 1, m3 = new BigNumber2(args[0]);
      for (; i3 < args.length; i3++) {
        n3 = new BigNumber2(args[i3]);
        if (!n3.s) {
          m3 = n3;
          break;
        } else if (method.call(m3, n3)) {
          m3 = n3;
        }
      }
      return m3;
    }
    function normalise(n3, c3, e3) {
      var i3 = 1, j3 = c3.length;
      for (; !c3[--j3]; c3.pop())
        ;
      for (j3 = c3[0]; j3 >= 10; j3 /= 10, i3++)
        ;
      if ((e3 = i3 + e3 * LOG_BASE - 1) > MAX_EXP) {
        n3.c = n3.e = null;
      } else if (e3 < MIN_EXP) {
        n3.c = [n3.e = 0];
      } else {
        n3.e = e3;
        n3.c = c3;
      }
      return n3;
    }
    parseNumeric = function() {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function(x3, str, isNum, b3) {
        var base, s3 = isNum ? str : str.replace(whitespaceOrPlus, "");
        if (isInfinityOrNaN.test(s3)) {
          x3.s = isNaN(s3) ? null : s3 < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            s3 = s3.replace(basePrefix, function(m3, p1, p2) {
              base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
              return !b3 || b3 == base ? p1 : m3;
            });
            if (b3) {
              base = b3;
              s3 = s3.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
            }
            if (str != s3)
              return new BigNumber2(s3, base);
          }
          if (BigNumber2.DEBUG) {
            throw Error(bignumberError + "Not a" + (b3 ? " base " + b3 : "") + " number: " + str);
          }
          x3.s = null;
        }
        x3.c = x3.e = null;
      };
    }();
    function round(x3, sd, rm, r3) {
      var d3, i3, j3, k3, n3, ni, rd, xc = x3.c, pows10 = POWS_TEN;
      if (xc) {
        out: {
          for (d3 = 1, k3 = xc[0]; k3 >= 10; k3 /= 10, d3++)
            ;
          i3 = sd - d3;
          if (i3 < 0) {
            i3 += LOG_BASE;
            j3 = sd;
            n3 = xc[ni = 0];
            rd = n3 / pows10[d3 - j3 - 1] % 10 | 0;
          } else {
            ni = mathceil((i3 + 1) / LOG_BASE);
            if (ni >= xc.length) {
              if (r3) {
                for (; xc.length <= ni; xc.push(0))
                  ;
                n3 = rd = 0;
                d3 = 1;
                i3 %= LOG_BASE;
                j3 = i3 - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n3 = k3 = xc[ni];
              for (d3 = 1; k3 >= 10; k3 /= 10, d3++)
                ;
              i3 %= LOG_BASE;
              j3 = i3 - LOG_BASE + d3;
              rd = j3 < 0 ? 0 : n3 / pows10[d3 - j3 - 1] % 10 | 0;
            }
          }
          r3 = r3 || sd < 0 || xc[ni + 1] != null || (j3 < 0 ? n3 : n3 % pows10[d3 - j3 - 1]);
          r3 = rm < 4 ? (rd || r3) && (rm == 0 || rm == (x3.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r3 || rm == 6 && (i3 > 0 ? j3 > 0 ? n3 / pows10[d3 - j3] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x3.s < 0 ? 8 : 7));
          if (sd < 1 || !xc[0]) {
            xc.length = 0;
            if (r3) {
              sd -= x3.e + 1;
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x3.e = -sd || 0;
            } else {
              xc[0] = x3.e = 0;
            }
            return x3;
          }
          if (i3 == 0) {
            xc.length = ni;
            k3 = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k3 = pows10[LOG_BASE - i3];
            xc[ni] = j3 > 0 ? mathfloor(n3 / pows10[d3 - j3] % pows10[j3]) * k3 : 0;
          }
          if (r3) {
            for (; ; ) {
              if (ni == 0) {
                for (i3 = 1, j3 = xc[0]; j3 >= 10; j3 /= 10, i3++)
                  ;
                j3 = xc[0] += k3;
                for (k3 = 1; j3 >= 10; j3 /= 10, k3++)
                  ;
                if (i3 != k3) {
                  x3.e++;
                  if (xc[0] == BASE)
                    xc[0] = 1;
                }
                break;
              } else {
                xc[ni] += k3;
                if (xc[ni] != BASE)
                  break;
                xc[ni--] = 0;
                k3 = 1;
              }
            }
          }
          for (i3 = xc.length; xc[--i3] === 0; xc.pop())
            ;
        }
        if (x3.e > MAX_EXP) {
          x3.c = x3.e = null;
        } else if (x3.e < MIN_EXP) {
          x3.c = [x3.e = 0];
        }
      }
      return x3;
    }
    function valueOf(n3) {
      var str, e3 = n3.e;
      if (e3 === null)
        return n3.toString();
      str = coeffToString(n3.c);
      str = e3 <= TO_EXP_NEG || e3 >= TO_EXP_POS ? toExponential(str, e3) : toFixedPoint(str, e3, "0");
      return n3.s < 0 ? "-" + str : str;
    }
    P2.absoluteValue = P2.abs = function() {
      var x3 = new BigNumber2(this);
      if (x3.s < 0)
        x3.s = 1;
      return x3;
    };
    P2.comparedTo = function(y3, b3) {
      return compare(this, new BigNumber2(y3, b3));
    };
    P2.decimalPlaces = P2.dp = function(dp, rm) {
      var c3, n3, v3, x3 = this;
      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        return round(new BigNumber2(x3), dp + x3.e + 1, rm);
      }
      if (!(c3 = x3.c))
        return null;
      n3 = ((v3 = c3.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
      if (v3 = c3[v3])
        for (; v3 % 10 == 0; v3 /= 10, n3--)
          ;
      if (n3 < 0)
        n3 = 0;
      return n3;
    };
    P2.dividedBy = P2.div = function(y3, b3) {
      return div(this, new BigNumber2(y3, b3), DECIMAL_PLACES, ROUNDING_MODE);
    };
    P2.dividedToIntegerBy = P2.idiv = function(y3, b3) {
      return div(this, new BigNumber2(y3, b3), 0, 1);
    };
    P2.exponentiatedBy = P2.pow = function(n3, m3) {
      var half, isModExp, i3, k3, more, nIsBig, nIsNeg, nIsOdd, y3, x3 = this;
      n3 = new BigNumber2(n3);
      if (n3.c && !n3.isInteger()) {
        throw Error(bignumberError + "Exponent not an integer: " + valueOf(n3));
      }
      if (m3 != null)
        m3 = new BigNumber2(m3);
      nIsBig = n3.e > 14;
      if (!x3.c || !x3.c[0] || x3.c[0] == 1 && !x3.e && x3.c.length == 1 || !n3.c || !n3.c[0]) {
        y3 = new BigNumber2(Math.pow(+valueOf(x3), nIsBig ? 2 - isOdd(n3) : +valueOf(n3)));
        return m3 ? y3.mod(m3) : y3;
      }
      nIsNeg = n3.s < 0;
      if (m3) {
        if (m3.c ? !m3.c[0] : !m3.s)
          return new BigNumber2(NaN);
        isModExp = !nIsNeg && x3.isInteger() && m3.isInteger();
        if (isModExp)
          x3 = x3.mod(m3);
      } else if (n3.e > 9 && (x3.e > 0 || x3.e < -1 || (x3.e == 0 ? x3.c[0] > 1 || nIsBig && x3.c[1] >= 24e7 : x3.c[0] < 8e13 || nIsBig && x3.c[0] <= 9999975e7))) {
        k3 = x3.s < 0 && isOdd(n3) ? -0 : 0;
        if (x3.e > -1)
          k3 = 1 / k3;
        return new BigNumber2(nIsNeg ? 1 / k3 : k3);
      } else if (POW_PRECISION) {
        k3 = mathceil(POW_PRECISION / LOG_BASE + 2);
      }
      if (nIsBig) {
        half = new BigNumber2(0.5);
        if (nIsNeg)
          n3.s = 1;
        nIsOdd = isOdd(n3);
      } else {
        i3 = Math.abs(+valueOf(n3));
        nIsOdd = i3 % 2;
      }
      y3 = new BigNumber2(ONE);
      for (; ; ) {
        if (nIsOdd) {
          y3 = y3.times(x3);
          if (!y3.c)
            break;
          if (k3) {
            if (y3.c.length > k3)
              y3.c.length = k3;
          } else if (isModExp) {
            y3 = y3.mod(m3);
          }
        }
        if (i3) {
          i3 = mathfloor(i3 / 2);
          if (i3 === 0)
            break;
          nIsOdd = i3 % 2;
        } else {
          n3 = n3.times(half);
          round(n3, n3.e + 1, 1);
          if (n3.e > 14) {
            nIsOdd = isOdd(n3);
          } else {
            i3 = +valueOf(n3);
            if (i3 === 0)
              break;
            nIsOdd = i3 % 2;
          }
        }
        x3 = x3.times(x3);
        if (k3) {
          if (x3.c && x3.c.length > k3)
            x3.c.length = k3;
        } else if (isModExp) {
          x3 = x3.mod(m3);
        }
      }
      if (isModExp)
        return y3;
      if (nIsNeg)
        y3 = ONE.div(y3);
      return m3 ? y3.mod(m3) : k3 ? round(y3, POW_PRECISION, ROUNDING_MODE, more) : y3;
    };
    P2.integerValue = function(rm) {
      var n3 = new BigNumber2(this);
      if (rm == null)
        rm = ROUNDING_MODE;
      else
        intCheck(rm, 0, 8);
      return round(n3, n3.e + 1, rm);
    };
    P2.isEqualTo = P2.eq = function(y3, b3) {
      return compare(this, new BigNumber2(y3, b3)) === 0;
    };
    P2.isFinite = function() {
      return !!this.c;
    };
    P2.isGreaterThan = P2.gt = function(y3, b3) {
      return compare(this, new BigNumber2(y3, b3)) > 0;
    };
    P2.isGreaterThanOrEqualTo = P2.gte = function(y3, b3) {
      return (b3 = compare(this, new BigNumber2(y3, b3))) === 1 || b3 === 0;
    };
    P2.isInteger = function() {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    P2.isLessThan = P2.lt = function(y3, b3) {
      return compare(this, new BigNumber2(y3, b3)) < 0;
    };
    P2.isLessThanOrEqualTo = P2.lte = function(y3, b3) {
      return (b3 = compare(this, new BigNumber2(y3, b3))) === -1 || b3 === 0;
    };
    P2.isNaN = function() {
      return !this.s;
    };
    P2.isNegative = function() {
      return this.s < 0;
    };
    P2.isPositive = function() {
      return this.s > 0;
    };
    P2.isZero = function() {
      return !!this.c && this.c[0] == 0;
    };
    P2.minus = function(y3, b3) {
      var i3, j3, t3, xLTy, x3 = this, a3 = x3.s;
      y3 = new BigNumber2(y3, b3);
      b3 = y3.s;
      if (!a3 || !b3)
        return new BigNumber2(NaN);
      if (a3 != b3) {
        y3.s = -b3;
        return x3.plus(y3);
      }
      var xe2 = x3.e / LOG_BASE, ye2 = y3.e / LOG_BASE, xc = x3.c, yc = y3.c;
      if (!xe2 || !ye2) {
        if (!xc || !yc)
          return xc ? (y3.s = -b3, y3) : new BigNumber2(yc ? x3 : NaN);
        if (!xc[0] || !yc[0]) {
          return yc[0] ? (y3.s = -b3, y3) : new BigNumber2(xc[0] ? x3 : ROUNDING_MODE == 3 ? -0 : 0);
        }
      }
      xe2 = bitFloor(xe2);
      ye2 = bitFloor(ye2);
      xc = xc.slice();
      if (a3 = xe2 - ye2) {
        if (xLTy = a3 < 0) {
          a3 = -a3;
          t3 = xc;
        } else {
          ye2 = xe2;
          t3 = yc;
        }
        t3.reverse();
        for (b3 = a3; b3--; t3.push(0))
          ;
        t3.reverse();
      } else {
        j3 = (xLTy = (a3 = xc.length) < (b3 = yc.length)) ? a3 : b3;
        for (a3 = b3 = 0; b3 < j3; b3++) {
          if (xc[b3] != yc[b3]) {
            xLTy = xc[b3] < yc[b3];
            break;
          }
        }
      }
      if (xLTy)
        t3 = xc, xc = yc, yc = t3, y3.s = -y3.s;
      b3 = (j3 = yc.length) - (i3 = xc.length);
      if (b3 > 0)
        for (; b3--; xc[i3++] = 0)
          ;
      b3 = BASE - 1;
      for (; j3 > a3; ) {
        if (xc[--j3] < yc[j3]) {
          for (i3 = j3; i3 && !xc[--i3]; xc[i3] = b3)
            ;
          --xc[i3];
          xc[j3] += BASE;
        }
        xc[j3] -= yc[j3];
      }
      for (; xc[0] == 0; xc.splice(0, 1), --ye2)
        ;
      if (!xc[0]) {
        y3.s = ROUNDING_MODE == 3 ? -1 : 1;
        y3.c = [y3.e = 0];
        return y3;
      }
      return normalise(y3, xc, ye2);
    };
    P2.modulo = P2.mod = function(y3, b3) {
      var q3, s3, x3 = this;
      y3 = new BigNumber2(y3, b3);
      if (!x3.c || !y3.s || y3.c && !y3.c[0]) {
        return new BigNumber2(NaN);
      } else if (!y3.c || x3.c && !x3.c[0]) {
        return new BigNumber2(x3);
      }
      if (MODULO_MODE == 9) {
        s3 = y3.s;
        y3.s = 1;
        q3 = div(x3, y3, 0, 3);
        y3.s = s3;
        q3.s *= s3;
      } else {
        q3 = div(x3, y3, 0, MODULO_MODE);
      }
      y3 = x3.minus(q3.times(y3));
      if (!y3.c[0] && MODULO_MODE == 1)
        y3.s = x3.s;
      return y3;
    };
    P2.multipliedBy = P2.times = function(y3, b3) {
      var c3, e3, i3, j3, k3, m3, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x3 = this, xc = x3.c, yc = (y3 = new BigNumber2(y3, b3)).c;
      if (!xc || !yc || !xc[0] || !yc[0]) {
        if (!x3.s || !y3.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y3.c = y3.e = y3.s = null;
        } else {
          y3.s *= x3.s;
          if (!xc || !yc) {
            y3.c = y3.e = null;
          } else {
            y3.c = [0];
            y3.e = 0;
          }
        }
        return y3;
      }
      e3 = bitFloor(x3.e / LOG_BASE) + bitFloor(y3.e / LOG_BASE);
      y3.s *= x3.s;
      xcL = xc.length;
      ycL = yc.length;
      if (xcL < ycL)
        zc = xc, xc = yc, yc = zc, i3 = xcL, xcL = ycL, ycL = i3;
      for (i3 = xcL + ycL, zc = []; i3--; zc.push(0))
        ;
      base = BASE;
      sqrtBase = SQRT_BASE;
      for (i3 = ycL; --i3 >= 0; ) {
        c3 = 0;
        ylo = yc[i3] % sqrtBase;
        yhi = yc[i3] / sqrtBase | 0;
        for (k3 = xcL, j3 = i3 + k3; j3 > i3; ) {
          xlo = xc[--k3] % sqrtBase;
          xhi = xc[k3] / sqrtBase | 0;
          m3 = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m3 % sqrtBase * sqrtBase + zc[j3] + c3;
          c3 = (xlo / base | 0) + (m3 / sqrtBase | 0) + yhi * xhi;
          zc[j3--] = xlo % base;
        }
        zc[j3] = c3;
      }
      if (c3) {
        ++e3;
      } else {
        zc.splice(0, 1);
      }
      return normalise(y3, zc, e3);
    };
    P2.negated = function() {
      var x3 = new BigNumber2(this);
      x3.s = -x3.s || null;
      return x3;
    };
    P2.plus = function(y3, b3) {
      var t3, x3 = this, a3 = x3.s;
      y3 = new BigNumber2(y3, b3);
      b3 = y3.s;
      if (!a3 || !b3)
        return new BigNumber2(NaN);
      if (a3 != b3) {
        y3.s = -b3;
        return x3.minus(y3);
      }
      var xe2 = x3.e / LOG_BASE, ye2 = y3.e / LOG_BASE, xc = x3.c, yc = y3.c;
      if (!xe2 || !ye2) {
        if (!xc || !yc)
          return new BigNumber2(a3 / 0);
        if (!xc[0] || !yc[0])
          return yc[0] ? y3 : new BigNumber2(xc[0] ? x3 : a3 * 0);
      }
      xe2 = bitFloor(xe2);
      ye2 = bitFloor(ye2);
      xc = xc.slice();
      if (a3 = xe2 - ye2) {
        if (a3 > 0) {
          ye2 = xe2;
          t3 = yc;
        } else {
          a3 = -a3;
          t3 = xc;
        }
        t3.reverse();
        for (; a3--; t3.push(0))
          ;
        t3.reverse();
      }
      a3 = xc.length;
      b3 = yc.length;
      if (a3 - b3 < 0)
        t3 = yc, yc = xc, xc = t3, b3 = a3;
      for (a3 = 0; b3; ) {
        a3 = (xc[--b3] = xc[b3] + yc[b3] + a3) / BASE | 0;
        xc[b3] = BASE === xc[b3] ? 0 : xc[b3] % BASE;
      }
      if (a3) {
        xc = [a3].concat(xc);
        ++ye2;
      }
      return normalise(y3, xc, ye2);
    };
    P2.precision = P2.sd = function(sd, rm) {
      var c3, n3, v3, x3 = this;
      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        return round(new BigNumber2(x3), sd, rm);
      }
      if (!(c3 = x3.c))
        return null;
      v3 = c3.length - 1;
      n3 = v3 * LOG_BASE + 1;
      if (v3 = c3[v3]) {
        for (; v3 % 10 == 0; v3 /= 10, n3--)
          ;
        for (v3 = c3[0]; v3 >= 10; v3 /= 10, n3++)
          ;
      }
      if (sd && x3.e + 1 > n3)
        n3 = x3.e + 1;
      return n3;
    };
    P2.shiftedBy = function(k3) {
      intCheck(k3, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times("1e" + k3);
    };
    P2.squareRoot = P2.sqrt = function() {
      var m3, n3, r3, rep, t3, x3 = this, c3 = x3.c, s3 = x3.s, e3 = x3.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
      if (s3 !== 1 || !c3 || !c3[0]) {
        return new BigNumber2(!s3 || s3 < 0 && (!c3 || c3[0]) ? NaN : c3 ? x3 : 1 / 0);
      }
      s3 = Math.sqrt(+valueOf(x3));
      if (s3 == 0 || s3 == 1 / 0) {
        n3 = coeffToString(c3);
        if ((n3.length + e3) % 2 == 0)
          n3 += "0";
        s3 = Math.sqrt(+n3);
        e3 = bitFloor((e3 + 1) / 2) - (e3 < 0 || e3 % 2);
        if (s3 == 1 / 0) {
          n3 = "5e" + e3;
        } else {
          n3 = s3.toExponential();
          n3 = n3.slice(0, n3.indexOf("e") + 1) + e3;
        }
        r3 = new BigNumber2(n3);
      } else {
        r3 = new BigNumber2(s3 + "");
      }
      if (r3.c[0]) {
        e3 = r3.e;
        s3 = e3 + dp;
        if (s3 < 3)
          s3 = 0;
        for (; ; ) {
          t3 = r3;
          r3 = half.times(t3.plus(div(x3, t3, dp, 1)));
          if (coeffToString(t3.c).slice(0, s3) === (n3 = coeffToString(r3.c)).slice(0, s3)) {
            if (r3.e < e3)
              --s3;
            n3 = n3.slice(s3 - 3, s3 + 1);
            if (n3 == "9999" || !rep && n3 == "4999") {
              if (!rep) {
                round(t3, t3.e + DECIMAL_PLACES + 2, 0);
                if (t3.times(t3).eq(x3)) {
                  r3 = t3;
                  break;
                }
              }
              dp += 4;
              s3 += 4;
              rep = 1;
            } else {
              if (!+n3 || !+n3.slice(1) && n3.charAt(0) == "5") {
                round(r3, r3.e + DECIMAL_PLACES + 2, 1);
                m3 = !r3.times(r3).eq(x3);
              }
              break;
            }
          }
        }
      }
      return round(r3, r3.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m3);
    };
    P2.toExponential = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };
    P2.toFixed = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };
    P2.toFormat = function(dp, rm, format2) {
      var str, x3 = this;
      if (format2 == null) {
        if (dp != null && rm && typeof rm == "object") {
          format2 = rm;
          rm = null;
        } else if (dp && typeof dp == "object") {
          format2 = dp;
          dp = rm = null;
        } else {
          format2 = FORMAT;
        }
      } else if (typeof format2 != "object") {
        throw Error(bignumberError + "Argument not an object: " + format2);
      }
      str = x3.toFixed(dp, rm);
      if (x3.c) {
        var i3, arr = str.split("."), g1 = +format2.groupSize, g22 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x3.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
        if (g22)
          i3 = g1, g1 = g22, g22 = i3, len -= i3;
        if (g1 > 0 && len > 0) {
          i3 = len % g1 || g1;
          intPart = intDigits.substr(0, i3);
          for (; i3 < len; i3 += g1)
            intPart += groupSeparator + intDigits.substr(i3, g1);
          if (g22 > 0)
            intPart += groupSeparator + intDigits.slice(i3);
          if (isNeg)
            intPart = "-" + intPart;
        }
        str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g22 = +format2.fractionGroupSize) ? fractionPart.replace(new RegExp("\\d{" + g22 + "}\\B", "g"), "$&" + (format2.fractionGroupSeparator || "")) : fractionPart) : intPart;
      }
      return (format2.prefix || "") + str + (format2.suffix || "");
    };
    P2.toFraction = function(md) {
      var d3, d0, d1, d22, e3, exp, n3, n0, n1, q3, r3, s3, x3 = this, xc = x3.c;
      if (md != null) {
        n3 = new BigNumber2(md);
        if (!n3.isInteger() && (n3.c || n3.s !== 1) || n3.lt(ONE)) {
          throw Error(bignumberError + "Argument " + (n3.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n3));
        }
      }
      if (!xc)
        return new BigNumber2(x3);
      d3 = new BigNumber2(ONE);
      n1 = d0 = new BigNumber2(ONE);
      d1 = n0 = new BigNumber2(ONE);
      s3 = coeffToString(xc);
      e3 = d3.e = s3.length - x3.e - 1;
      d3.c[0] = POWS_TEN[(exp = e3 % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n3.comparedTo(d3) > 0 ? e3 > 0 ? d3 : n1 : n3;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n3 = new BigNumber2(s3);
      n0.c[0] = 0;
      for (; ; ) {
        q3 = div(n3, d3, 0, 1);
        d22 = d0.plus(q3.times(d1));
        if (d22.comparedTo(md) == 1)
          break;
        d0 = d1;
        d1 = d22;
        n1 = n0.plus(q3.times(d22 = n1));
        n0 = d22;
        d3 = n3.minus(q3.times(d22 = d3));
        n3 = d22;
      }
      d22 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d22.times(n1));
      d0 = d0.plus(d22.times(d1));
      n0.s = n1.s = x3.s;
      e3 = e3 * 2;
      r3 = div(n1, d1, e3, ROUNDING_MODE).minus(x3).abs().comparedTo(div(n0, d0, e3, ROUNDING_MODE).minus(x3).abs()) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r3;
    };
    P2.toNumber = function() {
      return +valueOf(this);
    };
    P2.toPrecision = function(sd, rm) {
      if (sd != null)
        intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };
    P2.toString = function(b3) {
      var str, n3 = this, s3 = n3.s, e3 = n3.e;
      if (e3 === null) {
        if (s3) {
          str = "Infinity";
          if (s3 < 0)
            str = "-" + str;
        } else {
          str = "NaN";
        }
      } else {
        if (b3 == null) {
          str = e3 <= TO_EXP_NEG || e3 >= TO_EXP_POS ? toExponential(coeffToString(n3.c), e3) : toFixedPoint(coeffToString(n3.c), e3, "0");
        } else if (b3 === 10 && alphabetHasNormalDecimalDigits) {
          n3 = round(new BigNumber2(n3), DECIMAL_PLACES + e3 + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n3.c), n3.e, "0");
        } else {
          intCheck(b3, 2, ALPHABET.length, "Base");
          str = convertBase(toFixedPoint(coeffToString(n3.c), e3, "0"), 10, b3, s3, true);
        }
        if (s3 < 0 && n3.c[0])
          str = "-" + str;
      }
      return str;
    };
    P2.valueOf = P2.toJSON = function() {
      return valueOf(this);
    };
    P2._isBigNumber = true;
    P2[Symbol.toStringTag] = "BigNumber";
    P2[Symbol.for("nodejs.util.inspect.custom")] = P2.valueOf;
    if (configObject != null)
      BigNumber2.set(configObject);
    return BigNumber2;
  }
  function bitFloor(n3) {
    var i3 = n3 | 0;
    return n3 > 0 || n3 === i3 ? i3 : i3 - 1;
  }
  function coeffToString(a3) {
    var s3, z3, i3 = 1, j3 = a3.length, r3 = a3[0] + "";
    for (; i3 < j3; ) {
      s3 = a3[i3++] + "";
      z3 = LOG_BASE - s3.length;
      for (; z3--; s3 = "0" + s3)
        ;
      r3 += s3;
    }
    for (j3 = r3.length; r3.charCodeAt(--j3) === 48; )
      ;
    return r3.slice(0, j3 + 1 || 1);
  }
  function compare(x3, y3) {
    var a3, b3, xc = x3.c, yc = y3.c, i3 = x3.s, j3 = y3.s, k3 = x3.e, l3 = y3.e;
    if (!i3 || !j3)
      return null;
    a3 = xc && !xc[0];
    b3 = yc && !yc[0];
    if (a3 || b3)
      return a3 ? b3 ? 0 : -j3 : i3;
    if (i3 != j3)
      return i3;
    a3 = i3 < 0;
    b3 = k3 == l3;
    if (!xc || !yc)
      return b3 ? 0 : !xc ^ a3 ? 1 : -1;
    if (!b3)
      return k3 > l3 ^ a3 ? 1 : -1;
    j3 = (k3 = xc.length) < (l3 = yc.length) ? k3 : l3;
    for (i3 = 0; i3 < j3; i3++)
      if (xc[i3] != yc[i3])
        return xc[i3] > yc[i3] ^ a3 ? 1 : -1;
    return k3 == l3 ? 0 : k3 > l3 ^ a3 ? 1 : -1;
  }
  function intCheck(n3, min, max, name) {
    if (n3 < min || n3 > max || n3 !== mathfloor(n3)) {
      throw Error(bignumberError + (name || "Argument") + (typeof n3 == "number" ? n3 < min || n3 > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n3));
    }
  }
  function isOdd(n3) {
    var k3 = n3.c.length - 1;
    return bitFloor(n3.e / LOG_BASE) == k3 && n3.c[k3] % 2 != 0;
  }
  function toExponential(str, e3) {
    return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e3 < 0 ? "e" : "e+") + e3;
  }
  function toFixedPoint(str, e3, z3) {
    var len, zs;
    if (e3 < 0) {
      for (zs = z3 + "."; ++e3; zs += z3)
        ;
      str = zs + str;
    } else {
      len = str.length;
      if (++e3 > len) {
        for (zs = z3, e3 -= len; --e3; zs += z3)
          ;
        str += zs;
      } else if (e3 < len) {
        str = str.slice(0, e3) + "." + str.slice(e3);
      }
    }
    return str;
  }
  var BigNumber = clone();
  var bignumber_default = BigNumber;

  // src/searchbar/tokenSearch/helpers/async.ts
  var import_graphql_request2 = __toESM(require_dist());

  // src/searchbar/tokenSearch/helpers/graphqlClients.ts
  var import_graphql_request = __toESM(require_dist());

  // src/searchbar/tokenSearch/helpers/config.ts
  var romeTokenSyncUri = "https://romenet.prod.velox.global/v1/graphql";
  var maxHits = 500;

  // src/searchbar/tokenSearch/helpers/graphqlClients.ts
  var romePairsClient = new import_graphql_request.GraphQLClient(romeTokenSyncUri);

  // src/searchbar/tokenSearch/helpers/async.ts
  var getRomeSearchTokenQuery = (networks, isPair = false) => {
    let network;
    let pair_search = "";
    const networkDatasetLength = Math.round(maxHits / networks.length);
    let where = `{
    concat_ws:{_ilike:$searchText},             
    exchange:{_in:$exchanges}
  }`;
    if (isPair)
      where = `
      {
        _and:[
          {concat_ws:{_ilike:$filter1}},
          {concat_ws:{_ilike:$filter2}}
        ],        
        exchange:{_in:$exchanges}
      }
    `;
    for (network of networks) {
      pair_search += `
      ${network}:
        ${network}_pair_search(
          where:${where}, 
          limit:${networkDatasetLength}, 
          order_by:{ last_24hour_usd_volume:desc_nulls_last }
        ) 
        {
          id:pair_address
          exchange
          token0 {
            address
            symbol
            name
            decimals
            id:address
            image:primary_img_uri
          }
          token1 {
            address
            symbol
            name
            decimals
            id:address
            image:primary_img_uri
          }
          last_24hour_usd_volume
          latest_token0_usd_price
          latest_token1_usd_price
        }`;
    }
    let graphQl = import_graphql_request2.gql`query SearchTokens($searchText:String!,$exchanges:[String!]!){${pair_search}}`;
    if (isPair)
      graphQl = import_graphql_request2.gql`query SearchTokens($filter1:String!,$filter2:String!,$exchanges:[String!]!){${pair_search}}`;
    return graphQl;
  };
  var searchTokenAsync_Parameters = (searchText, searchExchanges) => {
    return {
      exchanges: [...searchExchanges],
      searchText
    };
  };
  var searchTokenAsync_searchString = (searchString) => {
    return searchString ? `%${searchString}%` : "%0x%";
  };
  var searchTokensAsync = async (searchString, searchNetworks, searchExchanges) => {
    let res;
    let isPair = false;
    const queries = searchString.split(" ");
    const searchText = searchTokenAsync_searchString(searchString);
    let parameters = searchTokenAsync_Parameters(searchText, searchExchanges);
    if (queries.length > 1) {
      parameters = {
        exchanges: [...searchExchanges],
        filter1: `%${queries[0]}%`,
        filter2: `%${queries[1]}%`
      };
      isPair = true;
    }
    const query = getRomeSearchTokenQuery(searchNetworks, isPair);
    try {
      res = await romePairsClient.request(query, parameters);
    } catch (e3) {
      throw new Error(`${stringify2(e3, Object.getOwnPropertyNames(e3))}, args:${stringify2({ parameters, query })}`);
    }
    const mappedPairs = Object.entries(res).map((network) => {
      network[1].map((result) => result.network = network[0]);
      return network[1];
    }).flat().filter((pair) => pair.token0 && pair.token1).map((pair) => {
      const tokenPrices = pair.latest_token0_usd_price && pair.latest_token1_usd_price ? {
        token0Price: new bignumber_default(pair.latest_token1_usd_price).dividedBy(pair.latest_token0_usd_price).toString(),
        token1Price: new bignumber_default(pair.latest_token0_usd_price).dividedBy(pair.latest_token1_usd_price).toString()
      } : {
        token0Price: 1,
        token1Price: 1
      };
      return __spreadValues(__spreadProps(__spreadValues({}, pair), {
        volumeUSD: pair.last_24hour_usd_volume
      }), tokenPrices);
    });
    return mappedPairs;
  };

  // src/searchbar/redux/tokenSearchSlice.ts
  var import_lodash = __toESM(require_lodash());

  // src/searchbar/config.tsx
  var config_default = {
    SEARCH_INPUT_LENGTH_MINIMUM: 2,
    SEARCH_ASYNC_DELAY: 300,
    SEARCH_ASYNC_DATASET_LENGTH_MAXIMUM: 500,
    IS_ENV_PRODUCTION: false,
    LOAD_LIMIT: 10
  };

  // src/searchbar/redux/tokenSearchSlice.ts
  var LOAD_LIMIT = Number(config_default.LOAD_LIMIT || 10);
  var allValueHandler = (networkMap, exchangeMap, networks) => {
    let returnedNetworkMap = networkMap;
    let returnedExchangeMap = exchangeMap;
    if (networkMap.length === 0 || networkMap.includes("All")) {
      returnedNetworkMap = (0, import_lodash.uniq)(networks.map((network) => network.id));
    }
    if (exchangeMap.length === 0 || exchangeMap.includes("All")) {
    }
    const exchanges = [];
    networks.forEach((network) => {
      if (returnedNetworkMap.includes(network.id)) {
        network.exchanges.forEach((exchange) => {
          exchanges.push(exchange.name);
        });
      }
    });
    returnedExchangeMap = exchanges;
    return [returnedNetworkMap, returnedExchangeMap];
  };
  var valueCleaner = (networkMap, exchangeMap) => {
    networkMap = Object.keys((0, import_lodash.omitBy)(networkMap, (b3) => !b3));
    exchangeMap = Object.keys((0, import_lodash.omitBy)(exchangeMap, (b3) => !b3));
    return [networkMap, exchangeMap];
  };
  var searchTokenPairs = createAsyncThunk("token/search", async (dataProp, thunkAPI) => {
    try {
      const { networkMap, exchangeMap } = thunkAPI.getState();
      const { searchString, networks } = dataProp;
      let processedNetworks;
      let processedExchanges;
      const pairSearchTimestamp = new Date().getTime();
      thunkAPI.dispatch(setPairSearchTimestamp(pairSearchTimestamp));
      [processedNetworks, processedExchanges] = valueCleaner(networkMap, exchangeMap);
      [processedNetworks, processedExchanges] = allValueHandler(processedNetworks, processedExchanges, networks);
      const data = await (0, import_async_retry.default)(() => searchTokensAsync(searchString, processedNetworks, processedExchanges), {
        retries: 1
      });
      return { data, pairSearchTimestamp };
    } catch (e3) {
      console.log("err searchTokenPairs", e3);
      throw new Error(stringify2(e3, Object.getOwnPropertyNames(e3)));
    }
  });
  var initialTimestamp = new Date().getTime();
  var initialState = {
    fetchError: null,
    isLoading: false,
    isSelecting: false,
    pairSearchTimestamp: initialTimestamp,
    searchText: "",
    selectedPair: void 0,
    serializedTradeEstimator: "",
    suggestions: [],
    suggestionRendered: [],
    page: 1,
    exchangeMap: {},
    networkMap: {},
    viewResult: false
  };
  var loadMoreItem = (state) => {
    state.suggestionRendered = state.suggestions.slice(0, state.page * LOAD_LIMIT);
    state.page += 1;
  };
  var tokenSearchSlice = createSlice({
    extraReducers: (builder) => {
      builder.addCase(searchTokenPairs.pending, (state) => {
        state.isLoading = true;
        state.fetchError = null;
      });
      builder.addCase(searchTokenPairs.fulfilled, (state, action) => {
        var _a;
        if (((_a = action.payload) == null ? void 0 : _a.pairSearchTimestamp) >= state.pairSearchTimestamp) {
          state.pairSearchTimestamp = action.payload.pairSearchTimestamp;
          const suggestions = action.payload.data;
          suggestions.sort((pair1, pair2) => pair2.volumeUSD - pair1.volumeUSD);
          state.suggestions = suggestions;
          state.isLoading = false;
          state.fetchError = null;
          loadMoreItem(state);
        }
      });
      builder.addCase(searchTokenPairs.rejected, (state) => {
        state.suggestions = [];
        state.isLoading = false;
        state.fetchError = "Something went wrong fetching token pair.";
      });
    },
    initialState,
    name: "tokenSearch",
    reducers: {
      resetSearch: (state) => {
        state.searchText = "";
        state.suggestions = [];
        state.isLoading = false;
        state.exchangeMap = {}, state.networkMap = {}, state.isSelecting = false;
        state.viewResult = false;
      },
      setViewResult: (state, action) => {
        state.viewResult = action.payload;
      },
      setPairSearchTimestamp: (state, action) => {
        state.pairSearchTimestamp = action.payload;
      },
      setSearchText: (state, action) => {
        state.searchText = action.payload;
      },
      startSelecting: (state) => {
        state.isSelecting = true;
      },
      stopSelecting: (state) => {
        state.isSelecting = false;
      },
      toggleSelecting: (state) => {
        state.isSelecting = !state.isSelecting;
      },
      setExchangeMap: (state, action) => {
        state.exchangeMap[action.payload.exchangeName] = action.payload.checked;
      },
      setExchangeMapAll: (state, action) => {
        let exchangeName;
        for (exchangeName of action.payload.exchangeNames) {
          if (action.payload.exchangeAll) {
            state.exchangeMap[exchangeName] = true;
          } else {
            delete state.exchangeMap[exchangeName];
          }
        }
      },
      setNetworkMap: (state, action) => {
        state.networkMap[action.payload.networkName] = action.payload.checked;
        if (!action.payload.checked) {
          action.payload.networks.forEach((network) => {
            if (network.id === action.payload.networkName) {
              network.exchanges.forEach((exhange) => {
                if (state.exchangeMap[exhange])
                  state.exchangeMap[exhange] = false;
              });
            } else
              return false;
          });
        }
      },
      setNetworkMapAll: (state, action) => {
        let networkName;
        for (networkName of action.payload.networkNames) {
          if (action.payload.networkAll) {
            state.networkMap[networkName] = true;
          } else {
            delete state.networkMap[networkName];
          }
        }
      },
      loadMore: (state) => {
        loadMoreItem(state);
      }
    }
  });
  var {
    setSearchText,
    startSelecting,
    stopSelecting,
    toggleSelecting,
    setExchangeMap,
    setExchangeMapAll,
    setNetworkMap,
    setNetworkMapAll,
    setViewResult,
    resetSearch,
    loadMore,
    setPairSearchTimestamp
  } = tokenSearchSlice.actions;
  var tokenSearchSlice_default = tokenSearchSlice.reducer;

  // src/searchbar/redux/store.ts
  var rootReducer = tokenSearchSlice.reducer;
  var store = configureStore({
    devTools: process.env.NODE_ENV !== "production",
    reducer: rootReducer
  });

  // src/searchbar/tokenSearch/index.tsx
  var import_react59 = __toESM(require_react());

  // node_modules/styled-components/dist/styled-components.esm.js
  var import_react_is2 = __toESM(require_react_is4());
  var import_react8 = __toESM(require_react());
  var import_shallowequal = __toESM(require_shallowequal());

  // node_modules/@emotion/stylis/dist/stylis.esm.js
  function stylis_min(W3) {
    function M3(d3, c3, e3, h2, a3) {
      for (var m3 = 0, b3 = 0, v3 = 0, n3 = 0, q3, g3, x3 = 0, K2 = 0, k3, u3 = k3 = q3 = 0, l3 = 0, r3 = 0, I3 = 0, t3 = 0, B4 = e3.length, J2 = B4 - 1, y3, f2 = "", p2 = "", F4 = "", G4 = "", C2; l3 < B4; ) {
        g3 = e3.charCodeAt(l3);
        l3 === J2 && b3 + n3 + v3 + m3 !== 0 && (b3 !== 0 && (g3 = b3 === 47 ? 10 : 47), n3 = v3 = m3 = 0, B4++, J2++);
        if (b3 + n3 + v3 + m3 === 0) {
          if (l3 === J2 && (0 < r3 && (f2 = f2.replace(N3, "")), 0 < f2.trim().length)) {
            switch (g3) {
              case 32:
              case 9:
              case 59:
              case 13:
              case 10:
                break;
              default:
                f2 += e3.charAt(l3);
            }
            g3 = 59;
          }
          switch (g3) {
            case 123:
              f2 = f2.trim();
              q3 = f2.charCodeAt(0);
              k3 = 1;
              for (t3 = ++l3; l3 < B4; ) {
                switch (g3 = e3.charCodeAt(l3)) {
                  case 123:
                    k3++;
                    break;
                  case 125:
                    k3--;
                    break;
                  case 47:
                    switch (g3 = e3.charCodeAt(l3 + 1)) {
                      case 42:
                      case 47:
                        a: {
                          for (u3 = l3 + 1; u3 < J2; ++u3) {
                            switch (e3.charCodeAt(u3)) {
                              case 47:
                                if (g3 === 42 && e3.charCodeAt(u3 - 1) === 42 && l3 + 2 !== u3) {
                                  l3 = u3 + 1;
                                  break a;
                                }
                                break;
                              case 10:
                                if (g3 === 47) {
                                  l3 = u3 + 1;
                                  break a;
                                }
                            }
                          }
                          l3 = u3;
                        }
                    }
                    break;
                  case 91:
                    g3++;
                  case 40:
                    g3++;
                  case 34:
                  case 39:
                    for (; l3++ < J2 && e3.charCodeAt(l3) !== g3; ) {
                    }
                }
                if (k3 === 0)
                  break;
                l3++;
              }
              k3 = e3.substring(t3, l3);
              q3 === 0 && (q3 = (f2 = f2.replace(ca, "").trim()).charCodeAt(0));
              switch (q3) {
                case 64:
                  0 < r3 && (f2 = f2.replace(N3, ""));
                  g3 = f2.charCodeAt(1);
                  switch (g3) {
                    case 100:
                    case 109:
                    case 115:
                    case 45:
                      r3 = c3;
                      break;
                    default:
                      r3 = O3;
                  }
                  k3 = M3(c3, r3, k3, g3, a3 + 1);
                  t3 = k3.length;
                  0 < A2 && (r3 = X3(O3, f2, I3), C2 = H3(3, k3, r3, c3, D3, z3, t3, g3, a3, h2), f2 = r3.join(""), C2 !== void 0 && (t3 = (k3 = C2.trim()).length) === 0 && (g3 = 0, k3 = ""));
                  if (0 < t3)
                    switch (g3) {
                      case 115:
                        f2 = f2.replace(da, ea);
                      case 100:
                      case 109:
                      case 45:
                        k3 = f2 + "{" + k3 + "}";
                        break;
                      case 107:
                        f2 = f2.replace(fa, "$1 $2");
                        k3 = f2 + "{" + k3 + "}";
                        k3 = w3 === 1 || w3 === 2 && L3("@" + k3, 3) ? "@-webkit-" + k3 + "@" + k3 : "@" + k3;
                        break;
                      default:
                        k3 = f2 + k3, h2 === 112 && (k3 = (p2 += k3, ""));
                    }
                  else
                    k3 = "";
                  break;
                default:
                  k3 = M3(c3, X3(c3, f2, I3), k3, h2, a3 + 1);
              }
              F4 += k3;
              k3 = I3 = r3 = u3 = q3 = 0;
              f2 = "";
              g3 = e3.charCodeAt(++l3);
              break;
            case 125:
            case 59:
              f2 = (0 < r3 ? f2.replace(N3, "") : f2).trim();
              if (1 < (t3 = f2.length))
                switch (u3 === 0 && (q3 = f2.charCodeAt(0), q3 === 45 || 96 < q3 && 123 > q3) && (t3 = (f2 = f2.replace(" ", ":")).length), 0 < A2 && (C2 = H3(1, f2, c3, d3, D3, z3, p2.length, h2, a3, h2)) !== void 0 && (t3 = (f2 = C2.trim()).length) === 0 && (f2 = "\0\0"), q3 = f2.charCodeAt(0), g3 = f2.charCodeAt(1), q3) {
                  case 0:
                    break;
                  case 64:
                    if (g3 === 105 || g3 === 99) {
                      G4 += f2 + e3.charAt(l3);
                      break;
                    }
                  default:
                    f2.charCodeAt(t3 - 1) !== 58 && (p2 += P2(f2, q3, g3, f2.charCodeAt(2)));
                }
              I3 = r3 = u3 = q3 = 0;
              f2 = "";
              g3 = e3.charCodeAt(++l3);
          }
        }
        switch (g3) {
          case 13:
          case 10:
            b3 === 47 ? b3 = 0 : 1 + q3 === 0 && h2 !== 107 && 0 < f2.length && (r3 = 1, f2 += "\0");
            0 < A2 * Y3 && H3(0, f2, c3, d3, D3, z3, p2.length, h2, a3, h2);
            z3 = 1;
            D3++;
            break;
          case 59:
          case 125:
            if (b3 + n3 + v3 + m3 === 0) {
              z3++;
              break;
            }
          default:
            z3++;
            y3 = e3.charAt(l3);
            switch (g3) {
              case 9:
              case 32:
                if (n3 + m3 + b3 === 0)
                  switch (x3) {
                    case 44:
                    case 58:
                    case 9:
                    case 32:
                      y3 = "";
                      break;
                    default:
                      g3 !== 32 && (y3 = " ");
                  }
                break;
              case 0:
                y3 = "\\0";
                break;
              case 12:
                y3 = "\\f";
                break;
              case 11:
                y3 = "\\v";
                break;
              case 38:
                n3 + b3 + m3 === 0 && (r3 = I3 = 1, y3 = "\f" + y3);
                break;
              case 108:
                if (n3 + b3 + m3 + E3 === 0 && 0 < u3)
                  switch (l3 - u3) {
                    case 2:
                      x3 === 112 && e3.charCodeAt(l3 - 3) === 58 && (E3 = x3);
                    case 8:
                      K2 === 111 && (E3 = K2);
                  }
                break;
              case 58:
                n3 + b3 + m3 === 0 && (u3 = l3);
                break;
              case 44:
                b3 + v3 + n3 + m3 === 0 && (r3 = 1, y3 += "\r");
                break;
              case 34:
              case 39:
                b3 === 0 && (n3 = n3 === g3 ? 0 : n3 === 0 ? g3 : n3);
                break;
              case 91:
                n3 + b3 + v3 === 0 && m3++;
                break;
              case 93:
                n3 + b3 + v3 === 0 && m3--;
                break;
              case 41:
                n3 + b3 + m3 === 0 && v3--;
                break;
              case 40:
                if (n3 + b3 + m3 === 0) {
                  if (q3 === 0)
                    switch (2 * x3 + 3 * K2) {
                      case 533:
                        break;
                      default:
                        q3 = 1;
                    }
                  v3++;
                }
                break;
              case 64:
                b3 + v3 + n3 + m3 + u3 + k3 === 0 && (k3 = 1);
                break;
              case 42:
              case 47:
                if (!(0 < n3 + m3 + v3))
                  switch (b3) {
                    case 0:
                      switch (2 * g3 + 3 * e3.charCodeAt(l3 + 1)) {
                        case 235:
                          b3 = 47;
                          break;
                        case 220:
                          t3 = l3, b3 = 42;
                      }
                      break;
                    case 42:
                      g3 === 47 && x3 === 42 && t3 + 2 !== l3 && (e3.charCodeAt(t3 + 2) === 33 && (p2 += e3.substring(t3, l3 + 1)), y3 = "", b3 = 0);
                  }
            }
            b3 === 0 && (f2 += y3);
        }
        K2 = x3;
        x3 = g3;
        l3++;
      }
      t3 = p2.length;
      if (0 < t3) {
        r3 = c3;
        if (0 < A2 && (C2 = H3(2, p2, r3, d3, D3, z3, t3, h2, a3, h2), C2 !== void 0 && (p2 = C2).length === 0))
          return G4 + p2 + F4;
        p2 = r3.join(",") + "{" + p2 + "}";
        if (w3 * E3 !== 0) {
          w3 !== 2 || L3(p2, 2) || (E3 = 0);
          switch (E3) {
            case 111:
              p2 = p2.replace(ha, ":-moz-$1") + p2;
              break;
            case 112:
              p2 = p2.replace(Q3, "::-webkit-input-$1") + p2.replace(Q3, "::-moz-$1") + p2.replace(Q3, ":-ms-input-$1") + p2;
          }
          E3 = 0;
        }
      }
      return G4 + p2 + F4;
    }
    function X3(d3, c3, e3) {
      var h2 = c3.trim().split(ia);
      c3 = h2;
      var a3 = h2.length, m3 = d3.length;
      switch (m3) {
        case 0:
        case 1:
          var b3 = 0;
          for (d3 = m3 === 0 ? "" : d3[0] + " "; b3 < a3; ++b3) {
            c3[b3] = Z3(d3, c3[b3], e3).trim();
          }
          break;
        default:
          var v3 = b3 = 0;
          for (c3 = []; b3 < a3; ++b3) {
            for (var n3 = 0; n3 < m3; ++n3) {
              c3[v3++] = Z3(d3[n3] + " ", h2[b3], e3).trim();
            }
          }
      }
      return c3;
    }
    function Z3(d3, c3, e3) {
      var h2 = c3.charCodeAt(0);
      33 > h2 && (h2 = (c3 = c3.trim()).charCodeAt(0));
      switch (h2) {
        case 38:
          return c3.replace(F3, "$1" + d3.trim());
        case 58:
          return d3.trim() + c3.replace(F3, "$1" + d3.trim());
        default:
          if (0 < 1 * e3 && 0 < c3.indexOf("\f"))
            return c3.replace(F3, (d3.charCodeAt(0) === 58 ? "" : "$1") + d3.trim());
      }
      return d3 + c3;
    }
    function P2(d3, c3, e3, h2) {
      var a3 = d3 + ";", m3 = 2 * c3 + 3 * e3 + 4 * h2;
      if (m3 === 944) {
        d3 = a3.indexOf(":", 9) + 1;
        var b3 = a3.substring(d3, a3.length - 1).trim();
        b3 = a3.substring(0, d3).trim() + b3 + ";";
        return w3 === 1 || w3 === 2 && L3(b3, 1) ? "-webkit-" + b3 + b3 : b3;
      }
      if (w3 === 0 || w3 === 2 && !L3(a3, 1))
        return a3;
      switch (m3) {
        case 1015:
          return a3.charCodeAt(10) === 97 ? "-webkit-" + a3 + a3 : a3;
        case 951:
          return a3.charCodeAt(3) === 116 ? "-webkit-" + a3 + a3 : a3;
        case 963:
          return a3.charCodeAt(5) === 110 ? "-webkit-" + a3 + a3 : a3;
        case 1009:
          if (a3.charCodeAt(4) !== 100)
            break;
        case 969:
        case 942:
          return "-webkit-" + a3 + a3;
        case 978:
          return "-webkit-" + a3 + "-moz-" + a3 + a3;
        case 1019:
        case 983:
          return "-webkit-" + a3 + "-moz-" + a3 + "-ms-" + a3 + a3;
        case 883:
          if (a3.charCodeAt(8) === 45)
            return "-webkit-" + a3 + a3;
          if (0 < a3.indexOf("image-set(", 11))
            return a3.replace(ja, "$1-webkit-$2") + a3;
          break;
        case 932:
          if (a3.charCodeAt(4) === 45)
            switch (a3.charCodeAt(5)) {
              case 103:
                return "-webkit-box-" + a3.replace("-grow", "") + "-webkit-" + a3 + "-ms-" + a3.replace("grow", "positive") + a3;
              case 115:
                return "-webkit-" + a3 + "-ms-" + a3.replace("shrink", "negative") + a3;
              case 98:
                return "-webkit-" + a3 + "-ms-" + a3.replace("basis", "preferred-size") + a3;
            }
          return "-webkit-" + a3 + "-ms-" + a3 + a3;
        case 964:
          return "-webkit-" + a3 + "-ms-flex-" + a3 + a3;
        case 1023:
          if (a3.charCodeAt(8) !== 99)
            break;
          b3 = a3.substring(a3.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
          return "-webkit-box-pack" + b3 + "-webkit-" + a3 + "-ms-flex-pack" + b3 + a3;
        case 1005:
          return ka.test(a3) ? a3.replace(aa, ":-webkit-") + a3.replace(aa, ":-moz-") + a3 : a3;
        case 1e3:
          b3 = a3.substring(13).trim();
          c3 = b3.indexOf("-") + 1;
          switch (b3.charCodeAt(0) + b3.charCodeAt(c3)) {
            case 226:
              b3 = a3.replace(G3, "tb");
              break;
            case 232:
              b3 = a3.replace(G3, "tb-rl");
              break;
            case 220:
              b3 = a3.replace(G3, "lr");
              break;
            default:
              return a3;
          }
          return "-webkit-" + a3 + "-ms-" + b3 + a3;
        case 1017:
          if (a3.indexOf("sticky", 9) === -1)
            break;
        case 975:
          c3 = (a3 = d3).length - 10;
          b3 = (a3.charCodeAt(c3) === 33 ? a3.substring(0, c3) : a3).substring(d3.indexOf(":", 7) + 1).trim();
          switch (m3 = b3.charCodeAt(0) + (b3.charCodeAt(7) | 0)) {
            case 203:
              if (111 > b3.charCodeAt(8))
                break;
            case 115:
              a3 = a3.replace(b3, "-webkit-" + b3) + ";" + a3;
              break;
            case 207:
            case 102:
              a3 = a3.replace(b3, "-webkit-" + (102 < m3 ? "inline-" : "") + "box") + ";" + a3.replace(b3, "-webkit-" + b3) + ";" + a3.replace(b3, "-ms-" + b3 + "box") + ";" + a3;
          }
          return a3 + ";";
        case 938:
          if (a3.charCodeAt(5) === 45)
            switch (a3.charCodeAt(6)) {
              case 105:
                return b3 = a3.replace("-items", ""), "-webkit-" + a3 + "-webkit-box-" + b3 + "-ms-flex-" + b3 + a3;
              case 115:
                return "-webkit-" + a3 + "-ms-flex-item-" + a3.replace(ba, "") + a3;
              default:
                return "-webkit-" + a3 + "-ms-flex-line-pack" + a3.replace("align-content", "").replace(ba, "") + a3;
            }
          break;
        case 973:
        case 989:
          if (a3.charCodeAt(3) !== 45 || a3.charCodeAt(4) === 122)
            break;
        case 931:
        case 953:
          if (la.test(d3) === true)
            return (b3 = d3.substring(d3.indexOf(":") + 1)).charCodeAt(0) === 115 ? P2(d3.replace("stretch", "fill-available"), c3, e3, h2).replace(":fill-available", ":stretch") : a3.replace(b3, "-webkit-" + b3) + a3.replace(b3, "-moz-" + b3.replace("fill-", "")) + a3;
          break;
        case 962:
          if (a3 = "-webkit-" + a3 + (a3.charCodeAt(5) === 102 ? "-ms-" + a3 : "") + a3, e3 + h2 === 211 && a3.charCodeAt(13) === 105 && 0 < a3.indexOf("transform", 10))
            return a3.substring(0, a3.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a3;
      }
      return a3;
    }
    function L3(d3, c3) {
      var e3 = d3.indexOf(c3 === 1 ? ":" : "{"), h2 = d3.substring(0, c3 !== 3 ? e3 : 10);
      e3 = d3.substring(e3 + 1, d3.length - 1);
      return R3(c3 !== 2 ? h2 : h2.replace(na, "$1"), e3, c3);
    }
    function ea(d3, c3) {
      var e3 = P2(c3, c3.charCodeAt(0), c3.charCodeAt(1), c3.charCodeAt(2));
      return e3 !== c3 + ";" ? e3.replace(oa, " or ($1)").substring(4) : "(" + c3 + ")";
    }
    function H3(d3, c3, e3, h2, a3, m3, b3, v3, n3, q3) {
      for (var g3 = 0, x3 = c3, w4; g3 < A2; ++g3) {
        switch (w4 = S3[g3].call(B3, d3, x3, e3, h2, a3, m3, b3, v3, n3, q3)) {
          case void 0:
          case false:
          case true:
          case null:
            break;
          default:
            x3 = w4;
        }
      }
      if (x3 !== c3)
        return x3;
    }
    function T2(d3) {
      switch (d3) {
        case void 0:
        case null:
          A2 = S3.length = 0;
          break;
        default:
          if (typeof d3 === "function")
            S3[A2++] = d3;
          else if (typeof d3 === "object")
            for (var c3 = 0, e3 = d3.length; c3 < e3; ++c3) {
              T2(d3[c3]);
            }
          else
            Y3 = !!d3 | 0;
      }
      return T2;
    }
    function U3(d3) {
      d3 = d3.prefix;
      d3 !== void 0 && (R3 = null, d3 ? typeof d3 !== "function" ? w3 = 1 : (w3 = 2, R3 = d3) : w3 = 0);
      return U3;
    }
    function B3(d3, c3) {
      var e3 = d3;
      33 > e3.charCodeAt(0) && (e3 = e3.trim());
      V2 = e3;
      e3 = [V2];
      if (0 < A2) {
        var h2 = H3(-1, c3, e3, e3, D3, z3, 0, 0, 0, 0);
        h2 !== void 0 && typeof h2 === "string" && (c3 = h2);
      }
      var a3 = M3(O3, e3, c3, 0, 0);
      0 < A2 && (h2 = H3(-2, a3, e3, e3, D3, z3, a3.length, 0, 0, 0), h2 !== void 0 && (a3 = h2));
      V2 = "";
      E3 = 0;
      z3 = D3 = 1;
      return a3;
    }
    var ca = /^\0+/g, N3 = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F3 = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q3 = /::(place)/g, ha = /:(read-only)/g, G3 = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z3 = 1, D3 = 1, E3 = 0, w3 = 1, O3 = [], S3 = [], A2 = 0, R3 = null, Y3 = 0, V2 = "";
    B3.use = T2;
    B3.set = U3;
    W3 !== void 0 && U3(W3);
    return B3;
  }
  var stylis_esm_default = stylis_min;

  // node_modules/@emotion/unitless/dist/unitless.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_esm_default = unitlessKeys;

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn2) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn2(arg);
      return cache[arg];
    };
  }
  var emotion_memoize_esm_default = memoize;

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ emotion_memoize_esm_default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  });
  var emotion_is_prop_valid_esm_default = isPropValid;

  // node_modules/styled-components/dist/styled-components.esm.js
  var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
  function y2() {
    return (y2 = Object.assign || function(e3) {
      for (var t3 = 1; t3 < arguments.length; t3++) {
        var n3 = arguments[t3];
        for (var r3 in n3)
          Object.prototype.hasOwnProperty.call(n3, r3) && (e3[r3] = n3[r3]);
      }
      return e3;
    }).apply(this, arguments);
  }
  var v2 = function(e3, t3) {
    for (var n3 = [e3[0]], r3 = 0, o3 = t3.length; r3 < o3; r3 += 1)
      n3.push(t3[r3], e3[r3 + 1]);
    return n3;
  };
  var g2 = function(t3) {
    return t3 !== null && typeof t3 == "object" && (t3.toString ? t3.toString() : Object.prototype.toString.call(t3)) === "[object Object]" && !(0, import_react_is2.typeOf)(t3);
  };
  var S2 = Object.freeze([]);
  var w2 = Object.freeze({});
  function E2(e3) {
    return typeof e3 == "function";
  }
  function b2(e3) {
    return process.env.NODE_ENV !== "production" && typeof e3 == "string" && e3 || e3.displayName || e3.name || "Component";
  }
  function _2(e3) {
    return e3 && typeof e3.styledComponentId == "string";
  }
  var N2 = typeof process != "undefined" && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
  var C = typeof window != "undefined" && "HTMLElement" in window;
  var I2 = Boolean(typeof SC_DISABLE_SPEEDY == "boolean" ? SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env.REACT_APP_SC_DISABLE_SPEEDY !== void 0 && process.env.REACT_APP_SC_DISABLE_SPEEDY !== "" ? process.env.REACT_APP_SC_DISABLE_SPEEDY !== "false" && process.env.REACT_APP_SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env.SC_DISABLE_SPEEDY !== void 0 && process.env.SC_DISABLE_SPEEDY !== "" ? process.env.SC_DISABLE_SPEEDY !== "false" && process.env.SC_DISABLE_SPEEDY : process.env.NODE_ENV !== "production");
  var O2 = process.env.NODE_ENV !== "production" ? { 1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n" } : {};
  function R2() {
    for (var e3 = arguments.length <= 0 ? void 0 : arguments[0], t3 = [], n3 = 1, r3 = arguments.length; n3 < r3; n3 += 1)
      t3.push(n3 < 0 || arguments.length <= n3 ? void 0 : arguments[n3]);
    return t3.forEach(function(t4) {
      e3 = e3.replace(/%[a-z]/, t4);
    }), e3;
  }
  function D2(e3) {
    for (var t3 = arguments.length, n3 = new Array(t3 > 1 ? t3 - 1 : 0), r3 = 1; r3 < t3; r3++)
      n3[r3 - 1] = arguments[r3];
    throw process.env.NODE_ENV === "production" ? new Error("An error occurred. See https://git.io/JUIaE#" + e3 + " for more information." + (n3.length > 0 ? " Args: " + n3.join(", ") : "")) : new Error(R2.apply(void 0, [O2[e3]].concat(n3)).trim());
  }
  var j2 = function() {
    function e3(e4) {
      this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e4;
    }
    var t3 = e3.prototype;
    return t3.indexOfGroup = function(e4) {
      for (var t4 = 0, n3 = 0; n3 < e4; n3++)
        t4 += this.groupSizes[n3];
      return t4;
    }, t3.insertRules = function(e4, t4) {
      if (e4 >= this.groupSizes.length) {
        for (var n3 = this.groupSizes, r3 = n3.length, o3 = r3; e4 >= o3; )
          (o3 <<= 1) < 0 && D2(16, "" + e4);
        this.groupSizes = new Uint32Array(o3), this.groupSizes.set(n3), this.length = o3;
        for (var s3 = r3; s3 < o3; s3++)
          this.groupSizes[s3] = 0;
      }
      for (var i3 = this.indexOfGroup(e4 + 1), a3 = 0, c3 = t4.length; a3 < c3; a3++)
        this.tag.insertRule(i3, t4[a3]) && (this.groupSizes[e4]++, i3++);
    }, t3.clearGroup = function(e4) {
      if (e4 < this.length) {
        var t4 = this.groupSizes[e4], n3 = this.indexOfGroup(e4), r3 = n3 + t4;
        this.groupSizes[e4] = 0;
        for (var o3 = n3; o3 < r3; o3++)
          this.tag.deleteRule(n3);
      }
    }, t3.getGroup = function(e4) {
      var t4 = "";
      if (e4 >= this.length || this.groupSizes[e4] === 0)
        return t4;
      for (var n3 = this.groupSizes[e4], r3 = this.indexOfGroup(e4), o3 = r3 + n3, s3 = r3; s3 < o3; s3++)
        t4 += this.tag.getRule(s3) + "/*!sc*/\n";
      return t4;
    }, e3;
  }();
  var T = /* @__PURE__ */ new Map();
  var x2 = /* @__PURE__ */ new Map();
  var k2 = 1;
  var V = function(e3) {
    if (T.has(e3))
      return T.get(e3);
    for (; x2.has(k2); )
      k2++;
    var t3 = k2++;
    return process.env.NODE_ENV !== "production" && ((0 | t3) < 0 || t3 > 1 << 30) && D2(16, "" + t3), T.set(e3, t3), x2.set(t3, e3), t3;
  };
  var z2 = function(e3) {
    return x2.get(e3);
  };
  var B2 = function(e3, t3) {
    t3 >= k2 && (k2 = t3 + 1), T.set(e3, t3), x2.set(t3, e3);
  };
  var M2 = "style[" + N2 + '][data-styled-version="5.3.5"]';
  var G2 = new RegExp("^" + N2 + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
  var L2 = function(e3, t3, n3) {
    for (var r3, o3 = n3.split(","), s3 = 0, i3 = o3.length; s3 < i3; s3++)
      (r3 = o3[s3]) && e3.registerName(t3, r3);
  };
  var F2 = function(e3, t3) {
    for (var n3 = (t3.textContent || "").split("/*!sc*/\n"), r3 = [], o3 = 0, s3 = n3.length; o3 < s3; o3++) {
      var i3 = n3[o3].trim();
      if (i3) {
        var a3 = i3.match(G2);
        if (a3) {
          var c3 = 0 | parseInt(a3[1], 10), u3 = a3[2];
          c3 !== 0 && (B2(u3, c3), L2(e3, u3, a3[3]), e3.getTag().insertRules(c3, r3)), r3.length = 0;
        } else
          r3.push(i3);
      }
    }
  };
  var Y2 = function() {
    return typeof window != "undefined" && window.__webpack_nonce__ !== void 0 ? window.__webpack_nonce__ : null;
  };
  var q2 = function(e3) {
    var t3 = document.head, n3 = e3 || t3, r3 = document.createElement("style"), o3 = function(e4) {
      for (var t4 = e4.childNodes, n4 = t4.length; n4 >= 0; n4--) {
        var r4 = t4[n4];
        if (r4 && r4.nodeType === 1 && r4.hasAttribute(N2))
          return r4;
      }
    }(n3), s3 = o3 !== void 0 ? o3.nextSibling : null;
    r3.setAttribute(N2, "active"), r3.setAttribute("data-styled-version", "5.3.5");
    var i3 = Y2();
    return i3 && r3.setAttribute("nonce", i3), n3.insertBefore(r3, s3), r3;
  };
  var H2 = function() {
    function e3(e4) {
      var t4 = this.element = q2(e4);
      t4.appendChild(document.createTextNode("")), this.sheet = function(e5) {
        if (e5.sheet)
          return e5.sheet;
        for (var t5 = document.styleSheets, n3 = 0, r3 = t5.length; n3 < r3; n3++) {
          var o3 = t5[n3];
          if (o3.ownerNode === e5)
            return o3;
        }
        D2(17);
      }(t4), this.length = 0;
    }
    var t3 = e3.prototype;
    return t3.insertRule = function(e4, t4) {
      try {
        return this.sheet.insertRule(t4, e4), this.length++, true;
      } catch (e5) {
        return false;
      }
    }, t3.deleteRule = function(e4) {
      this.sheet.deleteRule(e4), this.length--;
    }, t3.getRule = function(e4) {
      var t4 = this.sheet.cssRules[e4];
      return t4 !== void 0 && typeof t4.cssText == "string" ? t4.cssText : "";
    }, e3;
  }();
  var $ = function() {
    function e3(e4) {
      var t4 = this.element = q2(e4);
      this.nodes = t4.childNodes, this.length = 0;
    }
    var t3 = e3.prototype;
    return t3.insertRule = function(e4, t4) {
      if (e4 <= this.length && e4 >= 0) {
        var n3 = document.createTextNode(t4), r3 = this.nodes[e4];
        return this.element.insertBefore(n3, r3 || null), this.length++, true;
      }
      return false;
    }, t3.deleteRule = function(e4) {
      this.element.removeChild(this.nodes[e4]), this.length--;
    }, t3.getRule = function(e4) {
      return e4 < this.length ? this.nodes[e4].textContent : "";
    }, e3;
  }();
  var W2 = function() {
    function e3(e4) {
      this.rules = [], this.length = 0;
    }
    var t3 = e3.prototype;
    return t3.insertRule = function(e4, t4) {
      return e4 <= this.length && (this.rules.splice(e4, 0, t4), this.length++, true);
    }, t3.deleteRule = function(e4) {
      this.rules.splice(e4, 1), this.length--;
    }, t3.getRule = function(e4) {
      return e4 < this.length ? this.rules[e4] : "";
    }, e3;
  }();
  var U2 = C;
  var J = { isServer: !C, useCSSOMInjection: !I2 };
  var X2 = function() {
    function e3(e4, t4, n3) {
      e4 === void 0 && (e4 = w2), t4 === void 0 && (t4 = {}), this.options = y2({}, J, {}, e4), this.gs = t4, this.names = new Map(n3), this.server = !!e4.isServer, !this.server && C && U2 && (U2 = false, function(e5) {
        for (var t5 = document.querySelectorAll(M2), n4 = 0, r3 = t5.length; n4 < r3; n4++) {
          var o3 = t5[n4];
          o3 && o3.getAttribute(N2) !== "active" && (F2(e5, o3), o3.parentNode && o3.parentNode.removeChild(o3));
        }
      }(this));
    }
    e3.registerId = function(e4) {
      return V(e4);
    };
    var t3 = e3.prototype;
    return t3.reconstructWithOptions = function(t4, n3) {
      return n3 === void 0 && (n3 = true), new e3(y2({}, this.options, {}, t4), this.gs, n3 && this.names || void 0);
    }, t3.allocateGSInstance = function(e4) {
      return this.gs[e4] = (this.gs[e4] || 0) + 1;
    }, t3.getTag = function() {
      return this.tag || (this.tag = (n3 = (t4 = this.options).isServer, r3 = t4.useCSSOMInjection, o3 = t4.target, e4 = n3 ? new W2(o3) : r3 ? new H2(o3) : new $(o3), new j2(e4)));
      var e4, t4, n3, r3, o3;
    }, t3.hasNameForId = function(e4, t4) {
      return this.names.has(e4) && this.names.get(e4).has(t4);
    }, t3.registerName = function(e4, t4) {
      if (V(e4), this.names.has(e4))
        this.names.get(e4).add(t4);
      else {
        var n3 = /* @__PURE__ */ new Set();
        n3.add(t4), this.names.set(e4, n3);
      }
    }, t3.insertRules = function(e4, t4, n3) {
      this.registerName(e4, t4), this.getTag().insertRules(V(e4), n3);
    }, t3.clearNames = function(e4) {
      this.names.has(e4) && this.names.get(e4).clear();
    }, t3.clearRules = function(e4) {
      this.getTag().clearGroup(V(e4)), this.clearNames(e4);
    }, t3.clearTag = function() {
      this.tag = void 0;
    }, t3.toString = function() {
      return function(e4) {
        for (var t4 = e4.getTag(), n3 = t4.length, r3 = "", o3 = 0; o3 < n3; o3++) {
          var s3 = z2(o3);
          if (s3 !== void 0) {
            var i3 = e4.names.get(s3), a3 = t4.getGroup(o3);
            if (i3 && a3 && i3.size) {
              var c3 = N2 + ".g" + o3 + '[id="' + s3 + '"]', u3 = "";
              i3 !== void 0 && i3.forEach(function(e5) {
                e5.length > 0 && (u3 += e5 + ",");
              }), r3 += "" + a3 + c3 + '{content:"' + u3 + '"}/*!sc*/\n';
            }
          }
        }
        return r3;
      }(this);
    }, e3;
  }();
  var Z2 = /(a)(d)/gi;
  var K = function(e3) {
    return String.fromCharCode(e3 + (e3 > 25 ? 39 : 97));
  };
  function Q2(e3) {
    var t3, n3 = "";
    for (t3 = Math.abs(e3); t3 > 52; t3 = t3 / 52 | 0)
      n3 = K(t3 % 52) + n3;
    return (K(t3 % 52) + n3).replace(Z2, "$1-$2");
  }
  var ee = function(e3, t3) {
    for (var n3 = t3.length; n3; )
      e3 = 33 * e3 ^ t3.charCodeAt(--n3);
    return e3;
  };
  var te = function(e3) {
    return ee(5381, e3);
  };
  function ne(e3) {
    for (var t3 = 0; t3 < e3.length; t3 += 1) {
      var n3 = e3[t3];
      if (E2(n3) && !_2(n3))
        return false;
    }
    return true;
  }
  var re = te("5.3.5");
  var oe = function() {
    function e3(e4, t3, n3) {
      this.rules = e4, this.staticRulesId = "", this.isStatic = process.env.NODE_ENV === "production" && (n3 === void 0 || n3.isStatic) && ne(e4), this.componentId = t3, this.baseHash = ee(re, t3), this.baseStyle = n3, X2.registerId(t3);
    }
    return e3.prototype.generateAndInjectStyles = function(e4, t3, n3) {
      var r3 = this.componentId, o3 = [];
      if (this.baseStyle && o3.push(this.baseStyle.generateAndInjectStyles(e4, t3, n3)), this.isStatic && !n3.hash)
        if (this.staticRulesId && t3.hasNameForId(r3, this.staticRulesId))
          o3.push(this.staticRulesId);
        else {
          var s3 = _e(this.rules, e4, t3, n3).join(""), i3 = Q2(ee(this.baseHash, s3) >>> 0);
          if (!t3.hasNameForId(r3, i3)) {
            var a3 = n3(s3, "." + i3, void 0, r3);
            t3.insertRules(r3, i3, a3);
          }
          o3.push(i3), this.staticRulesId = i3;
        }
      else {
        for (var c3 = this.rules.length, u3 = ee(this.baseHash, n3.hash), l3 = "", d3 = 0; d3 < c3; d3++) {
          var h2 = this.rules[d3];
          if (typeof h2 == "string")
            l3 += h2, process.env.NODE_ENV !== "production" && (u3 = ee(u3, h2 + d3));
          else if (h2) {
            var p2 = _e(h2, e4, t3, n3), f2 = Array.isArray(p2) ? p2.join("") : p2;
            u3 = ee(u3, f2 + d3), l3 += f2;
          }
        }
        if (l3) {
          var m3 = Q2(u3 >>> 0);
          if (!t3.hasNameForId(r3, m3)) {
            var y3 = n3(l3, "." + m3, void 0, r3);
            t3.insertRules(r3, m3, y3);
          }
          o3.push(m3);
        }
      }
      return o3.join(" ");
    }, e3;
  }();
  var se = /^\s*\/\/.*$/gm;
  var ie = [":", "[", ".", "#"];
  function ae(e3) {
    var t3, n3, r3, o3, s3 = e3 === void 0 ? w2 : e3, i3 = s3.options, a3 = i3 === void 0 ? w2 : i3, c3 = s3.plugins, u3 = c3 === void 0 ? S2 : c3, l3 = new stylis_esm_default(a3), d3 = [], p2 = function(e4) {
      function t4(t5) {
        if (t5)
          try {
            e4(t5 + "}");
          } catch (e5) {
          }
      }
      return function(n4, r4, o4, s4, i4, a4, c4, u4, l4, d4) {
        switch (n4) {
          case 1:
            if (l4 === 0 && r4.charCodeAt(0) === 64)
              return e4(r4 + ";"), "";
            break;
          case 2:
            if (u4 === 0)
              return r4 + "/*|*/";
            break;
          case 3:
            switch (u4) {
              case 102:
              case 112:
                return e4(o4[0] + r4), "";
              default:
                return r4 + (d4 === 0 ? "/*|*/" : "");
            }
          case -2:
            r4.split("/*|*/}").forEach(t4);
        }
      };
    }(function(e4) {
      d3.push(e4);
    }), f2 = function(e4, r4, s4) {
      return r4 === 0 && ie.indexOf(s4[n3.length]) !== -1 || s4.match(o3) ? e4 : "." + t3;
    };
    function m3(e4, s4, i4, a4) {
      a4 === void 0 && (a4 = "&");
      var c4 = e4.replace(se, ""), u4 = s4 && i4 ? i4 + " " + s4 + " { " + c4 + " }" : c4;
      return t3 = a4, n3 = s4, r3 = new RegExp("\\" + n3 + "\\b", "g"), o3 = new RegExp("(\\" + n3 + "\\b){2,}"), l3(i4 || !s4 ? "" : s4, u4);
    }
    return l3.use([].concat(u3, [function(e4, t4, o4) {
      e4 === 2 && o4.length && o4[0].lastIndexOf(n3) > 0 && (o4[0] = o4[0].replace(r3, f2));
    }, p2, function(e4) {
      if (e4 === -2) {
        var t4 = d3;
        return d3 = [], t4;
      }
    }])), m3.hash = u3.length ? u3.reduce(function(e4, t4) {
      return t4.name || D2(15), ee(e4, t4.name);
    }, 5381).toString() : "", m3;
  }
  var ce = import_react8.default.createContext();
  var ue = ce.Consumer;
  var le = import_react8.default.createContext();
  var de = (le.Consumer, new X2());
  var he = ae();
  function pe() {
    return (0, import_react8.useContext)(ce) || de;
  }
  function fe() {
    return (0, import_react8.useContext)(le) || he;
  }
  function me(e3) {
    var t3 = (0, import_react8.useState)(e3.stylisPlugins), n3 = t3[0], s3 = t3[1], c3 = pe(), u3 = (0, import_react8.useMemo)(function() {
      var t4 = c3;
      return e3.sheet ? t4 = e3.sheet : e3.target && (t4 = t4.reconstructWithOptions({ target: e3.target }, false)), e3.disableCSSOMInjection && (t4 = t4.reconstructWithOptions({ useCSSOMInjection: false })), t4;
    }, [e3.disableCSSOMInjection, e3.sheet, e3.target]), l3 = (0, import_react8.useMemo)(function() {
      return ae({ options: { prefix: !e3.disableVendorPrefixes }, plugins: n3 });
    }, [e3.disableVendorPrefixes, n3]);
    return (0, import_react8.useEffect)(function() {
      (0, import_shallowequal.default)(n3, e3.stylisPlugins) || s3(e3.stylisPlugins);
    }, [e3.stylisPlugins]), import_react8.default.createElement(ce.Provider, { value: u3 }, import_react8.default.createElement(le.Provider, { value: l3 }, process.env.NODE_ENV !== "production" ? import_react8.default.Children.only(e3.children) : e3.children));
  }
  var ye = function() {
    function e3(e4, t3) {
      var n3 = this;
      this.inject = function(e5, t4) {
        t4 === void 0 && (t4 = he);
        var r3 = n3.name + t4.hash;
        e5.hasNameForId(n3.id, r3) || e5.insertRules(n3.id, r3, t4(n3.rules, r3, "@keyframes"));
      }, this.toString = function() {
        return D2(12, String(n3.name));
      }, this.name = e4, this.id = "sc-keyframes-" + e4, this.rules = t3;
    }
    return e3.prototype.getName = function(e4) {
      return e4 === void 0 && (e4 = he), this.name + e4.hash;
    }, e3;
  }();
  var ve = /([A-Z])/;
  var ge = /([A-Z])/g;
  var Se = /^ms-/;
  var we = function(e3) {
    return "-" + e3.toLowerCase();
  };
  function Ee(e3) {
    return ve.test(e3) ? e3.replace(ge, we).replace(Se, "-ms-") : e3;
  }
  var be = function(e3) {
    return e3 == null || e3 === false || e3 === "";
  };
  function _e(e3, n3, r3, o3) {
    if (Array.isArray(e3)) {
      for (var s3, i3 = [], a3 = 0, c3 = e3.length; a3 < c3; a3 += 1)
        (s3 = _e(e3[a3], n3, r3, o3)) !== "" && (Array.isArray(s3) ? i3.push.apply(i3, s3) : i3.push(s3));
      return i3;
    }
    if (be(e3))
      return "";
    if (_2(e3))
      return "." + e3.styledComponentId;
    if (E2(e3)) {
      if (typeof (l3 = e3) != "function" || l3.prototype && l3.prototype.isReactComponent || !n3)
        return e3;
      var u3 = e3(n3);
      return process.env.NODE_ENV !== "production" && (0, import_react_is2.isElement)(u3) && console.warn(b2(e3) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), _e(u3, n3, r3, o3);
    }
    var l3;
    return e3 instanceof ye ? r3 ? (e3.inject(r3, o3), e3.getName(o3)) : e3 : g2(e3) ? function e4(t3, n4) {
      var r4, o4, s4 = [];
      for (var i4 in t3)
        t3.hasOwnProperty(i4) && !be(t3[i4]) && (Array.isArray(t3[i4]) && t3[i4].isCss || E2(t3[i4]) ? s4.push(Ee(i4) + ":", t3[i4], ";") : g2(t3[i4]) ? s4.push.apply(s4, e4(t3[i4], i4)) : s4.push(Ee(i4) + ": " + (r4 = i4, (o4 = t3[i4]) == null || typeof o4 == "boolean" || o4 === "" ? "" : typeof o4 != "number" || o4 === 0 || r4 in unitless_esm_default ? String(o4).trim() : o4 + "px") + ";"));
      return n4 ? [n4 + " {"].concat(s4, ["}"]) : s4;
    }(e3) : e3.toString();
  }
  var Ne = function(e3) {
    return Array.isArray(e3) && (e3.isCss = true), e3;
  };
  function Ae(e3) {
    for (var t3 = arguments.length, n3 = new Array(t3 > 1 ? t3 - 1 : 0), r3 = 1; r3 < t3; r3++)
      n3[r3 - 1] = arguments[r3];
    return E2(e3) || g2(e3) ? Ne(_e(v2(S2, [e3].concat(n3)))) : n3.length === 0 && e3.length === 1 && typeof e3[0] == "string" ? e3 : Ne(_e(v2(e3, n3)));
  }
  var Ce = /invalid hook call/i;
  var Ie = /* @__PURE__ */ new Set();
  var Pe = function(e3, t3) {
    if (process.env.NODE_ENV !== "production") {
      var n3 = "The component " + e3 + (t3 ? ' with the id of "' + t3 + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", r3 = console.error;
      try {
        var o3 = true;
        console.error = function(e4) {
          if (Ce.test(e4))
            o3 = false, Ie.delete(n3);
          else {
            for (var t4 = arguments.length, s3 = new Array(t4 > 1 ? t4 - 1 : 0), i3 = 1; i3 < t4; i3++)
              s3[i3 - 1] = arguments[i3];
            r3.apply(void 0, [e4].concat(s3));
          }
        }, (0, import_react8.useRef)(), o3 && !Ie.has(n3) && (console.warn(n3), Ie.add(n3));
      } catch (e4) {
        Ce.test(e4.message) && Ie.delete(n3);
      } finally {
        console.error = r3;
      }
    }
  };
  var Oe = function(e3, t3, n3) {
    return n3 === void 0 && (n3 = w2), e3.theme !== n3.theme && e3.theme || t3 || n3.theme;
  };
  var Re = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
  var De = /(^-|-$)/g;
  function je(e3) {
    return e3.replace(Re, "-").replace(De, "");
  }
  var Te = function(e3) {
    return Q2(te(e3) >>> 0);
  };
  function xe(e3) {
    return typeof e3 == "string" && (process.env.NODE_ENV === "production" || e3.charAt(0) === e3.charAt(0).toLowerCase());
  }
  var ke = function(e3) {
    return typeof e3 == "function" || typeof e3 == "object" && e3 !== null && !Array.isArray(e3);
  };
  var Ve = function(e3) {
    return e3 !== "__proto__" && e3 !== "constructor" && e3 !== "prototype";
  };
  function ze(e3, t3, n3) {
    var r3 = e3[n3];
    ke(t3) && ke(r3) ? Be(r3, t3) : e3[n3] = t3;
  }
  function Be(e3) {
    for (var t3 = arguments.length, n3 = new Array(t3 > 1 ? t3 - 1 : 0), r3 = 1; r3 < t3; r3++)
      n3[r3 - 1] = arguments[r3];
    for (var o3 = 0, s3 = n3; o3 < s3.length; o3++) {
      var i3 = s3[o3];
      if (ke(i3))
        for (var a3 in i3)
          Ve(a3) && ze(e3, i3[a3], a3);
    }
    return e3;
  }
  var Me = import_react8.default.createContext();
  var Ge = Me.Consumer;
  var Fe = {};
  function Ye(e3, t3, n3) {
    var o3 = _2(e3), i3 = !xe(e3), a3 = t3.attrs, c3 = a3 === void 0 ? S2 : a3, d3 = t3.componentId, h2 = d3 === void 0 ? function(e4, t4) {
      var n4 = typeof e4 != "string" ? "sc" : je(e4);
      Fe[n4] = (Fe[n4] || 0) + 1;
      var r3 = n4 + "-" + Te("5.3.5" + n4 + Fe[n4]);
      return t4 ? t4 + "-" + r3 : r3;
    }(t3.displayName, t3.parentComponentId) : d3, p2 = t3.displayName, v3 = p2 === void 0 ? function(e4) {
      return xe(e4) ? "styled." + e4 : "Styled(" + b2(e4) + ")";
    }(e3) : p2, g3 = t3.displayName && t3.componentId ? je(t3.displayName) + "-" + t3.componentId : t3.componentId || h2, N3 = o3 && e3.attrs ? Array.prototype.concat(e3.attrs, c3).filter(Boolean) : c3, A2 = t3.shouldForwardProp;
    o3 && e3.shouldForwardProp && (A2 = t3.shouldForwardProp ? function(n4, r3, o4) {
      return e3.shouldForwardProp(n4, r3, o4) && t3.shouldForwardProp(n4, r3, o4);
    } : e3.shouldForwardProp);
    var C2, I3 = new oe(n3, g3, o3 ? e3.componentStyle : void 0), P2 = I3.isStatic && c3.length === 0, O3 = function(e4, t4) {
      return function(e5, t5, n4, r3) {
        var o4 = e5.attrs, i4 = e5.componentStyle, a4 = e5.defaultProps, c4 = e5.foldedComponentIds, d4 = e5.shouldForwardProp, h3 = e5.styledComponentId, p3 = e5.target;
        process.env.NODE_ENV !== "production" && (0, import_react8.useDebugValue)(h3);
        var m3 = function(e6, t6, n5) {
          e6 === void 0 && (e6 = w2);
          var r4 = y2({}, t6, { theme: e6 }), o5 = {};
          return n5.forEach(function(e7) {
            var t7, n6, s3, i5 = e7;
            for (t7 in E2(i5) && (i5 = i5(r4)), i5)
              r4[t7] = o5[t7] = t7 === "className" ? (n6 = o5[t7], s3 = i5[t7], n6 && s3 ? n6 + " " + s3 : n6 || s3) : i5[t7];
          }), [r4, o5];
        }(Oe(t5, (0, import_react8.useContext)(Me), a4) || w2, t5, o4), v4 = m3[0], g4 = m3[1], S3 = function(e6, t6, n5, r4) {
          var o5 = pe(), s3 = fe(), i5 = t6 ? e6.generateAndInjectStyles(w2, o5, s3) : e6.generateAndInjectStyles(n5, o5, s3);
          return process.env.NODE_ENV !== "production" && (0, import_react8.useDebugValue)(i5), process.env.NODE_ENV !== "production" && !t6 && r4 && r4(i5), i5;
        }(i4, r3, v4, process.env.NODE_ENV !== "production" ? e5.warnTooManyClasses : void 0), b3 = n4, _3 = g4.$as || t5.$as || g4.as || t5.as || p3, N4 = xe(_3), A3 = g4 !== t5 ? y2({}, t5, {}, g4) : t5, C3 = {};
        for (var I4 in A3)
          I4[0] !== "$" && I4 !== "as" && (I4 === "forwardedAs" ? C3.as = A3[I4] : (d4 ? d4(I4, emotion_is_prop_valid_esm_default, _3) : !N4 || emotion_is_prop_valid_esm_default(I4)) && (C3[I4] = A3[I4]));
        return t5.style && g4.style !== t5.style && (C3.style = y2({}, t5.style, {}, g4.style)), C3.className = Array.prototype.concat(c4, h3, S3 !== h3 ? S3 : null, t5.className, g4.className).filter(Boolean).join(" "), C3.ref = b3, (0, import_react8.createElement)(_3, C3);
      }(C2, e4, t4, P2);
    };
    return O3.displayName = v3, (C2 = import_react8.default.forwardRef(O3)).attrs = N3, C2.componentStyle = I3, C2.displayName = v3, C2.shouldForwardProp = A2, C2.foldedComponentIds = o3 ? Array.prototype.concat(e3.foldedComponentIds, e3.styledComponentId) : S2, C2.styledComponentId = g3, C2.target = o3 ? e3.target : e3, C2.withComponent = function(e4) {
      var r3 = t3.componentId, o4 = function(e5, t4) {
        if (e5 == null)
          return {};
        var n4, r4, o5 = {}, s4 = Object.keys(e5);
        for (r4 = 0; r4 < s4.length; r4++)
          n4 = s4[r4], t4.indexOf(n4) >= 0 || (o5[n4] = e5[n4]);
        return o5;
      }(t3, ["componentId"]), s3 = r3 && r3 + "-" + (xe(e4) ? e4 : je(b2(e4)));
      return Ye(e4, y2({}, o4, { attrs: N3, componentId: s3 }), n3);
    }, Object.defineProperty(C2, "defaultProps", { get: function() {
      return this._foldedDefaultProps;
    }, set: function(t4) {
      this._foldedDefaultProps = o3 ? Be({}, e3.defaultProps, t4) : t4;
    } }), process.env.NODE_ENV !== "production" && (Pe(v3, g3), C2.warnTooManyClasses = function(e4, t4) {
      var n4 = {}, r3 = false;
      return function(o4) {
        if (!r3 && (n4[o4] = true, Object.keys(n4).length >= 200)) {
          var s3 = t4 ? ' with the id of "' + t4 + '"' : "";
          console.warn("Over 200 classes were generated for component " + e4 + s3 + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r3 = true, n4 = {};
        }
      };
    }(v3, g3)), C2.toString = function() {
      return "." + C2.styledComponentId;
    }, i3 && (0, import_hoist_non_react_statics2.default)(C2, e3, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true }), C2;
  }
  var qe = function(e3) {
    return function e4(t3, r3, o3) {
      if (o3 === void 0 && (o3 = w2), !(0, import_react_is2.isValidElementType)(r3))
        return D2(1, String(r3));
      var s3 = function() {
        return t3(r3, o3, Ae.apply(void 0, arguments));
      };
      return s3.withConfig = function(n3) {
        return e4(t3, r3, y2({}, o3, {}, n3));
      }, s3.attrs = function(n3) {
        return e4(t3, r3, y2({}, o3, { attrs: Array.prototype.concat(o3.attrs, n3).filter(Boolean) }));
      }, s3;
    }(Ye, e3);
  };
  ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(e3) {
    qe[e3] = qe(e3);
  });
  var He = function() {
    function e3(e4, t4) {
      this.rules = e4, this.componentId = t4, this.isStatic = ne(e4), X2.registerId(this.componentId + 1);
    }
    var t3 = e3.prototype;
    return t3.createStyles = function(e4, t4, n3, r3) {
      var o3 = r3(_e(this.rules, t4, n3, r3).join(""), ""), s3 = this.componentId + e4;
      n3.insertRules(s3, s3, o3);
    }, t3.removeStyles = function(e4, t4) {
      t4.clearRules(this.componentId + e4);
    }, t3.renderStyles = function(e4, t4, n3, r3) {
      e4 > 2 && X2.registerId(this.componentId + e4), this.removeStyles(e4, n3), this.createStyles(e4, t4, n3, r3);
    }, e3;
  }();
  var Ue = /^\s*<\/[a-z]/i;
  var Je = function() {
    function e3() {
      var e4 = this;
      this._emitSheetCSS = function() {
        var t4 = e4.instance.toString();
        if (!t4)
          return "";
        var n3 = Y2();
        return "<style " + [n3 && 'nonce="' + n3 + '"', N2 + '="true"', 'data-styled-version="5.3.5"'].filter(Boolean).join(" ") + ">" + t4 + "</style>";
      }, this.getStyleTags = function() {
        return e4.sealed ? D2(2) : e4._emitSheetCSS();
      }, this.getStyleElement = function() {
        var t4;
        if (e4.sealed)
          return D2(2);
        var n3 = ((t4 = {})[N2] = "", t4["data-styled-version"] = "5.3.5", t4.dangerouslySetInnerHTML = { __html: e4.instance.toString() }, t4), o3 = Y2();
        return o3 && (n3.nonce = o3), [import_react8.default.createElement("style", y2({}, n3, { key: "sc-0-0" }))];
      }, this.seal = function() {
        e4.sealed = true;
      }, this.instance = new X2({ isServer: true }), this.sealed = false;
    }
    var t3 = e3.prototype;
    return t3.collectStyles = function(e4) {
      return this.sealed ? D2(2) : import_react8.default.createElement(me, { sheet: this.instance }, e4);
    }, t3.interleaveWithNodeStream = function(e4) {
      if (C)
        return D2(3);
      if (this.sealed)
        return D2(2);
      this.seal();
      var t4 = __require("stream"), n3 = (t4.Readable, t4.Transform), r3 = e4, o3 = this.instance, s3 = this._emitSheetCSS, i3 = new n3({ transform: function(e5, t5, n4) {
        var r4 = e5.toString(), i4 = s3();
        if (o3.clearTag(), Ue.test(r4)) {
          var a3 = r4.indexOf(">") + 1, c3 = r4.slice(0, a3), u3 = r4.slice(a3);
          this.push(c3 + i4 + u3);
        } else
          this.push(i4 + r4);
        n4();
      } });
      return r3.on("error", function(e5) {
        i3.emit("error", e5);
      }), r3.pipe(i3);
    }, e3;
  }();
  process.env.NODE_ENV !== "production" && typeof navigator != "undefined" && navigator.product === "ReactNative" && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && typeof window != "undefined" && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, window["__styled-components-init__"] === 1 && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);
  var styled_components_esm_default = qe;

  // src/searchbar/tokenSearch/SearchInput.tsx
  var import_react13 = __toESM(require_react());

  // src/searchbar/icons/search.tsx
  var import_react10 = __toESM(require_react());

  // src/searchbar/icons/abstract.tsx
  var import_react9 = __toESM(require_react());
  var SVGIcon = ({ children, width, height, viewBox }) => {
    return /* @__PURE__ */ import_react9.default.createElement("svg", {
      height: height != null ? height : 16,
      width: width != null ? width : 16,
      viewBox,
      fill: "none"
    }, children);
  };
  var abstract_default = SVGIcon;

  // src/searchbar/icons/search.tsx
  var SearchIcon = ({ height, width }) => /* @__PURE__ */ import_react10.default.createElement(abstract_default, {
    height: height != null ? height : 18,
    width: width != null ? width : 18,
    viewBox: "0 0 18 18"
  }, /* @__PURE__ */ import_react10.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react10.default.createElement("circle", {
    cx: "7.4",
    cy: "7.4",
    r: "6.4",
    stroke: "#7A808A"
  }), /* @__PURE__ */ import_react10.default.createElement("path", {
    d: "M7.39995 4.20001C6.97972 4.20001 6.56361 4.28278 6.17536 4.4436C5.78712 4.60441 5.43436 4.84012 5.13721 5.13727C4.84006 5.43442 4.60435 5.78718 4.44354 6.17543C4.28272 6.56367 4.19995 6.97978 4.19995 7.40001",
    "data-name": "Search icon",
    id: "Search_icon",
    stroke: "#7A808A"
  }), /* @__PURE__ */ import_react10.default.createElement("path", {
    d: "M17 17L13.8 13.8",
    stroke: "#7A808A"
  })));
  var search_default = SearchIcon;

  // src/searchbar/icons/reset.tsx
  var import_react11 = __toESM(require_react());
  var ResetIcon = ({ height, width }) => /* @__PURE__ */ import_react11.default.createElement(abstract_default, {
    height: height != null ? height : 9,
    width: width != null ? width : 9,
    viewBox: "0 0 9 9"
  }, /* @__PURE__ */ import_react11.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react11.default.createElement("path", {
    d: "M1 4.05747C1.25047 2.1328 3.01695 0.779376 4.94163 1.02985C6.8663 1.28032 8.22412 3.0468 7.96925 4.97147C7.71878 6.89615 5.9523 8.25397 4.02763 7.9991C2.76648 7.83212 1.68989 6.99722 1.21971 5.81517M1 8.01228V5.81517H3.19712",
    stroke: "#B4BBC7",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })));
  var reset_default = ResetIcon;

  // src/searchbar/tokenSearch/SearchInput.tsx
  var import_lodash2 = __toESM(require_lodash2());

  // src/searchbar/Context/TokenSearch.tsx
  var import_react12 = __toESM(require_react());
  var TokenSearchContext = (0, import_react12.createContext)({ networks: [] });
  var TokenSearch_default = TokenSearchContext;

  // src/searchbar/tokenSearch/SearchInput.tsx
  var StyledInputGroup = styled_components_esm_default.div`
  ${({ styleOverrides }) => ` 
    position: relative;
    width: ${(styleOverrides == null ? void 0 : styleOverrides.width) || "-webkit-fill-available"};
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#B7BEC9"};
    background: ${(styleOverrides == null ? void 0 : styleOverrides.background) || "#00070E"};
    padding-right: 145px;
  `}
`;
  var StyledInput = styled_components_esm_default.input`
  ${({ styleOverrides }) => `    
    margin-left: auto;
    margin-right: auto;
    position: relative;
    outline: 0;
    border: none;
    width: ${(styleOverrides == null ? void 0 : styleOverrides.width) || "-webkit-fill-available"};
    height: ${(styleOverrides == null ? void 0 : styleOverrides.height) || "auto"};    
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#B7BEC9"};
    display: ${(styleOverrides == null ? void 0 : styleOverrides.display) || "block"}; 
    padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "10px 14px"};    
    background: ${(styleOverrides == null ? void 0 : styleOverrides.background) || "#00070E"};  
  `}
`;
  var StyledSearchIconWrapper = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    float: right;
    position: absolute;
    right: ${(styleOverrides == null ? void 0 : styleOverrides.right) || "14px"};      
    top: 50%;
    transform: translateY(-50%);   
  `}
`;
  var StyledWrapper = styled_components_esm_default.div`
  ${({ styleOverrides }) => `    
    position: relative;
    border: ${(styleOverrides == null ? void 0 : styleOverrides.border) || "4px solid #474F5C"}; 
    border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderRadius) || "4px"}; 
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#7A808A"};
    background: ${(styleOverrides == null ? void 0 : styleOverrides.background) || "#00070E"};  
    font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "8px"};      
    font-family: ${(styleOverrides == null ? void 0 : styleOverrides.fontFamily) || "'Fira Code', monospace"};
    box-shadow: 0 0 8px 2px #474f5c;
    .invalid-error {
      padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "0 14px 5px"};   
      color: ${(styleOverrides == null ? void 0 : styleOverrides.colorError) || "#F52E2E"};  
    }
  `}
`;
  var StyledResetBtn = styled_components_esm_default.button`
  position: absolute;
  right: 40px;
  top: 50%;
  transform: translateY(-50%);
`;
  var SearchInput = () => {
    var _a, _b, _c, _d;
    const dispatch = useDispatch();
    const renderProps = (0, import_react13.useContext)(TokenSearch_default);
    const { customSearchInput } = renderProps;
    const [text, setText] = (0, import_react13.useState)("");
    const [error, setError] = (0, import_react13.useState)(false);
    const { searchText, networkMap, exchangeMap } = useSelector((state) => state);
    const inputRef = (0, import_react13.useRef)(null);
    (0, import_react13.useEffect)(() => {
      if (searchText.length >= config_default.SEARCH_INPUT_LENGTH_MINIMUM) {
        setError(false);
        dispatch(searchTokenPairs({ searchString: searchText, networks: renderProps.networks }));
        dispatch(setSearchText(searchText));
      } else if (searchText.length > 0) {
        setError(true);
      }
    }, [dispatch, networkMap, exchangeMap, searchText]);
    const debounceChangeHandler = (0, import_react13.useCallback)((0, import_lodash2.default)((value) => dispatch(setSearchText(value)), 350), []);
    const onChangeFilter = (event) => {
      const value = event.target.value;
      setText(value);
      debounceChangeHandler(value);
      dispatch(setViewResult(true));
    };
    const handleClick = () => {
      text.length > 0 && dispatch(setViewResult(true));
    };
    const placeholder = (customSearchInput == null ? void 0 : customSearchInput.placeholder) ? customSearchInput == null ? void 0 : customSearchInput.placeholder : "Search pair by symbol, name, contract or token";
    const height = ((_a = customSearchInput == null ? void 0 : customSearchInput.icon) == null ? void 0 : _a.height) ? (_b = customSearchInput == null ? void 0 : customSearchInput.icon) == null ? void 0 : _b.height : 14;
    const width = ((_c = customSearchInput == null ? void 0 : customSearchInput.icon) == null ? void 0 : _c.width) ? (_d = customSearchInput == null ? void 0 : customSearchInput.icon) == null ? void 0 : _d.width : 14;
    const handleReset = () => {
      setText("");
      dispatch(resetSearch());
      if (inputRef && inputRef.current) {
        inputRef.current.focus();
      }
    };
    return /* @__PURE__ */ import_react13.default.createElement(StyledWrapper, {
      onClick: () => dispatch(startSelecting()),
      styleOverrides: customSearchInput == null ? void 0 : customSearchInput.input
    }, /* @__PURE__ */ import_react13.default.createElement(StyledInputGroup, {
      styleOverrides: customSearchInput == null ? void 0 : customSearchInput.input
    }, /* @__PURE__ */ import_react13.default.createElement(StyledInput, {
      ref: inputRef,
      placeholder,
      autocomplete: "off",
      onChange: onChangeFilter,
      onClick: handleClick,
      styleOverrides: customSearchInput == null ? void 0 : customSearchInput.input,
      value: text
    }), /* @__PURE__ */ import_react13.default.createElement(StyledResetBtn, {
      onClick: handleReset
    }, /* @__PURE__ */ import_react13.default.createElement("span", null, "Reset Search"), /* @__PURE__ */ import_react13.default.createElement(reset_default, null)), /* @__PURE__ */ import_react13.default.createElement(StyledSearchIconWrapper, {
      styleOverrides: customSearchInput == null ? void 0 : customSearchInput.icon
    }, /* @__PURE__ */ import_react13.default.createElement(search_default, {
      height,
      width
    }))), error && /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "invalid-error"
    }, "Please input ", config_default.SEARCH_INPUT_LENGTH_MINIMUM, " characters minimum"));
  };
  var SearchInput_default = SearchInput;

  // src/searchbar/tokenSearch/SearchResult.tsx
  var import_react50 = __toESM(require_react());

  // node_modules/react-infinite-scroll-hook/dist/react-infinite-scroll-hook.esm.js
  var import_react15 = __toESM(require_react());

  // node_modules/react-intersection-observer-hook/dist/react-intersection-observer-hook.esm.js
  var import_react14 = __toESM(require_react());
  var DEFAULT_ROOT_MARGIN = "0px";
  var DEFAULT_THRESHOLD = [0];
  function useIntersectionObserver(args) {
    var _args$rootMargin, _args$threshold;
    var rootMargin = (_args$rootMargin = args == null ? void 0 : args.rootMargin) != null ? _args$rootMargin : DEFAULT_ROOT_MARGIN;
    var threshold = (_args$threshold = args == null ? void 0 : args.threshold) != null ? _args$threshold : DEFAULT_THRESHOLD;
    var nodeRef = (0, import_react14.useRef)(null);
    var rootRef = (0, import_react14.useRef)(null);
    var observerRef = (0, import_react14.useRef)(null);
    var _useState = (0, import_react14.useState)(), entry = _useState[0], setEntry = _useState[1];
    var unobserve = (0, import_react14.useCallback)(function() {
      var currentObserver = observerRef.current;
      currentObserver == null ? void 0 : currentObserver.disconnect();
      observerRef.current = null;
    }, []);
    var observe = (0, import_react14.useCallback)(function() {
      var node = nodeRef.current;
      if (node) {
        var root = rootRef.current;
        var options = {
          root,
          rootMargin,
          threshold
        };
        var observer = new IntersectionObserver(function(_ref) {
          var newEntry = _ref[0];
          setEntry(newEntry);
        }, options);
        observer.observe(node);
        observerRef.current = observer;
      }
    }, [rootMargin, threshold]);
    var initializeObserver = (0, import_react14.useCallback)(function() {
      unobserve();
      observe();
    }, [observe, unobserve]);
    var refCallback = (0, import_react14.useCallback)(function(node) {
      nodeRef.current = node;
      initializeObserver();
    }, [initializeObserver]);
    var rootRefCallback = (0, import_react14.useCallback)(function(rootNode) {
      rootRef.current = rootNode;
      initializeObserver();
    }, [initializeObserver]);
    (0, import_react14.useEffect)(function() {
      initializeObserver();
      return function() {
        unobserve();
      };
    }, [initializeObserver, unobserve]);
    return [refCallback, {
      entry,
      rootRef: rootRefCallback
    }];
  }
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function useTrackVisibility(args) {
    var _result$entry;
    var _useIntersectionObser = useIntersectionObserver(args), ref = _useIntersectionObser[0], result = _useIntersectionObser[1];
    var isVisible = Boolean((_result$entry = result.entry) == null ? void 0 : _result$entry.isIntersecting);
    var _useState = (0, import_react14.useState)(isVisible), wasEverVisible = _useState[0], setWasEverVisible = _useState[1];
    (0, import_react14.useEffect)(function() {
      if (isVisible) {
        setWasEverVisible(isVisible);
      }
    }, [isVisible]);
    return [ref, _extends2({}, result, {
      isVisible,
      wasEverVisible
    })];
  }

  // node_modules/react-infinite-scroll-hook/dist/react-infinite-scroll-hook.esm.js
  var DEFAULT_DELAY_IN_MS = 100;
  function useInfiniteScroll(_ref) {
    var loading = _ref.loading, hasNextPage = _ref.hasNextPage, onLoadMore = _ref.onLoadMore, rootMargin = _ref.rootMargin, disabled = _ref.disabled, _ref$delayInMs = _ref.delayInMs, delayInMs = _ref$delayInMs === void 0 ? DEFAULT_DELAY_IN_MS : _ref$delayInMs;
    var _useTrackVisibility = useTrackVisibility({
      rootMargin
    }), ref = _useTrackVisibility[0], _useTrackVisibility$ = _useTrackVisibility[1], rootRef = _useTrackVisibility$.rootRef, isVisible = _useTrackVisibility$.isVisible;
    var shouldLoadMore = !disabled && !loading && isVisible && hasNextPage;
    (0, import_react15.useEffect)(function() {
      if (shouldLoadMore) {
        var timer = setTimeout(function() {
          onLoadMore();
        }, delayInMs);
        return function() {
          clearTimeout(timer);
        };
      }
    }, [onLoadMore, shouldLoadMore, delayInMs]);
    return [ref, {
      rootRef
    }];
  }
  var react_infinite_scroll_hook_esm_default = useInfiniteScroll;

  // src/searchbar/icons/unchecked.tsx
  var import_react16 = __toESM(require_react());
  var UnCheckedIcon = ({ height, width }) => /* @__PURE__ */ import_react16.default.createElement(abstract_default, {
    height: height != null ? height : 8,
    width: width != null ? width : 8,
    viewBox: "0 0 8 8"
  }, /* @__PURE__ */ import_react16.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react16.default.createElement("g", {
    clipPath: "url(#clip0_1021_1505)"
  }, /* @__PURE__ */ import_react16.default.createElement("path", {
    d: "M0.75 0.75L6.92 6.92",
    stroke: "#7A808A",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /* @__PURE__ */ import_react16.default.createElement("path", {
    d: "M6.92 0.75L0.75 6.92",
    stroke: "#7A808A",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  })), /* @__PURE__ */ import_react16.default.createElement("defs", null, /* @__PURE__ */ import_react16.default.createElement("clipPath", {
    id: "clip0_1021_1505"
  }, /* @__PURE__ */ import_react16.default.createElement("rect", {
    width: "7.67",
    height: "7.67",
    fill: "white"
  })))));
  var unchecked_default = UnCheckedIcon;

  // src/searchbar/tokenSearch/ResultDetail.tsx
  var import_react49 = __toESM(require_react());

  // src/searchbar/icons/default.tsx
  var import_react17 = __toESM(require_react());
  var DefaultIcon = ({ height, width }) => /* @__PURE__ */ import_react17.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 16 16"
  }, /* @__PURE__ */ import_react17.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react17.default.createElement("path", {
    d: "M7.97 15.94C12.3717 15.94 15.94 12.3717 15.94 7.97C15.94 3.56829 12.3717 0 7.97 0C3.56829 0 0 3.56829 0 7.97C0 12.3717 3.56829 15.94 7.97 15.94Z",
    fill: "white"
  })));
  var default_default = DefaultIcon;

  // src/searchbar/tokenSearch/Logo.tsx
  var import_react46 = __toESM(require_react());

  // src/searchbar/icons/kyber.tsx
  var import_react18 = __toESM(require_react());
  var KyberIcon = ({ height, width }) => /* @__PURE__ */ import_react18.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 11 15"
  }, /* @__PURE__ */ import_react18.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react18.default.createElement("g", {
    clipPath: "url(#clip0_1021_1517)"
  }, /* @__PURE__ */ import_react18.default.createElement("path", {
    d: "M4.53003 7.01998L10.2 10.02C10.34 10.1 10.52 10.06 10.61 9.92998C10.64 9.88998 10.65 9.83998 10.65 9.78998V4.25998C10.65 4.09998 10.51 3.97998 10.36 3.97998C10.3 3.97998 10.25 3.98998 10.2 4.01998L4.53003 7.01998V7.01998Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react18.default.createElement("path", {
    d: "M10.0801 2.68995L6.21006 0.0599538C6.07006 -0.0400462 5.89006 -0.0100462 5.78006 0.109954C5.76006 0.139954 5.74006 0.169954 5.73006 0.209954L4.31006 6.06995L10.0501 3.13995C10.1801 3.07995 10.2401 2.92995 10.1801 2.79995V2.77995C10.1801 2.77995 10.1201 2.70995 10.0801 2.67995",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react18.default.createElement("path", {
    d: "M6.20006 13.98L10.0801 11.35C10.2001 11.28 10.2401 11.12 10.1701 11L10.1501 10.98C10.1501 10.98 10.0901 10.92 10.0501 10.9L4.31006 7.96997L5.72006 13.84C5.77006 14 5.93006 14.09 6.09006 14.05C6.13006 14.05 6.17006 14.03 6.20006 14",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react18.default.createElement("path", {
    d: "M3.06 6.91L4.53 0.540004C4.56 0.390004 4.46 0.250004 4.31 0.220004C4.23 0.200004 4.15 0.220004 4.09 0.260004L0.31 2.95C0.12 3.08 0 3.29 0 3.52V10.31C0 10.54 0.11 10.76 0.31 10.9L4.06 13.57C4.19 13.65 4.37 13.63 4.47 13.5C4.51 13.44 4.53 13.37 4.52 13.29L3.07 6.92L3.06 6.91Z",
    fill: "#7A808A"
  })), /* @__PURE__ */ import_react18.default.createElement("defs", null, /* @__PURE__ */ import_react18.default.createElement("clipPath", {
    id: "clip0_1021_1517"
  }, /* @__PURE__ */ import_react18.default.createElement("rect", {
    width: "10.65",
    height: "14.05",
    fill: "white"
  })))));
  var kyber_default = KyberIcon;

  // src/searchbar/icons/pangolin.tsx
  var import_react19 = __toESM(require_react());
  var PangolinIcon = ({ height, width }) => /* @__PURE__ */ import_react19.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 14 12"
  }, /* @__PURE__ */ import_react19.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react19.default.createElement("g", {
    clipPath: "url(#clip0_1021_1532)"
  }, /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M10.6201 1.61L7.31006 4.01L9.93006 5.92L13.0401 3.66L11.8501 0H10.0901L10.6101 1.6L10.6201 1.61Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M1.19 0L0 3.65L3.11 5.91L5.73 4.01L2.42 1.6L2.94 0H1.19Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M3.11011 1.38L6.22011 3.64V1.94L3.56011 0L3.11011 1.38Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M9.48007 0L6.82007 1.93V3.63L9.93007 1.37L9.48007 0Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M3.12012 6.64V6.66L6.22012 8.92V4.38L3.12012 6.63V6.64Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M9.92007 6.64L6.82007 4.38V8.91L9.93007 6.65V6.63L9.92007 6.64Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M3.11011 9.57004L6.22011 11.83V9.63004L3.69011 7.79004L3.11011 9.57004Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react19.default.createElement("path", {
    d: "M6.82007 9.64005V11.84L9.93007 9.58005L9.35007 7.80005L6.82007 9.64005Z",
    fill: "#7A808A"
  })), /* @__PURE__ */ import_react19.default.createElement("defs", null, /* @__PURE__ */ import_react19.default.createElement("clipPath", {
    id: "clip0_1021_1532"
  }, /* @__PURE__ */ import_react19.default.createElement("rect", {
    width: "13.04",
    height: "11.84",
    fill: "white"
  })))));
  var pangolin_default = PangolinIcon;

  // src/searchbar/icons/sushi.tsx
  var import_react20 = __toESM(require_react());
  var SushiIcon = ({ height, width }) => /* @__PURE__ */ import_react20.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 16.982 16.982"
  }, /* @__PURE__ */ import_react20.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react20.default.createElement("g", {
    id: "Strategies_-_logo_-_SUSHI",
    "data-name": "Strategies - logo - SUSHI",
    transform: "translate(0.5 0.5)"
  }, /* @__PURE__ */ import_react20.default.createElement("g", {
    id: "Group_216",
    "data-name": "Group 216",
    transform: "translate(0 0)"
  }, /* @__PURE__ */ import_react20.default.createElement("g", {
    id: "Group_203",
    "data-name": "Group 203",
    transform: "translate(0 0)"
  }, /* @__PURE__ */ import_react20.default.createElement("ellipse", {
    id: "Ellipse_16",
    "data-name": "Ellipse 16",
    cx: "7.991",
    cy: "7.991",
    rx: "7.991",
    ry: "7.991",
    transform: "translate(0)",
    fill: "#08333c",
    stroke: "#15b3b0",
    strokeWidth: "1"
  })), /* @__PURE__ */ import_react20.default.createElement("rect", {
    id: "Rectangle_60",
    "data-name": "Rectangle 60",
    width: "13.404",
    height: "13.404",
    transform: "translate(1.168 1.299)",
    fill: "none"
  })), /* @__PURE__ */ import_react20.default.createElement("g", {
    id: "Group_227",
    "data-name": "Group 227",
    transform: "translate(2.238 2.846)"
  }, /* @__PURE__ */ import_react20.default.createElement("g", {
    id: "Group_226",
    "data-name": "Group 226"
  }, /* @__PURE__ */ import_react20.default.createElement("path", {
    id: "Path_110",
    "data-name": "Path 110",
    d: "M2022.047,649.65c-2.451-1.73-5.046-2.162-5.815-1.057l-2.211,3.22.014.01c-.556.943.242,2.537,1.839,4.013a2.1,2.1,0,0,0,1.126-.706,5.673,5.673,0,0,1,.787-.724.955.955,0,0,1,.7-.237c.336,0,.721.336,1.346,1.153s1.49,1.057,2.018.625c.048-.048.1-.048.144-.1a2.451,2.451,0,0,0,.441-.412c-.129-.039-.276-.078-.393-.117-.048,0-.048-.048-.048-.1s.048-.048.1-.048c.089.029.2.059.3.089l.146.044c.029-.041.059-.084.091-.133.051-.078.107-.166.168-.268a6.452,6.452,0,0,1-.873-.25,10.216,10.216,0,0,1-2.376-1.26,10.928,10.928,0,0,1-2.125-1.877c-.9-1.067-1.277-2.085-.855-2.688l.006-.007c.679-.952,3.028-.47,5.281,1.112a8.78,8.78,0,0,1,2.9,3.1,1.539,1.539,0,0,1,.417.071,1.82,1.82,0,0,1,0,1.586C2025.892,653.59,2024.546,651.284,2022.047,649.65Zm-6.1,0c.048-.048.1,0,.1.048a.939.939,0,0,1,.048.336c.048.048,0,.1-.048.1-.048.048-.1,0-.1-.048a1.225,1.225,0,0,0-.1-.336C2015.848,649.7,2015.9,649.7,2015.944,649.65Zm3.412,4.325c-.048,0-.1.048-.144,0a9.146,9.146,0,0,1-2.676-2.708,6.158,6.158,0,0,1-.4-.752c0-.048,0-.048.048-.1s.1,0,.1.048a6.328,6.328,0,0,0,.478.851,8.921,8.921,0,0,0,2.6,2.513C2019.356,653.879,2019.4,653.927,2019.356,653.975Z",
    transform: "translate(-2013.859 -647.985)",
    fill: "#15b3b0"
  }), /* @__PURE__ */ import_react20.default.createElement("path", {
    id: "Path_111",
    "data-name": "Path 111",
    d: "M2050.206,663.994c-.007.009-.016.016-.023.026-.336.481.336,1.49,1.442,2.259,1.153.769,2.306,1.009,2.643.529.006-.009.01-.019.016-.029.293-.491-.373-1.475-1.457-2.23C2051.7,663.795,2050.567,663.551,2050.206,663.994Z",
    transform: "translate(-2045.407 -661.731)",
    fill: "#15b3b0"
  })), /* @__PURE__ */ import_react20.default.createElement("path", {
    id: "Path_112",
    "data-name": "Path 112",
    d: "M2038.732,687.115a1.54,1.54,0,0,0-.417-.071,1.55,1.55,0,0,1,.1,1.437c-.005.009-.01.018-.016.027-.335.479-1.087.6-2.037.4-.061.1-.116.191-.167.268-.032.048-.062.092-.091.133l.037.012c.048,0,.048.048.048.1s-.048.048-.1.048h0l-.085-.026a2.452,2.452,0,0,1-.441.412c-.048.048-.1.048-.144.1-.529.432-1.394.192-2.019-.625s-1.009-1.153-1.346-1.153a.954.954,0,0,0-.7.237,5.674,5.674,0,0,0-.787.724,2.093,2.093,0,0,1-1.126.706,12.5,12.5,0,0,0,1.271,1.024c2.427,1.713,4.994,2.153,5.79,1.089l.024.017,2.211-3.268A1.822,1.822,0,0,0,2038.732,687.115Zm-1.057,2.5a4.731,4.731,0,0,1-1.153-.048.1.1,0,1,1,0-.192,4.642,4.642,0,0,0,1.153.048.1.1,0,1,1,0,.192Z",
    transform: "translate(-2027.421 -681.99)",
    fill: "#15b3b0"
  })))));
  var sushi_default = SushiIcon;

  // src/searchbar/icons/trader.tsx
  var import_react21 = __toESM(require_react());
  var TraderIcon = ({ height, width }) => /* @__PURE__ */ import_react21.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 11 15"
  }, /* @__PURE__ */ import_react21.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react21.default.createElement("g", {
    clipPath: "url(#clip0_1021_1562)"
  }, /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M10.6501 10.88C10.6501 10.88 10.7101 10.96 10.7101 11C10.7101 11.39 10.7101 11.78 10.7101 12.17C10.7101 12.24 10.6701 12.3 10.6101 12.34C9.96006 12.72 9.31006 13.1 8.66006 13.47C8.64006 13.48 8.59006 13.47 8.56006 13.47C8.58006 13.41 8.59006 13.36 8.60006 13.3V12.11C8.68006 12.06 8.75006 12.01 8.83006 11.96C9.25006 11.73 9.67006 11.5 10.0801 11.27C10.2701 11.16 10.4501 11.02 10.6401 10.89L10.6501 10.88Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M8.30992 13.33C8.35992 13.65 8.14992 13.76 7.91992 13.88C7.33992 14.2 6.76992 14.53 6.19992 14.86V13.68C6.19992 13.61 6.17992 13.55 6.16992 13.48C6.32992 13.39 6.49992 13.3 6.65992 13.21C7.06992 12.97 7.48992 12.74 7.88992 12.49C7.98992 12.42 8.08992 12.34 8.17992 12.26C8.29992 12.26 8.27992 12.34 8.27992 12.41C8.28992 12.71 8.29992 13.01 8.30992 13.32V13.33Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M6.15999 13.49C6.16999 13.56 6.18999 13.62 6.18999 13.69V14.86C5.93999 14.72 5.67999 14.59 5.42999 14.45C4.69999 14.03 3.96999 13.6 3.23999 13.17C3.28999 13.13 3.33999 13.09 3.38999 13.05L4.09999 12.63L4.61999 12.89C4.70999 12.95 4.80999 13 4.89999 13.06C4.95999 13.09 5.01999 13.13 5.07999 13.16L5.52999 13.41C5.58999 13.38 5.64999 13.34 5.70999 13.31C5.74999 13.29 5.79999 13.28 5.83999 13.26C5.93999 13.34 6.04999 13.41 6.14999 13.48L6.15999 13.49Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M10.65 10.88C10.46 11.01 10.28 11.15 10.08 11.26C9.66995 11.5 9.23995 11.72 8.82995 11.95C8.74995 11.99 8.66995 12.05 8.59995 12.1C8.46995 12.04 8.33995 11.98 8.19995 11.92L9.09995 11.38C9.09995 11.38 9.10995 11.38 9.11995 11.38L9.22995 11.32C9.22995 11.32 9.26995 11.3 9.29995 11.28C9.61995 11.1 9.92995 10.91 10.25 10.73C10.27 10.73 10.29 10.72 10.31 10.71H10.39L10.44 10.73C10.52 10.78 10.59 10.84 10.67 10.89L10.65 10.88Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M8.19992 11.92C8.32992 11.98 8.45992 12.04 8.59992 12.1V13.29C8.59992 13.35 8.57992 13.41 8.55992 13.46L8.31992 13.34C8.30992 13.04 8.29992 12.74 8.28992 12.43C8.28992 12.36 8.30992 12.27 8.18992 12.28C8.09992 12.22 8.00992 12.16 7.91992 12.1C8.00992 12.04 8.10992 11.98 8.19992 11.93V11.92Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M7.91011 12.09C8.00011 12.15 8.09011 12.21 8.18011 12.27C8.09011 12.35 7.99011 12.43 7.89011 12.5C7.48011 12.74 7.07011 12.98 6.66011 13.22C6.50011 13.31 6.33011 13.4 6.17011 13.49C6.07011 13.42 5.96011 13.35 5.86011 13.28C5.87011 13.26 5.89011 13.24 5.90011 13.22C5.94011 13.2 5.99011 13.17 6.04011 13.14C6.28011 13 6.53011 12.86 6.77011 12.72C6.81011 12.7 6.85011 12.68 6.89011 12.66C7.23011 12.47 7.58011 12.28 7.92011 12.09H7.91011Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M0.0500488 2.89C0.350049 2.71 0.620049 2.56 0.880049 2.4C2.21005 1.64 3.54005 0.880005 4.86005 0.110005C5.04005 -0.0299951 5.29005 -0.0299951 5.48005 0.110005C6.60005 0.780005 7.74005 1.43 8.87005 2.09C9.28005 2.33 9.69005 2.56 10.09 2.79C10.15 2.82 10.2 2.86 10.29 2.91L5.16005 5.86L0.0500488 2.89Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M9.31011 10.4799L9.15011 10.7099L8.99011 10.9199L8.77011 10.8199L8.11011 11.8199L7.43011 11.5899L7.53011 11.9199C7.33011 11.8399 7.15011 11.9599 6.97011 11.8799C6.84011 11.8099 6.69011 11.8199 6.57011 11.9099C6.47011 11.9799 6.29011 11.9299 6.15011 11.9199C6.05011 11.9199 5.95011 11.8899 5.85011 11.8699C5.63011 11.7799 5.37011 11.8299 5.19011 11.9899C5.04011 11.8999 4.89011 11.8099 4.75011 11.7199C4.62011 11.6099 4.44011 11.5899 4.30011 11.6799C4.27011 11.6999 4.21011 11.6799 4.11011 11.6799L4.31011 11.4999C4.31011 11.4999 4.31011 11.4599 4.29011 11.4499C4.05011 11.3099 3.80011 11.1699 3.56011 11.0199C3.43011 10.9299 3.25011 10.9599 3.14011 11.0799C3.20011 11.1799 3.25011 11.2899 3.31011 11.3899C3.36011 11.4699 3.40011 11.5599 3.43011 11.6399C3.43011 11.6699 3.42011 11.6999 3.39011 11.7199C3.36011 11.7299 3.33011 11.7299 3.30011 11.7199C3.25011 11.6599 3.20011 11.5999 3.16011 11.5399C3.08011 11.4199 3.01011 11.2899 2.93011 11.1599L2.42011 11.3699C2.33011 11.4099 2.25011 11.4099 2.21011 11.2699L2.80011 10.9699C2.77011 10.7899 2.55011 10.6799 2.65011 10.4799L1.66011 9.87994C1.62011 9.58994 1.63011 9.28994 1.70011 8.99994C1.78011 8.71994 1.85011 8.43994 1.92011 8.15994C1.94011 8.06994 1.95011 7.96994 1.95011 7.87994V6.56994C1.95011 6.38994 2.07011 6.22994 2.25011 6.18994C2.30011 6.18994 2.35011 6.18994 2.39011 6.22994C2.53011 6.29994 2.66011 6.38994 2.79011 6.44994C2.89011 6.49994 2.95011 6.60994 2.93011 6.71994V7.97994C2.93011 8.08994 2.96011 8.19994 3.03011 8.27994C3.71011 9.10994 4.39011 9.93994 5.06011 10.7699C5.06011 10.7699 5.08011 10.7699 5.10011 10.7899C5.10011 10.7199 5.10011 10.6599 5.10011 10.5999V8.51994C5.10011 8.36994 5.09011 8.22994 5.07011 8.08994C5.04011 7.93994 5.11011 7.78994 5.24011 7.71994C5.52011 7.55994 5.81011 7.39994 6.09011 7.23994C6.16011 7.18994 6.25011 7.17994 6.33011 7.22994C6.75011 7.46994 7.18011 7.69994 7.66011 7.96994L7.03011 8.33994V9.09994C7.25011 9.01994 7.45011 8.90994 7.63011 8.75994C7.67011 8.72994 7.69011 8.63994 7.69011 8.57994C7.69011 8.40994 7.69011 8.23994 7.69011 8.03994L7.93011 8.14994C8.26011 7.83994 8.62011 7.55994 9.00011 7.30994C9.08011 7.51994 9.00011 7.72994 9.07011 7.93994C9.27011 7.82994 9.45011 7.72994 9.63011 7.61994C9.68011 7.56994 9.72011 7.50994 9.73011 7.42994C9.75011 7.31994 9.75011 7.20994 9.73011 7.09994C9.70011 6.96994 9.79011 6.83994 9.92011 6.80994C10.0201 6.77994 10.1101 6.73994 10.2301 6.68994V7.81994C10.2301 7.81994 10.2801 7.86994 10.3101 7.88994C10.4201 7.97994 10.6301 7.98994 10.6301 8.14994C10.6301 8.40994 10.7201 8.68994 10.5201 8.93994C10.2301 9.29994 9.97011 9.67994 9.69011 10.0499C9.65011 10.1199 9.57011 10.1799 9.49011 10.1899L9.26011 10.4699L9.31011 10.4799Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M9.73007 5.18C9.83007 5.12 9.92007 5.06 10.0101 5.02C10.1001 4.98 10.1801 4.94 10.3001 4.88C10.3001 5.06 10.3101 5.2 10.3001 5.34C10.2701 5.49 10.3601 5.64 10.5001 5.69C10.5601 5.72 10.6101 5.75 10.6601 5.79C10.5901 5.9 10.4901 5.91 10.4001 5.94C9.93007 6.09 9.48007 6.31 9.06007 6.58C8.77007 6.79 8.49007 7.01 8.21007 7.24C8.11007 7.31 8.03007 7.4 7.89007 7.32C7.38007 7.02 6.87007 6.73 6.32007 6.41C6.40007 6.31 6.49007 6.22 6.58007 6.14C7.05007 5.73 7.57007 5.4 8.13007 5.14C8.39007 5.03 8.66007 4.93 8.92007 4.82C9.00007 4.79 9.09007 4.81 9.16007 4.86C9.34007 4.97 9.52007 5.08 9.73007 5.19V5.18Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M2.45009 12.1601C2.29009 12.1501 2.29009 12.0101 2.22009 11.9201C2.15009 11.8301 2.07009 11.7401 1.98009 11.6401L1.57009 11.7201C1.60009 11.5401 1.75009 11.5201 1.86009 11.4201C1.76009 11.2401 1.69009 11.0301 1.58009 10.8501C1.43009 10.6001 1.29009 10.3501 1.14009 10.1001C1.05009 9.95006 0.960088 9.79006 0.870088 9.64006C0.810088 9.54006 0.720088 9.56006 0.620088 9.59006C0.550088 9.61006 0.480088 9.63006 0.400088 9.65006C0.390088 9.65006 0.370088 9.63006 0.340088 9.60006L0.820088 9.31006C1.36009 10.2701 2.00009 11.1501 2.44009 12.1501L2.45009 12.1601Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M2.14002 13.71C1.60002 13.41 1.08002 13.08 0.530018 12.81C0.220018 12.7 0.0400178 12.38 0.110018 12.06C0.130018 11.77 0.140018 11.49 0.140018 11.2H0.290018L1.20002 11.75C1.32002 11.82 1.44002 11.89 1.57002 11.95C1.76002 12.06 1.95002 12.17 2.14002 12.28V12.34C2.15002 12.8 2.14002 13.25 2.14002 13.71Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M2.13988 13.71C2.13988 13.26 2.13988 12.81 2.13988 12.35C2.34988 12.45 2.54988 12.55 2.75988 12.65L3.05988 12.45C3.10988 12.42 3.16988 12.4 3.21988 12.37L3.66988 12.12C3.71988 12.09 3.77988 12.06 3.82988 12.04L4.14988 11.92C4.14988 11.97 4.14988 12.03 4.14988 12.08V12.28C4.13988 12.38 4.11988 12.47 4.11988 12.56C3.83988 12.73 3.54988 12.89 3.26988 13.06C3.20988 13.1 3.14988 13.15 3.09988 13.2C2.80988 13.35 2.51988 13.51 2.23988 13.66C2.19988 13.68 2.16988 13.69 2.12988 13.71H2.13988Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M0.1 10.7C0.04 10.7 0 10.66 0 10.6V3.00002C0 2.94002 0.04 2.90002 0.1 2.90002C0.16 2.90002 0.2 2.94002 0.2 3.00002V10.6C0.2 10.66 0.16 10.7 0.1 10.7Z",
    fill: "#7A808A"
  }), /* @__PURE__ */ import_react21.default.createElement("path", {
    d: "M10.2599 4.45003C10.1999 4.45003 10.1599 4.41003 10.1599 4.35003V3.01003C10.1599 2.95003 10.1999 2.91003 10.2599 2.91003C10.3199 2.91003 10.3599 2.95003 10.3599 3.01003V4.35003C10.3599 4.41003 10.3199 4.45003 10.2599 4.45003Z",
    fill: "#7A808A"
  })), /* @__PURE__ */ import_react21.default.createElement("defs", null, /* @__PURE__ */ import_react21.default.createElement("clipPath", {
    id: "clip0_1021_1562"
  }, /* @__PURE__ */ import_react21.default.createElement("rect", {
    width: "10.72",
    height: "14.87",
    fill: "white"
  })))));
  var trader_default = TraderIcon;

  // src/searchbar/icons/bsc.tsx
  var import_react22 = __toESM(require_react());
  var BscIcon = ({ height, width }) => /* @__PURE__ */ import_react22.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 16 16"
  }, /* @__PURE__ */ import_react22.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react22.default.createElement("path", {
    d: "M7.97 15.94C12.3717 15.94 15.94 12.3717 15.94 7.97C15.94 3.56829 12.3717 0 7.97 0C3.56829 0 0 3.56829 0 7.97C0 12.3717 3.56829 15.94 7.97 15.94Z",
    fill: "white"
  }), /* @__PURE__ */ import_react22.default.createElement("path", {
    d: "M5.0799 6.78001L7.9799 3.88001L10.8799 6.78001L12.5599 5.09001L7.9799 0.51001L3.3999 5.09001L5.0799 6.78001Z",
    fill: "#F3BA2F"
  }), /* @__PURE__ */ import_react22.default.createElement("path", {
    d: "M2.20122 6.28291L0.518311 7.96582L2.20122 9.64873L3.88414 7.96582L2.20122 6.28291Z",
    fill: "#F3BA2F"
  }), /* @__PURE__ */ import_react22.default.createElement("path", {
    d: "M5.07991 9.15002L7.97991 12.05L10.8799 9.15002L12.5699 10.84L7.98991 15.42L3.40991 10.84L5.08991 9.16002",
    fill: "#F3BA2F"
  }), /* @__PURE__ */ import_react22.default.createElement("path", {
    d: "M13.7554 6.28291L12.0725 7.96582L13.7554 9.64873L15.4383 7.96582L13.7554 6.28291Z",
    fill: "#F3BA2F"
  }), /* @__PURE__ */ import_react22.default.createElement("path", {
    d: "M9.68001 7.97001L7.97001 6.26001L6.71001 7.52001L6.56001 7.66001L6.26001 7.96001L7.97001 9.67001L9.68001 7.96001",
    fill: "#F3BA2F"
  })));
  var bsc_default = BscIcon;

  // src/searchbar/icons/avalanche.tsx
  var import_react23 = __toESM(require_react());
  var AvalancheIcon = ({ height, width }) => /* @__PURE__ */ import_react23.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 16 16"
  }, /* @__PURE__ */ import_react23.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react23.default.createElement("path", {
    d: "M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16Z",
    fill: "#E84142"
  }), /* @__PURE__ */ import_react23.default.createElement("path", {
    d: "M10.7799 8.17002C10.8699 7.89002 11.1699 7.74002 11.4499 7.84002C11.6099 7.89002 11.7299 8.02002 11.7799 8.17002L13.4999 11.19C13.7799 11.67 13.5499 12.06 12.9999 12.06H9.53988C8.98988 12.06 8.76988 11.67 9.03988 11.19L10.7799 8.17002ZM7.44988 2.37002C7.53988 2.10002 7.83988 1.95002 8.10988 2.04002C8.26988 2.09002 8.38988 2.21002 8.43988 2.37002L8.81988 3.06002L9.71988 4.65002C9.93988 5.10002 9.93988 5.63002 9.71988 6.09002L6.68988 11.34C6.41988 11.77 5.94988 12.04 5.44988 12.07H2.94988C2.39988 12.07 2.16988 11.69 2.44988 11.2L7.44988 2.37002Z",
    fill: "white"
  })));
  var avalanche_default = AvalancheIcon;

  // src/searchbar/icons/moonbeam.tsx
  var import_react24 = __toESM(require_react());
  var MoonBeamIcon = ({ height, width }) => /* @__PURE__ */ import_react24.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react24.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_185",
    fill: "#53CBC8",
    d: "M237.65,32.88c-67.68,0.03-122.53,54.91-122.51,122.59l0,0c0,0.09,0,0.17,0,0.26v0.19\n	c0.18,3.2,2.83,5.7,6.03,5.69h232.97c3.2,0.01,5.85-2.49,6.03-5.69v-0.19c0-0.09,0-0.17,0-0.26l0,0\n	C360.19,87.78,305.33,32.9,237.65,32.88L237.65,32.88z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_186",
    fill: "#E1147B",
    d: "M34.01,292.35c0,4.12-3.34,7.46-7.46,7.46s-7.46-3.34-7.46-7.46c0-4.12,3.34-7.46,7.46-7.46l0,0\n	C30.67,284.89,34.01,288.23,34.01,292.35z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_187",
    fill: "#E1147B",
    d: "M346.04,251.07H96.06c-4.06,0.01-7.35,3.3-7.34,7.36c0,1.22,0.3,2.41,0.88,3.48l0.12,0.23\n	c1.28,2.37,3.77,3.85,6.46,3.85h249.73c2.7,0,5.18-1.47,6.46-3.85l0.12-0.23c1.93-3.58,0.59-8.04-2.99-9.96\n	C348.44,251.38,347.25,251.08,346.04,251.07z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_188",
    fill: "#E1147B",
    d: "M379.25,183.44H96.04c-4.06,0.01-7.35,3.31-7.34,7.38c0,0.13,0,0.26,0.01,0.4\n	c0,0.08,0,0.16,0,0.23c0.22,3.89,3.44,6.92,7.33,6.91h283.18c3.89,0.01,7.11-3.03,7.33-6.91c0-0.08,0-0.16,0-0.23\n	c0.23-4.06-2.88-7.53-6.94-7.76C379.5,183.45,379.37,183.44,379.25,183.44z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_189",
    fill: "#E1147B",
    d: "M272.61,352.53H144.98c-4.06,0.01-7.34,3.31-7.33,7.37c0.01,2.78,1.58,5.31,4.06,6.55l0.47,0.23\n	c1.02,0.51,2.14,0.77,3.27,0.76h126.7c1.14,0,2.26-0.26,3.28-0.76l0.47-0.23c3.63-1.82,5.1-6.23,3.28-9.86\n	C277.94,354.1,275.39,352.53,272.61,352.53z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_190",
    fill: "#E1147B",
    d: "M350.61,318.71H222.96c-4.06,0.01-7.34,3.31-7.33,7.37c0.01,2.78,1.58,5.31,4.06,6.55l0.47,0.23\n	c1.02,0.5,2.14,0.77,3.28,0.76h126.7c1.14,0,2.26-0.26,3.28-0.76l0.47-0.23c3.63-1.82,5.1-6.23,3.28-9.86\n	C355.93,320.29,353.39,318.72,350.61,318.71z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_191",
    fill: "#E1147B",
    d: "M176.56,297.47l-0.22-0.23c-2.75-2.98-2.57-7.63,0.41-10.38c1.35-1.25,3.13-1.95,4.97-1.95\n	h207.15c4.06,0,7.34,3.3,7.34,7.35c0,1.84-0.7,3.62-1.95,4.97l-0.22,0.23c-1.39,1.49-3.34,2.34-5.38,2.35H181.95\n	C179.9,299.81,177.95,298.96,176.56,297.47z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_192",
    fill: "#E1147B",
    d: "M53.19,284.89h98.92c4.06,0.01,7.34,3.31,7.33,7.37c-0.01,2.78-1.58,5.31-4.06,6.55l-0.47,0.23\n	c-1.02,0.51-2.14,0.77-3.27,0.76H53.66c-1.14,0-2.26-0.26-3.28-0.76l-0.47-0.23c-3.63-1.82-5.1-6.23-3.28-9.86\n	C47.87,286.47,50.41,284.9,53.19,284.89z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_193",
    fill: "#E1147B",
    d: "M76.87,190.92c0,4.12-3.34,7.45-7.46,7.45s-7.45-3.34-7.45-7.46c0-4.11,3.34-7.45,7.45-7.45\n	C73.53,183.46,76.87,186.8,76.87,190.92z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_194",
    fill: "#E1147B",
    d: "M252.65,226.71l0.06-0.23c1.05-3.92-1.27-7.94-5.19-8.99c-0.63-0.17-1.27-0.25-1.92-0.25H38.44\n	c-4.05-0.01-7.35,3.26-7.36,7.32c0,0.65,0.08,1.3,0.25,1.92c0,0.08,0.04,0.16,0.06,0.23c0.87,3.21,3.78,5.45,7.11,5.44h207.05\n	c3.33,0,6.25-2.23,7.11-5.44"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_195",
    fill: "#E1147B",
    d: "M19.26,224.72c0,4.12-3.34,7.45-7.46,7.45c-4.12,0-7.45-3.34-7.45-7.46\n	c0-4.12,3.34-7.45,7.45-7.45C15.92,217.26,19.26,220.6,19.26,224.72z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_196",
    fill: "#E1147B",
    d: "M76.87,258.53c0,4.12-3.34,7.45-7.46,7.45c-4.12,0-7.45-3.34-7.45-7.46\n	c0-4.11,3.34-7.45,7.45-7.45C73.53,251.07,76.87,254.41,76.87,258.53z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_197",
    fill: "#E1147B",
    d: "M203.79,326.17c0,4.12-3.34,7.46-7.46,7.46c-4.12,0-7.46-3.34-7.46-7.46\n	c0-4.12,3.34-7.46,7.46-7.46l0,0C200.45,318.71,203.79,322.05,203.79,326.17z"
  }), /* @__PURE__ */ import_react24.default.createElement("path", {
    id: "Path_198",
    fill: "#E1147B",
    d: "M125.8,359.97c0,4.12-3.34,7.45-7.46,7.45c-4.12,0-7.45-3.34-7.45-7.46\n	c0-4.12,3.34-7.45,7.45-7.45C122.47,352.51,125.8,355.85,125.8,359.97z"
  })));
  var moonbeam_default = MoonBeamIcon;

  // src/searchbar/icons/moonriver.tsx
  var import_react25 = __toESM(require_react());
  var MoonRiverIcon = ({ height, width }) => /* @__PURE__ */ import_react25.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react25.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#EFB505",
    d: "M64.78,180.08c-4.92-20.6-3.71-39.83,0.69-58.92C80.77,54.7,141.25,7.78,208.66,9.89\n		c69.28,2.16,127.08,51.69,137.91,119.6c2.4,15.07,0.88,30.83,0.29,46.24c-0.13,3.46-3.2,7.83-6.2,10\n		c-32.54,23.48-78.97,23.69-112.12,0.91c-7.67-5.27-15.35-10.53-23.02-15.81c-38.93-26.77-88.15-26.81-127.02-0.1\n		C74.33,173.59,70.15,176.42,64.78,180.08z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#4FC2C1",
    d: "M145.2,170.15c23.06,0.43,45.95,6.11,66.14,20.76c7.3,5.3,14.84,10.28,22.32,15.33\n		c32.52,21.95,72.33,21.87,104.93-0.17c2.1-1.42,4.17-2.91,6.33-4.24c4.73-2.92,9.27-2.93,12.55,2.01c3.05,4.6,1.37,8.63-2.69,11.8\n		c-18.77,14.66-39.9,23.18-63.83,24.01c-25.02,0.86-47.8-5.49-68.47-20.15c-16.48-11.68-32.24-24.93-52.94-29.15\n		c-30.34-6.19-58.9-3.18-84.63,15.59c-4.55,3.32-9.27,6.43-14.03,9.47c-4.39,2.8-9.61,2.98-11.66-1.82\n		c-1.35-3.14-0.47-9.38,1.89-11.62C82.28,181.86,113.4,170.23,145.2,170.15z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#50C6C4",
    d: "M266.7,306.33c-0.01,13.51-0.06,27.02,0.02,40.53c0.04,6.48-2.04,11.57-9.32,11.29\n		c-6.75-0.26-8.48-5.34-8.47-11.36c0.05-27.02,0.05-54.04,0.01-81.07c-0.01-6.03,1.77-11.08,8.55-11.26\n		c7.25-0.2,9.32,4.8,9.26,11.33C266.61,279.3,266.7,292.82,266.7,306.33z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#51C6C4",
    d: "M108.32,258.02c-0.01-12.7-0.02-25.39,0-38.09c0.01-6.44,1.46-12.67,9.14-12.69c7.3-0.01,8.77,6.28,8.81,12.2\n		c0.17,26.52,0.2,53.05,0.05,79.57c-0.03,5.67-1.92,11.48-8.69,11.44c-6.91-0.04-9.29-5.41-9.3-11.8\n		C108.33,285.1,108.33,271.56,108.32,258.02z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#50C5C3",
    d: "M301.77,303.77c0,11.28-0.04,22.57,0.02,33.85c0.03,6.16-2.1,10.94-8.87,10.95\n		c-6.76,0.01-8.94-4.77-8.94-10.92c0.03-23.13,0.02-46.26,0-69.39c0-5.8,2.13-10.31,8.43-10.52c6.73-0.22,9.33,4.26,9.35,10.5\n		C301.79,280.07,301.77,291.92,301.77,303.77z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#4EC0BF",
    d: "M91.15,265.64c0.01,8.75,0,17.49,0.01,26.24c0.01,6.48-1.41,12.41-9.26,12.5c-7.46,0.08-9-5.62-9-11.77\n		c-0.02-18.62-0.01-37.23,0.1-55.85c0.03-5.96,2.14-11.11,8.96-10.98c6.58,0.13,9.02,5.15,9.13,11.1\n		C91.27,246.46,91.14,256.05,91.15,265.64z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#4DC0BF",
    d: "M196.58,259.35c0,9.31-0.02,18.63,0,27.94c0.02,6.07-2.08,11.05-8.74,11.27c-7.33,0.24-9.35-5.1-9.35-11.44\n		c-0.01-18.63-0.01-37.26,0.05-55.88c0.02-5.87,1.67-11.28,8.55-11.35c7.09-0.07,9.45,5.13,9.49,11.52\n		C196.62,240.72,196.59,250.04,196.58,259.35z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#4FC4C2",
    d: "M337.24,274.32c0.01,5.06,0.2,10.13-0.05,15.17c-0.27,5.58-3.64,9.84-8.96,8.76c-3.32-0.67-7.99-5.2-8.3-8.36\n		c-1.04-10.57-1.04-21.38,0.01-31.95c0.31-3.17,4.96-7.7,8.29-8.39c5.34-1.1,8.69,3.17,8.95,8.75\n		C337.43,263.63,337.24,268.98,337.24,274.32z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#50C6C4",
    d: "M231.57,259.23c-0.01,13.51-0.05-7.42,0.03,6.09c0.04,6.48-2.04,11.57-9.32,11.29\n		c-6.75-0.26-8.48-5.34-8.47-11.36c0.05-27.02,0.03,13.84-0.01-13.18c-0.01-6.03,1.77-11.08,8.55-11.26\n		c7.25-0.2,9.32,4.8,9.26,11.33C231.48,265.65,231.57,245.72,231.57,259.23z"
  }), /* @__PURE__ */ import_react25.default.createElement("path", {
    fill: "#50C6C4",
    d: "M161.19,257.74c-0.01,13.51-0.06,110.54,0.02,124.05c0.04,6.48-2.04,11.57-9.32,11.29\n		c-6.75-0.26-8.48-5.34-8.47-11.36c0.05-27.02,0.05-137.56,0.01-164.58c-0.01-6.03,1.77-11.08,8.55-11.26\n		c7.25-0.2,9.32,4.8,9.26,11.33C161.1,230.72,161.19,244.23,161.19,257.74z"
  })));
  var moonriver_default = MoonRiverIcon;

  // src/searchbar/icons/apeswap.tsx
  var import_react26 = __toESM(require_react());
  var ApeSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react26.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react26.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#AB705C",
    d: "M201,14.2c1.1,4.4,2.2,8.9,3.2,13.3c0.3,1.5,1.1,1.7,2.5,2c4.7,1,8.5-0.5,12.3-3.1c5.9-3.9,12-7.3,18.2-11\n		c0.2,0.6,0.4,0.9,0.4,1.2c0.2,5.6,0.5,11.3,0.5,16.9c0,1.6,0.6,2.2,2,2.7c24.8,8.8,45.7,23.5,63.4,42.7\n		c15.7,17,27.6,36.4,35.5,58.2c0.2,0.7,0.5,1.4,0.8,2c13.5-6.8,26.3-5.5,38.2,3.2c8.5,6.2,13,15.3,15.4,25.5\n		c6.3,27.4-5.7,54.9-30.3,69c-2.4,1.4-5,2.3-7.8,3.6c0.5,3.5,1.2,7.2,1.7,10.9c2.6,20.4-0.7,39.9-9.3,58.5\n		c-11.9,25.5-30.9,44.3-54.7,58.6c-20.9,12.5-43.6,20-67.7,23.1c-4.9,0.6-9.9,1-14.9,1.5c-0.4,0-0.8,0.3-1.2,0.5c-0.8,0-1.6,0-2.5,0\n		c-0.4-0.2-0.9-0.5-1.3-0.5c-5.3,0-10.6,0-15.9,0c-4.7-0.4-9.5-0.8-14.2-1.2c-0.5-0.5-0.9-1.1-1.5-1.5c-8.8-5-16.6-11.5-24.3-18.1\n		c-1.6-1.3-2.7-3.1-4.1-4.7c0.6,0.2,1.2,0.4,1.8,0.6c15.5,7.5,32,11,49.2,11.5c10.1,0.3,20.1-0.7,29.9-2.9\n		c26-5.9,47.9-18.4,64.2-39.8c10.1-13.3,15.7-28.3,16.9-45c0.7-9.9-1.9-19.3-5-28.5c-4-11.9-2.6-23,3.9-33.6\n		c7-11.4,10.3-23.6,9.1-37.1c-1.3-14.9-7.5-27.5-18.1-37.8c-10.4-10.2-23-16.1-37.6-17.8c-14.1-1.7-27.6,0.4-40,7.3\n		c-13.5,7.5-26.8,7.5-40.3,0.1c-13.6-7.5-28.2-9.4-43.4-6.9c-7.6,1.2-14.6,4-21.4,7.5c0.4-2.1,0.7-4.2,1.2-6.2\n		c4.1-15.5,9.9-30.3,17.3-44.6c8.1-15.7,17.4-30.6,28.3-44.5c8.5-10.9,17.4-21.4,28.2-30C192.8,17.3,196.3,14.4,201,14.2z\n		 M352.3,229.6c2.7-1.4,5.1-2.5,7.3-3.8c16.9-10.8,25.6-31,21.8-50.8c-1.7-8.8-5.3-16.7-12.8-22.1c-7.8-5.6-16.4-7.1-25.7-3.9\n		c0.2,1,0.3,1.8,0.5,2.6c2.7,10.5,4.3,21.3,4.2,32.1c-0.1,11.4,0.6,22.8,2.5,34.1C350.7,221.5,351.5,225.3,352.3,229.6z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#8F6355",
    d: "M201,14.2c-4.7,0.2-8.2,3.1-11.6,5.8c-10.8,8.6-19.7,19.1-28.2,30c-10.9,13.9-20.2,28.8-28.3,44.5\n		c-7.4,14.3-13.2,29.1-17.3,44.6c-0.5,2-0.8,4.1-1.2,6.2c-0.2,0.3-0.4,0.5-0.7,0.8c-7.2,3.6-13,9-17.9,15.3\n		c-9.4,12.3-13.9,26.2-12.5,41.8c0.8,9,3.3,17.3,8.1,24.9c7.4,11.8,9.1,24,4.5,37.4c-2.2,6.3-3.8,13-4.4,19.7\n		c-0.9,9.5,0.9,18.9,4,27.9c6.4,18.4,17.8,33.1,33.5,44.4c3.9,2.8,8.3,5.1,12.4,7.7c1,0.7,1.9,1.4,2.9,2c0.3,0.2,0.6,0.3,0.9,0.5\n		l0,0c1.4,1.6,2.5,3.3,4.1,4.7c7.7,6.6,15.4,13.1,24.3,18.1c0.6,0.3,1,1,1.5,1.5c-7.6-1.4-15.3-2.4-22.8-4.3\n		c-32-8.1-60-23.3-82.1-48.3c-17.6-20-27.9-43.2-29.3-70c-0.5-8.9,0.3-17.8,2.1-26.6c0.2-1.1,0.9-2.2-1-2.9\n		c-19.6-8.1-31.5-22.8-36.9-43.1c-0.7-2.7-1.2-5.5-1.7-8.2c0-3.8,0-7.5,0-11.3c0.5-2.8,0.9-5.6,1.5-8.3c2.4-10.5,6.8-20,15.6-26.4\n		c11.9-8.7,24.7-9.9,37.8-3.4c3.7-8,6.9-16.2,11.1-23.9c19.3-35.3,46.8-61.8,84.4-77c4.3-1.7,7.3-3.9,9.9-7.8\n		c6.8-10.5,16.2-17.8,28.9-20.2c1.4-0.3,2.9-0.4,4.4-0.6c0.9-0.1,1.8,0,3,0C200.3,11,200.7,12.6,201,14.2z M46.1,229.2\n		c0.3-0.6,0.4-0.8,0.5-1.1c2.5-11.7,4.3-23.5,4.4-35.5c0.1-9.2-0.1-18.4,1.5-27.6c1-5.3,2.1-10.7,3.1-16c-8.8-3.7-21-1.3-28.1,5.9\n		c-10,10.2-12.3,22.8-10.6,36.4c1.2,9.6,5.3,18.1,11.7,25.4C33.5,222.1,39,226.5,46.1,229.2z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#D0AFA3",
    d: "M189.5,393.6c0.1-0.2,0-0.3,0-0.5c5.3,0,10.6,0,15.9,0c0.4,0,0.9,0.3,1.3,0.5\n		C200.9,393.6,195.2,393.6,189.5,393.6z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#F5DFBB",
    d: "M113.7,146.1c0.2-0.3,0.4-0.5,0.7-0.8c6.8-3.5,13.8-6.3,21.4-7.5c15.2-2.4,29.8-0.5,43.4,6.9\n		c13.5,7.4,26.8,7.4,40.3-0.1c12.5-6.9,25.9-9,40-7.3c14.5,1.7,27.2,7.7,37.6,17.8c10.6,10.3,16.8,22.9,18.1,37.8\n		c1.2,13.5-2.2,25.7-9.1,37.1c-6.5,10.6-7.9,21.7-3.9,33.6c3.1,9.2,5.7,18.6,5,28.5c-1.2,16.7-6.8,31.7-16.9,45\n		c-16.3,21.4-38.2,33.9-64.2,39.8c-9.8,2.2-19.8,3.2-29.9,2.9c-17.2-0.5-33.6-4.1-49.2-11.5c-0.6-0.3-1.2-0.4-1.8-0.6c0,0,0,0,0,0\n		c-0.3-0.2-0.6-0.3-0.9-0.5c-1-0.7-1.9-1.4-2.9-2c-0.3-0.5-0.5-1-0.8-1.4c-2.8-3.2-5.7-6.2-8.4-9.5c-8.8-10.7-16.1-22.3-20.6-35.6\n		c-5.9-17.2-8.6-35.1-9.2-53.2c-0.5-13.4,0.1-26.8,0.4-40.1c0.1-4.4,0.5-8.8,1-13.1c0.7-6.8,1.5-13.5,2.4-20.3\n		c1-7.1,2-14.1,3.2-21.2C110.7,162.5,112.2,154.3,113.7,146.1z M162.3,205.2c0.1-2,0.2-4.1,0.1-6.1c-0.1-9.9-8.8-18-18.7-17.4\n		c-5.8-0.2-10.3,2.2-14.4,6.2c-5.8,5.5-5.3,22-1.1,27.2c5,6.2,13,9,20.8,6.8C155.6,220.1,162.2,214.2,162.3,205.2z M273.3,204.2\n		c0-1.6,0-3.3,0.1-4.9c0.5-11.2-10.8-18.7-18.7-17.6c-8.3-0.3-16.6,5.7-18,13.7c-0.7,3.9-0.4,8-0.3,11.9c0.2,3.7,2,6.9,4.6,9.5\n		c5.3,5.6,14,7.4,21.3,4.3C269.5,218.1,273.7,211.6,273.3,204.2z M235.1,344.1c13.4-8.7,22.3-20.6,25.2-36.6\n		c1.1-5.8-1.4-8.7-7.3-8.7c-7.2,0-14.4,0-21.6,0c-28.8,0-57.5,0-86.3,0c-5,0-7.8,3.2-7,7.7c2.8,16.3,11.6,28.6,25.4,37.6\n		c2.4,1.4,4.7,3,7.1,4.1c13.4,6.2,27.4,7.9,41.8,5C220.6,351.7,228.3,349,235.1,344.1z M188.4,265.6c3.3,0,5.3-1.4,5.9-3.9\n		c0.6-2.3-0.5-4.8-2.8-5.9c-3.8-1.8-7.7-3.6-11.6-5.3c-3.3-1.5-6.3-0.5-7.6,2.5c-1.2,2.9,0,5.6,3.3,7.1c3.5,1.7,7.1,3.3,10.7,4.9\n		C187.1,265.3,188.1,265.5,188.4,265.6z M209.4,265.5c0.4,0,0.9,0.1,1.2,0c4.7-2.1,9.6-4.1,14.1-6.6c2.3-1.2,2.6-4.3,1.4-6.5\n		c-1.2-2.2-3.9-3.4-6.3-2.4c-4.4,1.8-8.7,3.8-12.9,5.9c-2.2,1.1-3.1,3.6-2.5,5.8C205,264.1,206.9,265.6,209.4,265.5z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#F5DFBB",
    d: "M352.3,229.6c-0.8-4.3-1.6-8.1-2.3-11.9c-1.9-11.3-2.6-22.6-2.5-34.1c0.1-10.9-1.5-21.6-4.2-32.1\n		c-0.2-0.8-0.3-1.6-0.5-2.6c9.3-3.2,17.9-1.7,25.7,3.9c7.5,5.4,11.1,13.3,12.8,22.1c3.9,19.8-4.9,40.1-21.8,50.8\n		C357.4,227.1,355,228.1,352.3,229.6z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#C2AD95",
    d: "M113.7,146.1c-1.5,8.2-3.1,16.4-4.4,24.6c-1.2,7-2.2,14.1-3.2,21.2c-0.9,6.7-1.7,13.5-2.4,20.3\n		c-0.5,4.4-0.9,8.7-1,13.1c-0.3,13.4-0.9,26.8-0.4,40.1c0.7,18.1,3.3,35.9,9.2,53.2c4.6,13.2,11.8,24.9,20.6,35.6\n		c2.7,3.3,5.6,6.3,8.4,9.5c0.4,0.4,0.6,1,0.8,1.4c-4.2-2.5-8.5-4.8-12.4-7.7c-15.7-11.3-27.1-26.1-33.5-44.4c-3.1-9-4.9-18.4-4-27.9\n		c0.6-6.7,2.2-13.4,4.4-19.7c4.7-13.3,3-25.6-4.5-37.4c-4.8-7.6-7.3-15.9-8.1-24.9c-1.4-15.6,3-29.5,12.5-41.8\n		C100.7,155.1,106.5,149.7,113.7,146.1z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#C2AD95",
    d: "M46.1,229.2c-7.1-2.7-12.7-7.1-17.5-12.6c-6.4-7.3-10.5-15.8-11.7-25.4c-1.7-13.6,0.6-26.2,10.6-36.4\n		c7.1-7.2,19.3-9.6,28.1-5.9c-1,5.3-2.2,10.6-3.1,16c-1.6,9.1-1.4,18.3-1.5,27.6c-0.1,12-1.9,23.8-4.4,35.5\n		C46.6,228.4,46.4,228.6,46.1,229.2z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#AB705C",
    d: "M144.3,367.1c0.3,0.2,0.6,0.3,0.9,0.5C145,367.5,144.6,367.3,144.3,367.1z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#584848",
    d: "M163.5,344.1c-13.8-8.9-22.6-21.2-25.4-37.6c-0.8-4.6,2.1-7.7,7-7.7c28.8,0,57.5,0,86.3,0c7.2,0,14.4,0,21.6,0\n		c5.9,0,8.3,2.9,7.3,8.7c-2.9,16-11.7,27.9-25.2,36.6c-1.3-3.2-2.6-6.3-5.5-8.5c-4.1-3.1-8.9-3.7-13.7-3.7\n		c-7.4-0.1-14.9,0.2-22.3,0.3c-5.3,0.1-10.6-0.2-15.9,0.1c-5,0.3-9.3,2.4-12,6.9C164.9,340.8,164.3,342.5,163.5,344.1z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#E76F78",
    d: "M163.5,344.1c0.7-1.6,1.3-3.3,2.2-4.9c2.7-4.5,7-6.6,12-6.9c5.3-0.3,10.6-0.1,15.9-0.1\n		c7.4-0.1,14.9-0.4,22.3-0.3c4.8,0,9.6,0.6,13.7,3.7c2.9,2.2,4.2,5.4,5.5,8.5c-6.8,4.9-14.5,7.6-22.6,9.2c-14.5,2.8-28.4,1.1-41.8-5\n		C168.2,347.1,165.9,345.5,163.5,344.1z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#594949",
    d: "M273.3,204.2c0.4,7.4-3.9,13.9-11,16.9c-7.2,3.1-15.9,1.3-21.3-4.3c-2.6-2.7-4.4-5.8-4.6-9.5\n		c-0.2-4-0.4-8.1,0.3-11.9c1.4-8,9.7-14,18-13.7c0,1.9,0,3.7,0,5.6c-2.7,0.4-4.9,1.4-5.8,4.1c-1.3,3.8,1.1,7,5.8,7.9\n		c-0.4,4.3,0.6,7.9,4.5,10.3C264.7,212.8,270.4,210.5,273.3,204.2z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#594949",
    d: "M162.3,205.2c-0.2,9.1-6.8,14.9-13.1,16.7c-7.8,2.2-15.8-0.6-20.8-6.8c-4.3-5.2-4.7-21.7,1.1-27.2\n		c4.1-3.9,8.6-6.3,14.4-6.2c0,1.9,0,3.7,0,5.6c-3.9,0.7-6,2.5-6.3,5.4c-0.4,3.5,1.9,5.9,6.3,6.6c0,0.7,0,1.3,0,2\n		c-0.3,5.2,2.6,7.9,6.4,9.2c4.3,1.4,9-0.6,10.9-4.2C161.5,205.9,162,205.5,162.3,205.2z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#695E6B",
    d: "M162.3,205.2c-0.4,0.4-0.9,0.7-1.1,1.1c-1.9,3.6-6.7,5.5-10.9,4.2c-3.8-1.2-6.7-4-6.4-9.2c0-0.6,0-1.3,0-2\n		c4.9-0.9,7.3-4.4,5.8-8.2c-1-2.6-3.2-3.6-5.8-3.9c0-1.9,0-3.7,0-5.6c9.9-0.5,18.5,7.5,18.7,17.4\n		C162.5,201.1,162.4,203.1,162.3,205.2z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#685E6B",
    d: "M273.3,204.2c-2.9,6.3-8.7,8.6-14,5.4c-3.9-2.3-5-6-4.5-10.3c3-0.3,5.3-1.5,6.1-4.6c0.6-2.3,0-4.4-2-5.8\n		c-1.2-0.8-2.8-1.1-4.2-1.7c0-1.9,0-3.7,0-5.6c7.9-1,19.1,6.4,18.7,17.6C273.4,200.9,273.4,202.6,273.3,204.2z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#5A4A49",
    d: "M188.4,265.6c-0.3-0.1-1.3-0.3-2.1-0.7c-3.6-1.6-7.1-3.2-10.7-4.9c-3.3-1.5-4.5-4.3-3.3-7.1\n		c1.3-2.9,4.3-4,7.6-2.5c3.9,1.7,7.7,3.5,11.6,5.3c2.3,1.1,3.4,3.6,2.8,5.9C193.6,264.2,191.7,265.6,188.4,265.6z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#5A4A49",
    d: "M209.4,265.5c-2.5,0-4.4-1.4-5-3.8c-0.6-2.2,0.3-4.8,2.5-5.8c4.2-2.1,8.5-4.1,12.9-5.9c2.4-1,5.1,0.2,6.3,2.4\n		c1.2,2.2,0.9,5.3-1.4,6.5c-4.6,2.4-9.4,4.4-14.1,6.6C210.3,265.7,209.8,265.5,209.4,265.5z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#FBFAFA",
    d: "M254.8,187.3c1.4,0.5,3,0.8,4.2,1.7c2,1.4,2.6,3.5,2,5.8c-0.8,3.1-3.2,4.3-6.1,4.6c-4.8-0.9-7.2-4.1-5.8-7.9\n		C249.9,188.7,252.1,187.6,254.8,187.3z"
  }), /* @__PURE__ */ import_react26.default.createElement("path", {
    fill: "#FBFAFB",
    d: "M143.8,187.3c2.6,0.3,4.7,1.3,5.8,3.9c1.6,3.8-0.9,7.3-5.8,8.2c-4.4-0.7-6.6-3.2-6.3-6.6\n		C137.8,189.7,139.9,188,143.8,187.3z"
  })));
  var apeswap_default = ApeSwapIcon;

  // src/searchbar/icons/babyswap.tsx
  var import_react27 = __toESM(require_react());
  var BabySwapIcon = ({ height, width }) => /* @__PURE__ */ import_react27.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react27.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#572E06",
    d: "M311.8,12.7c28.7,10.2,48.9,27.7,50.6,60.3c1.3,25.8-10.1,45-32.2,58.1c-17.2,10.2-19.8,19.2-8.9,35.3\n        c18.7,27.6,27.4,58.1,25.3,91.2c-0.7,11.8,2.5,18.4,13.6,24c27.6,13.8,36.9,46.3,22.2,72.4c-14.3,25.5-45.8,34.2-72.6,19.7\n        c-15.5-8.4-30.6-17.4-45.8-26.1c-48.7,42.8-92.5,50.8-137.2,25.2c-43.9-25.1-59.2-67.3-46.7-130.6c-14.3-8.3-29.1-16.7-43.7-25.4\n        c-28-16.7-36.4-47.5-20.3-74.1c15.6-25.8,48.9-32.9,75.7-15.1c8.9,5.9,15.2,5.6,23.8-0.2c28.9-19.7,61-27.9,96.1-24.8\n        c14.2,1.3,24-5.7,23.7-19.2c-0.7-37.5,18.1-59.7,52.8-70.6C296.1,12.7,304,12.7,311.8,12.7z M299.6,173.8c-0.8-1.2-1.6-2.3-2.3-3.5\n        c-8.2-27.6-2.2-42.5,23.3-58.1c18.2-11.1,24.7-29.3,17.9-49.8c-4.9-5.9-9.8-11.8-14.6-17.8c-3.6-2.8-6.7-6.8-10.7-8.3\n        c-27.4-9.6-56.1,9.5-55.8,39.1c0.2,20.2-7.4,34.2-23,45.3c-9.4,1-18.9,2.1-28.3,3.1c-29.7-2.7-56.6,4.4-80.2,22.9\n        c-18.7,12.3-35.6,5.9-52-5.1c-16.8-5.9-31.6-1.5-39.5,11.8c-9.1,15.2-6.1,28.7,9.1,42.4c26.6,15.1,53.2,30.1,79.8,45.2\n        c16.7,9.6,33.4,19.3,50.1,28.9c9.8,5.8,19.6,11.7,29.4,17.5c9.4,5.1,18.8,10.3,28.2,15.4c15.1,8.7,30.3,17.3,45.4,26\n        c10.7,6.2,21.4,12.4,32,18.5c4.5,2.9,8.7,6.2,13.5,8.5c16.7,7.6,34.6,1.5,42.5-14.2c7.6-15.1,2.2-32.4-13.2-41.4\n        c-4.2-2.4-8.8-4.2-13.2-6.3c-4.7-10.8-9.4-21.6-14-32.3c4.9-32.8-4-61.9-24.3-87.8C299.9,173.9,299.6,173.8,299.6,173.8z\n        M100.8,254.8c-14.2,29-1.7,76.3,33.6,98c36.3,22.3,81.8,15.7,108.5-16.4c-11.5-10-20.8-14.3-37.4-4.3c-35.6,21.6-84-6.9-82.6-48.5\n        C123.7,264.6,114.4,259.8,100.8,254.8z M208.2,315.4c-22.6-13-44.5-25.7-66.4-38.2c-1.6-0.9-3.6-0.9-6.4-1.5\n        c-0.8,19.7,5.9,35.1,22.9,44.4C175.1,329.4,191.7,327.8,208.2,315.4z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EDB646",
    d: "M202.8,287.6c-9.8-5.8-19.6-11.7-29.4-17.5c10.5-18.5,21.5-36.8,31.3-55.6c7.9-15.3,14.5-31.3,21.6-47\n        c0-1,0.4-1.8,1.1-2.5c15.3-9.4,22.1-24,25.6-40.6c15.1-3.4,19.3-13.8,19.7-27.9c1-36.1,15.9-50.8,51.2-51.8\n        c4.9,5.9,9.8,11.8,14.6,17.8c-2.3,1.5-5.4,2.6-6.7,4.7c-21.8,35.9-43.3,71.9-64.8,107.9c-15.2,25.2-30.7,50.2-45.4,75.7\n        C214.5,262.6,209,275.3,202.8,287.6z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EBB143",
    d: "M202.8,287.6c6.2-12.3,11.7-25,18.6-36.9c14.8-25.4,30.3-50.5,45.4-75.7c21.6-36,43.1-72,64.8-107.9\n        c1.3-2.1,4.4-3.2,6.7-4.7c6.9,20.5,0.4,38.7-17.9,49.8c-25.5,15.5-31.5,30.5-23.3,58.1c0.8,1.2,1.6,2.3,2.3,3.5c0,0,0.3,0.1,0.3,0.1\n        c0,6.8,0.1,13.5,0.1,20.3c-2.4,4.6-4.6,9.4-7.3,13.9c-15,25.9-29.8,52-45.4,77.6c-4,6.6-10.8,11.6-16.3,17.3\n        C221.6,297.9,212.2,292.8,202.8,287.6z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EDC34A",
    d: "M73.8,141.8c16.4,10.9,33.3,17.4,52,5.1c8.8,8.1,17.2,7.6,26.9,0.5c8-5.8,17.6-9.3,26.6-13.9\n        c0.2,5.1,0.3,10.3,0.5,15.4c-14.3,7.1-29,13.6-42.7,21.8c-3.7,2.2-4.4,9.5-6.5,14.5c5.4,1.9,10.7,3.7,16.1,5.6\n        c-1.3,5-1.7,10.4-3.9,14.9c-6.1,12.1-13,23.7-19.5,35.6C96.7,226.1,70.1,211,43.4,196C43.3,172.2,54.7,154.9,73.8,141.8z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EBB947",
    d: "M123.3,241.2c6.6-11.8,13.4-23.5,19.5-35.6c2.3-4.5,2.7-9.9,3.9-14.9c16.4-18.8,37.8-23.3,61.5-21.6\n        c5.9,0.4,12-1,18-1.6c-7.1,15.7-13.7,31.7-21.6,47c-9.8,18.9-20.8,37.1-31.3,55.6C156.7,260.4,140,250.8,123.3,241.2z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EFE0CE",
    d: "M100.8,254.8c13.6,4.9,22.9,9.8,22.2,28.9c-1.4,41.6,46.9,70.1,82.6,48.5c16.6-10.1,25.9-5.8,37.4,4.3\n        c-26.7,32-72.2,38.6-108.5,16.3C99.1,331.2,86.7,283.8,100.8,254.8z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EAAD42",
    d: "M231,303c5.5-5.7,12.2-10.7,16.3-17.3c15.6-25.6,30.4-51.7,45.4-77.6c2.6-4.5,4.8-9.2,7.3-13.9\n        c-1.7,10.5-3.5,20.9-5.1,31.4c-1.7,11.1-2.4,21.6,12.3,25.3c3,0.8,5.2,5,7.7,7.6c-12.8,23.5-25.7,46.9-38.5,70.4\n        C261.3,320.4,246.2,311.7,231,303z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#E8A740",
    d: "M276.5,329c12.8-23.5,25.7-46.9,38.5-70.4c3.1,1,6.2,2.1,9.2,3.1c4.7,10.8,9.4,21.6,14,32.3\n        c-2.1,22.1-11.1,40.4-29.7,53.4C297.8,341.4,287.1,335.2,276.5,329z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#F7F4F0",
    d: "M323.8,44.7c-35.2,0.9-50.1,15.7-51.2,51.8c-0.4,14.1-4.6,24.5-19.7,27.9c-6.2-1.2-12.4-2.3-18.6-3.5\n        c15.6-11.1,23.2-25.1,23-45.3C257,46,285.7,26.8,313.1,36.4C317.1,37.9,320.2,41.9,323.8,44.7z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#E28D38",
    d: "M308.5,347.5c18.6-13,27.6-31.4,29.7-53.4c4.4,2.1,9,3.8,13.2,6.3c15.4,9,20.8,26.3,13.2,41.4\n        c-7.9,15.7-25.9,21.8-42.5,14.2C317.2,353.8,313,350.4,308.5,347.5z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EBB947",
    d: "M234.3,120.8c6.2,1.2,12.4,2.3,18.6,3.5c-3.6,16.6-10.3,31.3-25.6,40.6c1.6-10.7-4.1-15.7-13.9-16.2\n        c-11.2-0.5-22.4,0.1-33.7,0.2c-0.2-5.1-0.3-10.3-0.5-15.4c8.9-3.2,17.8-6.4,26.7-9.6C215.4,122.9,224.8,121.9,234.3,120.8z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#F7F5F3",
    d: "M208.2,315.4c-16.5,12.4-33.1,14-49.9,4.8c-16.9-9.3-23.6-24.7-22.9-44.4c2.8,0.6,4.8,0.6,6.4,1.5\n        C163.8,289.7,185.6,302.4,208.2,315.4z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#E18C37",
    d: "M324.2,261.8c-3.1-1-6.2-2.1-9.2-3.1c-2.6-2.6-4.7-6.8-7.7-7.6c-14.7-3.7-14-14.2-12.3-25.3\n        c1.6-10.5,3.4-20.9,5.1-31.4c0-6.8-0.1-13.5-0.1-20.3C320.2,199.9,329,228.9,324.2,261.8z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#F7F4F1",
    d: "M73.8,141.8c-19.1,13.1-30.5,30.4-30.4,54.2c-15.3-13.6-18.2-27.2-9.1-42.4C42.2,140.4,57,135.9,73.8,141.8z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#F9F6EF",
    d: "M206,124c-8.9,3.2-17.8,6.4-26.7,9.6c-8.9,4.5-18.6,8.1-26.6,13.9c-9.8,7.1-18.1,7.6-26.9-0.5\n        C149.4,128.4,176.3,121.2,206,124z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#EAAD42",
    d: "M299.6,173.8c-0.8-1.2-1.6-2.3-2.3-3.5C298,171.5,298.8,172.6,299.6,173.8z"
  }), /* @__PURE__ */ import_react27.default.createElement("path", {
    fill: "#582E02",
    d: "M179.8,148.9c11.2-0.1,22.5-0.7,33.7-0.2c9.8,0.5,15.5,5.6,13.9,16.2c-0.7,0.7-1,1.5-1.1,2.5\n        c-6,0.6-12.1,2-18,1.6c-23.8-1.6-45.1,2.8-61.5,21.6c-5.4-1.9-10.7-3.7-16.1-5.6c2.1-5,2.8-12.2,6.5-14.5\n        C150.8,162.5,165.5,156,179.8,148.9z"
  })));
  var babyswap_default = BabySwapIcon;

  // src/searchbar/icons/biswap.tsx
  var import_react28 = __toESM(require_react());
  var BiSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react28.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react28.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react28.default.createElement("linearGradient", {
    id: "Path_8498_00000101084967787936522230000005471291386862759615_",
    gradientUnits: "userSpaceOnUse",
    x1: "209.2924",
    y1: "179.5424",
    x2: "205.455",
    y2: "200.4263",
    gradientTransform: "matrix(11.8706 0 0 -12.0939 -2239.6458 2467.4377)"
  }, /* @__PURE__ */ import_react28.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#FF496A" }
  }), /* @__PURE__ */ import_react28.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#E42648" }
  })), /* @__PURE__ */ import_react28.default.createElement("path", {
    id: "Path_8498_00000105421685609756502360000015408336945959859841_",
    style: { fill: `url(#Path_8498_00000101084967787936522230000005471291386862759615_)` },
    d: "\n	M349.8,79.1c-13.7,2.9-26.6,6.5-36.5,8.6c-27.8,6-48.7,29.1-51.7,57.4c-4.3,30.2,5.7,43.1,1.4,78.3c-7.8,61.8-66.8,82.6-94,95.5\n	c-15.8,7.2-54.6,24.4-84,37.3c86.7,63.6,208.5,45,272.1-41.7c51.9-70.7,50.1-167.5-4.4-236.2C351.8,78.9,350.8,79.2,349.8,79.1z"
  }), /* @__PURE__ */ import_react28.default.createElement("linearGradient", {
    id: "Path_8499_00000069368988579689677870000016304176058613289127_",
    gradientUnits: "userSpaceOnUse",
    x1: "199.8008",
    y1: "196.9113",
    x2: "207.4495",
    y2: "174.6699",
    gradientTransform: "matrix(13.259 0 0 -12.8711 -2492.6223 2635.6416)"
  }, /* @__PURE__ */ import_react28.default.createElement("stop", {
    offset: "2",
    style: { stopColor: "#1158F1" }
  }), /* @__PURE__ */ import_react28.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#119BED" }
  })), /* @__PURE__ */ import_react28.default.createElement("path", {
    id: "Path_8499_00000173119227639985226190000005075093812782462395_",
    style: { fill: `url(#Path_8499_00000069368988579689677870000016304176058613289127_)` },
    d: "\n	M177.4,171.8c8.4-20.6,15.3-41.7,20.9-63.2c14.4-38.8,58.9-27.3,71.1-25.8c20.1,2.9,25.8-4.3,68.2-11.5c2.2,0,4.3-0.7,6.5-0.7\n	c-71.7-80-194.7-86.7-274.7-14.9c-19.1,17.1-34.6,37.8-45.6,60.9C88.4,132.3,157.4,166.8,177.4,171.8z M135.1,39.7\n	c5.8,0.7,33,35.2,38.1,122.9c0,0-35.2-8.6-43.1-26.6C124.3,120.8,132.2,100.7,135.1,39.7z M5.1,200.5c0.2-15.2,1.9-30.4,5-45.2\n	c7.8,6.3,15.2,13,22.3,20.1c51,46.7,132.8,84,163,49.5l0,0c-15.8,19.7-41.5,28.6-66.1,23l-62.5,94C27.4,305.5,5,254.2,5.1,200.5z"
  })));
  var biswap_default = BiSwapIcon;

  // src/searchbar/icons/ellipsis.finance.tsx
  var import_react29 = __toESM(require_react());
  var EllipsisFinanceIcon = ({ height, width }) => /* @__PURE__ */ import_react29.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react29.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react29.default.createElement("linearGradient", {
    id: "SVGID_1_",
    gradientUnits: "userSpaceOnUse",
    x1: "22.0047",
    y1: "316.8269",
    x2: "348.5401",
    y2: "42.8311"
  }, /* @__PURE__ */ import_react29.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#56AFE7" }
  }), /* @__PURE__ */ import_react29.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#3772D6" }
  })), /* @__PURE__ */ import_react29.default.createElement("path", {
    style: { fill: `url(#SVGID_1_)` },
    d: "M128.5,331.5c30.3-5.8,56.5-16.5,73.2-24.5c7.5-3.7,15-7.6,22.3-11.8c0.6-0.4,0.9-0.6,1-0.6\n          c45.8-27.3,71.1-59.6,75.4-96c2.5-22.5-3.8-41.5-8.5-51.9c-3.3,18.7-15.2,59.6-56.7,92.1c-0.7,0.5-17.3,13.9-41.2,23.5\n          c-32,12.9-61.4,12.6-85.1-0.9c0,0,0,0,0,0c-0.2-0.1-0.3-0.2-0.5-0.4c0,0-0.1-0.1-0.1-0.1c-0.1-0.1-0.3-0.3-0.4-0.5c0,0,0,0,0,0\n          c-0.5-0.8-12.7-19.3-14.4-46.7c0-0.1,0-0.2,0-0.2c0-0.2,0-0.4,0-0.6c0-0.2,0-0.4,0-0.6l0-0.2c0,0,0,0,0,0l0-0.8c0,0,0,0,0,0l0,0\n          c-1.2-27,8.3-66.9,59.8-103.7c0.3-0.2,7.4-5.5,19.9-12.7c3-1.8,14.2-8.5,31.1-16c14.5-6.5,29.2-11.9,43.5-15.8c0,0,0,0,0,0\n          c0,0,0,0,0,0c0,0,0,0,0,0c0.8-0.2,1.6-0.4,2.5-0.7c3.8-1,7.5-1.9,11.2-2.7c0.8-0.2,5.5-1.1,12.8-2.2c9.4-1.5,58-8.3,91.5,5.3\n          C316,13.7,211.3,21.1,121.3,83.2c-46.8,32.3-82.7,75-100.9,120.2c-17.9,44.3-16.6,85.4,3.6,115.8c1.9,1.4,4,2.7,6.5,4.2\n          c28.8,16.4,69.6,12.9,91.5,9.4c4-0.7,6.3-1.2,6.4-1.2C128.4,331.5,128.5,331.5,128.5,331.5z"
  }), /* @__PURE__ */ import_react29.default.createElement("linearGradient", {
    id: "SVGID_00000144307283947220045560000006145373274111585195_",
    gradientUnits: "userSpaceOnUse",
    x1: "35.2763",
    y1: "212.8306",
    x2: "392.4906",
    y2: "212.8306"
  }, /* @__PURE__ */ import_react29.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#6063D9" }
  }), /* @__PURE__ */ import_react29.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#DB7ACE" }
  })), /* @__PURE__ */ import_react29.default.createElement("path", {
    style: { fill: `url(#SVGID_00000144307283947220045560000006145373274111585195_)` },
    d: "M165.2,156.5c0.7-0.5,17.3-13.9,41.2-23.5\n          c32-12.9,61.4-12.6,85.1,0.9c0,0,0,0,0,0c0.2,0.1,0.4,0.2,0.5,0.4c0,0,0.1,0.1,0.1,0.1c0.1,0.1,0.3,0.3,0.4,0.5c0,0,0,0,0,0\n          c0,0,0,0,0,0c0,0,0,0,0,0c0,0,0,0,0,0c1,1.5,18.2,28.1,13.9,64.5c-3.7,33.2-23.6,62.9-59.2,88.3c-0.3,0.2-7.6,5.6-20.3,12.9\n          c-2.8,1.7-10.8,6.4-22.7,12.1c-22,10.7-44.1,18.4-65.5,23c-2.5,0.7-33.6,8.5-66.7,5.7c-0.2,0-0.4,0-0.6,0c-1-0.1-1.9-0.2-2.9-0.3\n          c-0.6-0.1-1.2-0.1-1.8-0.2c-0.2,0-0.4,0-0.6-0.1c-10.6-1.3-21.3-3.8-31.1-8.1c49.6,48.9,154,41.3,243.7-20.6\n          c46.8-32.3,82.7-75,100.9-120.1c17.9-44.3,16.6-85.4-3.6-115.7C349.6,55.8,296,60.8,273.1,64.1c-1.3,0.2-2.6,0.5-4,0.8\n          c-5.8,1.1-12.2,2.3-17.6,3.6c-0.8,0.2-1.6,0.4-2.4,0.6c-14.2,4-28.6,9.2-42.7,15.5c-10.4,4.7-20.6,10-30.5,15.7\n          c-0.3,0.2-0.5,0.3-0.5,0.3c-61.9,36.9-75.9,77.5-76.1,106.4c0,0.7,0,1.3,0,2c0,0.7,0,1.3,0.1,2c0,0,0,0.1,0,0.1l0,0.5l0,0.2\n          c0,0.3,0,0.5,0,0.8c0,0.2,0,0.3,0,0.5c0,0,0,0.1,0,0.1c1,15.2,5.5,27.7,9,35.4C111.8,230,123.6,189,165.2,156.5z"
  })));
  var ellipsis_finance_default = EllipsisFinanceIcon;

  // src/searchbar/icons/safeswap.tsx
  var import_react30 = __toESM(require_react());
  var SafeSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react30.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react30.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react30.default.createElement("path", {
    fill: "#5B3DD7",
    d: "M378.5,237.9v-111c0-16.6-10.8-35.3-25.2-43.6L226,9.8c-14.4-8.3-36-8.3-50.3,0L48.3,83.3\n          c-9.4,5.4-14.8,13.9-14.8,23.3s5.4,17.9,14.9,23.3l19.1,11l-3.2,5.6c-1,1.7-0.9,3.9,0.2,5.5c1,1.4,2.5,2.1,4.1,2.1\n          c0.3,0,0.6,0,0.9-0.1l31.4-5.9c1.5-0.3,2.7-1.2,3.5-2.5c0.7-1.3,0.9-2.8,0.4-4.2l-10.7-29.7c-0.7-1.9-2.3-3.2-4.3-3.3\n          c-2-0.2-3.9,0.8-4.8,2.5l-2.2,3.7l-13.9-8.1l122.1-70.5c4.9-2.9,15-2.9,19.9,0l127.3,73.5c4.9,2.9,10,11.6,10,17.2v96.8l30.1,17.4\n          C378.4,240,378.5,239,378.5,237.9z"
  }), /* @__PURE__ */ import_react30.default.createElement("path", {
    fill: "#5B3DD7",
    d: "M353.7,272.2c-0.1-0.1-0.2-0.2-0.3-0.2L327.6,257l2.4-4.1c1-1.7,0.9-3.9-0.2-5.5c-1.1-1.6-3.1-2.4-5.1-2.1\n          l-13.1,2.4l-18.3,3.4c-1.5,0.3-2.7,1.2-3.5,2.5c-0.7,1.3-0.9,2.8-0.4,4.2l10.7,29.7c0.7,1.9,2.3,3.2,4.3,3.3c0.2,0,0.3,0,0.5,0\n          c1.8,0,3.5-1,4.4-2.5l3-5.2l20.3,11.8l-122.6,68.8c-5,2.8-15,2.7-19.9-0.2L63.6,288.6c-5-2.9-10-11.8-10-17.6l0-93l-30.4-17.6\n          l0,110.6c0,16.5,10.7,35.3,24.9,43.7l126.4,75.1c7.3,4.3,16.6,6.5,25.8,6.5c8.8,0,17.5-2,24.5-5.9l128.2-72\n          c9.5-5.4,15-13.8,15.1-23.2C368.2,286.1,362.9,277.7,353.7,272.2z"
  }), /* @__PURE__ */ import_react30.default.createElement("path", {
    fill: "#5B3DD7",
    d: "M245.3,209.6l-92.2-55.3l45-26l59.7,34.5v13.4l30.4,17.6V154c0-5.4-2.9-10.5-7.6-13.2l-75-43.3\n          c-4.7-2.7-10.5-2.7-15.2,0l-75,43.3c-4.7,2.7-7.6,7.7-7.6,13c0,4.1,1.6,8,4.4,10.8l63.2,36.5v2l67.1,40.2l-45,25l-59.3-35.6v-14.4\n          l-30.4-17.6v40.6c0,5.3,2.8,10.3,7.4,13l74.2,44.5c2.4,1.4,5.1,2.2,7.8,2.2c2.5,0,5.1-0.6,7.4-1.9l75.7-42c3.7-2,6.4-5.6,7.4-9.6\n          c1.6-6.5-1.2-13.3-6.9-16.7l-13.4-8.1l-22.1-12.7V209.6z"
  }), /* @__PURE__ */ import_react30.default.createElement("polygon", {
    fill: "#5B3DD7",
    points: "245.3,210.1 267.4,222.8 245.3,209.6 	"
  }), /* @__PURE__ */ import_react30.default.createElement("path", {
    fill: "#5B3DD7",
    d: "M175.5,203.2v-2l-63.2-36.5c0.9,0.9,1.9,1.7,3,2.4L175.5,203.2z"
  })));
  var safeswap_default = SafeSwapIcon;

  // src/searchbar/icons/baguette.tsx
  var import_react31 = __toESM(require_react());
  var BaquetteIcon = ({ height, width }) => /* @__PURE__ */ import_react31.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 384 387"
  }, /* @__PURE__ */ import_react31.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react31.default.createElement("g", null, /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "#EBC179",
    d: "M363.1,161.8c0,35.5-81.2,79.4-181.3,98.1C81.8,278.7,0.6,265.1,0.6,229.6c0-35.5,81.2-79.4,181.3-98.1\n            S363.1,126.3,363.1,161.8z"
  }), /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "#E2AC59",
    d: "M190.5,241.5C90.4,260.2,9.3,246.7,9.3,211.2c0-1,0.1-2.1,0.2-3.1c-5.8,7.3-8.9,14.6-8.9,21.5\n            c0,35.5,81.2,49,181.3,30.3c97.2-18.2,176.5-60.1,181-95C339.3,195.1,271,226.4,190.5,241.5z"
  }), /* @__PURE__ */ import_react31.default.createElement("g", null, /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "#FFFFFF",
    d: "M126.1,214c-0.8-0.8-1.6-1.8-2.5-2.8c-0.8-1-1.8-2-2.7-3.2c-0.9-1.1-1.8-2.3-2.8-3.5c-1-1.2-1.9-2.5-2.9-3.8\n              c-1-1.3-1.9-2.7-2.9-4.1c-0.5-0.7-1-1.4-1.5-2.2c-0.5-0.7-0.9-1.5-1.4-2.3c-0.5-0.8-1-1.5-1.4-2.3c-0.5-0.8-0.9-1.6-1.4-2.4\n              c-0.5-0.8-0.9-1.6-1.4-2.4c-0.4-0.8-0.9-1.6-1.3-2.5c-0.4-0.8-0.9-1.6-1.3-2.5c-0.4-0.8-0.8-1.7-1.3-2.5\n              c-0.9-1.7-1.6-3.4-2.4-5.1c-0.8-1.7-1.5-3.5-2.2-5.2c-0.7-1.8-1.4-3.5-2-5.2c-0.6-1.8-1.3-3.5-1.8-5.2c0-0.1-0.1-0.3-0.1-0.4\n              c-2.5,1-5,2-7.5,3c0.1,0.1,0.1,0.2,0.2,0.3c0.8,1.7,1.6,3.5,2.4,5.2c0.9,1.7,1.8,3.5,2.7,5.2c1,1.7,1.9,3.5,2.9,5.2\n              c1,1.7,2,3.4,3,5c0.5,0.8,1,1.7,1.6,2.5c0.5,0.8,1.1,1.6,1.6,2.4c0.5,0.8,1.1,1.6,1.6,2.4c0.6,0.8,1.1,1.5,1.7,2.3\n              c0.6,0.8,1.1,1.5,1.7,2.3c0.6,0.7,1.1,1.5,1.7,2.2c0.6,0.7,1.1,1.4,1.7,2.1c0.6,0.7,1.1,1.4,1.7,2c1.1,1.4,2.2,2.7,3.4,3.9\n              c1.1,1.2,2.2,2.5,3.3,3.6c1.1,1.1,2.2,2.2,3.2,3.3c1,1,2.1,2,3,2.9c1,0.9,1.9,1.8,2.8,2.6c1.8,1.5,3.3,3,4.6,4\n              c2.6,2.1,4.1,3.4,4.1,3.4s-1.4-1.4-3.8-3.7C129,217.3,127.7,215.7,126.1,214z M195.7,203.5c-0.8-0.8-1.6-1.8-2.5-2.8\n              c-0.8-1-1.8-2-2.7-3.2c-0.9-1.1-1.8-2.3-2.8-3.5c-1-1.2-1.9-2.5-2.9-3.8c-1-1.3-1.9-2.7-2.9-4.1c-0.5-0.7-1-1.4-1.5-2.2\n              c-0.5-0.7-0.9-1.5-1.4-2.3c-0.5-0.8-1-1.5-1.4-2.3c-0.5-0.8-0.9-1.6-1.4-2.4c-0.5-0.8-0.9-1.6-1.4-2.4c-0.4-0.8-0.9-1.6-1.3-2.5\n              c-0.4-0.8-0.9-1.6-1.3-2.5c-0.4-0.8-0.8-1.7-1.3-2.5c-0.9-1.7-1.6-3.4-2.4-5.1c-0.8-1.7-1.5-3.5-2.2-5.2c-0.7-1.8-1.4-3.5-2-5.2\n              c-0.6-1.8-1.3-3.5-1.8-5.2c-0.3-0.9-0.6-1.7-0.8-2.6c-0.3-0.9-0.5-1.7-0.8-2.6c-0.5-1.7-1-3.4-1.4-5.1c-3,0.7-6,1.4-9,2.1\n              c0.7,1.9,1.4,3.8,2.3,5.8c0.4,0.9,0.7,1.7,1.1,2.6c0.4,0.9,0.8,1.7,1.2,2.6c0.8,1.7,1.6,3.5,2.4,5.2c0.9,1.7,1.8,3.5,2.7,5.2\n              c1,1.7,1.9,3.5,2.9,5.2c1,1.7,2,3.4,3,5c0.5,0.8,1,1.7,1.6,2.5c0.5,0.8,1.1,1.6,1.6,2.4c0.5,0.8,1.1,1.6,1.6,2.4\n              c0.6,0.8,1.1,1.5,1.7,2.3c0.6,0.8,1.1,1.5,1.7,2.3c0.6,0.7,1.1,1.5,1.7,2.2c0.6,0.7,1.1,1.4,1.7,2.1c0.6,0.7,1.1,1.4,1.7,2\n              c1.1,1.4,2.2,2.7,3.4,3.9c1.1,1.2,2.2,2.5,3.3,3.6c1.1,1.1,2.2,2.2,3.2,3.3c1,1,2.1,2,3,2.9c1,0.9,1.9,1.8,2.8,2.6\n              c1.8,1.5,3.3,3,4.6,4c2.6,2.1,4.1,3.4,4.1,3.4s-1.4-1.4-3.8-3.7C198.7,206.8,197.3,205.2,195.7,203.5z M269.5,197.4\n              c-1.2-1.2-2.6-2.7-4.2-4.4c-0.8-0.8-1.6-1.8-2.5-2.8c-0.8-1-1.8-2-2.7-3.2c-0.9-1.1-1.8-2.3-2.8-3.5c-1-1.2-1.9-2.5-2.9-3.8\n              c-1-1.3-1.9-2.7-2.9-4.1c-0.5-0.7-1-1.4-1.5-2.2c-0.5-0.7-0.9-1.5-1.4-2.3c-0.5-0.8-1-1.5-1.4-2.3c-0.5-0.8-0.9-1.6-1.4-2.4\n              c-0.5-0.8-0.9-1.6-1.4-2.4c-0.4-0.8-0.9-1.6-1.3-2.5c-0.4-0.8-0.9-1.6-1.3-2.5c-0.4-0.8-0.8-1.7-1.3-2.5\n              c-0.9-1.7-1.6-3.4-2.4-5.1c-0.8-1.7-1.5-3.5-2.2-5.2c-0.7-1.8-1.4-3.5-2-5.2c-0.6-1.8-1.3-3.5-1.8-5.2c-0.3-0.9-0.6-1.7-0.8-2.6\n              c-0.3-0.9-0.5-1.7-0.8-2.6c-0.6-2-1.1-3.9-1.6-5.8c-3.1,0.3-6.3,0.6-9.5,1c0.9,2.5,1.9,5.1,3,7.7c0.4,0.9,0.7,1.7,1.1,2.6\n              c0.4,0.9,0.8,1.7,1.2,2.6c0.8,1.7,1.6,3.5,2.4,5.2c0.9,1.7,1.8,3.5,2.7,5.2c1,1.7,1.9,3.5,2.9,5.2c1,1.7,2,3.4,3,5\n              c0.5,0.8,1,1.7,1.6,2.5c0.5,0.8,1.1,1.6,1.6,2.4c0.5,0.8,1.1,1.6,1.6,2.4c0.6,0.8,1.1,1.5,1.7,2.3c0.6,0.8,1.1,1.5,1.7,2.3\n              c0.6,0.7,1.1,1.5,1.7,2.2c0.6,0.7,1.1,1.4,1.7,2.1c0.6,0.7,1.1,1.4,1.7,2c1.1,1.4,2.2,2.7,3.4,3.9c1.1,1.2,2.2,2.5,3.3,3.6\n              c1.1,1.1,2.2,2.2,3.2,3.3c1,1,2.1,2,3,2.9c1,0.9,1.9,1.8,2.8,2.6c1.8,1.5,3.3,3,4.6,4c2.6,2.1,4.1,3.4,4.1,3.4\n              S271.9,199.8,269.5,197.4z"
  }))), /* @__PURE__ */ import_react31.default.createElement("g", null, /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "#EBC179",
    d: "M377.6,279.1c-23.5,26.5-113.4,5.5-200.7-47S38,115.6,61.5,89.1c23.5-26.5,113.4-5.5,200.7,47\n            C349.5,188.5,401.2,252.5,377.6,279.1z"
  }), /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "#E2AC59",
    d: "M195.7,224.1c-87.3-52.5-139-116.5-115.4-143c0.7-0.8,1.4-1.5,2.2-2.2c-9.2,1.7-16.3,5-20.9,10.2\n            c-23.5,26.5,28.1,90.5,115.4,143c84.8,50.9,171.9,72.2,198.5,49.2C337.7,288.1,265.9,266.3,195.7,224.1z"
  }), /* @__PURE__ */ import_react31.default.createElement("g", null, /* @__PURE__ */ import_react31.default.createElement("path", {
    fill: "#FFFFFF",
    d: "M165.7,160.7c0-1.2,0-2.4,0-3.7c0-1.3,0-2.7,0.1-4.1c0.1-1.4,0.2-2.9,0.3-4.5c0.1-1.5,0.3-3.1,0.4-4.8\n              c0.1-1.6,0.4-3.3,0.6-5c0.1-0.9,0.2-1.7,0.3-2.6c0.1-0.9,0.3-1.7,0.4-2.6c0.1-0.9,0.3-1.8,0.4-2.7c0.2-0.9,0.4-1.8,0.5-2.7\n              c0.2-0.9,0.4-1.8,0.6-2.7c0.2-0.9,0.4-1.8,0.6-2.7c0.2-0.9,0.4-1.8,0.7-2.7c0.2-0.9,0.5-1.8,0.7-2.7c0.5-1.8,1.1-3.6,1.6-5.4\n              c0.5-1.8,1.2-3.6,1.8-5.4c0.6-1.8,1.3-3.5,2-5.3c0.7-1.7,1.4-3.4,2.1-5.1c0.1-0.1,0.1-0.3,0.2-0.4c-2.6-1-5.1-1.9-7.6-2.7\n              c0,0.1-0.1,0.2-0.1,0.4c-0.6,1.8-1.1,3.7-1.6,5.5c-0.5,1.9-1,3.8-1.5,5.7c-0.4,1.9-0.9,3.8-1.3,5.8c-0.4,1.9-0.8,3.9-1.1,5.8\n              c-0.2,1-0.3,1.9-0.5,2.9c-0.1,1-0.3,1.9-0.4,2.9c-0.1,1-0.3,1.9-0.4,2.9c-0.1,1-0.2,1.9-0.3,2.8c-0.1,0.9-0.2,1.9-0.3,2.8\n              c-0.1,0.9-0.1,1.9-0.2,2.8c-0.1,0.9-0.1,1.8-0.2,2.7c0,0.9-0.1,1.8-0.1,2.7c-0.1,1.8-0.1,3.5-0.1,5.2c0,1.7,0,3.3,0.1,4.9\n              c0.1,1.6,0.1,3.1,0.2,4.5c0.1,1.5,0.2,2.8,0.3,4.2c0.1,1.3,0.2,2.6,0.4,3.7c0.3,2.3,0.5,4.4,0.8,6.1c0.5,3.3,0.9,5.2,0.9,5.2\n              s-0.1-1.9-0.3-5.3C165.7,165.1,165.8,163.1,165.7,160.7z M224.8,199.1c0-1.2,0-2.4,0-3.7c0-1.3,0-2.7,0.1-4.1\n              c0.1-1.4,0.2-2.9,0.3-4.5c0.1-1.5,0.3-3.1,0.4-4.8c0.1-1.6,0.4-3.3,0.6-5c0.1-0.9,0.2-1.7,0.3-2.6c0.1-0.9,0.3-1.7,0.4-2.6\n              c0.1-0.9,0.3-1.8,0.4-2.7c0.2-0.9,0.4-1.8,0.5-2.7c0.2-0.9,0.4-1.8,0.6-2.7c0.2-0.9,0.4-1.8,0.6-2.7c0.2-0.9,0.4-1.8,0.7-2.7\n              c0.2-0.9,0.5-1.8,0.7-2.7c0.5-1.8,1.1-3.6,1.6-5.4c0.5-1.8,1.2-3.6,1.8-5.4c0.6-1.8,1.3-3.5,2-5.3c0.7-1.7,1.4-3.4,2.1-5.1\n              c0.4-0.8,0.7-1.7,1.1-2.5c0.4-0.8,0.8-1.6,1.1-2.4c0.8-1.6,1.5-3.2,2.3-4.7c-2.7-1.5-5.4-2.9-8.1-4.3c-0.7,1.9-1.5,3.8-2.2,5.8\n              c-0.3,0.9-0.6,1.8-0.9,2.6c-0.3,0.9-0.6,1.8-0.9,2.7c-0.6,1.8-1.1,3.7-1.6,5.5c-0.5,1.9-1,3.8-1.5,5.7c-0.4,1.9-0.9,3.8-1.3,5.8\n              c-0.4,1.9-0.8,3.9-1.1,5.8c-0.2,1-0.3,1.9-0.5,2.9c-0.1,1-0.3,1.9-0.4,2.9c-0.1,1-0.3,1.9-0.4,2.9c-0.1,1-0.2,1.9-0.3,2.8\n              c-0.1,0.9-0.2,1.9-0.3,2.8c-0.1,0.9-0.1,1.9-0.2,2.8c-0.1,0.9-0.1,1.8-0.2,2.7c0,0.9-0.1,1.8-0.1,2.7c-0.1,1.8-0.1,3.5-0.1,5.2\n              c0,1.7,0,3.3,0.1,4.9c0.1,1.6,0.1,3.1,0.2,4.5c0.1,1.5,0.2,2.8,0.3,4.2c0.1,1.3,0.2,2.6,0.4,3.7c0.3,2.3,0.5,4.4,0.8,6.1\n              c0.5,3.3,0.9,5.2,0.9,5.2s-0.1-1.9-0.3-5.3C224.8,203.5,224.8,201.5,224.8,199.1z M284,243.6c-0.1-1.7-0.1-3.7-0.2-6.1\n              c0-1.2,0-2.4,0-3.7c0-1.3,0-2.7,0.1-4.1c0.1-1.4,0.2-2.9,0.3-4.5c0.1-1.5,0.3-3.1,0.4-4.8c0.1-1.6,0.4-3.3,0.6-5\n              c0.1-0.9,0.2-1.7,0.3-2.6c0.1-0.9,0.3-1.7,0.4-2.6c0.1-0.9,0.3-1.8,0.4-2.7c0.2-0.9,0.4-1.8,0.5-2.7c0.2-0.9,0.4-1.8,0.6-2.7\n              c0.2-0.9,0.4-1.8,0.6-2.7c0.2-0.9,0.4-1.8,0.7-2.7c0.2-0.9,0.5-1.8,0.7-2.7c0.5-1.8,1.1-3.6,1.6-5.4c0.5-1.8,1.2-3.6,1.8-5.4\n              c0.6-1.8,1.3-3.5,2-5.3c0.7-1.7,1.4-3.4,2.1-5.1c0.4-0.8,0.7-1.7,1.1-2.5c0.4-0.8,0.8-1.6,1.1-2.4c0.9-1.9,1.8-3.7,2.7-5.4\n              c-2.5-1.9-5.1-3.7-7.7-5.6c-1,2.5-2,5.1-2.9,7.7c-0.3,0.9-0.6,1.8-0.9,2.6c-0.3,0.9-0.6,1.8-0.9,2.7c-0.6,1.8-1.1,3.7-1.6,5.5\n              c-0.5,1.9-1,3.8-1.5,5.7c-0.4,1.9-0.9,3.8-1.3,5.8c-0.4,1.9-0.8,3.9-1.1,5.8c-0.2,1-0.3,1.9-0.5,2.9c-0.1,1-0.3,1.9-0.4,2.9\n              c-0.1,1-0.3,1.9-0.4,2.9c-0.1,1-0.2,1.9-0.3,2.8c-0.1,0.9-0.2,1.9-0.3,2.8c-0.1,0.9-0.1,1.9-0.2,2.8c-0.1,0.9-0.1,1.8-0.2,2.7\n              c0,0.9-0.1,1.8-0.1,2.7c-0.1,1.8-0.1,3.5-0.1,5.2c0,1.7,0,3.3,0.1,4.9c0.1,1.6,0.1,3.1,0.2,4.5c0.1,1.5,0.2,2.8,0.3,4.2\n              c0.1,1.3,0.2,2.6,0.4,3.7c0.3,2.3,0.5,4.4,0.8,6.1c0.5,3.3,0.9,5.2,0.9,5.2S284.2,247,284,243.6z"
  })))));
  var baguette_default = BaquetteIcon;

  // src/searchbar/icons/pancake.tsx
  var import_react32 = __toESM(require_react());
  var PancakeSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react32.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 12 12"
  }, /* @__PURE__ */ import_react32.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react32.default.createElement("g", {
    clipPath: "url(#clip0_1021_1592)"
  }, /* @__PURE__ */ import_react32.default.createElement("path", {
    d: "M11.76 7.39C11.74 6.11 10.57 4.99 8.88 4.35L9.41 1.43C9.52 0.77 9.07 0.14 8.41 0.03C8.35 0.03 8.3 0.02 8.24 0.01C7.59 0.01 7.06 0.54 7.06 1.19V3.86C6.65 3.82 6.25 3.78 5.84 3.78C5.42 3.78 5 3.81 4.58 3.86V1.18C4.59 0.54 4.07 0 3.42 0C2.77 0 2.25 0.51 2.24 1.16C2.24 1.25 2.24 1.34 2.27 1.43L2.84 4.35C1.15 4.99 0.02 6.11 0 7.39V8.32C0 10.31 2.64 11.93 5.88 11.93C9.12 11.93 11.76 10.31 11.76 8.32V7.39ZM3.57 8.12C3.21 8.12 2.92 7.67 2.92 7.15C2.92 6.63 3.2 6.18 3.57 6.18C3.94 6.18 4.22 6.63 4.22 7.15C4.22 7.67 3.94 8.12 3.57 8.12ZM8.07 8.12C7.71 8.12 7.42 7.67 7.42 7.15C7.42 6.63 7.7 6.18 8.07 6.18C8.44 6.18 8.72 6.63 8.72 7.15C8.72 7.67 8.44 8.12 8.07 8.12Z",
    fill: "#7A808A"
  })), /* @__PURE__ */ import_react32.default.createElement("defs", null, /* @__PURE__ */ import_react32.default.createElement("clipPath", {
    id: "clip0_1021_1592"
  }, /* @__PURE__ */ import_react32.default.createElement("rect", {
    width: "11.76",
    height: "11.93",
    fill: "white"
  })))));
  var pancake_default = PancakeSwapIcon;

  // src/searchbar/icons/canary.tsx
  var import_react33 = __toESM(require_react());
  var CanaryIcon = ({ height, width }) => /* @__PURE__ */ import_react33.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 584 587"
  }, /* @__PURE__ */ import_react33.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react33.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react33.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react33.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react33.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react33.default.createElement("path", {
    fill: "none",
    d: "M0,0"
  }), /* @__PURE__ */ import_react33.default.createElement("g", {
    transform: "translate(-200.000000,800.000000) scale(0.100000,-0.100000)",
    fill: "#F5E132",
    stroke: "none"
  }, /* @__PURE__ */ import_react33.default.createElement("path", {
    d: "M4565 7600 c-268 -41 -459 -101 -700 -220 -269 -133 -466 -272 -684\n        -484 -221 -217 -387 -446 -521 -721 -167 -341 -225 -557 -264 -985 -37 -393\n        30 -795 200 -1208 151 -366 402 -708 719 -980 172 -148 555 -392 555 -353 0 4\n        -41 59 -91 122 -322 405 -494 804 -576 1339 -25 164 -25 606 0 773 74 488 246\n        905 516 1246 99 127 286 300 414 385 270 180 547 267 857 269 228 1 389 -26\n        626 -104 l122 -41 109 35 c89 29 434 107 472 107 26 0 7 -17 -52 -48 -168 -87\n        -330 -273 -401 -463 -44 -118 -59 -218 -53 -358 6 -152 28 -237 97 -376 118\n        -236 311 -391 577 -462 84 -23 118 -26 243 -26 129 0 155 3 235 27 275 82 498\n        257 615 483 34 67 15 70 -51 9 -113 -105 -215 -161 -358 -197 -122 -31 -312\n        -24 -426 15 -265 90 -448 295 -520 581 -33 128 -31 263 4 298 11 11 12 6 30\n        -112 43 -283 354 -483 653 -420 122 26 278 121 343 209 59 81 78 141 78 245\n        -1 190 -99 370 -325 593 -274 270 -584 456 -1081 646 -428 164 -975 235 -1362\n        176z"
  }), /* @__PURE__ */ import_react33.default.createElement("path", {
    d: "M5149 6508 c-59 -33 -86 -96 -81 -180 3 -41 77 -114 125 -123 120\n        -23 227 86 196 200 -29 105 -148 157 -240 103z"
  }), /* @__PURE__ */ import_react33.default.createElement("path", {
    d: "M7528 4429 c-120 -185 -238 -331 -392 -484 -475 -473 -1087 -787\n        -1684 -865 -124 -17 -420 -14 -546 5 -477 71 -873 312 -1178 716 -36 47 -73\n        100 -84 117 -10 18 -22 32 -28 32 -23 0 36 -277 100 -463 254 -738 894 -1154\n        1692 -1098 916 65 1763 743 2087 1672 43 125 127 453 123 482 -2 15 -28 -18\n        -90 -114z"
  }))));
  var canary_default = CanaryIcon;

  // src/searchbar/icons/complus.network.tsx
  var import_react34 = __toESM(require_react());
  var ComplusNetworkIcon = ({ height, width }) => /* @__PURE__ */ import_react34.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react34.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react34.default.createElement("polygon", {
    fill: "#BB263B",
    points: "312.6,13.1 87.4,13.1 87.4,160.6 161.8,160.6 161.8,86.8 238.2,86.8 238.2,160.6 312.6,160.6 "
  }), /* @__PURE__ */ import_react34.default.createElement("polygon", {
    fill: "#BB263B",
    points: "87.4,386.9 312.6,386.9 312.6,239.4 238.2,239.4 238.2,313.2 161.8,313.2 161.8,239.4 87.4,239.4 "
  })));
  var complus_network_default = ComplusNetworkIcon;

  // src/searchbar/icons/elk.finance.tsx
  var import_react35 = __toESM(require_react());
  var ElkFinanceIcon = ({ height, width }) => /* @__PURE__ */ import_react35.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react35.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react35.default.createElement("path", {
    d: "M255.957 507.599C394.935 507.599 507.599 394.935 507.599 255.957C507.599 116.979 394.935 4.31494 255.957 4.31494C116.979 4.31494 4.31494 116.979 4.31494 255.957C4.31494 394.935 116.979 507.599 255.957 507.599Z",
    fill: "white"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M255.957 8.62982C119.362 8.62982 8.6297 119.362 8.6297 255.957C8.6297 392.552 119.362 503.284 255.957 503.284C392.552 503.284 503.284 392.552 503.284 255.957C503.284 119.362 392.552 8.62982 255.957 8.62982ZM0 255.957C0 114.596 114.596 0.00012207 255.957 0.00012207C397.318 0.00012207 511.914 114.596 511.914 255.957C511.914 397.318 397.318 511.914 255.957 511.914C114.596 511.914 0 397.318 0 255.957Z",
    fill: "#231F20"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    d: "M255.957 473.684C376.204 473.684 473.684 376.204 473.684 255.957C473.684 135.709 376.204 38.2295 255.957 38.2295C135.709 38.2295 38.2295 135.709 38.2295 255.957C38.2295 376.204 135.709 473.684 255.957 473.684Z",
    fill: "#009F55"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M255.957 46.8592C140.475 46.8592 46.8593 140.475 46.8593 255.957C46.8593 371.438 140.475 465.054 255.957 465.054C371.438 465.054 465.054 371.438 465.054 255.957C465.054 140.475 371.438 46.8592 255.957 46.8592ZM29.5999 255.957C29.5999 130.943 130.943 29.5998 255.957 29.5998C380.97 29.5998 482.314 130.943 482.314 255.957C482.314 380.97 380.97 482.314 255.957 482.314C130.943 482.314 29.5999 380.97 29.5999 255.957Z",
    fill: "#231F20"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    d: "M350.205 353.957C347.866 355.594 344.65 356.705 340.556 357.29C336.696 357.875 333.89 357.758 332.135 356.939C331.667 356.705 331.199 355.887 330.732 354.483C330.381 352.963 329.913 351.91 329.328 351.325C329.094 351.091 328.802 350.916 328.451 350.799C323.773 348.226 318.744 346.004 313.364 344.133C300.732 339.454 287.691 336.589 274.241 335.536C267.341 319.045 263.598 310.039 263.013 308.519C258.92 298.11 257.633 292.145 259.154 290.625L391.082 158.697C391.9 157.878 394.415 158.054 398.625 159.223C402.953 160.51 405.701 161.855 406.871 163.258C408.157 164.779 410.029 168.521 412.485 174.486C415.058 180.334 417.689 184.603 420.379 187.293C423.888 190.802 430.028 193.784 438.8 196.24C446.987 198.345 451.49 200.275 452.309 202.029C454.18 205.772 455.233 213.023 455.467 223.783C455.934 234.544 455.291 241.269 453.537 243.959C452.718 245.245 449.794 245.947 444.765 246.064C439.853 246.298 436.636 245.654 435.116 244.134C433.829 242.848 433.069 241.736 432.835 240.801C432.601 239.865 432.309 239.339 431.958 239.222C426.812 235.947 421.783 233.14 416.871 230.801C405.292 225.07 395.526 222.088 387.573 221.854L358.977 250.45C365.176 252.438 372.661 255.596 381.433 259.923C383.538 261.561 384.824 268.11 385.292 279.572C385.994 291.034 385.292 297.817 383.187 299.923C381.9 301.209 379.561 301.911 376.17 302.028C372.778 302.145 370.088 301.677 368.1 300.624C366.93 299.455 364.766 297.525 361.608 294.835C356.345 291.209 344.767 287.116 326.872 282.555L308.451 300.975C314.065 302.379 321.258 304.659 330.03 307.817C339.036 310.975 344.24 313.256 345.644 314.659C347.281 316.297 348.802 322.963 350.205 334.659C351.842 346.355 351.842 352.787 350.205 353.957Z",
    fill: "white"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M393.356 162.524L262.855 293.026C262.874 293.502 262.964 294.249 263.196 295.329C263.766 297.968 265.01 301.805 267.029 306.94L267.035 306.955L267.041 306.97C267.568 308.342 270.94 316.461 277.215 331.464C290.117 332.7 302.656 335.569 314.822 340.071C320.299 341.979 325.449 344.244 330.265 346.873C331.017 347.183 331.744 347.639 332.379 348.274C333.778 349.673 334.47 351.595 334.876 353.258C335.807 353.385 337.399 353.404 339.91 353.024L339.928 353.021L339.946 353.019C343.097 352.569 345.371 351.811 346.96 350.908C347.049 350.356 347.118 349.497 347.118 348.255C347.118 345.34 346.742 341.041 345.932 335.257L345.926 335.215L345.921 335.173C345.226 329.385 344.517 324.965 343.805 321.847C343.449 320.283 343.113 319.144 342.817 318.364C342.674 317.988 342.566 317.768 342.508 317.657C342.391 317.575 342.162 317.426 341.777 317.211C341.115 316.842 340.187 316.388 338.956 315.848C336.498 314.771 333.061 313.453 328.602 311.889L328.585 311.883L328.569 311.877C319.862 308.743 312.82 306.515 307.405 305.161L300.012 303.313L325.558 277.767L327.938 278.373C336.955 280.672 344.459 282.872 350.415 284.978C356.298 287.057 360.944 289.138 364.056 291.282L364.238 291.407L364.407 291.55C367.155 293.892 369.243 295.735 370.599 297.034C371.709 297.486 373.437 297.805 376.021 297.716C377.479 297.665 378.52 297.493 379.228 297.281C379.749 297.125 379.997 296.975 380.09 296.908C380.134 296.83 380.248 296.611 380.388 296.167C380.621 295.43 380.843 294.338 381 292.812C381.316 289.76 381.33 285.467 380.986 279.836L380.983 279.792L380.981 279.748C380.751 274.105 380.324 269.854 379.743 266.895C379.451 265.413 379.146 264.386 378.872 263.724C378.817 263.591 378.768 263.484 378.727 263.401C370.411 259.33 363.399 256.4 357.659 254.558L350.926 252.399L385.839 217.486L387.7 217.541C396.536 217.801 406.938 221.074 418.755 226.919C423.76 229.304 428.855 232.145 434.041 235.433C435.251 236.066 435.908 237.061 436.213 237.609C436.6 238.306 436.839 239.043 436.999 239.667C437.018 239.703 437.061 239.78 437.142 239.899C437.328 240.171 437.646 240.56 438.153 241.069C438.155 241.067 438.469 241.317 439.515 241.526C440.651 241.753 442.3 241.862 444.56 241.754L444.612 241.751L444.665 241.75C447.048 241.695 448.69 241.502 449.723 241.254C449.895 241.213 450.035 241.173 450.147 241.139C450.427 240.425 450.8 238.995 451.04 236.486C451.335 233.404 451.386 229.254 451.156 223.971L451.154 223.924L451.153 223.877C451.038 218.6 450.724 214.286 450.232 210.895C449.767 207.696 449.177 205.56 448.592 204.259C448.578 204.249 448.564 204.239 448.548 204.228C448.208 203.993 447.599 203.653 446.618 203.232C444.663 202.395 441.735 201.45 437.726 200.419L437.681 200.408L437.637 200.395C428.657 197.881 421.637 194.653 417.328 190.344C414.088 187.104 411.198 182.274 408.535 176.224L408.515 176.177L408.495 176.129C407.288 173.198 406.251 170.877 405.38 169.135C404.468 167.312 403.867 166.388 403.577 166.045L403.567 166.033L403.558 166.022C403.557 166.022 403.47 165.924 403.22 165.749C402.957 165.565 402.573 165.335 402.036 165.072C400.958 164.545 399.446 163.97 397.433 163.37C395.515 162.839 394.189 162.591 393.356 162.524ZM448.752 204.387C448.752 204.387 448.744 204.38 448.731 204.367C448.746 204.38 448.753 204.387 448.752 204.387ZM450.504 241.003C450.504 241.004 450.503 241.004 450.503 241.004C450.511 240.999 450.512 240.999 450.504 241.003ZM346.822 351.49C346.82 351.487 346.83 351.456 346.853 351.404C346.835 351.466 346.823 351.492 346.822 351.49ZM262.872 292.521C262.873 292.522 262.871 292.546 262.861 292.589C262.866 292.541 262.871 292.519 262.872 292.521ZM393.882 153.91C395.564 154.027 397.567 154.451 399.78 155.066L399.818 155.076L399.855 155.087C402.151 155.77 404.165 156.507 405.829 157.321C407.424 158.101 409.024 159.108 410.174 160.482C411.167 161.659 412.142 163.363 413.099 165.276C414.094 167.266 415.214 169.782 416.455 172.795C418.931 178.414 421.296 182.108 423.431 184.242C426.135 186.946 431.382 189.678 439.92 192.073C444.077 193.143 447.479 194.212 450.017 195.3C451.288 195.845 452.47 196.447 453.46 197.133C454.366 197.76 455.507 198.724 456.189 200.141C457.418 202.617 458.224 205.883 458.772 209.655C459.331 213.504 459.659 218.18 459.78 223.643C460.015 229.1 459.978 233.676 459.63 237.308C459.301 240.751 458.645 244.014 457.162 246.299C455.784 248.443 453.361 249.256 451.737 249.646C449.858 250.096 447.542 250.313 444.918 250.376C442.286 250.499 439.889 250.401 437.823 249.988C435.788 249.581 433.667 248.787 432.065 247.185C430.746 245.866 429.398 244.227 428.785 242.32C424.071 239.362 419.481 236.823 415.016 234.697L414.986 234.683L414.957 234.668C404.574 229.529 396.047 226.843 389.258 226.271L366.848 248.681C371.788 250.605 377.29 253.068 383.342 256.054L383.735 256.248L384.082 256.517C385.468 257.596 386.302 259.112 386.844 260.421C387.418 261.805 387.858 263.44 388.211 265.232C388.914 268.814 389.364 273.554 389.602 279.353C389.956 285.164 389.969 289.978 389.584 293.7C389.391 295.566 389.086 297.281 388.617 298.766C388.164 300.201 387.455 301.757 386.238 302.974C383.74 305.472 379.962 306.215 376.318 306.34C372.527 306.471 368.991 305.979 366.081 304.438L365.507 304.134L365.049 303.675C364.035 302.661 362.049 300.882 358.988 298.271C356.811 296.813 353.086 295.075 347.539 293.114C342.426 291.306 335.982 289.383 328.181 287.348L316.722 298.806C321.056 300.121 325.976 301.772 331.475 303.752C336.014 305.343 339.677 306.742 342.42 307.944C343.791 308.545 344.99 309.122 345.98 309.674C346.9 310.186 347.912 310.825 348.695 311.608C349.771 312.684 350.434 314.117 350.883 315.297C351.376 316.593 351.815 318.158 352.219 319.928C353.026 323.467 353.777 328.215 354.484 334.103C355.308 339.995 355.748 344.746 355.748 348.255C355.748 349.998 355.641 351.622 355.344 353.001C355.097 354.149 354.513 356.183 352.713 357.468L352.696 357.48L352.68 357.492C349.597 359.649 345.662 360.918 341.184 361.559C337.194 362.162 333.29 362.24 330.311 360.849L330.258 360.825L330.206 360.799C328.812 360.102 328.049 358.924 327.687 358.291C327.256 357.537 326.918 356.685 326.638 355.848L326.574 355.653L326.527 355.453C326.432 355.038 326.338 354.733 326.26 354.518C321.839 352.095 317.07 349.99 311.946 348.208L311.905 348.194L311.865 348.179C299.608 343.639 286.958 340.859 273.905 339.838L271.278 339.632L270.261 337.202C263.406 320.819 259.626 311.727 258.993 310.084C256.921 304.816 255.477 300.471 254.761 297.148C254.405 295.5 254.182 293.899 254.227 292.463C254.267 291.178 254.543 289.133 256.103 287.574L388.031 155.646C389.068 154.609 390.307 154.204 391.196 154.032C392.112 153.856 393.042 153.851 393.882 153.91Z",
    fill: "#231F20"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    d: "M165.451 354.206C167.8 355.85 171.03 356.965 175.14 357.553C179.015 358.14 181.834 358.022 183.595 357.2C184.065 356.965 184.535 356.143 185.004 354.734C185.357 353.207 185.827 352.15 186.414 351.563C186.649 351.328 186.942 351.152 187.294 351.035C191.992 348.451 197.042 346.22 202.444 344.341C215.127 339.644 228.221 336.766 241.726 335.709C248.655 319.151 252.413 310.108 253 308.582C257.11 298.13 258.402 292.141 256.875 290.614L124.408 158.147C123.586 157.324 121.061 157.501 116.833 158.675C112.488 159.967 109.728 161.317 108.554 162.727C107.262 164.253 105.383 168.011 102.917 174C100.333 179.872 97.691 184.159 94.9899 186.86C91.4669 190.383 85.3015 193.377 76.4938 195.843C68.2733 197.957 63.752 199.895 62.9299 201.657C61.051 205.414 59.9941 212.695 59.7592 223.5C59.2894 234.304 59.9353 241.056 61.6969 243.757C62.5189 245.049 65.4548 245.754 70.5046 245.871C75.4369 246.106 78.6664 245.46 80.193 243.933C81.4848 242.642 82.2481 241.526 82.483 240.586C82.7179 239.647 83.0115 239.119 83.3638 239.001C88.531 235.713 93.5807 232.894 98.513 230.546C110.139 224.791 119.945 221.797 127.931 221.562L156.644 250.275C150.42 252.271 142.904 255.442 134.096 259.787C131.982 261.431 130.69 268.008 130.221 279.516C129.516 291.025 130.221 297.836 132.335 299.95C133.626 301.242 135.975 301.947 139.381 302.064C142.786 302.182 145.487 301.712 147.484 300.655C148.658 299.481 150.831 297.543 154.001 294.842C159.286 291.201 170.912 287.091 188.88 282.511L207.376 301.007C201.739 302.416 194.517 304.706 185.709 307.877C176.667 311.048 171.441 313.338 170.031 314.747C168.387 316.391 166.861 323.085 165.451 334.829C163.807 346.572 163.807 353.031 165.451 354.206Z",
    fill: "white"
  }), /* @__PURE__ */ import_react35.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M124.293 153.463C125.185 153.635 126.43 154.042 127.471 155.083L259.939 287.551C261.505 289.116 261.782 291.17 261.822 292.461C261.867 293.902 261.643 295.509 261.286 297.164C260.567 300.501 259.117 304.864 257.037 310.154C256.4 311.805 252.605 320.934 245.723 337.382L244.701 339.822L242.064 340.029C228.957 341.055 216.256 343.846 203.948 348.404L203.908 348.419L203.867 348.433C198.723 350.222 193.934 352.336 189.495 354.769C189.416 354.985 189.322 355.291 189.226 355.708L189.18 355.909L189.115 356.104C188.834 356.945 188.494 357.8 188.062 358.557C187.698 359.193 186.932 360.376 185.533 361.075L185.48 361.102L185.427 361.126C182.436 362.522 178.516 362.444 174.508 361.839C170.013 361.195 166.062 359.921 162.967 357.755L162.95 357.743L162.933 357.731C161.126 356.441 160.539 354.398 160.291 353.246C159.993 351.862 159.886 350.231 159.886 348.481C159.886 344.957 160.328 340.187 161.155 334.27C161.865 328.358 162.619 323.591 163.429 320.037C163.835 318.26 164.276 316.689 164.771 315.387C165.221 314.203 165.888 312.764 166.968 311.684C167.754 310.897 168.771 310.256 169.694 309.741C170.688 309.187 171.892 308.608 173.269 308.005C176.023 306.798 179.701 305.393 184.258 303.795C189.779 301.807 194.72 300.15 199.071 298.829L187.566 287.324C179.733 289.368 173.262 291.299 168.129 293.113C162.559 295.083 158.819 296.828 156.632 298.292C153.559 300.913 151.565 302.7 150.547 303.718L150.087 304.179L149.511 304.484C146.589 306.031 143.038 306.525 139.231 306.394C135.573 306.268 131.78 305.522 129.271 303.014C128.049 301.792 127.337 300.229 126.882 298.789C126.411 297.298 126.105 295.576 125.911 293.702C125.525 289.964 125.538 285.13 125.894 279.296C126.133 273.473 126.584 268.714 127.291 265.118C127.644 263.318 128.086 261.677 128.662 260.287C129.207 258.973 130.044 257.45 131.436 256.367L131.784 256.097L132.179 255.902C138.256 252.904 143.78 250.431 148.741 248.499L126.239 225.997C119.422 226.572 110.86 229.269 100.435 234.429L100.405 234.443L100.376 234.457C95.892 236.592 91.2836 239.142 86.5504 242.112C85.9349 244.027 84.581 245.672 83.2566 246.997C81.648 248.605 79.5183 249.403 77.4756 249.811C75.401 250.226 72.9934 250.324 70.3513 250.201C67.7166 250.138 65.3905 249.92 63.5042 249.467C61.8732 249.076 59.441 248.26 58.0569 246.107C56.5684 243.813 55.9092 240.537 55.5785 237.08C55.2297 233.433 55.1919 228.837 55.4287 223.358C55.5493 217.873 55.8794 213.178 56.4405 209.313C56.9904 205.525 57.8005 202.246 59.0347 199.759C59.7191 198.337 60.8644 197.37 61.774 196.74C62.7685 196.052 63.9549 195.447 65.2308 194.9C67.7799 193.807 71.1952 192.734 75.3692 191.659C83.9424 189.254 89.2112 186.511 91.9264 183.796C94.0692 181.653 96.4442 177.944 98.9308 172.302C100.177 169.277 101.301 166.751 102.301 164.752C103.261 162.832 104.24 161.121 105.237 159.939C106.392 158.559 107.999 157.549 109.6 156.765C111.271 155.948 113.293 155.207 115.598 154.522L115.636 154.511L115.673 154.501C117.896 153.883 119.907 153.458 121.596 153.34C122.44 153.281 123.373 153.286 124.293 153.463ZM118.03 162.839C116.009 163.441 114.491 164.019 113.409 164.548C112.869 164.812 112.484 165.042 112.22 165.227C111.969 165.404 111.881 165.502 111.881 165.502L111.872 165.513L111.861 165.525C111.57 165.87 110.966 166.797 110.051 168.628C109.176 170.376 108.135 172.707 106.923 175.65L106.903 175.698L106.882 175.745C104.209 181.821 101.307 186.67 98.0535 189.923C93.7271 194.25 86.6784 197.491 77.662 200.015L77.6175 200.028L77.5728 200.039C73.547 201.075 70.607 202.023 68.6441 202.864C67.6594 203.286 67.0475 203.628 66.7062 203.864C66.6906 203.875 66.676 203.886 66.6623 203.895C66.0747 205.202 65.4818 207.346 65.0156 210.558C64.5213 213.963 64.2059 218.295 64.0907 223.594L64.0896 223.641L64.0876 223.688C63.857 228.992 63.908 233.159 64.2041 236.254C64.4451 238.774 64.8198 240.209 65.1011 240.926C65.2129 240.961 65.3534 241 65.5264 241.042C66.5636 241.291 68.2119 241.484 70.6053 241.54L70.658 241.541L70.7106 241.543C72.9802 241.652 74.6351 241.543 75.7762 241.314C76.821 241.105 77.1385 240.856 77.1437 240.856C77.6531 240.345 77.9721 239.954 78.1587 239.681C78.2406 239.562 78.2833 239.485 78.302 239.448C78.4633 238.821 78.7031 238.082 79.0921 237.381C79.3977 236.831 80.0574 235.832 81.2721 235.197C86.4798 231.895 91.5961 229.042 96.6209 226.648C108.486 220.778 118.932 217.492 127.803 217.231L129.672 217.176L164.728 252.232L157.967 254.4C152.203 256.249 145.163 259.192 136.813 263.279C136.772 263.363 136.723 263.47 136.667 263.603C136.392 264.268 136.085 265.299 135.793 266.788C135.21 269.759 134.781 274.027 134.55 279.693L134.548 279.737L134.545 279.781C134.199 285.435 134.213 289.746 134.53 292.811C134.689 294.343 134.911 295.439 135.145 296.179C135.285 296.625 135.4 296.845 135.444 296.923C135.538 296.99 135.787 297.141 136.31 297.298C137.02 297.511 138.066 297.684 139.53 297.734C142.125 297.824 143.86 297.504 144.974 297.05C146.335 295.745 148.432 293.895 151.192 291.544L151.361 291.4L151.544 291.274C154.668 289.121 159.334 287.032 165.24 284.944C171.221 282.83 178.756 280.621 187.81 278.313L190.2 277.704L215.85 303.354L208.427 305.21C202.989 306.57 195.919 308.806 187.177 311.954L187.16 311.96L187.143 311.966C182.666 313.536 179.215 314.859 176.747 315.941C175.511 316.483 174.579 316.938 173.914 317.309C173.527 317.525 173.298 317.675 173.18 317.757C173.121 317.868 173.013 318.09 172.87 318.467C172.572 319.25 172.235 320.394 171.877 321.964C171.163 325.095 170.451 329.533 169.753 335.345L169.748 335.387L169.742 335.429C168.929 341.237 168.551 345.553 168.551 348.481C168.551 349.728 168.621 350.59 168.71 351.144C170.305 352.051 172.588 352.812 175.753 353.264L175.771 353.266L175.789 353.269C178.31 353.651 179.909 353.632 180.844 353.503C181.251 351.834 181.946 349.904 183.35 348.5C183.988 347.862 184.718 347.404 185.473 347.092C190.309 344.453 195.48 342.178 200.979 340.263C213.195 335.743 225.785 332.861 238.74 331.621C245.041 316.556 248.426 308.404 248.956 307.027L248.962 307.011L248.968 306.996C250.995 301.841 252.245 297.988 252.816 295.338C253.05 294.254 253.14 293.504 253.159 293.025L122.124 161.99C121.287 162.057 119.956 162.306 118.03 162.839ZM253.142 292.518C253.143 292.517 253.148 292.538 253.153 292.586C253.143 292.543 253.141 292.519 253.142 292.518ZM168.849 351.728C168.847 351.731 168.836 351.705 168.817 351.642C168.841 351.694 168.85 351.726 168.849 351.728ZM66.501 204.023C66.5005 204.023 66.507 204.017 66.522 204.004C66.5089 204.017 66.5015 204.023 66.501 204.023Z",
    fill: "#231F20"
  })));
  var elk_finance_default = ElkFinanceIcon;

  // src/searchbar/icons/lydia.finance.tsx
  var import_react36 = __toESM(require_react());
  var LydiaFinanceIcon = ({ height, width }) => /* @__PURE__ */ import_react36.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react36.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#070931",
    d: "M26.9,147.2c-5.7,7.9-11.4,15.7-17.3,23.9c-0.8-16.7,5.1-31.3,12-45.6c6.9-14.4,16.2-27.2,28.6-37.4\n        c-0.2-0.3-0.4-0.7-0.5-1c-4.5,1.5-9.1,2.7-13.5,4.4c-4.5,1.8-8.8,4.2-14.2,5.8c1.7-3.4,3-7.1,5.3-10.1\n        c10.2-13.1,24-21.3,39.1-27.4c14.9-5.9,30-11.6,45-17.3c0.3-0.1,0.6-0.4,1.5-1c-11.1-0.9-20.5,4.2-30.6,4.8\n        c-0.2-0.5-0.4-1-0.6-1.5c6.1-3,12-6.5,18.3-8.8c12.1-4.5,24.4-8.7,36.7-12.5c10.2-3.1,20.5-2.3,30.6,1.3c0.9,0.3,1.8,0.5,2.8,0.7\n        c0.2,0,0.5-0.2,1.1-0.4c-4.9-7.4-9.8-14.7-10.5-23.9c11.9,8.1,22.2,18.1,36.5,22.8c-4.3-6.5-8.4-12.7-12.5-18.8\n        c0.4-0.3,0.7-0.6,1.1-0.8c1.4,1,2.7,2,4.1,3c0.1,0.8-0.2,1.8,0.3,2.2c6.6,6.5,13.3,12.9,20,19.4c0.6,0.3,1.1,0.6,1.7,0.8l0,0\n        c4.8,3,9.4,6.4,14.4,9.1c9.8,5.4,18.5,12.1,25.3,21c3.6,4.8,7.5,9.4,11.1,14.2c6.6,9,14.3,16.3,26.3,17.4c-1.5-3-3-6.1-4.5-9.2\n        c-0.3-0.3-0.6-0.6-0.9-0.9c0,0,0.1,0,0.1,0C279.7,68,270.6,58,260.3,48.9c-0.9-1.1-1.6-2.4-2.6-3.4c-12.7-11.9-28-19.1-44.1-24.7\n        c-5.8-2.1-11.4-4.8-17.1-7.3c-1.6-1.6-3.3-3.3-4.9-4.9c0.9,0.1,1.9,0,2.8,0.3c11.7,4.4,23.5,8.6,35,13.5\n        c25.6,11,45.7,28,57.5,53.8c1.4,3.1,2.9,6.2,4.2,9.3c2.8,6.5,7.2,11.6,13.1,15.4c8.5,5.6,13.7,13.2,14.7,23.4\n        c0.8,8.4,4.9,14.7,11.3,20.1c14.3,11.9,28.9,23.3,45.1,32.6c1.9,1.1,3.7,2.4,5.4,3.7c9.2,7.1,10.8,16.5,8.1,27.1\n        c-0.7,2.7-1.4,5.1-0.3,8.2c2.3,6.4,0.2,12.7-2.2,18.7c-4.1,10.2-9.3,19.8-17.3,27.6c-4.5,4.4-6.4,10-6.5,16.2\n        c-0.5,18.4-7.6,33.9-20.6,46.8c-2.7,2.7-5.4,5.4-8.3,7.9c-9.5,8.2-17,18-23.2,28.9c-3.2,5.6-7.8,10.5-12,15.5\n        c-1.6,1.9-3.9,3.2-6.4,5.3c-0.3-3.2-0.5-5.5-0.7-7.9c-4.2,7.8-8.9,15-15.9,20.7c-0.4-8.2-0.7-16-1.1-24.2\n        c-3.3,4.3-6.4,8.3-10.2,13.1c-2.2-7.9-4-14.4-5.8-20.9c-0.4,0-0.8,0.1-1.2,0.1c0.3,10.8,0,21.4-7,30.9c-3.5-7.5-6.7-14.4-9.9-21.3\n        c-0.3,0.1-0.6,0.2-0.9,0.3c0.2,3.4,0.4,6.9,0.6,10.3c-0.3,0.1-0.5,0.2-0.8,0.3c-2.9-3.9-5.8-7.9-9.4-12.8\n        c0.6,9.5-2.9,16.5-7.6,22.8c-2.4-7.6-4.8-15.1-7.5-23.6c-1.5,3.9-2.2,6.8-3.6,9.2c-0.8,1.4-2.8,3-4.2,2.9c-1.2,0-2.8-2.1-3.4-3.6\n        c-3.5-8.4-6.7-16.9-10-25.3c-0.4,0.1-0.7,0.3-1.1,0.4c-1.3,6.1-2.4,12.3-3.9,18.4c-0.9,3.7-2.1,7.3-3.4,10.9\n        c-0.3,0.9-1.3,2.1-2,2.2c-0.8,0-2-1-2.4-1.8c-0.9-2.1-1.1-4.5-2-6.6c-2.3-5.7-4.8-11.3-7.2-16.9c-3.5-8.2-7.1-16.3-10.7-24.6\n        c-0.1,0.7-0.4,1.5-0.4,2.3c-0.1,11.4-0.1,22.7-0.2,34.1c0,0.8,0.2,1.7-0.1,2.4c-0.4,1-1,2.2-1.8,2.5c-0.6,0.2-1.9-0.8-2.4-1.6\n        c-5.6-8.9-11.2-17.8-16.6-26.7c-1.3-2.2-2.4-4.5-4.2-7.9c0,9.1,0.2,17.1-5.5,24.4c-7.6-12-9.9-25.4-14.9-37.7\n        c-1.7,3.5-3.4,7.3-5.4,10.8c-0.7,1.3-2.2,2.1-3.4,3.1c-0.9-1.3-2.4-2.5-2.5-3.8c-0.5-4.9-0.6-9.8-0.8-15.1c-2,2.9-3.8,5.9-6,8.4\n        c-1.3,1.5-3.4,2.2-5.2,3.3c-0.8-1.8-2-3.5-2.3-5.3c-0.9-5.5-1.5-11-2.3-17.2c-3.8,3.8-4.5,9.8-10.8,11.2\n        c4.9-19.6,0.1-37.7-5.8-55.8c-2.4,12.4-4.6,24.8-13.3,36.1c-0.6-2.4-1.4-3.7-1.2-4.8c1.8-15.8-3.1-30.3-8.3-44.7\n        c-4.8-13.2-10.3-26.2-12.1-40.6c-2.6,16.6-5.3,33.1-7.9,49.7c-0.5,0.1-1,0.2-1.4,0.3c-1.3-3.4-2.9-6.8-3.8-10.3\n        c-5.3-19.4-8.5-39-6.4-59.2c1.7-16,5.7-31.4,12.2-46.1c0-0.3,0-0.7,0-1C27.4,146.9,27.2,147.1,26.9,147.2z M179.9,27.5\n        C179.9,27.5,179.9,27.5,179.9,27.5c0.3,0.3,0.5,0.5,0.8,0.8l0,0c0.3,0.3,0.6,0.6,0.9,0.8c0,0,0,0,0,0c0.6,0.5,1.1,1.1,1.7,1.6\n        c0,0,0,0,0,0c0.5,0.3,1,0.7,1.5,1c0,0,0,0,0,0c0.6,0.5,1.2,1,1.8,1.5l0,0c0.3,0.3,0.6,0.5,0.9,0.8c0,0,0,0,0,0\n        c4.4,3.3,8.6,7.2,13.4,9.8c10.3,5.5,19.9,11.9,27.8,20.5c4.2,4.6,8,9.5,12.1,14.3c2.7,3.9,5.7,7.2,10.9,7.2\n        c5.2,0.3,10.5,0.6,16.8,0.9c-3.1-2.7-5.5-4.7-7.8-6.7c-0.3-0.3-0.5-0.6-0.8-0.8l0.1,0c-0.4-0.9-0.5-1.9-1.1-2.6\n        c-7.8-9.5-15.2-19.3-23.7-28.1c-3.4-3.5-9.2-4.8-13.9-7.1c0,0,0,0,0,0c-0.6-0.3-1.2-0.6-1.8-0.9c-5.9-3.4-11.5-7.5-17.6-10.2\n        c-12.6-5.5-24.7-11.5-34.3-21.6c-0.6-0.7-1.7-0.9-3.6-1.8c2,3.3,3.3,5.5,4.7,7.6c1,1.5,2.3,2.7,3.4,4.1c1.8,2.2,3.6,4.3,5.4,6.5\n        c0.6,0.5,1.2,1,1.8,1.6c0,0,0,0,0,0C179.3,27,179.6,27.3,179.9,27.5z M95.3,99.8c-0.2,0.3-0.5,0.6-0.7,0.9l0,0\n        c-0.4,0.5-0.7,1-1.1,1.5c-3.7,6.6-7.9,13.1-11.2,20c-7.4,15.7-10.1,32.8-14,49.5c-0.2,1.1,0,2.2,0,3.7c7.8-15.3,15.4-30.2,23-45.1\n        c0.3-0.6,0.5-1.1,0.8-1.7c0,0,0,0.1,0,0.1c0.9-1,1.8-2,2.6-3.1c11.5-15.9,26.2-27.5,45.1-33.1C154,88.3,168.3,85,181,76.9\n        c4.4-2.8,9.8-3.9,14.9-5.8c-0.2-0.2-0.4-0.4-0.6-0.5c-0.7-0.4-1.4-0.8-2.1-1.2c-10.9-6.1-22.7-6.3-34.7-5.8\n        c-17.5,0.7-33.8,5.2-46.9,17.6c-5.7,5.4-10.3,11.8-15.5,17.8l0,0C95.9,99.2,95.6,99.5,95.3,99.8L95.3,99.8z M36.1,85\n        c0.6-0.3,1.1-0.5,1.7-0.8c0,0,0,0,0,0c11.8-3.1,23.5-7,35.5-9.2c12.7-2.4,25.6-3.2,38.5-4.7l0,0c0,0.3,0,0.5-0.1,0.8\n        c-2.2,0.6-4.4,1.2-6.7,1.7c-6.8,1.5-13.7,3-20.5,4.5c-8,4-15.9,7.9-23.9,11.9C53.8,94.5,47,100,40.2,105.4\n        c-3.3,4.7-6.5,9.4-9.8,14c0,0,0,0,0,0c-0.4,0.6-0.8,1.1-1.2,1.7c-1,1.9-2,3.8-2.9,5.6c-3.1,7.2-6.2,14.4-9.3,21.6\n        c-0.4,1.3-0.8,2.5-1.2,3.8c0.2,0.1,0.5,0.2,0.7,0.3c5.7-6.7,11.3-13.4,17-20c1.7-0.8,3.4-1.6,5.1-2.4c-1.4,3.7-2.8,7.5-4,11.2\n        c-1,2.8-1.8,5.7-2.6,8.6c-15.5,33.4-14.8,67.9-6.6,102.8c0.5-5,1.1-10,1.6-14.9c0.6-4.5,1.2-9.1,2-13.6\n        c2.2-12.4,4.9-24.6,11.5-35.5c0.7-0.6,1.4-1.2,2.2-2c-0.9,4.9-2,9.4-2.4,14c-1,12.2,1.6,23.8,5.3,35.3c6,18.8,15,37,13.2,57.7\n        c3.6-7.7,6.3-15.6,6.9-24c1.2-7.1,2-14.1-0.6-21.1c-0.8-2.1-0.7-4.5-1-6.7c0.2-7.2,0.3-14.3,0.5-21.5c0.1,0,0.3,0.1,0.4,0.1\n        c1.1,6.3,2.1,12.6,3.2,18.9c0.3,1.9,0.6,3.8,0.8,5.8c1.5,6.1,2.9,12.2,4.6,18.3c3.8,14,7.8,27.9,7,42.7c-0.2,3.3-0.5,6.5-0.8,9.8\n        c-0.1,0.1-0.3,0.2-0.4,0.3c0.1,0,0.2,0,0.2-0.1c0.1-0.1,0.1-0.2,0.1-0.3c2.1-4.4,4.3-8.8,6.4-13.2c4.6-12.5,7.5-25.4,6.8-38.8\n        c-0.7-12.5-2.2-24.9-3.4-37.4c0.5-6.1,1.1-12.1,1.6-18.2c-0.2,0-0.4-0.1-0.6-0.1c-2.9,7.6-5.8,15.3-8.9,23.3\n        c-4.2-4-4.3-8.4-4.7-12.7c-0.1-1.8-0.2-3.6-0.2-5.4c0.1-0.3,0.1-0.6,0.2-0.8c0.1-5.5,0.2-11,0.3-16.5c0.7-6.1,1.1-12.3,2.1-18.3\n        c1.1-6,2.6-12,4.3-17.9c1.6-5.7,3.8-11.2,5.7-16.8c-0.5-0.2-1-0.4-1.5-0.6c-8.1,17.3-16.3,34.6-24.4,51.9\n        c-0.4-0.2-0.8-0.4-1.1-0.5c4.8-30.5,8.3-61.3,23.7-89c1.5-2.4,3-4.9,4.5-7.3c7.1-9.4,14.7-18.3,24.4-25.2c0.2-0.2,0.2-0.7,0.3-1\n        c0,0,0,0,0,0c0.5-0.1,1-0.2,1.5-0.3c3.3-1.6,6.4-3.7,9.9-4.8c13.3-4.2,27.1-5.8,41.1-5.9c10.9,0,20.6,3,30,8.3\n        c5.8,3.3,11.7,6.6,17.9,9c7.8,3.1,15.9,5.3,23.9,8c0.2-0.3,0.4-0.7,0.5-1c-2.6-3.1-5.2-6.2-7.8-9.3c-10.2-17.6-27.6-26-44.8-34.5\n        l0,0c-4.6-4.5-9.2-9.3-16.4-9.1l0,0c-0.8-0.3-1.7-0.6-2.5-0.8l0,0c-0.6-0.3-1.2-0.7-1.9-1c-12.2-4.2-24.3-4.4-36.4,0.2\n        c-2.8,0.6-5.7,1.3-8.5,1.9c-5.4,1.6-10.7,3.2-16.1,4.8c0.1,0.4,0.1,0.7,0.2,1.1c11.4-1.7,22.9-3.1,34.3-0.7\n        c15.5,3.2,29.1,9.4,30.5,13.9c-0.1,0.1-0.2,0.2-0.3,0.2c-0.6-0.2-1.2-0.5-1.9-0.7c-7.6-2.5-15.1-6.1-22.9-7.2\n        c-19.4-2.6-37,4.7-54.5,12c-2.2,1.1-4.4,2.2-6.5,3.3c-1.7,0.3-3.6,0.4-5.1,1.1c-11.4,4.9-22.7,9.9-34.1,14.9\n        c-1,0.8-2.1,1.6-3.1,2.4c-3.9,3.2-7.9,6.4-11.8,9.6c0.3,0.4,0.6,0.8,0.8,1.2c1.1-0.6,2.2-1.2,3.3-1.8C35,85.6,35.6,85.3,36.1,85\n        L36.1,85z M274.4,243.6c-0.2-0.3-0.4-0.7-0.6-1c-5.2-7.3-10.3-14.5-15.5-21.8c0.3-0.3,0.7-0.5,1-0.8c2.8,2.1,5.6,4.2,8.5,6.3\n        c6.6,5.3,12.1,6.7,16.1,2.8c3.3-3.3,5.2-7.8,7.7-11.8c2.5-3.9,4.7-8,7.4-11.7c6.3-8.6,16.8-11.3,27-7.3c-0.5,0.1-1,0.2-1.6,0.3\n        c-0.9,0.2-1.8,0.3-2.7,0.5c-3.2,0.6-6.4,1.2-9.7,1.9c-0.6,0.2-1.2,0.4-1.8,0.6l0,0c-1,0.4-2,0.8-3,1.2c-0.1,0.5-0.2,1-0.4,1.5\n        c6.6,3.9,13.2,7.9,19.8,11.8c-0.1,0.2-0.2,0.3-0.3,0.5c-3.8-1.2-7.6-2.3-11.4-3.5c-3.7-2.1-7.4-4.2-11.5-6.5\n        c-1.8,2.9-3.6,5.6-5,8.5c-0.4,0.8,0,2.9,0.7,3.3c3.6,2.3,7.4,4.3,11.2,6.3l0,0c0.5,0.2,1.1,0.5,1.6,0.7c5.2,2.2,10.4,4.5,15.6,6.7\n        c-0.8,0.4-1.8,1.5-2.4,1.3c-10-3-20.7-4.2-29.9-11.5c-0.6,4.8-1.2,9-1.6,13.1c-0.1,0.8,0.6,1.9,1.3,2.3c2.6,1.7,5.4,3.2,8.1,4.7\n        c3.6,1.3,7.1,2.6,10.7,3.9c5.7,0.9,11.4,1.8,17.1,2.7c0.4,0.1,0.9,0.1,1.3,0.2l0.3,0.2l0.4,0c-0.6,0.4-1.2,1-1.8,1\n        c-10.3,0.7-20.5,0.4-30.3-3c-1.9-0.6-3.7-1.4-5.6-2c-0.3,0.3-0.6,0.5-0.9,0.8c1.5,2.6,3,5.2,4.5,7.7c2.2,2,4.5,3.9,6.7,5.9\n        c0.8,0.4,1.5,0.9,2.3,1.3c2.5,0.8,5,2.3,7.6,2.3c8.7,0.1,17.4-0.1,26.1-0.5c8.3-0.4,14.7-4.3,19.5-11.2c4.7-6.8,7.6-14.2,8.2-22.4\n        c0.2-3.1-0.8-6.3-1.2-9.5c-0.8-1.7-1.6-3.4-2.5-5.1c-5.4-9.4-10.9-18.7-16.3-28c0.2-0.3,0.4-0.7,0.6-1c7.2,5.2,14.9,9,23.9,8.9\n        c1.5,0.8,3.1,1.7,4.6,2.5c2.3,1.3,4.7,3.9,7.2,1.6c2.8-2.6,0.6-5.5-0.9-8c-0.3-0.4-0.7-0.8-1.1-1.2c-3.4-3.1-6.3-6.8-10.1-9.2\n        c-17.4-10.9-34.3-22.5-48.5-37.6c-5.5-5.9-9.8-12.1-10.8-20.6c-1.1-9.3-6.9-15.7-15.4-19.6c-1.6-1.2-2.9-2.8-4.7-3.7\n        c-4.8-2.3-9.8-4.3-14.7-6.4c-7.8-2.9-15.6-5.1-24-3.2c-6.6,0.7-13.1,1.4-19.7,2.1c0.1,0.2,0.2,0.4,0.2,0.6c5,1.2,9.9,2.4,15.6,3.8\n        c-7.2,3-13.6,5.3-19.8,8.2c-7.8,3.6-15.6,7.6-20.7,14.9c-9,12.6-11.6,26.8-9.8,41.6c3.5-5.4,7.1-11,10.7-16.5\n        c0.3,0.2,0.6,0.5,0.9,0.7c0,1.5,0,3,0,4.5c-0.5,4-1.2,8.1-1.4,12.1c-0.3,8.7,1.9,16.8,5.8,24.8c3.2-6.5,6.2-12.6,9.2-18.7\n        c0.4,0.1,0.9,0.3,1.3,0.4c-1.6,10.9-1.6,21.8,1.7,32.4c6,14.5,12,29,17.9,43.2c-0.2-13.1-2.8-26.3-6.8-39.2\n        c4.8,7.1,9.1,14.4,14.5,20.8c5.5,6.6,12,12.2,18.1,18.2C273.6,243.3,274,243.4,274.4,243.6C274.6,243.9,274.7,244.3,274.4,243.6\n        C275,244.1,274.7,243.9,274.4,243.6z M115,206.5C115,206.5,115,206.6,115,206.5c3.9-5.1,7.8-10.3,11.8-15.5c2.4-3,4.8-6.1,7.3-9.1\n        c2.4-3.8,4.8-7.7,7.2-11.5c0.7-1.1,1.3-2.1,2-3.2c0,0,0,0,0,0c1-1.4,2.2-2.7,2.9-4.3c3.3-6.8,6.5-13.7,9.8-20.6\n        c3.4-6.2,6.8-12.5,10.2-18.7c0.8-1.1,1.6-2.2,2.3-3.4c9-15.6,21.2-27.7,37.8-35c2.3-1,4.7-1.9,8.1-3.2c-3.7-1.1-6.4-2-9.1-2.6\n        c-10.5-2.2-20.7-1.3-29.5,4.9c-10.8,7.6-19.2,17.8-27,28.4c-4.2,6.5-8.4,13.1-12.6,19.6c-6,10.3-12,20.7-18,31\n        c-3.2,5.3-6.5,10.6-9.7,15.9c-10.1,17.9-12.1,36.3-6.1,61.6c0.4-3,0.9-6,1.3-9c1.3-3.9,2.6-7.7,4-11.6c1.9-3.7,3.9-7.4,5.8-11.2\n        C113.9,208.4,114.5,207.5,115,206.5z M250.8,358.5c0-0.5-0.1-1-0.1-1.5c0.2-1,0.7-2.1,0.6-3c-1-5.8-2.1-11.6-3.2-17.4\n        c-1.6-7.7-3.1-15.3-4.4-21.7c-1,5.3-2.4,11.9-3.6,18.5c-0.9,4.6-2.4,9.3-2.4,14c0.1,9.7,2.9,19,8,27.3c1.3,2.1,2.7,4.2,4,6.2\n        c0.1,1.3,0.1,2.6,0.3,4.9c0.8-5.8,1.9-10.7,2.1-15.6C252.2,366.2,251.3,362.3,250.8,358.5z M185.3,360.2\n        c-0.4-3.8-0.8-7.6-1.2-11.5c1.5,0.9,2.6,1.1,2.3-1.2c-0.3-2.4-0.7-4.7-1.1-7c-0.5-2.3-0.9-4.5-1.4-6.8c-0.2-0.8-0.4-1.5-0.7-2.3\n        c0,0,0,0.1,0,0.1c0.2-9,0.5-18,0.7-26.9c1.1-9.6,2.3-19.3,3.4-28.9c0.2-0.5,0.6-1,0.6-1.5c0.8-20.1,0.4-40.1-6.8-59.4\n        c-2-5.4-4-10.8-6-16.1c-0.6,0-1.2,0.1-1.9,0.1c-14.2,33.9-16,69.4-11.5,105.5c-0.1,3.3-0.1,6.6-0.4,9.9c-1,11,2.4,21,7.4,30.4\n        c6.4,12,12.1,24.1,13.8,38.9c0.7-6.6,1.3-12.1,2-17.6c0.1-1.5,0.2-3.1,0.3-4.6C185.1,360.9,185.2,360.5,185.3,360.2z M87.9,161.3\n        c-0.2,0.3-0.4,0.6-0.6,0.8c-0.6,2.2-1.2,4.4-1.8,6.7c-4.7,17.2-5,34.8-4.2,52.5c1.4-4.9,2.9-9.7,4.3-14.6c1.3-3,2.6-6,4-9.1\n        c1.5-3,2.9-6,4.4-9.1c3.1-3.1,6.4-6.1,6.2-11c0.3-0.8,0.7-1.5,1-2.3c1.5-0.7,3.5-1.1,4.3-2.3c7.4-10.6,14.5-21.4,21.8-32.1\n        c5-9,10-18,15-26.9c7-8.5,14-16.9,21.6-26.2c-5.5,2-10.2,3.7-14.9,5.3c-13.9,4.6-27.3,10.1-37.9,20.8c-3.7,5.7-7.3,11.4-11,17.1\n        c-4.1,10.1-8.2,20.3-12.3,30.4L87.9,161.3z M283.5,378.2c1.7-4.4,3.3-8.7,5-13.1c0.3-0.6,0.6-1.2,0.8-1.8c1.7-7.1,1.1-14.1-1-21\n        c-0.8-3.4-1.5-6.8-2.3-10.3c-3.1,9.5-6.5,18.6-7.8,28.1c-1.2,9.3-0.3,18.9-0.3,28.4c0.2,0.1,0.5,0.1,0.7,0.2\n        c1.3-2.6,2.6-5.3,3.8-7.9C282.8,379.8,283.2,379,283.5,378.2z M246.5,267.3L246.5,267.3c-0.6-3.7-1.1-7.4-1.7-11.1\n        c-0.1-1.2,0-2.5-0.2-3.7c-2.7-14.3-9-26.8-17.9-38.2c-7.8-10-15.6-20-23.5-29.9c-0.3-0.3-0.8-0.5-1.4-0.9\n        c-1.3,17.8,2,33.9,12.7,48.2c16.2,21.5,25.4,46.1,32.4,72.2c0.3-4.5,0.6-9,0.9-13.5c-0.2-6.8-0.5-13.6-0.7-20.4\n        C247,269.2,246.7,268.2,246.5,267.3z M369.9,255.9L369.9,255.9c7.8-9.8,12.9-20.9,15-33.4c0-1.7,0-3.3,0-4.6\n        c-3.9,1-7.3,1.8-10.6,2.7c1.8,11.8-1.3,22.7-8.1,32.7c-2.3,3.4-3.5,6.8-2.8,11.9c2.4-3.3,4.3-5.9,6.2-8.5\n        C369.8,256.5,369.9,256.2,369.9,255.9z M280.2,295.3C280.2,295.3,280.2,295.3,280.2,295.3c-0.7-3.1-1.2-6.3-2.2-9.4\n        c-5.8-17.9-16.8-33.3-25.1-50c-0.3-0.6-1.1-0.9-1.9-1.5c0,6.6,0,12.9,0,19.1c0,0.8-0.1,1.7,0.1,2.4c2.3,9.2,5.3,18,9.9,26.3\n        c5.2,9.4,10.3,19,13.9,29.1c3,8.7,3.8,18.3,5.4,27.1c0.8-5.7,1.6-12,2.4-18.4c-0.3-6-0.5-11.9-0.8-17.9c-0.3-1.3-0.5-2.6-0.8-4\n        C280.8,297.2,280.5,296.3,280.2,295.3z M160.1,213.2c2.2-7.1,4.4-14.3,6.6-21.4c1.7-5.6,3.4-11.3,5.1-16.9\n        c4.7-13.2,9.3-26.5,14-39.7c4.5-7.5,8.9-15,13.4-22.4c5.2-8.4,12-15.2,20.9-19.7c3.4-1.7,7-3,10.9-4.7c-0.8-0.4-1.1-0.7-1.5-0.7\n        c-1.5-0.1-3-0.1-4.5-0.1c-4.4,0.7-8.8,1.4-13.2,2.1c-1.4,0.4-2.9,0.6-4.3,1.2c-21.6,8.9-34.4,25.9-43.2,46.7\n        c-3.6,7.4-7.1,14.8-10.7,22.2c-6.1,11.2-7.7,23.6-10.1,35.9c-1,6.7-2.1,13.3-3.1,20c-0.6,4.3-1.3,8.6-1.6,13\n        c-0.9,11.4-1.7,22.8-2.4,34.2c-0.1,1.5,0,3,0,4.5c0.5,0.1,0.9,0.1,1.4,0.2c3.4-6.9,6.7-13.9,10.1-20.8c0.6-1,1.5-2,1.8-3.1\n        C153.2,233.5,156.6,223.3,160.1,213.2z M199.5,237.7c0.3-1.4,0.9-2.8,0.9-4.2c-0.2-4.6-0.6-9.1-0.9-13.7c-0.6-5-1.2-10.1-1.7-15.1\n        c0-0.8,0-1.6,0-2.5c-1.5-16.6-3.2-33.3-4.6-49.9c-0.4-5.4-0.1-10.9-0.1-17.4c-2,5.1-3.8,9.1-5.1,13.3c-3,9.8-6.1,19.5-8.5,29.5\n        c-2.4,9.8,1.8,18.9,5,27.8c6.6,18.4,11.7,37,10,56.8c-0.1,1.7-0.2,3.5-0.3,5.2c0.4,0.1,0.9,0.1,1.3,0.2c0.9-5,1.7-10.1,2.6-15.1\n        C198.6,247.7,199.1,242.7,199.5,237.7z M358.8,278.9c0-1.3,0.1-2.7,0.1-4c0-4.5,0-9,0-14.3c-13,9.2-27,7.1-41.2,8.9\n        c9.8,2.6,18.6,3.9,27.7,2.2c5.3-1,7.3,0.4,6,5.9c-1.5,6.6-3.9,12.9-5.9,19.4c-0.5,0-1,0-1.4-0.1c-0.2-7-1-13.8-8.7-16.3\n        c1.6,3.1,3.2,6.1,4.7,9.2c-0.4,0.3-0.8,0.6-1.2,0.9c-5-7-12.6-9.3-20-12c-2.3-0.8-4.8-1.4-6.8-2.7c-12.6-7.9-25.1-15.9-37.6-23.9\n        c-1.1-0.7-2.3-1.3-3.4-1.9c-0.2,0.2-0.4,0.5-0.6,0.7c4.3,7.2,8.7,14.5,13,21.7c3.4,4.2,6.6,8.6,10.4,12.5\n        c4.6,4.9,9.6,9.3,14.4,13.9c5.4,5.2,10.9,10.3,16.3,15.4c1.4,0.8,2.8,1.6,4.2,2.4c2.5,0.5,5,1,7.4,1.6c0.5,0,1.1,0,1.6-0.1\n        c2.2-0.9,5.2-1.1,6.5-2.7c8.2-9.8,13.2-21.1,14.2-34C358.5,280.6,358.6,279.8,358.8,278.9z M97.8,320.4c0.6-1.2,1.3-2.3,1.8-3.6\n        c2.8-7.1,2.3-14.2,0.5-21.4c-1.1-5.6-2.2-11.1-3.2-16.6c-6,16.6-5.3,33.8-4,50.9C94.4,326.8,96.1,323.6,97.8,320.4z M129.9,341.3\n        c-0.8-5.2-1.7-10.5-2.5-15.7c-2.3-7.1-4.5-14.2-6.8-21.3c-0.4,0-0.8,0.1-1.2,0.1c-0.3,6.5-1.9,13.2-0.5,19.3\n        c2.6,11.8,7,23.2,10.6,34.8c0.1,0,0.3,0,0.4,0C129.9,352.8,129.9,347.1,129.9,341.3z M302.9,362c1.8-6,3.6-12,5.4-18\n        c0.5-5.8,0.9-11.7,1.4-17.5c-1.2-5.5-1.7-11.4-3.9-16.5c-4.8-11-14.7-17.6-23.8-25c4.1,11.4,5.3,23.1,4.8,35\n        c-0.1,1.1,0.6,2.3,1,3.5c4.7,13.7,8.2,27.7,8,42.3c0,3.6-1,7.1-1.5,10.7c0.2,0.1,0.4,0.2,0.5,0.2c1.4-2.7,2.8-5.5,4.2-8.2\n        C300.4,366.4,301.6,364.2,302.9,362z M134.6,283.9c-0.5-5.8-1.3-11.6-1.3-17.5c-0.1-16.9,0.1-33.8,0.2-50.8\n        c1.3-8.9,2.6-17.8,3.9-26.9c-0.8,0.7-1.5,1.3-2.1,2c-0.9,0.9-1.8,1.7-2.5,2.7c-12.7,18-17,38.4-16.3,60c0.1,4.5,1.4,8.9,1.6,13.4\n        c0.8,14.6,3.3,29,7.7,42.9c4.2,13.4,9.8,26.2,17.2,38.2c-2.2-9.4-4.5-18.7-6.7-28.1C135.8,307.9,135.2,295.9,134.6,283.9z\n        M210.5,352.9c0.5-1.3,1.3-2.5,1.3-3.8c0.3-16.3-5.2-31.1-12.2-45.6c-1.8-7.5-3.6-15-5.5-23.1c-0.8,1.5-1.4,2.2-1.8,3.1\n        c-5.1,13-4.5,26.7-4.7,40.2c-0.2,10.4,5.5,18.8,9.8,27.7c3.6,7.4,6,15.4,9,23.1c0.2,0.5,0.6,0.9,1.2,2c0.1-1.4,0.1-1.9,0.2-2.5\n        c0.5-3.3,1-6.6,1.5-9.9C209.7,360.5,210.1,356.7,210.5,352.9z M272.9,318.2L272.9,318.2c-2.4-6.5-4.2-13.3-7.3-19.4\n        c-3.8-7.5-8.6-14.5-13.2-22.1c-0.3,5.5-0.4,10.4-0.9,15.3c-0.7,7.2-2.2,14.3-2.5,21.5c-0.6,12.8,3.9,24.6,8.6,36.3\n        c3.3,8.2,8.3,15.9,7.8,25.3c0.3,0,0.7,0.1,1,0.1c0.6-2.3,1.2-4.5,1.8-6.8c4.1-7.8,6-16.2,6.2-25c2.3-8.2,1.4-16.2-1.1-24.2\n        C273.3,318.9,273.1,318.5,272.9,318.2z M111.8,320.1c0.5-0.9,1.4-1.8,1.4-2.8c0.8-11,2.4-22,1.9-32.9c-0.6-15.2-2.8-30.3-4.3-45.5\n        c0.6-5.6,1.1-11.1,1.7-16.7c-0.4-0.1-0.8-0.2-1.2-0.3c-3.2,8.5-6.4,17-9.8,26c-1.9-6.8-3.6-13-5.3-19.2\n        c-1.3,15.4,0.2,30.4,3.8,45.3c3.6,15,6.8,30.1,6.8,45.6c0,5.4,0,10.7,0,16.1c0.2,0.1,0.3,0.2,0.5,0.3\n        C108.8,330.7,110.3,325.4,111.8,320.1z M155.5,344.7c-0.1-10.8-0.1-21.6-0.2-32.4c-0.1-17.9-0.1-35.8-0.2-53.7\n        c0.8-4.6,1.6-9.3,2.4-13.9c-0.5-0.1-0.9-0.2-1.4-0.3c-1.5,3.4-2.9,6.9-4.5,10.3c-2.6,5.6-6.3,11-7.8,16.9\n        c-2,7.4-3.2,15.3-3.1,22.9c0.2,8.2,2.3,16.4,3.8,24.5c2.3,12.6,4.8,25.1,7.4,37.6c0.8,3.7,2.3,7.3,3.5,10.9\n        c0.4-0.1,0.9-0.2,1.3-0.3c-0.3-2.9-0.6-5.8-0.8-8.6C155.9,353.9,155.7,349.3,155.5,344.7z M233.4,344c1-5.3,2.1-10.6,3.1-15.9\n        c1.9-7.8,3.5-15.7,1.8-23.8c-0.8-5.9-1.1-12-2.3-17.8c-3.5-16.4-11.7-30.8-20.5-44.9c-2.7-4.3-5.7-8.5-8.9-13.2\n        c-0.4,1.4-0.6,1.9-0.7,2.4c-1.8,11.6-3.8,23.2-5.2,34.8c-1.6,13.7-1,27.2,4.5,40.2c6,14.3,11.7,28.8,17.8,43.2\n        c2.9,7,6.4,13.7,9.7,20.5c0.2-0.1,0.4-0.2,0.6-0.3c0-6.1,0-12.2,0-18.2C233.3,348.8,233.3,346.4,233.4,344z M223.1,388.2\n        c5.5-13.9,2.1-35-6.6-43.1C213.4,360,221.1,373.6,223.1,388.2z M374.7,215.5c6.2,2.5,10.7-2.3,11.8-12c-3.1-0.9-6.1-2.1-9.2-2.4\n        c-1.8-0.2-4.9,0.3-5.5,1.5c-1.2,2.5-0.8,5.4,2.8,6.4c1.9,0.5,3.8,1,6.6,1.8C378.5,212.6,376.6,214,374.7,215.5z M320,335.5\n        c9.5-5.1,7.8-12.4-2.1-17.7C318.6,323.5,319.3,329.4,320,335.5z M291.1,373.8l0.2,0.2l0-0.3L291.1,373.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M191.5,8.6c1.6,1.6,3.3,3.3,4.9,4.9c1,1.1,1.7,2.5,2.9,3.2c6.2,3.7,12.3,7.8,18.9,10.6\n        C229.5,32,241,36,251.1,43c3,2.1,6.1,3.9,9.2,5.9c10.3,9.1,19.4,19.1,23.2,32.8c-1-0.9-2.2-1.6-3.1-2.6\n        c-5.7-6.4-11.5-12.8-16.8-19.5c-8.9-11.2-21.1-17.5-33.8-23c-5.8-2.5-11.9-4.4-17.9-6.6c0,0,0,0,0,0c-0.6-0.3-1.1-0.6-1.7-0.8\n        c-6.7-6.4-13.4-12.9-20-19.4c-0.4-0.4-0.2-1.5-0.3-2.2C190.5,7.9,191,8.3,191.5,8.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#3151C6",
    d: "M26.9,237.8c-0.5,5-1.1,10-1.6,14.9c-8.2-35-8.9-69.4,6.6-102.8c5.5-6.9,10.9-13.8,16.4-20.6c0,0,0.1,0,0.1,0\n        c0.3-0.5,0.6-1,1-1.5l0,0c0.5-0.3,1-0.6,1.5-0.9c0,0,0,0,0,0c0.3-0.5,0.6-1,1-1.5l0,0c0.5-0.3,1-0.6,1.5-1\n        c6.6-4.7,13.2-9.4,19.8-14.2c4.3-1.8,8.5-3.7,12.8-5.5c-15.5,27.7-18.9,58.5-23.7,89c0.4,0.2,0.8,0.4,1.1,0.5\n        c8.1-17.3,16.3-34.6,24.4-51.9c0.5,0.2,1,0.4,1.5,0.6c-1.9,5.6-4.1,11.2-5.7,16.8c-1.7,5.9-3.2,11.9-4.3,17.9\n        c-1.1,6-1.4,12.2-2.1,18.3c-0.5,0.9-1.2,1.8-1.4,2.8c-1.5,6.4-2.9,12.9-4.2,19.3c-0.5,2.4-0.6,4.9-0.9,7.4c0,0.2,0,0.5,0,0.7\n        c-0.5,0.8-1.4,1.6-1.5,2.4c-0.4,3.6-0.6,7.2-0.9,10.9c-1.1-6.3-2.1-12.6-3.2-18.9c-0.1,0-0.3-0.1-0.4-0.1\n        c-0.2,7.2-0.3,14.3-0.5,21.5c-2.2-13.1-5.1-26.1-6.3-39.3c-0.9-10,0-20.2,0.7-30.3c0.8-12.6,3.4-24.8,7.8-36.6\n        c1.9-5,3.9-10,5.9-15c-1.6,0.4-2.7,1.2-3.5,2.2c-6.9,8.1-14,16-20.5,24.5c-5.3,6.9-10.2,14.2-14.3,21.8c-7,13.1-5.9,27.7-6.5,42\n        c0,1.4-0.1,2.8-0.1,4.2c-0.2,1.2-0.5,2.4-0.5,3.6C26.7,225.2,26.9,231.5,26.9,237.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M232.1,75.1c2.6,3.1,5.2,6.2,7.8,9.3c-0.2,0.3-0.4,0.7-0.5,1c-8-2.6-16.1-4.9-23.9-8c-6.2-2.5-12-5.8-17.9-9\n        c-9.4-5.2-19.1-8.3-30-8.3c-14,0-27.7,1.7-41.1,5.9c-3.5,1.1-6.6,3.2-9.9,4.8c-0.5,0.1-1,0.2-1.5,0.3c0,0,0,0,0,0\n        c-1.2,0-2.3-0.1-3.5-0.1c0.1-0.3,0.1-0.5,0.1-0.8c0.4-0.1,0.8-0.2,0.1,0c0.5-0.5,0.2-0.2-0.1,0c-12.8,1.5-25.8,2.3-38.5,4.7\n        c-12,2.2-23.7,6.1-35.5,9.2c0.5-0.6,0.8-1.4,1.4-1.9c7.3-6.2,16.1-9,25.2-11.2c11.9-2.9,23.9-5.3,35.8-8.3c9-2.2,17.8-5,26.7-7.5\n        c3.5-1,7-2.1,10.5-3.1c-0.1-0.4-0.1-0.7-0.2-1.1c-5.3,0-10.6-0.3-15.8,0.1c-5.4,0.3-10.8,1.2-16.2,1.9c-4.7,0.7-9.4,1.5-14.1,2.3\n        c17.4-7.3,35.1-14.5,54.5-12c7.8,1,15.3,4.7,22.9,7.2c0.6,0.2,1.2,0.5,1.9,0.7c0.1,0,0.2-0.1,0.3-0.2c-1.4-4.5-15-10.7-30.5-13.9\n        c-11.4-2.3-22.9-1-34.3,0.7c-0.1-0.4-0.1-0.7-0.2-1.1c5.4-1.6,10.7-3.2,16.1-4.8c4,0.5,8,1,12.1,1.4c16.4,1.6,32.3,5.5,46.9,12.9\n        c12.5,6.3,24.1,14.2,36.2,21.3C221.8,70.2,227,72.6,232.1,75.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#EE7636",
    d: "M279.6,92.2c4.9,2.1,9.9,4.1,14.7,6.4c1.7,0.8,3.1,2.4,4.7,3.7c0.6,1.1,1.3,2.1,1.9,3.2c-0.9,1-1.8,2-2.9,2.8\n        c-3.8,3-5,9.3-11.4,9c-0.5,0-1,1.4-1.5,2.1c-5.4,0-10.9,0-16.6,0c3.3,1.2,6.3,2.2,9.2,3.3c-3.3,0.2-6.6,0.5-10.5,0.8\n        c1.9,0.3,3.3,0.7,4.8,0.9c3.6,0.6,7.1,1.2,10.7,1.7c-8,0.2-16.1,1.3-23.7-2.4c-0.5,0.4-1.1,0.8-1.4,1.3\n        c-3.8,7.1-3.6,14.3-0.6,21.6c-4.3,3.4-8.5,6.8-12.9,10.1c-1,0.7-2.3,0.9-3.5,1.4c0.9-2,1.8-4.1,2.7-6.1c-0.3-0.3-0.6-0.7-0.9-1\n        c-4.7,4-9.3,7.9-14,11.9c-0.3-0.1-0.6-0.2-0.9-0.3c3.2-7.7,6.4-15.5,9.9-23.9c-4.5,2.3-8.7,4.5-13.6,7.1c1.7-3.5,3.1-6.3,4.5-9\n        c3.3-4.3,6.5-8.7,9.8-13.1c-8.4,0-14.9,4.1-20.9,9.5c4.6-9.7,14.1-13.7,21.9-20.4c-5.7,0-11.4,0-17.6,0c5.3-4.2,10.8-7.2,17.1-7.9\n        c6.1-0.6,12.4-0.1,18.8-0.1c-0.8-1.2-1.6-2.4-2.3-3.4c3.7,0,7.3,0,11,0c8.9-0.1,17.8,0.2,26.7,5.2c-3.5-6.8-8.6-9.7-14.4-11.7\n        C278.9,94,279.2,93.1,279.6,92.2z M237.3,151.7c5.9-3.9,8.3-10.1,12.2-15C241.6,139.6,236.4,145.9,237.3,151.7z M252.4,124.5\n        c-9.6,1.9-16.1,7-15.9,12.9C241.9,133,246.8,129.1,252.4,124.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M233.2,351.1c0,6.1,0,12.2,0,18.2c-0.2,0.1-0.4,0.2-0.6,0.3c-3.2-6.8-6.7-13.6-9.7-20.5\n        c-6.1-14.3-11.7-28.8-17.8-43.2c-5.5-13-6.1-26.5-4.5-40.2c1.4-11.6,3.4-23.2,5.2-34.8c0.1-0.5,0.3-1,0.7-2.4\n        c3.2,4.7,6.2,8.9,8.9,13.2c8.8,14,16.9,28.5,20.5,44.9c1.3,5.8,1.6,11.9,2.3,17.8c-0.5-0.9-1.3-1.8-1.6-2.8\n        c-4.7-13.1-11.3-25.1-19.8-36c-0.6-0.8-0.8-1.9-1.3-2.9c-0.6,0.4-1.2,0.7-1.7,1.1c-0.4,2.2-1.3,4.5-1,6.7c1,8.9,1.7,17.9,3.8,26.6\n        c4.4,17.4,9.7,34.6,14.7,51.8C231.6,349.7,232.6,350.4,233.2,351.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M161.9,304.4c-4.5-36.2-2.8-71.6,11.5-105.5c0.6,0,1.2-0.1,1.9-0.1c2,5.4,3.9,10.8,6,16.1\n        c7.2,19.2,7.6,39.2,6.8,59.4c0,0.5-0.4,1-0.6,1.5c-2.5-9.6-4.9-19.2-7.4-28.7c-0.8-3.2-1.9-6.4-6.2-8.8\n        c-1.3,12.3-2.8,23.7-3.7,35.2c-1.4,18.7,2.5,36.6,9.1,54c1.7,4.5,4,8.8,6.1,13.2c0.4,2.3,0.8,4.7,1.1,7c0.2,2.3-0.9,2.1-2.3,1.2\n        c0,0,0.1,0,0.1,0c-0.4,0-0.7,0-1.1,0c-1.4-1.4-2.7-2.8-4.1-4.2c-0.7-2.1-1.3-4.4-2.3-6.4c-2.7-5.5-5.9-10.7-8.4-16.3\n        C165.8,316.2,164,310.2,161.9,304.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M326.1,198.2c-10.2-4-20.7-1.2-27,7.3c-2.7,3.7-5,7.8-7.4,11.7c-3.1,1.7-6,3.8-9.3,5\n        c-4.7,1.7-9.7,2.8-14.6,4.1c-2.8-2.1-5.6-4.2-8.5-6.3c-0.3,0.3-0.7,0.5-1,0.8c5.2,7.3,10.3,14.5,15.5,21.8\n        c-0.2,0.2-0.4,0.4-0.6,0.6c-6.1-6-12.6-11.7-18.1-18.2c-5.4-6.4-9.6-13.8-14.5-20.8c4,12.9,6.5,26.1,6.8,39.2\n        c-5.9-14.2-11.9-28.7-17.9-43.2c1.7-1.3,3.3-2.7,5-3.9c1.6-1.2,3.5-3.3,4.9-3.1c4.4,0.7,4.4-2.4,5.4-4.9c0.4-1,0.6-2,0.9-3\n        c0.3,0.9,0.6,1.7,0.8,2.6c2,7.2,4.5,13.9,13.1,15.6c3.2,0.6,6.7,2.3,9.6,1.6c11-2.8,21.9-6.1,32.7-9.8c8.3-2.9,16.5-4.2,25.1-1.8\n        c3.7,1.8,7.3,3.7,11,5.5c-0.2,0.4-0.4,0.8-0.5,1.2C333.7,199.5,329.9,198.8,326.1,198.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M27.3,211.2c0.6-14.3-0.5-28.9,6.5-42c4.1-7.7,9.1-14.9,14.3-21.8c6.4-8.5,13.6-16.4,20.5-24.5\n        c0.8-1,1.9-1.8,3.5-2.2c-2,5-4.1,10-5.9,15c-4.3,11.8-7,24.1-7.8,36.6c-0.6,10.1-1.6,20.3-0.7,30.3c1.2,13.2,4.1,26.2,6.3,39.3\n        c0.3,2.2,0.2,4.6,1,6.7c2.6,7,1.8,14,0.6,21.1c-3-8.4-5.9-16.9-8.9-25.3c0.3-1,0.8-2,0.7-2.9c-0.5-5.4-1.1-10.8-1.7-16.2\n        c-1.2-10.5-2.4-21.1-3.7-32.8c-1.2,8.1-2.8,14.9-1.3,22.2c1.2,5.7,1.1,11.6,1.6,17.5c-0.5-1.1-1.2-2.2-1.4-3.3\n        c-1.2-6.4-2.8-12.8-3.1-19.3c-0.4-8.1,0.1-16.3,0.6-24.5c0.4-6.3,1.4-12.6,2.2-19c-5.3,6.7-9.4,13.9-10.3,22.6\n        c-6.6,10.9-9.3,23.2-11.5,35.5c-0.8,4.5-1.3,9.1-2,13.6c-0.1-6.3-0.2-12.5-0.2-18.8c0-1.2,0.3-2.4,0.5-3.6\n        c0.6-0.9,1.6-1.8,1.9-2.8c2.2-8.4,4.2-16.9,6.3-25.3c0.9-3.5,1.7-7,2.6-10.5c-1.4,1-2.2,2.1-2.6,3.4\n        C32.7,190.5,30,200.9,27.3,211.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M283.3,272.5c-4.3-7.2-8.7-14.5-13-21.7c0.2-0.2,0.4-0.5,0.6-0.7c1.1,0.6,2.3,1.2,3.4,1.9\n        c12.5,8,25,16,37.6,23.9c2,1.3,4.5,1.9,6.8,2.7c7.4,2.7,15.1,5,20,12c0.4-0.3,0.8-0.6,1.2-0.9c-1.6-3-3.1-6.1-4.7-9.2\n        c7.7,2.5,8.4,9.3,8.7,16.3c0.5,0,1,0,1.4,0.1c2-6.4,4.4-12.8,5.9-19.4c1.3-5.5-0.7-6.9-6-5.9c-9,1.8-17.9,0.4-27.7-2.2\n        c14.2-1.9,28.3,0.3,41.2-8.9c0,5.3,0,9.8,0,14.3c-0.9,1.7-1.9,3.3-2.7,5c-5,10.2-10,20.5-15,30.7c-1.2,2.5-2.3,5.1-3.5,7.7\n        c-0.5,0-1.1,0-1.6,0.1c0.3-4.5,0.7-8.9,0.7-13.4c0.2-7.2-1.7-13.7-7.3-18.6c-0.1-0.1-0.3-0.2-0.4-0.3c0.1,0.1,0.2,0.2,0.4,0.4\n        c0.8,5,2.4,10.1,2.3,15.1c-0.2,5.1-2,10.2-3.1,15.4c-1.4-0.8-2.8-1.6-4.2-2.4c0.3-1,1-2,0.8-2.9c-1.8-11.1-6.3-20.1-17.2-25.4\n        c-7.8-3.8-14.9-8.8-22.3-13.3C285.1,272.4,284.2,272.6,283.3,272.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M96.1,98.9c5.1-6,9.8-12.4,15.5-17.8c13-12.4,29.3-16.9,46.9-17.6c11.9-0.5,23.8-0.3,34.7,5.8\n        c0.7,0.4,1.4,0.8,2.1,1.2c0.2,0.1,0.4,0.3,0.6,0.5c-5,1.9-10.5,3-14.9,5.8C168.3,85,154,88.3,139.8,92.5\n        c-19,5.6-33.6,17.2-45.1,33.1c-0.8,1.1-1.7,2-2.6,3.1c0.2-0.9,0.1-2,0.6-2.7c4.8-7.1,9.1-14.6,14.7-21.1\n        c9.3-10.9,22.1-16.5,35.3-21.5c10.3-3.9,20.5-7.9,30.7-11.9c-6.6-0.3-13-0.1-19.5,0.4c-16,1.3-30.4,7.3-43.4,16.5\n        C105.6,91.8,100.9,95.4,96.1,98.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M331,248.6c-5.7-0.9-11.4-1.8-17.1-2.7c0.3-1.2,0.6-2.3,0.9-3.5c9.9,2.8,19.7,2.8,30.1,0.2\n        c-8.6-0.6-16.5-1.2-24.5-1.8c0-0.7,0-1.4,0-2.2c7.3,0.1,14.7,0.1,22.4-3.4c-4.8-1.3-8.7-2.3-12.6-3.3c0.4-1.1,0.8-2.3,1.2-3.4\n        c4.6,0,9.1,0,13.7,0c0-0.3,0-0.6,0.1-0.9c-4.5-0.8-8.9-1.6-13.4-2.4c1.9-1.3,3.9-2.6,5.8-3.9c4.1-0.4,8.3-0.7,12.4-1.1\n        c0-0.2,0-0.5-0.1-0.7c-3.3-1.1-6.6-2.2-9.9-3.3c0.3-1.7,0.5-3.3,0.8-5c2.4,0,4.7,0,7.5,0c-1.1-0.6-1.8-1-2.6-1.4\n        c0.3-3.6,2.5-4.7,5.7-4.2c8.2,17.2,8.8,34-3,50.1c12.7-8.8,19.3-20.9,19.6-36.4c0.4,3.2,1.4,6.4,1.2,9.5\n        c-0.6,8.2-3.5,15.6-8.2,22.4c-4.8,6.9-11.2,10.7-19.5,11.2c-8.7,0.4-17.4,0.6-26.1,0.5c-2.5,0-5.1-1.5-7.6-2.3\n        c1.3,0.1,2.7,0.2,4,0.4c8.4,1.8,16.6,1.6,23.6-1.2c-6.9,0-14.9,0-22.9,0c-2.3,0-4.6-0.4-6.9-0.6c-2.2-2-4.5-3.9-6.7-5.9\n        c1,0,2.1-0.4,2.9-0.1c7.5,3.1,15.3,3.9,23.2,3.2c8.3-0.8,16.1-2.9,23.6-9.3c-6,0.6-10.8,1.1-15.6,1.6c0,0-0.4,0-0.4,0\n        s-0.3-0.2-0.3-0.2C331.8,248.7,331.4,248.7,331,248.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C64728",
    d: "M266.2,101.3c-3.6,0-7.3,0-11,0c0.7,1,1.6,2.3,2.3,3.4c-6.4,0-12.7-0.5-18.8,0.1c-6.3,0.6-11.8,3.7-17.1,7.9\n        c6.2,0,11.9,0,17.6,0c-7.8,6.6-17.3,10.7-21.9,20.4c6-5.4,12.5-9.5,20.9-9.5c-3.3,4.4-6.6,8.8-9.8,13.1c-1.5,0.8-3.1,1.4-4.4,2.4\n        c-3.8,3.2-7.4,6.6-11.1,9.9c0-1.5,0-3,0-4.5c-0.3-0.2-0.6-0.5-0.9-0.7c-3.6,5.5-7.2,11-10.7,16.5c-1.8-14.9,0.9-29,9.8-41.6\n        c5.2-7.3,12.9-11.3,20.7-14.9c6.2-2.9,12.6-5.2,19.8-8.2c-5.7-1.4-10.6-2.6-15.6-3.8c-0.1-0.2-0.2-0.4-0.2-0.6\n        c6.6-0.7,13.1-1.4,19.7-2.1c5.8,1.4,11.5,2.8,17.3,4.1c-1.2,1.2-2.4,2.4-3.5,3.8C268.2,98.4,267.2,99.9,266.2,101.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M247.9,290.4c-0.3,4.5-0.6,9-0.9,13.5c-7-26-16.3-50.7-32.4-72.2c-10.7-14.3-14-30.4-12.7-48.2\n        c0.6,0.4,1.1,0.5,1.4,0.9c7.8,10,15.7,20,23.5,29.9c8.9,11.4,15.2,23.9,17.9,38.2c0.2,1.2,0.1,2.4,0.2,3.7\n        c-0.8-1.2-1.7-2.4-2.4-3.7c-4.1-7.7-7.7-15.6-12.2-23c-3.6-5.8-8.3-10.9-12.4-16.3c-0.1-0.4-0.2-0.8-0.2-1.1\n        c-0.2,0.1-0.3,0.2-0.5,0.2c0.2,0.3,0.5,0.6,0.7,1c0.8,3,1.3,6.2,2.6,9c4.2,9.3,8.8,18.4,12.9,27.7c4.4,10,8.4,20.2,12.6,30.3\n        C246.5,283.6,247.2,287,247.9,290.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C95227",
    d: "M212.9,149.1c3.7-3.3,7.3-6.7,11.1-9.9c1.3-1.1,2.9-1.6,4.4-2.4c-1.4,2.8-2.7,5.5-4.5,9\n        c5-2.6,9.2-4.7,13.6-7.1c-3.5,8.4-6.7,16.1-9.9,23.9c0.3,0.1,0.6,0.2,0.9,0.3c4.7-4,9.3-7.9,14-11.9c0.3,0.3,0.6,0.7,0.9,1\n        c-0.9,2-1.8,4.1-2.7,6.1c-2.9,8.3-4.7,16.7-3.6,25.4c2.2-3.2,4.3-6.2,6.4-9.2c0.7,0.2,1.4,0.4,2.1,0.7c0,3.4,0,6.9,0,10.3\n        c-0.3,1-0.5,2-0.9,3c-1,2.5-1,5.6-5.4,4.9c-1.4-0.2-3.3,1.9-4.9,3.1c-1.7,1.2-3.3,2.6-5,3.9c-3.3-10.6-3.4-21.4-1.7-32.4\n        c-0.4-0.1-0.9-0.3-1.3-0.4c-3,6.1-6,12.2-9.2,18.7c-3.9-8-6.2-16.1-5.8-24.8C211.7,157.2,212.4,153.1,212.9,149.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#411DAA",
    d: "M136.4,319.9c2.2,9.4,4.5,18.7,6.7,28.1c-7.4-12-13.1-24.8-17.2-38.2c-4.4-14-6.9-28.3-7.7-42.9\n        c-0.2-4.5-1.5-8.9-1.6-13.4c-0.7-21.6,3.6-42,16.3-60c0.7-1,1.6-1.8,2.5-2.7c0.7-0.7,1.4-1.3,2.1-2c-1.3,9.1-2.6,18-3.9,26.9\n        c-1,1.1-2.5,2-2.9,3.2c-2.1,6.8-3.8,13.8-5.7,20.7c-0.3,3.3-0.7,6.5-0.8,9.8c-0.6,14,0.1,27.9,3.5,41.4\n        C130,300.6,133.4,310.2,136.4,319.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M96.1,98.9c4.8-3.5,9.5-7.2,14.3-10.6c13-9.2,27.3-15.2,43.4-16.5c6.5-0.5,12.9-0.8,19.5-0.4\n        c-10.2,4-20.4,8-30.7,11.9c-13.1,5-25.9,10.6-35.3,21.5c-5.5,6.5-9.9,14-14.7,21.1c-0.5,0.7-0.4,1.8-0.6,2.7c0,0,0-0.1,0-0.1\n        c-0.3,0.6-0.5,1.1-0.8,1.7c-7.6,14.9-15.2,29.8-23,45.1c0-1.5-0.2-2.6,0-3.7c3.9-16.7,6.6-33.8,14-49.5c3.2-6.9,7.4-13.3,11.2-20\n        c0.4-0.5,0.7-1,1.1-1.5c0,0,0,0,0,0c0.2-0.3,0.5-0.6,0.7-0.9c0,0,0,0,0,0C95.6,99.5,95.9,99.2,96.1,98.9L96.1,98.9z M79.7,144.9\n        c3.6-8.1,6.3-16.1,10.6-23.2c4.4-7.1,10-13.6,15.8-19.7c5.7-6,12.2-11.1,18.9-17.1C102.8,91.1,78.1,123.8,79.7,144.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AD15A3",
    d: "M148.8,112.9c7.8-10.6,16.2-20.8,27-28.4c8.7-6.2,19-7.2,29.5-4.9c2.7,0.6,5.4,1.5,9.1,2.6\n        c-3.4,1.3-5.8,2.2-8.1,3.2c-16.6,7.3-28.9,19.4-37.8,35c-0.7,1.2-1.5,2.3-2.3,3.4c0.1-3.5-1.9-4.7-5.1-4.4\n        c3.1-5.7,6.2-11.3,9.2-17c0.1-0.2,0.2-0.4,0.3-0.5c-0.2,0.1-0.4,0.2-0.5,0.3c-0.8,0.5-1.7,0.9-2.2,1.6c-3.6,4.4-7.1,8.9-10.7,13.3\n        C155.3,113.6,151.7,113.9,148.8,112.9z M172.4,99.7c-0.1-0.1-0.1-0.2-0.2-0.3c-0.1,0.1-0.2,0.2-0.3,0.2c0.1,0.1,0.2,0.2,0.3,0.3\n        C172.3,99.9,172.3,99.8,172.4,99.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M198.1,252.6c-0.9,5-1.7,10.1-2.6,15.1c-0.4-0.1-0.9-0.1-1.3-0.2c0.1-1.7,0.1-3.5,0.3-5.2\n        c1.7-19.8-3.4-38.4-10-56.8c-3.2-9-7.4-18-5-27.8c2.4-9.9,5.5-19.7,8.5-29.5c1.3-4.2,3.2-8.2,5.1-13.3c0,6.6-0.4,12.1,0.1,17.4\n        c1.4,16.7,3,33.3,4.6,49.9c0.1,0.8,0,1.6,0,2.5c-3.7-9.7-7.3-19.3-11-29.2c0.9,6.4,1.4,12.9,2.7,19.3\n        C193.2,214,199,232.8,198.1,252.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#3151C6",
    d: "M56.8,244.4c3,8.4,5.9,16.9,8.9,25.3c-0.7,8.4-3.3,16.3-6.9,24c1.8-20.7-7.2-38.9-13.2-57.7\n        c-3.7-11.5-6.3-23.2-5.3-35.3c0.4-4.6,1.5-9.1,2.4-14c-0.8,0.7-1.5,1.4-2.2,2c0.9-8.6,5-15.8,10.3-22.6c-0.8,6.3-1.8,12.6-2.2,19\n        c-0.5,8.1-1,16.4-0.6,24.5c0.3,6.5,2,12.9,3.1,19.3c0.2,1.2,0.9,2.2,1.4,3.3C53.9,236.2,55.3,240.3,56.8,244.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M268.4,368.4c-0.6,2.3-1.2,4.5-1.8,6.8c-0.3,0-0.7-0.1-1-0.1c0.5-9.5-4.5-17.1-7.8-25.3\n        c-4.7-11.6-9.2-23.5-8.6-36.3c0.3-7.2,1.8-14.3,2.5-21.5c0.5-4.9,0.6-9.8,0.9-15.3c4.6,7.6,9.4,14.6,13.2,22.1\n        c3.1,6.1,4.9,12.9,7.3,19.4c-0.7-0.6-1.4-1.1-2-1.9c-4-5.3-8-10.6-11.9-15.9c-0.4,0.1-0.8,0.2-1.2,0.3c-0.2,1.6-0.8,3.4-0.5,4.9\n        c3.4,17.5,7,34.9,10.6,52.4c-0.2,2.8-0.5,5.5-0.5,8.3C267.4,367,268,367.7,268.4,368.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AD15A3",
    d: "M164.4,137.6c8.7-20.8,21.6-37.8,43.2-46.7c1.4-0.6,2.9-0.8,4.3-1.2c2.2,2.8,10.4,1.5,13.2-2.1\n        c1.5,0,3,0,4.5,0.1c0.3,0,0.7,0.3,1.5,0.7c-3.9,1.7-7.5,3-10.9,4.7c-8.9,4.5-15.7,11.2-20.9,19.7c-4.5,7.4-9,14.9-13.4,22.4\n        c-1.4-0.3-2.8-0.6-4.2-0.9c2.6-6.4,5.3-12.7,7.9-19.1c-2.8,2.5-5,5.3-7.1,8.3c-3.3,4.9-6.6,10-9.8,14.9\n        C169.9,138.1,167.2,137.9,164.4,137.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M185.3,340.5c-2-4.4-4.3-8.7-6.1-13.2c-6.6-17.4-10.4-35.3-9.1-54c0.8-11.5,2.4-22.9,3.7-35.2\n        c4.3,2.4,5.3,5.5,6.2,8.8c2.5,9.6,4.9,19.2,7.4,28.7c-1.1,9.6-2.3,19.3-3.4,28.9c-0.2-1.6-0.5-3.2-0.7-4.8\n        c-1.1-9.7-2.2-19.4-3.3-29.1c-0.8,15.4-1.2,30.6-0.6,45.9c0.2,5,2.5,9.9,3.9,14.9c0,0,0-0.1,0-0.1c0.2,0.8,0.4,1.5,0.7,2.3\n        C184.4,336,184.8,338.3,185.3,340.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M233.2,351.1c-0.6-0.8-1.5-1.4-1.8-2.3c-5-17.2-10.3-34.4-14.7-51.8c-2.2-8.6-2.8-17.7-3.8-26.6\n        c-0.2-2.1,0.7-4.4,1-6.7c0.6-0.4,1.2-0.7,1.7-1.1c0.4,1,0.6,2.1,1.3,2.9c8.5,10.9,15.1,22.9,19.8,36c0.4,1,1.1,1.8,1.6,2.8\n        c1.7,8.1,0.1,16-1.8,23.8c-0.2-0.5-0.5-1-0.6-1.5c-1.4-12.7-6-24.3-11.7-35.6c-0.6-1.2-1.5-2.2-2.5-3.5\n        c2.5,11.4,4.9,22.1,7.1,32.8c1.6,7.9,3,15.8,4.5,23.6C233.3,346.4,233.3,348.8,233.2,351.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M70.6,226.2c0-0.2,0-0.5,0-0.7c3,0.6,3.5-1.5,4.2-3.6c0.4-1.2,1.4-2.1,2.1-3.2c0.4,4.3,0.5,8.7,4.7,12.7\n        c3.1-8,6-15.7,8.9-23.3c0.2,0,0.4,0.1,0.6,0.1c-0.5,6.1-1.1,12.1-1.6,18.2c-2.6,6.1-5.8,12-7.7,18.4c-1.3,4.5-1.6,9.7-0.7,14.3\n        c2.5,13.1,5.1,26.2,4.4,39.7c-0.1,1.3,0.4,2.6,0.6,3.9c-2.1,4.4-4.3,8.8-6.4,13.2c0,0,0.1,0.1,0.1,0.1c0.3-3.3,0.6-6.5,0.8-9.8\n        c0.8-14.7-3.2-28.7-7-42.7c-1.7-6-3-12.2-4.6-18.3C69.5,238.9,70.1,232.5,70.6,226.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M299.1,368.6c-1.4,2.7-2.8,5.5-4.2,8.2c-0.2-0.1-0.4-0.2-0.5-0.2c0.5-3.6,1.4-7.1,1.5-10.7\n        c0.2-14.6-3.4-28.6-8-42.3c-0.4-1.1-1-2.3-1-3.5c0.5-11.9-0.7-23.6-4.8-35c9.1,7.4,19,13.9,23.8,25c2.2,5.1,2.6,11,3.9,16.5\n        c-1.4-2.8-2.5-5.7-4.1-8.3c-3-4.9-6.3-9.7-9.5-14.5c-0.4,0.2-0.8,0.4-1.3,0.7c0.8,5.5,1.2,11,2.3,16.5c2.1,10.4,5.6,20.5,4.5,31.3\n        C301,357.7,299.9,363.2,299.1,368.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M282.7,320.1c-0.8,6.3-1.7,12.6-2.4,18.4c-1.7-8.8-2.4-18.4-5.4-27.1c-3.5-10.1-8.7-19.7-13.9-29.1\n        c-4.6-8.4-7.6-17.2-9.9-26.3c-0.2-0.8-0.1-1.6-0.1-2.4c0-6.2,0-12.4,0-19.1c0.8,0.6,1.6,0.9,1.9,1.5c8.3,16.7,19.3,32.1,25.1,50\n        c1,3.1,1.5,6.3,2.2,9.4c-0.4-0.7-0.9-1.3-1.2-2c-3.8-7.5-7.5-15.1-11.3-22.6c-0.6-1.2-1.5-2.2-2.3-3.3\n        c1.2,15.7,8.8,28.9,14.6,42.7C280.9,313.5,281.8,316.8,282.7,320.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#36157B",
    d: "M155.5,344.7c0.2,4.6,0.3,9.2,0.6,13.8c0.2,2.9,0.5,5.8,0.8,8.6c-0.4,0.1-0.9,0.2-1.3,0.3\n        c-1.2-3.6-2.7-7.2-3.5-10.9c-2.6-12.5-5.1-25-7.4-37.6c-1.5-8.1-3.6-16.3-3.8-24.5c-0.2-7.6,1.1-15.5,3.1-22.9\n        c1.6-5.9,5.2-11.2,7.8-16.9c1.6-3.4,3-6.9,4.5-10.3c0.5,0.1,0.9,0.2,1.4,0.3c-0.8,4.6-1.6,9.3-2.4,13.9\n        c-4.7,10.8-5.6,22.3-6.4,33.9c-0.9,14.7,1.4,29.1,4.5,43.4C153.9,338.8,154.8,341.7,155.5,344.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#171054",
    d: "M207.9,374.2c0,0.5-0.1,1.1-0.2,2.5c-0.7-1.1-1-1.5-1.2-2c-3-7.7-5.4-15.7-9-23.1c-4.3-8.9-10-17.4-9.8-27.7\n        c0.2-13.6-0.4-27.2,4.7-40.2c0.3-0.9,0.9-1.6,1.8-3.1c1.9,8.1,3.7,15.6,5.5,23.1c-0.3,3.8-0.6,7.6-0.8,11.3\n        c-0.6,11.8,2.4,23.1,4.5,34.6C204.8,357.7,206.4,365.9,207.9,374.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M368.2,219.5c-0.3,15.5-6.9,27.5-19.6,36.4c11.9-16.1,11.2-32.9,3.1-50.1c-1.8-2.5-3.4-5.2-5.5-7.4\n        c-2.6-2.7-5.6-5-8.5-7.4c2.4-2.3,4.6-5,7.4-6.7c2.2-1.3,2.7-2.7,2.4-4.8c5.9,3.2,11.8,6.4,17.7,9.6c2.9,1.6,5.7,3.5,8.6,5.2\n        c-9,0.2-16.7-3.7-23.9-8.9c-0.2,0.3-0.4,0.7-0.6,1c5.4,9.3,10.9,18.7,16.3,28C366.6,216.1,367.3,217.8,368.2,219.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#411DAA",
    d: "M111.8,320.1c-1.5,5.3-2.9,10.6-4.4,15.8c-0.2-0.1-0.3-0.2-0.5-0.3c0-5.4,0-10.7,0-16.1\n        c0-15.5-3.2-30.6-6.8-45.6c-3.6-14.9-5-29.9-3.8-45.3c1.7,6.2,3.4,12.4,5.3,19.2c3.4-9,6.6-17.5,9.8-26c0.4,0.1,0.8,0.2,1.2,0.3\n        c-0.6,5.6-1.1,11.1-1.7,16.7c-0.5,1.5-1.1,3-1.6,4.6c-2.6,9.5-4.3,19.2-3.1,29.1c1.6,13.4,3.5,26.8,5.1,40.1\n        C111.5,315.2,111.6,317.6,111.8,320.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M211.9,30.1c6,2.2,12.1,4.1,17.9,6.6c12.7,5.5,24.9,11.8,33.8,23c5.3,6.7,11.2,13,16.8,19.5\n        c0.9,1,2.1,1.7,3.1,2.6c0,0-0.1,0-0.1,0c0.3,0.3,0.6,0.6,0.9,0.9c1.5,3.1,3,6.2,4.5,9.2c-12-1.1-19.7-8.4-26.3-17.4\n        c-3.5-4.8-7.5-9.4-11.1-14.2c-6.8-9-15.5-15.7-25.3-21C221.3,36.4,216.7,33.1,211.9,30.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M232.1,75.1c-5.1-2.6-10.2-4.9-15.1-7.8c-12.1-7-23.8-14.9-36.2-21.3c-14.6-7.4-30.6-11.3-46.9-12.9\n        c-4-0.4-8-0.9-12.1-1.4c2.8-0.6,5.7-1.3,8.5-1.9c5,0.3,10,1,15,0.9c8.6-0.1,16.8,1.3,24.6,5c7.8,3.7,15.5,7.6,24,11.8\n        c-1.7-1.6-2.9-2.7-4-3.8c-0.9-1-1.7-2.1-2.5-3.1C204.5,49.2,221.9,57.5,232.1,75.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M300.9,105.5c-0.6-1.1-1.3-2.1-1.9-3.2c8.5,3.9,14.3,10.3,15.4,19.6c1,8.5,5.3,14.8,10.8,20.6\n        c14.1,15.1,31,26.6,48.5,37.6c3.8,2.4,6.8,6.1,10.1,9.2c-2.4,3-5.2,3.2-8.3,1.3c-1.5-0.9-3-1.8-4.4-2.9\n        c-10.3-7.9-20.6-15.9-30.8-23.8c-8.5-9-16.9-18.1-25.4-27.1c-1.7-4.9-3.4-9.7-5-14.6C307.9,116,306.2,109.7,300.9,105.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M177.2,25.2c-1.8-2.2-3.6-4.3-5.4-6.5c20.5,11.5,41,23,61.5,34.4c-0.3-1.1-1-2-1.8-2.7c-3.5-3-7-6-10.5-9\n        c4.7,2.3,10.5,3.5,13.9,7.1c8.5,8.8,15.9,18.6,23.7,28.1c0.6,0.7,0.7,1.7,1.1,2.6c-6.7-0.1-11.9-3.5-15.4-8.8\n        C237.5,60,228,52.9,217,47.7c-7.5-3.6-15.1-7-22.7-10.5c-2.3-1.1-4.6-2.1-7-3.1c0,0,0,0,0,0c-0.3-0.3-0.6-0.5-0.9-0.8c0,0,0,0,0,0\n        c-0.6-0.5-1.2-1-1.8-1.5c0,0,0,0,0,0c-0.5-0.3-1-0.7-1.5-1c0,0,0,0,0,0c-0.6-0.5-1.1-1.1-1.7-1.6c0,0,0,0,0,0\n        c-0.3-0.3-0.6-0.6-0.9-0.8c0,0,0,0,0,0c-0.3-0.3-0.6-0.6-0.9-0.8c0,0,0,0,0,0c-0.3-0.3-0.6-0.6-0.8-0.8c0,0,0,0,0,0\n        C178.5,26.2,177.9,25.7,177.2,25.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M187.3,34.1c2.3,1,4.7,2,7,3.1c7.6,3.5,15.1,7,22.7,10.5c11.1,5.2,20.5,12.3,27.3,22.8\n        c3.5,5.3,8.7,8.7,15.4,8.8c0,0-0.1,0-0.1,0c0.3,0.3,0.5,0.6,0.8,0.8c2.3,2,4.7,4,7.8,6.7c-6.3-0.3-11.5-0.6-16.8-0.9\n        c-3.1-3.2-5.5-7.5-10.9-7.2c-4-4.8-7.8-9.8-12.1-14.3c-7.9-8.6-17.5-15-27.8-20.5C195.9,41.2,191.8,37.4,187.3,34.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M91,55.3c4.7-0.8,9.4-1.6,14.1-2.3c5.4-0.8,10.8-1.6,16.2-1.9c5.3-0.3,10.6-0.1,15.8-0.1\n        c0.1,0.4,0.1,0.7,0.2,1.1c-3.5,1-7,2.1-10.5,3.1c-8.9,2.5-17.8,5.3-26.7,7.5c-11.9,3-23.9,5.4-35.8,8.3c-9,2.2-17.9,5-25.2,11.2\n        c-0.6,0.5-0.9,1.2-1.4,1.9c0,0,0,0,0,0c-0.6,0.3-1.1,0.5-1.7,0.8c0,0,0,0,0,0c-0.6,0.3-1.1,0.6-1.7,0.9c-1.1,0.6-2.2,1.2-3.3,1.8\n        c-0.3-0.4-0.6-0.8-0.8-1.2c3.9-3.2,7.9-6.4,11.8-9.6c1-0.8,2.1-1.6,3.1-2.4c1.4,0,2.9,0.3,4.1-0.2c5.4-2.1,10.7-4.7,16.2-6.7\n        c10.5-3.7,21-7.1,31.5-10.6c-0.6,0-1.3-0.2-2-0.1c-3.5,0.5-7,1-10.5,1.6C86.6,57.5,88.8,56.4,91,55.3z M100.7,56.6\n        C99.8,56.7,100,56.7,100.7,56.6C100,56.6,99.8,56.6,100.7,56.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4B731",
    d: "M337.7,191c2.8,2.4,5.9,4.7,8.5,7.4c2.1,2.2,3.7,4.9,5.5,7.4c-3.3-0.4-5.4,0.6-5.7,4.2c-4-1-7.9-2-11.9-3\n        c-4.4-1-8.8-1.9-13.1-2.8c-0.1,0.4-0.2,0.8-0.3,1.2c6.1,4.1,13.5,4.2,20.4,5.9c-0.3,1.7-0.5,3.3-0.8,5c-3.8-1-7.5-2.2-11.4-3\n        c-7.7-1.6-13.7-5.7-18.4-11.8c0,0,0,0,0,0c0.6-0.2,1.2-0.4,1.8-0.6c3.2-0.6,6.4-1.2,9.7-1.9c0.9-0.2,1.8-0.3,2.7-0.5\n        c0.5-0.1,1-0.2,1.6-0.3c3.8,0.6,7.6,1.2,11.4,1.9c0.2-0.4,0.4-0.8,0.5-1.2c-3.7-1.8-7.3-3.7-11-5.5c1.1-2,2.2-3.9,3.3-5.9\n        C332.8,188.7,335.2,189.8,337.7,191z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#171054",
    d: "M161.9,304.4c2.1,5.9,3.9,11.8,6.3,17.5c2.4,5.6,5.7,10.8,8.4,16.3c1,2,1.5,4.3,2.3,6.4\n        c1.4,5.4,2.7,10.7,4.2,16c0.5,1.8,1.1,3.4,1.7,5.2c-0.6,5.5-1.2,11-2,17.6c-1.8-14.8-7.4-26.9-13.8-38.9c-5-9.3-8.4-19.4-7.4-30.4\n        C161.8,310.9,161.8,307.6,161.9,304.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AD15A3",
    d: "M111,113.8c10.6-10.7,24-16.2,37.9-20.8c4.7-1.5,9.4-3.3,14.9-5.3c-7.7,9.3-14.6,17.7-21.6,26.2\n        c-0.9-3.2-3.5-2.6-5.8-2.6c1.3-2,2.6-4,4-6c-0.3-0.3-0.5-0.6-0.8-0.8c-6.8,3.4-13.1,7.4-18.8,12.6\n        C117.6,116,114.3,114.9,111,113.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M147.9,246.7c-3.4,6.9-6.7,13.9-10.1,20.8c-0.5-0.1-0.9-0.1-1.4-0.2c0-1.5-0.1-3,0-4.5\n        c0.8-11.4,1.5-22.8,2.4-34.2c0.3-4.3,1.1-8.6,1.6-13c2.8-1.1,5.3-1.4,6.3,0.9c2.2,0.3,3.6,0.5,5,0.7c-0.8,6.6-1.6,13.2-2.4,19.7\n        C149,240.2,148.4,243.5,147.9,246.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M111.8,320.1c-0.2-2.5-0.2-4.9-0.5-7.4c-1.7-13.4-3.5-26.8-5.1-40.1c-1.2-9.9,0.6-19.6,3.1-29.1\n        c0.4-1.6,1-3.1,1.6-4.6c1.5,15.2,3.7,30.3,4.3,45.5c0.5,10.9-1.1,22-1.9,32.9C113.1,318.3,112.3,319.2,111.8,320.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M283.3,272.5c0.8,0.1,1.8-0.1,2.4,0.3c7.4,4.4,14.5,9.5,22.3,13.3c10.9,5.3,15.4,14.3,17.2,25.4\n        c0.1,0.9-0.5,1.9-0.8,2.9c-5.4-5.1-10.9-10.3-16.3-15.4c-4.8-4.6-9.8-9.1-14.4-13.9C290,281.1,286.8,276.7,283.3,272.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M103.6,232.1c-0.4,3-0.9,6-1.3,9.1c-6-25.4-4-43.7,6.1-61.6c2.7,1.4,5.4,2.7,8.1,4.1\n        c-0.3,0.8-0.5,1.6-0.8,2.4C108,200.4,104.6,215.9,103.6,232.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M143.6,195.6c2.4-12.2,4-24.7,10.1-35.9c2.8,0,5.6,0.1,8.4,0.1c-0.1,1.3-0.2,2.7-0.4,4\n        c-1.9,7.9-3.8,15.9-5.8,23.8c-0.8,4.1-1.5,8.2-2.3,12.3c-2.5-0.5-5.1-0.8-7.4-1.7C145.2,198,144.5,196.6,143.6,195.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M155.5,344.7c-0.8-3-1.6-5.9-2.3-8.9c-3.1-14.3-5.4-28.7-4.5-43.4c0.7-11.5,1.7-23.1,6.4-33.9\n        c0.1,17.9,0.1,35.8,0.2,53.7C155.4,323,155.5,333.8,155.5,344.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M86.1,302.6c-0.2-1.3-0.7-2.6-0.6-3.9c0.7-13.5-1.9-26.5-4.4-39.7c-0.9-4.6-0.6-9.8,0.7-14.3\n        c1.8-6.3,5-12.3,7.7-18.4c1.2,12.5,2.7,24.9,3.4,37.4C93.7,277.2,90.8,290.1,86.1,302.6z M87.4,290c5.4-15.2,3.4-30.2-2.6-45\n        C85.6,260,86.5,275,87.4,290z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M267.9,358c-3.5-17.5-7.1-34.9-10.6-52.4c-0.3-1.5,0.3-3.3,0.5-4.9c0.4-0.1,0.8-0.2,1.2-0.3\n        c4,5.3,7.9,10.6,11.9,15.9c0.5,0.7,1.3,1.2,2,1.9c0,0,0,0,0,0c0.2,0.3,0.4,0.6,0.6,1c2.5,8,3.3,16,1.1,24.2\n        c-0.7-8.6-1.7-17.1-7.6-24c0.2,3.8,0.7,7.5,1.3,11.1C269.9,339.7,270,348.9,267.9,358z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#171054",
    d: "M249.7,380.8c-1.3-2.1-2.7-4.1-4-6.2c-5.1-8.4-7.9-17.6-8-27.3c-0.1-4.6,1.5-9.3,2.4-14\n        c1.3-6.6,2.6-13.2,3.6-18.5c1.3,6.4,2.8,14,4.4,21.7c-0.5,0.6-1.4,1.2-1.4,1.8c-0.4,6.5-1,13.1-0.7,19.6c0.2,3.8,1.8,7.6,2.8,11.4\n        c0.1,1.5,0.3,3.1,0.4,4.6C249.3,376.2,249.5,378.5,249.7,380.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4B731",
    d: "M340.2,163.8c10.3,8,20.5,15.9,30.8,23.8c1.4,1.1,2.9,2,4.4,2.9c3.1,1.9,5.9,1.8,8.3-1.3\n        c0.4,0.4,0.8,0.7,1.1,1.2c1.5,2.6,3.7,5.5,0.9,8c-2.6,2.3-5-0.3-7.2-1.6c-1.5-0.9-3-1.7-4.6-2.5c-2.9-1.7-5.7-3.6-8.6-5.2\n        c-5.9-3.3-11.8-6.4-17.7-9.6c-3-2.7-6.1-5.5-9.1-8.2c0,0,0.1-0.1,0.1-0.1c2.3,0.7,4.5,1.4,6.8,2.1c0.1-0.2,0.2-0.4,0.2-0.6\n        c-2.4-2.1-4.7-4.3-7.1-6.4C339.1,165.5,339.6,164.7,340.2,163.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#36157B",
    d: "M207.9,374.2c-1.5-8.2-3-16.5-4.5-24.7c-2.1-11.4-5-22.8-4.5-34.6c0.2-3.8,0.5-7.6,0.8-11.3\n        c7,14.4,12.5,29.2,12.2,45.6c0,1.3-0.9,2.6-1.3,3.8c-1.1-7.8-2.1-15.7-5.9-22.8c0.1,3.5,0.3,7,0.9,10.5c1.2,7.9,2.5,15.8,3.8,23.7\n        C208.9,367.6,208.4,370.9,207.9,374.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M124.9,239.6c1.9-6.9,3.7-13.8,5.7-20.7c0.4-1.3,1.9-2.2,2.9-3.2c-0.1,16.9-0.3,33.8-0.2,50.8\n        c0,5.8,0.9,11.6,1.3,17.5c-5.4-9.1-6.6-19.4-8.1-29.5C125.8,249.4,125.5,244.5,124.9,239.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M330.3,232c3.9,1,7.8,2.1,12.6,3.3c-7.8,3.5-15.1,3.5-22.4,3.4c-7-1.6-14.1-3.2-21.6-4.9\n        c1.4,2.7,2.9,5.5,4.3,8.3c-2.7-1.6-5.4-3-8.1-4.7c-0.7-0.4-1.4-1.6-1.3-2.3c0.4-4.2,1-8.3,1.6-13.1c9.3,7.3,19.9,8.5,29.9,11.5\n        c0.6,0.2,1.6-0.8,2.4-1.3C328.6,232.1,329.5,232,330.3,232z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M118.2,163.6c6-10.3,12-20.7,18-31c2.9,0.9,5.7,1.7,8.6,2.6c-1.1,2.4-2.3,4.9-3.4,7.3\n        c-3.3,5.2-6.6,10.4-9.8,15.7c-2.3,3.6-4.5,7.1-6.8,10.7C121.9,167.8,118.3,167.8,118.2,163.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M217.8,213.1c4.2,5.4,8.9,10.5,12.4,16.3c4.5,7.4,8.2,15.3,12.2,23c0.7,1.3,1.6,2.5,2.4,3.7\n        c0.6,3.7,1.2,7.5,1.8,11.2c-3.5-8.9-6.9-18-13.4-25.3c0.7,2.5,2,4.8,3,7.1c4.2,10,8.9,19.9,9.6,31c-4.2-10.1-8.2-20.3-12.6-30.3\n        c-4.1-9.3-8.7-18.4-12.9-27.7C219,219.3,218.5,216.2,217.8,213.1L217.8,213.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M221,41.5c3.5,3,7,5.9,10.5,9c0.8,0.7,1.5,1.6,1.8,2.7c-20.5-11.5-41-23-61.5-34.4c-1.2-1.4-2.4-2.6-3.4-4.1\n        c-1.4-2.1-2.7-4.3-4.7-7.6c1.9,1,3,1.2,3.6,1.8c9.6,10.1,21.7,16.1,34.3,21.6c6.2,2.7,11.8,6.7,17.6,10.2\n        C219.8,40.9,220.4,41.2,221,41.5C221,41.5,221,41.5,221,41.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M85.6,206.7c-1.4,4.9-2.9,9.7-4.3,14.6c-0.7-17.7-0.4-35.3,4.2-52.5c2.7,0.3,5.4,0.5,8,0.8\n        c0,1.7,0.1,3.3,0.1,5c-0.8,2.1-1.6,4.3-2.4,6.4C89.4,189.6,87.5,198.2,85.6,206.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AD15A3",
    d: "M111.6,71c1.2,0,2.3,0.1,3.5,0.1c-0.1,0.4-0.1,0.9-0.3,1c-9.7,6.9-17.3,15.8-24.4,25.2\n        c-1.3-2.2-2.7-4.5-4-6.7c1-0.9,2.2-1.6,3-2.7c1.2-1.6,2.1-3.3-0.5-4.6c-1.5-2.1-2.9-4.2-4.4-6.3c6.8-1.5,13.7-3,20.5-4.5\n        C107.2,72.1,109.4,71.5,111.6,71z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M333,249c4.8-0.5,9.6-1,15.6-1.6c-7.4,6.4-15.3,8.5-23.6,9.3c-7.9,0.7-15.7,0-23.2-3.2\n        c-0.8-0.3-1.9,0-2.9,0.1c-1.5-2.6-3-5.2-4.5-7.7c0.3-0.3,0.6-0.5,0.9-0.8c1.9,0.7,3.7,1.4,5.6,2c9.9,3.4,20.1,3.7,30.3,3\n        C331.8,250,332.4,249.3,333,249z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M156,187.7c1.9-7.9,3.8-15.9,5.8-23.8c3.6,0.5,7.3,1.1,10.9,1.6c-0.3,3.1-0.6,6.2-0.9,9.3\n        c-1.7,5.6-3.4,11.3-5.1,16.9c-1.3,0-2.6,0-3.9,0.1c0.7-6.4,1.3-12.8,2-19.2c-0.2-0.1-0.5-0.1-0.7-0.2c-1.4,5.6-2.7,11.2-4.1,16.8\n        C158.6,188.8,157.3,188.3,156,187.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M124.7,168.8c2.3-3.6,4.5-7.1,6.8-10.7c3.8,2.2,7.7,4.4,11.5,6.6c0.1,0.9,0.1,1.8,0.2,2.6c0,0,0,0,0,0\n        c-0.7,1.1-1.3,2.1-2,3.2c-2.4,3.8-4.8,7.7-7.2,11.5c-1.5-0.3-2.9-0.7-4.3-1c1.5-3,3-6.1,4.4-9.1c-0.3-0.2-0.6-0.3-0.8-0.5\n        c-2.3,3-4.5,5.9-6.8,8.9c-2-1.4-3.9-2.8-5.9-4.2C122,173.7,123.4,171.3,124.7,168.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M299.1,368.6c0.8-5.5,1.9-10.9,2.4-16.4c1.1-10.8-2.4-21-4.5-31.3c-1.1-5.4-1.6-11-2.3-16.5\n        c0.4-0.2,0.8-0.4,1.3-0.7c3.2,4.8,6.5,9.6,9.5,14.5c1.6,2.6,2.8,5.6,4.1,8.3c-0.5,5.8-0.9,11.7-1.4,17.5\n        c-0.6-8.2-1.3-16.4-6.2-23.4c-0.4,1.3-0.2,2.5-0.2,3.7c0.4,8,1,15.9,1.2,23.9c0.1,4.6-0.2,9.2-0.3,13.7\n        C301.6,364.2,300.4,366.4,299.1,368.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M124.9,239.6c0.5,4.9,0.9,9.9,1.6,14.8c1.5,10.2,2.7,20.4,8.1,29.5c0.6,12,1.2,24.1,1.8,36.1\n        c-3-9.7-6.4-19.4-8.8-29.2c-3.4-13.6-4.1-27.5-3.5-41.4C124.3,246.1,124.6,242.8,124.9,239.6z M131.5,300.6\n        c0.6-0.1,1.2-0.1,1.8-0.2c-1.4-6.9-2.8-13.7-4.3-20.6c-0.6,0.1-1.1,0.2-1.7,0.4C128.8,286.9,130.1,293.7,131.5,300.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M87.8,161.3c4.1-10.1,8.2-20.3,12.3-30.4c2.8,0.6,5.6,1.1,8.4,1.7c-0.5,1.1-1.1,2.3-1.6,3.4\n        c-2.5,5.7-5,11.4-7.5,17.1c-1.2,3.3-2.3,6.6-3.5,9.9c-1.3-0.2-2.7-0.3-4-0.5C90.5,162.2,89.2,161.7,87.8,161.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#171054",
    d: "M129.9,341.3c0,5.7,0,11.5,0,17.2c-0.1,0-0.3,0-0.4,0c-3.6-11.6-8-23-10.6-34.8c-1.4-6.1,0.3-12.9,0.5-19.3\n        c0.4,0,0.8-0.1,1.2-0.1c2.3,7.1,4.5,14.2,6.8,21.3c-0.4,0.7-1.1,1.4-1.1,2.1c0.5,3.3,1.1,6.7,1.8,10\n        C128.5,339,129.3,340.1,129.9,341.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M282.5,380.7c-1.3,2.6-2.6,5.3-3.8,7.9c-0.2-0.1-0.5-0.1-0.7-0.2c0-9.5-1-19.1,0.3-28.4\n        c1.2-9.4,4.7-18.6,7.8-28.1c0.8,3.4,1.5,6.8,2.3,10.3c-0.4,2.2-0.7,4.5-1.2,6.7c-1.4,6.7-3,13.4-4.2,20.2\n        C282.3,372.9,282.6,376.8,282.5,380.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M97.8,320.4c-1.7,3.2-3.4,6.4-5,9.4c-1.3-17.2-1.9-34.3,4-50.9c1.1,5.5,2.2,11,3.2,16.6\n        C99.3,303.8,98.6,312.1,97.8,320.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M260.3,48.9c-3.1-2-6.2-3.8-9.2-5.9c-10.1-7-21.6-11-32.8-15.7c-6.6-2.8-12.7-6.9-18.9-10.6\n        c-1.2-0.7-2-2.1-2.9-3.2c5.7,2.4,11.3,5.2,17.1,7.3c16.2,5.7,31.5,12.9,44.1,24.7C258.7,46.5,259.5,47.8,260.3,48.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M310.4,201.5c4.7,6.1,10.7,10.3,18.4,11.8c3.8,0.8,7.6,2,11.4,3c3.3,1.1,6.6,2.2,9.9,3.3c0,0.2,0,0.5,0.1,0.7\n        c-4.1,0.4-8.3,0.7-12.4,1.1c-3.9-0.3-7.9-0.3-11.8-1c-5.2-0.8-10.3-2.1-15.4-3.2c1.5-1.5,3-2.9,4.6-4.4c3.8,1.2,7.6,2.3,11.4,3.5\n        c0.1-0.2,0.2-0.3,0.3-0.5c-6.6-3.9-13.2-7.9-19.8-11.8c0.1-0.5,0.2-1,0.4-1.5C308.4,202.3,309.4,201.9,310.4,201.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M233.4,344c-1.5-7.9-2.9-15.8-4.5-23.6c-2.2-10.7-4.6-21.4-7.1-32.8c1,1.4,1.9,2.4,2.5,3.5\n        c5.7,11.3,10.3,22.9,11.7,35.6c0.1,0.5,0.4,1,0.6,1.5C235.5,333.5,234.5,338.7,233.4,344z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M136.4,111.3c2.3,0.1,4.9-0.6,5.8,2.6c-5,9-10,18-15,26.9c-1.9-0.6-3.8-1.1-5.7-1.7\n        c1.9-4.9,3.9-9.9,5.8-14.8C130.4,120,133.4,115.7,136.4,111.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M337.7,318.3c1.1-2.6,2.2-5.1,3.5-7.7c5-10.3,10-20.5,15-30.7c0.8-1.7,1.8-3.3,2.7-5c0,1.3-0.1,2.7-0.1,4\n        c-0.1,0.9-0.3,1.7-0.4,2.6c-1,12.9-6,24.2-14.2,34C342.8,317.1,339.9,317.4,337.7,318.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M187.3,40.7c0.8,1,1.6,2.1,2.5,3.1c1.1,1.2,2.3,2.2,4,3.8c-8.6-4.2-16.3-8.1-24-11.8c-7.8-3.7-16-5.1-24.6-5\n        c-5,0.1-10-0.6-15-0.9c12.1-4.6,24.3-4.3,36.4-0.2c0.6,0.3,1.2,0.7,1.9,1c0,0,0,0,0,0c0.8,0.3,1.7,0.6,2.5,0.8c0,0,0,0,0,0\n        c4.4,2.7,8.8,5.5,13.2,8.1C185.1,40.2,186.3,40.4,187.3,40.7L187.3,40.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#171054",
    d: "M223.1,388.2c-2-14.7-9.6-28.2-6.6-43.1C225.2,353.2,228.6,374.3,223.1,388.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M91.3,181c0.8-2.1,1.6-4.3,2.4-6.4c0.9-0.7,2-1.3,2.5-2.2c2.6-4.9,5-9.9,7.4-14.8\n        c3.6-5.4,7.2-10.7,10.9-16.1c0.2,0.1,0.4,0.2,0.6,0.4c-2.8,6.3-5.5,12.5-8.3,18.8c-1.6,4.2-3.3,8.4-4.9,12.6\n        c-0.3,0.7-0.5,1.5-0.8,2.2c-0.3,0.8-0.7,1.5-1,2.3c-2.1,3.7-4.1,7.3-6.2,11c-1.5,3-2.9,6-4.4,9.1c0.5-3.2,1-6.5,1.4-9.7\n        C91.2,185.6,91.2,183.3,91.3,181z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M144.7,135.1c-2.9-0.9-5.7-1.7-8.6-2.6c4.2-6.5,8.4-13.1,12.6-19.6c3,0.9,6.5,0.7,8.2,4.1\n        c-0.8,1.4-1.7,2.8-2.5,4.1c-1.1,1.7-2.2,3.4-3.3,5C149,129.2,146.9,132.2,144.7,135.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M198.1,252.6c0.9-19.8-4.9-38.6-8.6-57.7c-1.2-6.4-1.8-12.9-2.7-19.3c3.7,9.8,7.4,19.5,11,29.2\n        c0.6,5,1.2,10.1,1.7,15.1c-0.7-1.5-1.4-2.9-2.1-4.4c-0.3,0.1-0.6,0.3-1,0.4c0.3,2,0.5,3.9,0.8,5.9c0.8,5.3,1.5,10.6,2.3,15.9\n        C199.1,242.7,198.6,247.7,198.1,252.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M160,189.3c1.4-5.6,2.7-11.2,4.1-16.8c0.2,0.1,0.5,0.1,0.7,0.2c-0.7,6.4-1.3,12.8-2,19.2\n        c-0.9,7.1-1.8,14.2-2.7,21.3c-3.4,10.1-6.8,20.3-10.3,30.4c-0.4,1.1-1.2,2.1-1.8,3.1c0.5-3.2,1.1-6.5,1.6-9.7\n        c1.8-6.9,3.7-13.8,5.5-20.6c0.4-2.4,0.9-4.8,1.3-7.3C157.5,202.5,158.8,195.9,160,189.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M183.3,331.5c-1.4-5-3.7-9.9-3.9-14.9c-0.5-15.3-0.2-30.6,0.6-45.9c1.1,9.7,2.2,19.4,3.3,29.1\n        c0.2,1.6,0.5,3.2,0.7,4.8C183.7,313.5,183.5,322.5,183.3,331.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M162.1,159.9c-2.8,0-5.6-0.1-8.4-0.1c3.6-7.4,7.1-14.8,10.7-22.2c2.7,0.3,5.5,0.5,8.2,0.8\n        c-0.6,1.6-1.2,3.2-1.8,4.7c-1.1,2-2.3,4-3.3,6C165.7,152.7,163.9,156.3,162.1,159.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M267.9,358c2.1-9.1,2-18.3,0.4-27.4c-0.6-3.7-1.2-7.4-1.3-11.1c6,6.9,7,15.4,7.6,24\n        c-0.3,8.8-2.2,17.2-6.2,25c-0.3-0.7-1-1.4-1-2.1C267.5,363.5,267.7,360.8,267.9,358z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M84.5,77.1c1.5,2.1,2.9,4.2,4.4,6.3c-3.1,1.6-6.2,3.2-9.2,4.8c-4.9,1.4-9.8,2.9-14.7,4.3\n        c-1.4-1.2-2.9-2.3-4.3-3.5C68.6,85.1,76.5,81.1,84.5,77.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M143.6,195.6c0.9,0.9,1.6,2.3,2.6,2.7c2.4,0.8,4.9,1.1,7.4,1.7c-0.3,2.8-0.6,5.5-0.9,8.3\n        c-0.2,2.4-0.5,4.9-0.7,7.3c-0.1,0.5-0.2,1.1-0.2,1.6c-1.4-0.2-2.8-0.4-5-0.7c-1-2.3-3.6-2-6.3-0.9\n        C141.5,209,142.6,202.3,143.6,195.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M86.3,90.7c1.3,2.2,2.7,4.5,4,6.7c-1.5,2.4-3,4.9-4.5,7.3c-4.3,1.8-8.5,3.7-12.8,5.5c1.9-3.5-1.7-5.3-2.4-8\n        c4.2-3.2,8.3-6.5,12.5-9.7C84.2,91.9,85.3,91.3,86.3,90.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M108.5,132.6c-2.8-0.6-5.6-1.1-8.4-1.7c3.7-5.7,7.3-11.4,11-17.1c3.3,1.1,6.5,2.2,9.8,3.2\n        c-0.9,1-1.7,2.1-2.6,3.1C115,124.3,111.7,128.5,108.5,132.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M33.5,132.5c-5.7,6.7-11.3,13.4-17,20c-0.2-0.1-0.5-0.2-0.7-0.3c0.4-1.3,0.8-2.5,1.2-3.8\n        c3.7-5.6,7.3-11.1,11-16.7c2.2-2.7,4.3-5.4,6.5-8.1c4.4-4.1,8.8-8.2,13.2-12.3c1.7-1.1,3.4-2.2,5.1-3.3c0.2,0.2,0.4,0.5,0.6,0.7\n        c-1.4,1.7-2.8,3.3-4.2,5c-3.7,4.1-7.5,8.1-11.1,12.3C36.3,128,35,130.3,33.5,132.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M280,310.2c-5.8-13.8-13.4-27-14.6-42.7c0.8,1.1,1.7,2.1,2.3,3.3c3.8,7.5,7.5,15.1,11.3,22.6\n        c0.3,0.7,0.8,1.3,1.2,2c0,0,0,0,0,0c0.3,1,0.6,1.9,0.9,2.9c0.3,1.3,0.5,2.6,0.8,4c-1.8-3.1-3.7-6.2-5.5-9.3\n        C277.6,298.8,278.8,304.5,280,310.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4B731",
    d: "M310.6,217.3c5.1,1.1,10.2,2.4,15.4,3.2c3.9,0.6,7.8,0.7,11.8,1c-1.9,1.3-3.9,2.6-5.8,3.9\n        c-5.8-1.3-11.6-2.6-17.4-3.9c4.8,4.8,11.1,5.5,17,7.2c-0.4,1.1-0.8,2.3-1.2,3.4c-0.8,0-1.7,0.1-2.5,0.1\n        c-5.2-2.2-10.4-4.5-15.6-6.7c-0.5-0.2-1.1-0.5-1.6-0.7c0,0,0,0,0,0c-1-2.5-2.1-5-3.2-7.7C308.7,217.1,309.6,217.2,310.6,217.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M101.1,175.4c0.3-0.7,0.5-1.5,0.8-2.2c1-0.5,2.5-0.8,3-1.6c1.9-3.3,3.5-6.7,5.2-10.1\n        c3.3-6.5,6.5-13.1,9.8-19.6c0.6-0.9,1.1-1.7,1.7-2.6c1.9,0.6,3.8,1.1,5.7,1.7c-7.2,10.7-14.4,21.5-21.8,32.1\n        C104.6,174.2,102.6,174.6,101.1,175.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M369.6,256.7c-1.9,2.6-3.8,5.2-6.2,8.5c-0.7-5.1,0.5-8.5,2.8-11.9c6.7-10,9.8-20.9,8.1-32.7\n        c3.4-0.9,6.8-1.7,10.6-2.7c0,1.3,0,3,0,4.6c-0.6-0.3-1.6-1-1.8-0.9c-1.6,1.6-3.8,3.2-4.5,5.2c-3.2,9.6-5.9,19.4-8.8,29.1\n        c0,0,0.1-0.1,0.1-0.1C369.8,256.2,369.7,256.4,369.6,256.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M126.5,180.3c2.3-3,4.5-5.9,6.8-8.9c0.3,0.2,0.6,0.3,0.8,0.5c-1.5,3-3,6.1-4.4,9.1c-2,3.3-4,6.5-5.9,9.8\n        c-1.4,2.1-3,4.2-4.2,6.4c-1.7,3.1-3.1,6.3-4.6,9.4c0,0,0-0.1,0-0.1c-0.5,0.9-1.1,1.8-1.6,2.8c-1.9,3.7-3.9,7.4-5.8,11.2\n        c-2.6-2.4-0.5-4.9,0.3-6.8c3.8-8.2,8.1-16.2,12.2-24.2C122.2,186.4,124.4,183.4,126.5,180.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M369.8,256c2.9-9.7,5.6-19.5,8.8-29.1c0.7-2,2.9-3.6,4.5-5.2c0.1-0.1,1.2,0.6,1.8,0.9\n        C382.8,235,377.7,246.1,369.8,256z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M310.6,217.3c-0.9-0.1-1.8-0.2-3.1-0.3c1.1,2.7,2.1,5.2,3.2,7.7c-3.8-2.1-7.6-4-11.2-6.3\n        c-0.7-0.5-1.1-2.5-0.7-3.3c1.4-2.9,3.2-5.6,5-8.5c4.1,2.3,7.8,4.4,11.5,6.5C313.6,214.4,312.1,215.8,310.6,217.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M120.1,189.5c-4.1,8-8.4,16-12.2,24.2c-0.8,1.8-3,4.4-0.3,6.8c-1.3,3.9-2.6,7.7-4,11.6\n        c1-16.2,4.3-31.7,12.1-46.1C117.5,186.8,119.9,186.8,120.1,189.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M329.5,286.3c5.6,5,7.5,11.4,7.3,18.6c-0.1,4.5-0.5,8.9-0.7,13.4c-2.5-0.5-5-1-7.4-1.6\n        c1.1-5.1,3-10.2,3.1-15.4C331.9,296.4,330.3,291.3,329.5,286.3L329.5,286.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#171054",
    d: "M374.7,215.5c2-1.5,3.9-2.8,6.5-4.8c-2.9-0.8-4.8-1.3-6.6-1.8c-3.6-1-4-3.9-2.8-6.4c0.5-1.1,3.6-1.7,5.5-1.5\n        c3.1,0.4,6.1,1.6,9.2,2.4C385.3,213.2,380.8,218,374.7,215.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M124.7,168.8c-1.3,2.4-2.7,4.9-4,7.3c-1.4,2.5-2.8,4.9-4.2,7.4c-2.7-1.4-5.4-2.7-8.1-4.1\n        c3.2-5.3,6.5-10.6,9.7-15.9C118.3,167.8,121.9,167.8,124.7,168.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M161,119.4c3.2-0.3,5.2,0.9,5.1,4.4c-3.4,6.2-6.8,12.5-10.2,18.7c-1.2-0.6-2.5-1.1-3.7-1.7\n        c2.2-6,4.4-12,6.6-18C159.5,121.7,160.2,120.5,161,119.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M302.9,362c0.1-4.6,0.5-9.2,0.3-13.7c-0.2-8-0.8-15.9-1.2-23.9c-0.1-1.2-0.3-2.4,0.2-3.7\n        c4.9,7,5.5,15.2,6.2,23.4C306.5,350.1,304.7,356,302.9,362z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M84.5,58.6c3.5-0.5,7-1.1,10.5-1.6c0.7-0.1,1.5,0.1,2,0.1c-10.4,3.5-21,6.9-31.5,10.6\n        c-5.5,1.9-10.8,4.5-16.2,6.7c-1.2,0.5-2.7,0.2-4.1,0.2c11.4-5,22.7-10,34.1-14.9C80.9,59,82.7,58.9,84.5,58.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F29F32",
    d: "M267.8,226.3c4.9-1.3,9.9-2.4,14.6-4.1c3.3-1.2,6.2-3.3,9.3-5c-2.5,4-4.5,8.6-7.7,11.8\n        C280,233.1,274.4,231.7,267.8,226.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M171.8,174.8c0.3-3.1,0.6-6.2,0.9-9.3c1.6-7.1,3.3-14.2,4.9-21.3c1.3-3.3,2.6-6.7,4-10\n        c1.4,0.3,2.8,0.6,4.2,0.9C181.2,148.4,176.5,161.6,171.8,174.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4B731",
    d: "M303.2,242c-1.4-2.8-2.9-5.5-4.3-8.3c7.6,1.7,14.6,3.3,21.6,4.9c0,0.7,0,1.4,0,2.2c-2.3,0.2-4.6,0.3-7.2,0.5\n        c0.7,0.5,1.1,0.8,1.6,1.1c-0.3,1.2-0.6,2.3-0.9,3.5C310.3,244.6,306.7,243.3,303.2,242z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M245.8,280.2c-0.7-11.1-5.4-21-9.6-31c-1-2.4-2.3-4.6-3-7.1c6.4,7.4,9.8,16.4,13.4,25.3c0,0,0-0.1,0-0.1\n        c0.2,0.9,0.5,1.8,0.7,2.7c0.2,6.8,0.5,13.6,0.7,20.4C247.2,287,246.5,283.6,245.8,280.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#36157B",
    d: "M248.7,369.3c-1-3.8-2.7-7.6-2.8-11.4c-0.3-6.5,0.4-13.1,0.7-19.6c0-0.6,0.9-1.2,1.4-1.8\n        c1.1,5.8,2.2,11.6,3.2,17.4c0.2,1-0.4,2-0.6,3c-0.8-1.6-1.5-3.3-2-4.2C248.7,357.8,248.7,363.6,248.7,369.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M60.6,89c1.4,1.2,2.9,2.3,4.3,3.5c-1.9,1-3.9,2-5.8,2.9c-4.6,3.1-9.3,6.2-13.9,9.3c-1.6,1.4-3.3,2.8-4.9,4.3\n        c0-1.2,0-2.3-0.1-3.5C47,100,53.8,94.5,60.6,89z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M282.5,380.7c0.1-3.8-0.2-7.8,0.4-11.5c1.1-6.8,2.8-13.5,4.2-20.2c0.5-2.2,0.8-4.4,1.2-6.7\n        c2,6.9,2.6,13.9,1,21c-0.1,0.6-0.5,1.2-0.8,1.8c-0.1-1.7-0.2-3.4-0.3-5c-0.4-0.1-0.8-0.1-1.2-0.2c-1.2,6.1-2.3,12.2-3.5,18.3\n        C283.2,379,282.8,379.8,282.5,380.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#411DAA",
    d: "M76.9,218.7c-0.7,1.1-1.7,2-2.1,3.2c-0.7,2.1-1.2,4.2-4.2,3.6c0.3-2.5,0.4-5,0.9-7.4\n        c1.3-6.5,2.7-12.9,4.2-19.3c0.2-1,0.9-1.9,1.4-2.8c-0.1,5.5-0.2,11-0.3,16.5c-0.1,0.3-0.1,0.6-0.2,0.8\n        C76.7,215.1,76.8,216.9,76.9,218.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M48.3,129.2c-5.5,6.9-10.9,13.8-16.4,20.6c0.9-2.9,1.7-5.7,2.6-8.6c1.3-3.8,2.7-7.5,4-11.2\n        c0,0-0.1,0.1-0.1,0.1c0.3-0.4,0.6-0.8,0.9-1.2c0.3-0.3,0.6-0.6,0.9-0.8c0.4,1.4,0.9,2.9,1.3,4.3c1.2-0.7,2.4-1.4,3.7-2\n        C46.3,130,47.3,129.6,48.3,129.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M209.3,364.3c-1.3-7.9-2.6-15.8-3.8-23.7c-0.5-3.5-0.8-6.9-0.9-10.5c3.7,7.1,4.7,15,5.9,22.8\n        C210.1,356.7,209.7,360.5,209.3,364.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M320,335.5c-0.7-6.1-1.4-12-2.1-17.7C327.8,323,329.4,330.3,320,335.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M152.1,140.8c1.2,0.6,2.5,1.1,3.7,1.7c-3.2,6.9-6.4,13.8-9.8,20.6c-0.7,1.5-1.9,2.9-2.9,4.3\n        c-0.1-0.9-0.1-1.8-0.2-2.6c2.2-5.8,4.3-11.5,6.5-17.3C150.3,145.2,151.2,143,152.1,140.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M40.4,128.1c-0.3,0.3-0.6,0.6-0.9,0.8c-0.3,0.4-0.6,0.8-0.9,1.2c0,0,0.1-0.1,0.1-0.1\n        c-1.7,0.8-3.4,1.6-5.1,2.4c1.5-2.2,2.8-4.5,4.6-6.5c3.6-4.2,7.4-8.2,11.1-12.3c0.9,0.6,1.8,1.2,2.7,1.8\n        C48,119.7,44.2,123.9,40.4,128.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M280,310.2c-1.2-5.7-2.4-11.4-3.6-17.3c1.8,3.1,3.7,6.2,5.5,9.3c0.3,6,0.5,12,0.8,17.9\n        C281.8,316.8,280.9,313.5,280,310.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M87.8,161.3c1.4,0.4,2.7,0.9,4.1,1.2c1.3,0.3,2.7,0.4,4,0.5c-0.8,2.2-1.6,4.4-2.3,6.5\n        c-2.7-0.3-5.4-0.5-8-0.8c0.6-2.2,1.2-4.4,1.8-6.7c0.2-0.3,0.4-0.6,0.6-0.8C87.9,161.3,87.8,161.3,87.8,161.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M272.8,93.2c-5.8-1.4-11.5-2.8-17.3-4.1c8.4-1.9,16.3,0.2,24,3.2c-0.3,0.9-0.7,1.7-1,2.6\n        C276.6,94.3,274.7,93.8,272.8,93.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M184.8,365.8c-0.6-1.7-1.3-3.4-1.7-5.2c-1.4-5.3-2.8-10.7-4.2-16c1.4,1.4,2.7,2.8,4.1,4.2c0.4,0,0.7,0,1.1,0\n        c0,0-0.1,0-0.1,0c0.4,3.8,0.8,7.6,1.2,11.5c-0.1,0.3-0.1,0.7-0.2,1C185,362.8,184.9,364.3,184.8,365.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M34.5,123.6c-2.2,2.7-4.3,5.4-6.5,8.1c-0.6-1.6-1.1-3.3-1.7-4.9c1-1.9,2-3.8,2.9-5.6\n        c0.4-0.6,0.8-1.1,1.2-1.7c0,0,0,0,0,0c0.5,0,1,0,1.5,0C32.7,120.8,33.6,122.2,34.5,123.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M160.1,213.2c0.9-7.1,1.8-14.2,2.7-21.3c1.3,0,2.6,0,3.9-0.1C164.5,198.9,162.3,206,160.1,213.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M26.3,126.8c0.6,1.6,1.1,3.3,1.7,4.9c-3.7,5.6-7.3,11.1-11,16.7C20.1,141.2,23.2,134,26.3,126.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M97.8,320.4c0.8-8.3,1.5-16.6,2.3-24.9c1.7,7.2,2.2,14.3-0.5,21.4C99.1,318.1,98.4,319.2,97.8,320.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M199.5,237.7c-0.8-5.3-1.5-10.6-2.3-15.9c-0.3-2-0.5-3.9-0.8-5.9c0.3-0.1,0.6-0.3,1-0.4\n        c0.7,1.5,1.4,2.9,2.1,4.4c0.3,4.6,0.7,9.1,0.9,13.7C200.5,234.9,199.8,236.3,199.5,237.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M91.3,181c-0.1,2.3-0.1,4.6-0.4,6.9c-0.4,3.3-0.9,6.5-1.4,9.7c-1.3,3-2.6,6-4,9.1\n        C87.5,198.2,89.4,189.6,91.3,181z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M123.8,190.8c2-3.3,4-6.5,5.9-9.8c1.4,0.3,2.9,0.7,4.3,1c-2.4,3-4.8,6.1-7.3,9.1\n        C125.8,191,124.8,190.9,123.8,190.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#36157B",
    d: "M249.7,380.8c-0.2-2.3-0.4-4.6-0.6-6.9c0.5-1.6,1.3-3.2,1.5-4.9c0.3-3.5,0.2-7,0.3-10.6\n        c0.4,3.9,1.3,7.7,1.2,11.6c-0.2,4.9-1.2,9.8-2.1,15.6C249.8,383.5,249.8,382.1,249.7,380.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M31.8,119.5c-0.5,0-1,0-1.5,0c3.3-4.7,6.5-9.4,9.8-14c0,1.2,0,2.3,0.1,3.5C37.4,112.5,34.6,116,31.8,119.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M123.8,190.8c1,0.1,2,0.2,3,0.3c-3.9,5.2-7.9,10.4-11.8,15.5c1.5-3.1,2.9-6.3,4.6-9.4\n        C120.8,195,122.4,192.9,123.8,190.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M283.5,378.2c1.2-6.1,2.3-12.2,3.5-18.3c0.4,0.1,0.8,0.1,1.2,0.2c0.1,1.7,0.2,3.4,0.3,5\n        C286.8,369.5,285.2,373.8,283.5,378.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#B22DBB",
    d: "M225.1,87.6c-2.9,3.6-11,4.9-13.2,2.1C216.3,89,220.7,88.3,225.1,87.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M250.8,358.5c-0.1,3.5,0,7.1-0.3,10.6c-0.1,1.7-1,3.3-1.5,4.9c-0.1-1.5-0.3-3.1-0.4-4.6c0-5.7,0-11.5,0-16.6\n        c0.5,1,1.2,2.6,2,4.2C250.8,357.5,250.8,358,250.8,358.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M187.3,40.7c-1.1-0.3-2.2-0.4-3.2-1c-4.5-2.6-8.8-5.4-13.2-8.1C178.2,31.4,182.7,36.1,187.3,40.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#8B27E0",
    d: "M129.9,341.3c-0.6-1.2-1.4-2.4-1.7-3.7c-0.8-3.3-1.4-6.6-1.8-10c-0.1-0.6,0.7-1.4,1.1-2.1\n        C128.2,330.9,129.1,336.1,129.9,341.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#411DAA",
    d: "M70.6,226.2c-0.5,6.3-1.1,12.7-1.6,19c-0.3-1.9-0.6-3.8-0.8-5.8c0.3-3.6,0.5-7.3,0.9-10.9\n        C69.2,227.8,70.1,227,70.6,226.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#411DAA",
    d: "M240.6,78.6c5.4-0.3,7.8,3.9,10.9,7.2C246.3,85.8,243.2,82.5,240.6,78.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M93.9,188.6c2.1-3.7,4.1-7.3,6.2-11C100.3,182.6,97.1,185.5,93.9,188.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M113.4,209.3c0.5-0.9,1.1-1.8,1.6-2.8C114.5,207.5,113.9,208.4,113.4,209.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M141.3,170.5c0.7-1.1,1.3-2.1,2-3.2C142.6,168.4,141.9,169.4,141.3,170.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M177.2,25.2c0.6,0.5,1.2,1,1.8,1.6C178.5,26.2,177.9,25.7,177.2,25.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M184.7,31.8c0.6,0.5,1.2,1,1.8,1.5C185.9,32.8,185.3,32.3,184.7,31.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M281.1,298.2c-0.3-1-0.6-1.9-0.9-2.9C280.5,296.3,280.8,297.2,281.1,298.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M247.2,270.1c-0.2-0.9-0.5-1.8-0.7-2.7C246.7,268.2,247,269.2,247.2,270.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M324.6,198.5c-0.9,0.2-1.8,0.3-2.7,0.5C322.8,198.9,323.7,198.7,324.6,198.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M358.4,281.5c0.1-0.9,0.3-1.7,0.4-2.6C358.6,279.8,358.5,280.6,358.4,281.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M183.9,333.7c-0.2-0.8-0.4-1.5-0.7-2.3C183.5,332.2,183.7,333,183.9,333.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M181.6,29.1c0.6,0.5,1.1,1.1,1.7,1.6C182.7,30.2,182.1,29.7,181.6,29.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M170.9,31.6c-0.8-0.3-1.7-0.6-2.5-0.8C169.3,31,170.1,31.3,170.9,31.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M274.4,243.6C274.7,243.9,275,244.1,274.4,243.6C274.7,244.3,274.6,243.9,274.4,243.6L274.4,243.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M310.6,224.7c0.5,0.2,1.1,0.5,1.6,0.7C311.7,225.2,311.1,224.9,310.6,224.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M168.5,30.7c-0.6-0.3-1.2-0.7-1.9-1C167.2,30.1,167.9,30.4,168.5,30.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7541D9",
    d: "M30.4,119.5c-0.4,0.6-0.8,1.1-1.2,1.7C29.6,120.6,30,120,30.4,119.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M183.2,30.7c0.5,0.3,1,0.7,1.5,1C184.3,31.4,183.7,31.1,183.2,30.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M210.2,29.2c0.6,0.3,1.1,0.6,1.7,0.8C211.3,29.8,210.8,29.5,210.2,29.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M94.6,100.7c-0.4,0.5-0.7,1-1.1,1.5C93.9,101.7,94.2,101.2,94.6,100.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M34.5,85.9c0.6-0.3,1.1-0.6,1.7-0.9C35.6,85.3,35,85.6,34.5,85.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M36.1,85c0.6-0.3,1.1-0.5,1.7-0.8C37.2,84.4,36.7,84.7,36.1,85z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M312.2,200.9c-0.6,0.2-1.2,0.4-1.8,0.6C311,201.3,311.6,201.1,312.2,200.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M221,41.5c-0.6-0.3-1.2-0.6-1.8-0.9C219.8,40.9,220.4,41.2,221,41.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M91.3,130.2c0.3-0.6,0.5-1.1,0.8-1.7C91.8,129.1,91.6,129.7,91.3,130.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AD15A3",
    d: "M115.1,71.1c0.5-0.1,1-0.2,1.5-0.3C116.1,70.9,115.6,71,115.1,71.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M260.4,80c-0.3-0.3-0.5-0.6-0.8-0.8C259.9,79.5,260.1,79.8,260.4,80z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M284.4,82.6c-0.3-0.3-0.6-0.6-0.9-0.9C283.8,82,284.1,82.3,284.4,82.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M186.5,33.3c0.3,0.3,0.6,0.5,0.9,0.8C187,33.8,186.7,33.5,186.5,33.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M96.1,98.9c-0.3,0.3-0.5,0.6-0.8,0.9C95.6,99.5,95.9,99.2,96.1,98.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M95.3,99.8c-0.2,0.3-0.5,0.6-0.7,0.9C94.8,100.4,95.1,100.1,95.3,99.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M79.7,315.8c0,0.1-0.1,0.2-0.1,0.3c0,0-0.1,0-0.2,0.1C79.5,316.1,79.6,316,79.7,315.8\n        C79.7,315.9,79.7,315.8,79.7,315.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M273.5,319.2c-0.2-0.3-0.4-0.6-0.6-1C273.1,318.5,273.3,318.9,273.5,319.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M369.6,256.7c0.1-0.2,0.2-0.5,0.3-0.7C369.9,256.2,369.8,256.5,369.6,256.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CB8A22",
    d: "M331,248.6c0.4,0.1,0.9,0.1,1.3,0.2C331.8,248.7,331.4,248.7,331,248.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M274.5,243.5c-0.4-0.1-0.8-0.2-1.3-0.4c0.2-0.2,0.4-0.4,0.6-0.6C274,242.9,274.2,243.2,274.5,243.5\n        C274.4,243.6,274.5,243.5,274.5,243.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M180.7,28.3c0.3,0.3,0.6,0.6,0.9,0.8C181.3,28.9,181,28.6,180.7,28.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M179.9,27.5c0.3,0.3,0.6,0.6,0.9,0.8C180.5,28.1,180.2,27.8,179.9,27.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#7A129E",
    d: "M179.1,26.7c0.3,0.3,0.6,0.6,0.8,0.8C179.6,27.3,179.3,27,179.1,26.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M76.6,213.3c0.1-0.3,0.1-0.6,0.2-0.8C76.8,212.7,76.7,213,76.6,213.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#4A1EB0",
    d: "M185.1,361.2c0.1-0.3,0.1-0.7,0.2-1C185.2,360.5,185.1,360.9,185.1,361.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M87.9,161.3c-0.2,0.3-0.4,0.6-0.6,0.8C87.5,161.9,87.7,161.6,87.9,161.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#AE4FDC",
    d: "M40.4,128.1c3.8-4.2,7.7-8.4,11.5-12.7c4.2-3.3,8.3-6.6,12.5-9.8c2.1-1.2,4.2-2.3,6.3-3.5\n        c0.7,2.7,4.3,4.5,2.4,8c-6.6,4.7-13.2,9.4-19.8,14.2c-0.5,0.3-1,0.6-1.5,1c0,0,0,0,0,0c-0.3,0.5-0.6,1-1,1.5c0,0,0,0,0,0\n        c-0.5,0.3-1,0.6-1.5,0.9c0,0,0,0,0,0c-0.3,0.5-0.6,1-1,1.5c0,0-0.1,0-0.1,0c-1,0.4-2,0.7-2.9,1.2c-1.3,0.6-2.5,1.3-3.7,2\n        C41.3,131,40.8,129.6,40.4,128.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M27.3,211.2c2.7-10.4,5.3-20.7,8-31.1c0.3-1.3,1.1-2.4,2.6-3.4c-0.9,3.5-1.7,7-2.6,10.5\n        c-2.1,8.4-4.1,16.9-6.3,25.3c-0.3,1-1.2,1.9-1.9,2.8C27.3,214,27.3,212.6,27.3,211.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M49.3,127.8c0.5-0.3,1-0.6,1.5-0.9C50.3,127.1,49.8,127.4,49.3,127.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M51.8,125.3c0.5-0.3,1-0.6,1.5-1C52.8,124.7,52.3,125,51.8,125.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M50.9,126.8c0.3-0.5,0.6-1,1-1.5C51.5,125.8,51.2,126.3,50.9,126.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#6B4DDD",
    d: "M48.4,129.2c0.3-0.5,0.6-1,1-1.5C49,128.2,48.7,128.7,48.4,129.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#070931",
    d: "M111.8,70.2C112,70,112.3,69.7,111.8,70.2C112.5,70,112.1,70.1,111.8,70.2C111.7,70.2,111.8,70.2,111.8,70.2z\n        "
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M245.7,185.2c0-3.4,0-6.9,0-10.3c-0.7-0.2-1.4-0.4-2.1-0.7c-2.1,3-4.2,6-6.4,9.2c-1.1-8.6,0.6-17.1,3.6-25.4\n        c1.2-0.4,2.5-0.6,3.5-1.4c4.3-3.3,8.6-6.7,12.9-10.1c3,6.5,7.6,11.5,14,14.8c5.7,2.7,11.4,5.3,17.2,8c-7.6,0.8-14.9,0.2-21.5-4.5\n        c4.2,6.1,10.7,8.2,16.7,11.3c-2.7,3-5.5,6.1-8.2,9.1c-6.9,0.6-11.7-2.3-15-8.4c-1.3-2.4-3.4-4.4-5.3-6.7c-6,9-2.7,22.4,6.2,27.4\n        c-0.6,1.9-1.1,3.8-1.7,5.8c-8.6-1.6-11.1-8.4-13.1-15.6C246.3,186.9,246,186.1,245.7,185.2z M252.4,153.3\n        c-7.5,3.8-11.2,11.6-9,18.9C246.4,165.8,249.3,159.8,252.4,153.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#070931",
    d: "M259.1,123.7c7.6,3.7,15.7,2.6,23.7,2.4c2.8,1.9,5.6,3.8,8.5,5.7c1.2,1.6,2.4,3.3,3.6,4.9l0,0\n        c0.3,0.6,0.6,1.1,0.9,1.7l0,0c0.5,0.8,1.1,1.7,1.6,2.5c0,0,0,0,0,0c4.1,4.8,8.2,9.5,12.4,14.3c4.4,4.8,8.9,9.6,13.3,14.4\n        c-6.1-2-11.4-4.8-17-6.7c-9-3-18.3-5.4-27.4-8.1c-2.2-1.3-4.5-2.4-6.5-3.8c-1.8-1.3-3.3-3-5-4.5c0.3-0.1,0.6-0.1,0.9-0.2\n        c0.2,0.2,0.5,0.3,0.7,0.3c0.6,0.3,1.1,0.6,1.7,0.9c4.7,1.8,9.5,3.6,14.2,5.4c0.1-0.3,0.2-0.6,0.2-1c-7-5.6-14-11.2-21-16.8\n        c-0.8-1.2-1.6-2.5-2.6-3.6C259.3,129.2,257.8,126.9,259.1,123.7z M265.2,130.4c2.8,3,5.3,5.6,7.6,8.1c1.5-3.1,2.8-5.6,4.1-8.1\n        C273.2,130.4,269.5,130.4,265.2,130.4z M289.1,146.7c2.9,0.6,5.2,1.1,7.5,1.6c-0.9-2-1.8-3.9-2.8-6.1\n        C292.1,143.8,290.9,145,289.1,146.7z M288.5,140.8c-0.4-2.8,0.2-5.9-4.1-4.7C283.9,139,284.4,141,288.5,140.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M300.9,105.5c5.4,4.2,7,10.5,8.9,16.6c1.5,4.9,3.3,9.8,5,14.6c-0.6,0.6-1.1,1.1-1.7,1.7\n        c-2.2-2.2-4.4-4.4-6.6-6.6c-1-1.1-2-2.2-3.1-3.2c-5.1-4.9-11.2-8-18.2-9.2c0.5-0.7,1-2.1,1.5-2.1c6.5,0.3,7.6-6,11.4-9\n        C299.1,107.5,299.9,106.5,300.9,105.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C95227",
    d: "M267,146.6c1.7,1.5,3.2,3.2,5,4.5c2,1.5,4.3,2.6,6.5,3.8c-2.5,2.2-4.9,4.4-7.4,6.6c-6.4-3.2-11-8.3-14-14.8\n        c-3-7.3-3.2-14.5,0.6-21.5c0.3-0.5,0.9-0.9,1.4-1.3c-1.3,3.1,0.3,5.4,2.1,7.7c0.9,1.1,1.7,2.4,2.6,3.6c0,1.5-0.3,3.1,0.2,4.4\n        c0.8,2.1,2.1,4.1,3.2,6.1c0,0-0.2,0.2-0.2,0.2c-0.4,0.1-0.9,0.2-1.3,0.3C266.1,146.3,266.6,146.5,267,146.6L267,146.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C95227",
    d: "M285.1,119.5c7,1.2,13.1,4.2,18.2,9.2c1.1,1,2.1,2.1,3.1,3.2c-1.9,1.4-3.8,2.7-5.7,4.1\n        c-1.1-0.8-2.1-1.7-3.2-2.5c0,0,0,0,0,0c-0.3-0.5-0.6-1-1-1.6c-5.1-5.5-11.4-8.3-18.8-9.1c-3-1.1-5.9-2.1-9.2-3.3\n        C274.2,119.5,279.7,119.5,285.1,119.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C95227",
    d: "M272.8,93.2c1.9,0.5,3.8,1.1,5.7,1.6c5.8,2,10.9,4.9,14.4,11.7c-8.9-5-17.8-5.3-26.7-5.2c1-1.4,2-3,3.1-4.3\n        C270.4,95.7,271.6,94.5,272.8,93.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M277.8,122.8c7.3,0.8,13.7,3.6,18.8,9.1c0.3,0.5,0.6,1,1,1.6c0,0,0,0,0,0c0.4,1.2,1.3,2.5,1.2,3.7\n        c0,1.3-0.9,2.6-1.4,3.8c0,0,0,0,0,0c-0.5-0.8-1.1-1.7-1.6-2.5c0,0,0,0,0,0c-0.3-0.6-0.6-1.1-0.9-1.7c0,0,0,0,0,0\n        c-1.2-1.6-2.4-3.3-3.6-4.9c-2.8-1.9-5.7-3.8-8.5-5.7c-3.6-0.6-7.1-1.1-10.7-1.7c-1.5-0.2-3-0.6-4.8-0.9\n        C271.1,123.2,274.4,123,277.8,122.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M237.3,151.7c-0.9-5.8,4.3-12.1,12.2-15C245.6,141.6,243.2,147.9,237.3,151.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M252.4,124.5c-5.6,4.6-10.5,8.5-15.9,12.9C236.3,131.5,242.8,126.4,252.4,124.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#070931",
    d: "M184.1,348.8c-0.4,0-0.7,0-1.1,0C183.4,348.8,183.7,348.8,184.1,348.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F29F32",
    d: "M275.2,185.3c2.7-3,5.5-6.1,8.2-9.1c8,2.7,16.2,3.1,24.5,3.4c8.1,0.3,15.5,3.6,22.3,7.9\n        c-1.1,2-2.2,3.9-3.3,5.9c-8.6-2.5-16.8-1.1-25.1,1.8c-10.8,3.7-21.7,7-32.7,9.8c-2.9,0.7-6.4-1-9.6-1.6c0.6-1.9,1.1-3.8,1.7-5.8\n        c11,4.4,23,0,30.8-8.4c-7.9,1.1-15.6,2.2-23.2,3.2c0-0.2,0-0.5-0.1-0.7c4.5-1.5,8.9-3,13.4-4.5c-0.1-0.2-0.2-0.5-0.3-0.7\n        C279.7,186.1,277.4,185.7,275.2,185.3z M294.4,189c-0.1-0.1-0.2-0.2-0.3-0.2c-0.1,0-0.2,0.1-0.3,0.1c0.1,0.1,0.2,0.2,0.3,0.2\n        C294.2,189.1,294.3,189,294.4,189z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M56.8,244.4c-1.4-4.1-2.9-8.2-4.3-12.2c-0.5-5.8-0.4-11.8-1.6-17.5c-1.5-7.3,0-14.1,1.3-22.2\n        c1.3,11.7,2.5,22.3,3.7,32.8c0.6,5.4,1.2,10.8,1.7,16.2C57.6,242.4,57.1,243.4,56.8,244.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4CA30",
    d: "M329.5,286.3c-0.1-0.1-0.2-0.2-0.4-0.4C329.2,286,329.4,286.2,329.5,286.3\n        C329.5,286.3,329.5,286.3,329.5,286.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M217.7,213.2c-0.2-0.3-0.5-0.6-0.7-1c0.2-0.1,0.3-0.2,0.5-0.2C217.6,212.4,217.7,212.8,217.7,213.2\n        C217.8,213.1,217.7,213.2,217.7,213.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M79.7,144.9c-1.6-21.1,23-53.8,45.4-60c-6.7,6-13.3,11.1-18.9,17.1c-5.8,6.1-11.4,12.6-15.8,19.7\n        C86,128.8,83.3,136.8,79.7,144.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M161,119.4c-0.8,1.1-1.5,2.3-2.3,3.4c-1.4-0.6-2.8-1.1-4.2-1.7c0.8-1.4,1.7-2.8,2.5-4.1\n        c3.6-4.4,7.1-8.9,10.7-13.3c0.6-0.7,1.5-1.1,2.2-1.6c0,0,0.3,0.3,0.3,0.3C167.1,108,164.1,113.7,161,119.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M172.4,99.7c0,0.1-0.1,0.2-0.1,0.3c-0.1-0.1-0.2-0.2-0.3-0.3c0.1-0.1,0.2-0.2,0.3-0.2\n        C172.2,99.5,172.3,99.6,172.4,99.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M170,102.1c0.2-0.1,0.4-0.2,0.5-0.3c-0.1,0.2-0.2,0.4-0.3,0.5C170.2,102.4,170,102.1,170,102.1z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M181.6,134.2c-1.3,3.3-2.6,6.7-4,10c-2.3-0.4-4.5-0.7-6.8-1.1c0.6-1.6,1.2-3.2,1.8-4.7c3.3-5,6.5-10,9.8-14.9\n        c2-3,4.3-5.9,7.1-8.3C186.9,121.5,184.2,127.9,181.6,134.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#CA6F25",
    d: "M330.3,187.5c-6.8-4.4-14.2-7.6-22.3-7.9c-8.3-0.3-16.6-0.6-24.5-3.4c-5.9-3.1-12.5-5.2-16.7-11.3\n        c6.6,4.7,13.9,5.3,21.5,4.5c-5.7-2.7-11.4-5.3-17.2-8c2.5-2.2,4.9-4.4,7.4-6.6c9.2,2.7,18.4,5.1,27.4,8.1c5.6,1.9,11,4.7,17,6.7\n        c-4.4-4.8-8.9-9.6-13.3-14.4c-3-6.4-6-12.9-9-19.3c1.9-1.4,3.8-2.7,5.7-4.1c2.2,2.2,4.4,4.4,6.6,6.6c1.4,1.7,2.7,3.4,4.1,5\n        c7.1,7.7,14.2,15.3,21.3,22.9c2.4,2.1,4.7,4.3,7.1,6.4c-0.1,0.2-0.2,0.4-0.2,0.6c-2.3-0.7-4.5-1.4-6.8-2.1c-0.3-0.2-0.6-0.4-1-0.6\n        c0,0-0.1,0.2-0.2,0.3c0.4,0.1,0.7,0.3,1.1,0.4c3,2.7,6.1,5.5,9.1,8.2c0.2,2.1-0.3,3.5-2.4,4.8c-2.8,1.7-5,4.4-7.4,6.7\n        C335.2,189.8,332.8,188.7,330.3,187.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F29F32",
    d: "M338.5,166.4c-7.1-7.6-14.2-15.3-21.3-22.9c-1.5-1.6-2.8-3.3-4.1-5c0.6-0.6,1.1-1.1,1.7-1.7\n        c8.5,9,16.9,18.1,25.4,27.1C339.6,164.7,339.1,165.5,338.5,166.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M100.7,56.6C99.8,56.6,100,56.6,100.7,56.6C100,56.7,99.8,56.7,100.7,56.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M118.2,120.2c0.9-1,1.7-2.1,2.6-3.1c5.6-5.2,12-9.2,18.8-12.6c0.3,0.3,0.5,0.6,0.8,0.8c-1.3,2-2.6,4-4,6\n        c-3,4.4-6,8.7-9,13.1C124.3,123,121.3,121.6,118.2,120.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#18ADF3",
    d: "M151.9,217.3c0.1-0.5,0.2-1.1,0.2-1.6c0.5-0.5,1.1-1,1.7-1.5c0.5,0.9,0.9,1.6,1.2,2.3\n        c-1.8,6.9-3.7,13.8-5.5,20.6C150.3,230.4,151.1,223.8,151.9,217.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M116.5,183.6c1.4-2.5,2.8-4.9,4.2-7.4c2,1.4,3.9,2.8,5.9,4.2c-2.2,3.1-4.3,6.1-6.5,9.2\n        c-0.2-2.7-2.6-2.7-4.3-3.5C116,185.2,116.3,184.4,116.5,183.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F36CB1",
    d: "M170.8,143.2c2.3,0.4,4.5,0.7,6.8,1.1c-1.6,7.1-3.3,14.2-4.9,21.3c-3.6-0.5-7.3-1.1-10.9-1.6\n        c0.1-1.3,0.2-2.7,0.4-4c1.8-3.6,3.6-7.2,5.4-10.7C168.6,147.1,169.7,145.2,170.8,143.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M152.8,208.3c0.3-2.8,0.6-5.5,0.9-8.3c0.8-4.1,1.5-8.2,2.3-12.3c1.3,0.5,2.6,1.1,4,1.6\n        c-1.2,6.6-2.4,13.2-3.6,19.8C155.2,208.8,154,208.6,152.8,208.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M87.4,290c-0.9-15-1.7-30-2.6-45C90.8,259.8,92.7,274.8,87.4,290z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M149.5,147.4c-2.2,5.8-4.3,11.5-6.5,17.3c-3.8-2.2-7.7-4.4-11.5-6.6c3.3-5.2,6.6-10.4,9.8-15.7\n        C145.3,142.1,147,145.4,149.5,147.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F36CB1",
    d: "M149.5,147.4c-2.5-2.1-4.2-5.4-8.2-5c1.1-2.4,2.3-4.9,3.4-7.3c2.2-3,4.3-5.9,6.5-8.9c1.2-1.6,2.2-3.4,3.3-5\n        c1.4,0.6,2.8,1.1,4.2,1.7c-2.2,6-4.4,12-6.6,18C151.2,143,150.3,145.2,149.5,147.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M93.6,169.6c0.8-2.2,1.6-4.4,2.3-6.5c1.2-3.3,2.3-6.6,3.5-9.9c1.4,1.4,2.8,2.9,4.2,4.3\n        c-2.5,5-4.8,9.9-7.4,14.8c-0.5,0.9-1.7,1.5-2.5,2.2C93.7,172.9,93.6,171.3,93.6,169.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#D1058C",
    d: "M86.3,90.7c-1.1,0.6-2.1,1.2-3.2,1.8c-1.2-1.4-2.3-2.9-3.5-4.3c3.1-1.6,6.2-3.2,9.2-4.8\n        c2.6,1.3,1.7,3,0.5,4.6C88.6,89,87.4,89.8,86.3,90.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M131.5,300.6c-1.4-6.8-2.8-13.7-4.2-20.5c0.6-0.1,1.1-0.2,1.7-0.4c1.4,6.9,2.8,13.7,4.3,20.6\n        C132.7,300.4,132.1,300.5,131.5,300.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M103.6,157.5c-1.4-1.4-2.8-2.9-4.2-4.3c2.5-5.7,5-11.4,7.5-17.1c5,0.4,9.6,1.8,13.1,5.7\n        c-3.3,6.5-6.5,13.1-9.8,19.6c-1.1-0.3-2.2-0.6-3.3-0.8c2.8-6.3,5.5-12.5,8.3-18.8c-0.2-0.1-0.4-0.2-0.6-0.4\n        C110.9,146.7,107.2,152.1,103.6,157.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F36CB1",
    d: "M119.9,141.8c-3.5-3.9-8.1-5.3-13.1-5.7c0.5-1.1,1.1-2.3,1.6-3.4c3.3-4.2,6.5-8.3,9.8-12.5\n        c3,1.4,6.1,2.8,9.1,4.2c-1.9,4.9-3.9,9.9-5.8,14.8C121,140.1,120.5,140.9,119.9,141.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M106.8,160.5c1.1,0.3,2.2,0.6,3.3,0.8c-1.7,3.4-3.3,6.9-5.2,10.1c-0.5,0.8-2,1.1-3,1.6\n        C103.5,168.9,105.2,164.7,106.8,160.5z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#318DEF",
    d: "M152.8,208.3c1.2,0.3,2.3,0.5,3.5,0.8c-0.4,2.4-0.9,4.8-1.3,7.3c-0.4-0.7-0.7-1.4-1.2-2.3\n        c-0.6,0.6-1.1,1-1.7,1.5C152.4,213.2,152.6,210.7,152.8,208.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F36CB1",
    d: "M79.6,88.2c1.2,1.4,2.3,2.9,3.5,4.3c-4.2,3.2-8.3,6.5-12.5,9.7c-2.1,1.2-4.2,2.3-6.3,3.5\n        c-1.7-3.4-3.5-6.8-5.2-10.2c1.9-1,3.9-2,5.8-2.9C69.9,91,74.8,89.6,79.6,88.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M59.1,95.4c1.7,3.4,3.5,6.8,5.2,10.2c-4.2,3.3-8.3,6.6-12.5,9.8c-0.9-0.6-1.8-1.2-2.7-1.8\n        c1.4-1.7,2.8-3.3,4.2-5c-0.2-0.2-0.4-0.5-0.6-0.7c-1.7,1.1-3.4,2.2-5.1,3.3c-0.8-2.2-1.7-4.4-2.5-6.6\n        C49.8,101.6,54.5,98.5,59.1,95.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#A4B2F4",
    d: "M45.2,104.7c0.8,2.2,1.7,4.4,2.5,6.6c-4.4,4.1-8.8,8.2-13.2,12.3c-0.9-1.4-1.8-2.7-2.6-4.1\n        c2.8-3.5,5.6-7,8.4-10.5C41.9,107.5,43.5,106.1,45.2,104.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#070931",
    d: "M38.6,130.2c0.3-0.4,0.6-0.8,0.9-1.2C39.1,129.4,38.9,129.8,38.6,130.2z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M275.2,185.3c2.2,0.4,4.4,0.8,6.6,1.1c0.1,0.2,0.2,0.5,0.3,0.7c-4.5,1.5-8.9,3-13.4,4.5c0,0.2,0,0.5,0.1,0.7\n        c7.6-1.1,15.2-2.1,23.2-3.2c-7.8,8.4-19.8,12.8-30.8,8.4c-8.9-5-12.2-18.4-6.2-27.4c1.9,2.3,4,4.3,5.3,6.7\n        C263.5,183,268.3,185.9,275.2,185.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M252.4,153.3c-3.1,6.5-6,12.5-9,18.9C241.1,164.9,244.9,157.1,252.4,153.3z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#EE7636",
    d: "M267.2,145.6c-1.1-2-2.4-4-3.2-6.1c-0.5-1.3-0.2-2.9-0.2-4.4c7,5.6,14,11.2,21,16.8c-0.1,0.3-0.2,0.6-0.2,1\n        c-4.7-1.8-9.5-3.6-14.2-5.4c-0.6-0.3-1.1-0.6-1.7-0.9c-0.3,0-0.5-0.1-0.7-0.3C267.7,146.1,267.4,145.9,267.2,145.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M300.7,135.9c3,6.4,6,12.9,9,19.3c-4.1-4.8-8.2-9.5-12.4-14.3c0.5-1.3,1.4-2.5,1.4-3.8\n        c0-1.2-0.8-2.5-1.2-3.7C298.6,134.2,299.6,135.1,300.7,135.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M265.2,130.4c4.3,0,8,0,11.7,0c-1.2,2.5-2.5,5-4.1,8.1C270.5,136,268,133.4,265.2,130.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#ECACE3",
    d: "M289.1,146.7c1.8-1.7,3.1-2.9,4.8-4.5c1,2.1,1.9,4.1,2.8,6.1C294.3,147.8,292,147.3,289.1,146.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M291.3,131.9c1.2,1.6,2.4,3.3,3.6,4.9C293.7,135.2,292.5,133.5,291.3,131.9z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M295.7,138.4c0.5,0.8,1.1,1.7,1.6,2.5C296.8,140.1,296.3,139.3,295.7,138.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M294.9,136.8c0.3,0.6,0.6,1.1,0.9,1.7C295.5,137.9,295.2,137.3,294.9,136.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C95227",
    d: "M268.6,146.7c0.6,0.3,1.1,0.6,1.7,0.9C269.7,147.2,269.2,146.9,268.6,146.7z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#C95227",
    d: "M267.2,145.6c0.2,0.3,0.4,0.5,0.7,0.8c-0.3,0.1-0.6,0.1-0.9,0.2c0,0,0.1,0,0.1,0c0-0.3,0-0.5-0.1-0.8\n        L267.2,145.6z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#070931",
    d: "M267,145.8c0.1,0.3,0.1,0.5,0.1,0.8c-0.5-0.2-0.9-0.3-1.4-0.5C266.1,146.1,266.6,145.9,267,145.8z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F08734",
    d: "M297.5,133.4c-0.3-0.5-0.6-1-1-1.6C296.8,132.4,297.2,132.9,297.5,133.4z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F3D965",
    d: "M294.4,189c-0.1,0.1-0.2,0.2-0.3,0.1c-0.1,0-0.2-0.1-0.3-0.2c0.1-0.1,0.2-0.1,0.3-0.1\n        C294.2,188.8,294.3,188.9,294.4,189z"
  }), /* @__PURE__ */ import_react36.default.createElement("path", {
    fill: "#F4B731",
    d: "M338.5,171.3c-0.4-0.1-0.7-0.3-1.1-0.4c0.1-0.1,0.2-0.3,0.2-0.3C337.9,170.8,338.2,171,338.5,171.3\n        C338.5,171.2,338.5,171.3,338.5,171.3z"
  })));
  var lydia_finance_default = LydiaFinanceIcon;

  // src/searchbar/icons/oliveswap.tsx
  var import_react37 = __toESM(require_react());
  var OliveSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react37.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 384 384"
  }, /* @__PURE__ */ import_react37.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react37.default.createElement("circle", {
    cx: "192",
    cy: "192",
    r: "192",
    fill: "#B18856"
  }), /* @__PURE__ */ import_react37.default.createElement("path", {
    d: "M309.715 205.053C305.937 173.745 290.134 142.934 265.486 118.185C240.737 93.4365 209.926 77.7325 178.618 73.9562C146.911 70.1799 118.486 78.9263 98.6073 98.7051C78.7284 118.484 69.982 146.909 73.8584 178.716C77.6347 210.023 93.4388 240.834 118.088 265.583C142.837 290.33 173.648 306.034 204.955 309.813C209.825 310.408 214.696 310.706 219.367 310.706C245.21 310.706 268.168 301.861 284.866 285.064C304.845 265.185 313.589 236.76 309.715 205.053V205.053Z",
    fill: "#8BC34A"
  }), /* @__PURE__ */ import_react37.default.createElement("path", {
    d: "M166.093 102.78C160.229 97.0145 151.384 95.2256 141.146 97.7116C131.704 100.096 122.064 105.761 113.913 113.912C96.2212 131.704 91.3512 154.564 102.782 166.093C106.955 170.266 112.721 172.255 119.081 172.255C130.213 172.255 143.632 166.191 154.862 154.86C163.012 146.811 168.777 137.169 171.163 127.727C173.647 117.49 171.858 108.644 166.093 102.78V102.78Z",
    fill: "#558B2F"
  }), /* @__PURE__ */ import_react37.default.createElement("path", {
    d: "M219.468 310.608C214.796 310.608 209.926 310.31 205.056 309.713C173.748 305.936 142.935 290.233 118.188 265.484C93.4392 240.735 77.7352 209.924 73.9589 178.616C70.0825 146.909 78.9273 118.484 98.706 98.6054C118.487 78.7283 147.012 69.9818 178.716 73.8583C210.024 77.6346 240.837 93.3385 265.584 118.086C290.333 142.835 306.037 173.646 309.813 204.955C313.69 236.66 304.845 265.087 285.065 284.964C268.169 301.762 245.309 310.608 219.468 310.608ZM164.305 83.0015C141.048 83.0015 120.572 90.8526 105.764 105.761C88.1706 123.354 80.3195 148.899 83.7974 177.522C87.3771 206.644 102.086 235.368 125.244 258.526C148.402 281.684 177.126 296.395 206.248 299.973C234.873 303.551 260.317 295.7 278.009 278.006C295.7 260.315 303.453 234.871 299.973 206.247C296.395 177.125 281.687 148.402 258.528 125.243C235.37 102.085 206.647 87.3747 177.524 83.7968C172.953 83.1998 168.58 83.0015 164.305 83.0015V83.0015Z",
    fill: "black"
  }), /* @__PURE__ */ import_react37.default.createElement("path", {
    d: "M286.356 221.851C283.674 221.851 281.486 219.764 281.388 217.079C280.194 190.641 266.976 162.811 244.912 140.847C242.922 138.86 242.922 135.778 244.912 133.789C246.899 131.802 249.98 131.802 251.967 133.789C275.723 157.545 290.034 187.66 291.326 216.582C291.427 219.365 289.339 221.653 286.556 221.751C286.456 221.851 286.456 221.851 286.356 221.851V221.851Z",
    fill: "black"
  }), /* @__PURE__ */ import_react37.default.createElement("path", {
    d: "M119.181 172.255C112.72 172.255 107.055 170.266 102.88 166.093C91.3511 154.564 96.2211 131.704 113.912 113.912C122.064 105.761 131.704 99.9974 141.047 97.7116C151.284 95.2256 160.229 97.0145 165.995 102.78C171.758 108.545 173.647 117.49 171.063 127.727C168.777 137.169 163.012 146.811 154.962 154.96C143.632 166.191 130.312 172.255 119.181 172.255H119.181ZM149.794 106.556C147.408 106.556 145.122 106.955 143.431 107.352C135.879 109.241 127.827 114.111 120.97 120.968C107.652 134.286 102.582 151.779 109.838 159.035C117.094 166.291 134.587 161.223 147.905 147.903C154.762 141.045 159.632 132.994 161.521 125.341C162.515 121.465 163.41 114.211 159.037 109.838C156.551 107.352 153.073 106.556 149.794 106.556V106.556Z",
    fill: "black"
  })));
  var oliveswap_default = OliveSwapIcon;

  // src/searchbar/icons/pandaswap.tsx
  var import_react38 = __toESM(require_react());
  var PandaSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react38.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react38.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#010101",
    d: "M77.2,39c1.7,0,3.4,0,5.1,0c1,0.2,2,0.3,2.9,0.5c8,1.5,14.5,5.7,19.6,12c2.4,3,4.3,6.3,5.7,9.9\n    c0.3-0.1,0.5-0.2,0.7-0.4c11-6.7,22.8-11.5,35.2-14.9c16.2-4.5,32.8-6.5,49.5-7c2.7,0,5.3,0,8,0c3.5,0.2,6.9,0.3,10.4,0.6\n    c10.1,0.7,20.1,2,30,4.2c13.2,2.9,25.9,7.1,37.8,13.4c2.4,1.3,4.8,2.7,7.2,4c0.8-1.6,1.5-3.3,2.4-4.9c5-8.6,12.1-14.6,22-16.8\n    c1.2-0.3,2.4-0.4,3.7-0.7c1.7,0,3.4,0,5.1,0c0.1,0.1,0.2,0.2,0.3,0.2c4.8,0.4,9.3,1.9,13.4,4.3c10.9,6.4,18.6,15.6,23.7,27.1\n    c3.2,7.3,4,15,2,22.9c-2.3,8.9-7.6,15.7-15,20.9c-2.8,1.9-5.8,3.5-8.8,5.3c0-0.1,0,0.1,0.1,0.2c4.4,10.6,7.7,21.5,10.1,32.7\n    c1.5,7,0.5,5.4,5.1,12.2c1.9,2.8,3.1,5.8,3.7,9.1c1,4.7,0.6,9.4,0.3,14.1c-0.2,3-0.5,6.1,0.1,9.1c0.4,2,0.7,4,0.9,6.1\n    c0.9,8.2,1.8,16.5,2.5,24.7c0.7,8.7,1.3,17.5,1.9,26.2c0.7,11.4,1.5,22.7,2.9,34.1c0.9,7.3,2.1,14.6,4,21.7c0.3,1.2,0.7,2.3,2.1,2.4\n    c0.2,0,0.5,0.2,0.7,0.3c3.4,1.4,6,3.8,8.4,6.6c4,4.7,6.8,10,7.6,16.1c0.2,1.1,0.3,2.3,0.5,3.4c0,2.1,0,4.2,0,6.2\n    c-0.1,0.2-0.2,0.3-0.2,0.5c-0.9,7.1-4.8,11.5-11.7,13.2c-1,0.3-2,0.4-3.1,0.6c-1.5,0-3,0-4.5,0c-0.9-0.2-1.8-0.4-2.7-0.6\n    c-8.8-2.3-16-10-16.7-21.1c-0.2-2.9-0.4-5.7-1.3-8.4c-0.4-1.2-0.7-2.4-1-3.6c-2.3-9.1-4.2-18.4-5.5-27.7c-0.8-5.5-1.4-11-2.1-16.5\n    c-0.1-1.3-0.3-2.6-0.3-3.9c-0.3-4-0.5-8-0.8-12c0-0.9-0.1-1.9-0.1-2.8c-0.4-11.3-0.8-22.6-1.2-33.8c-0.1-2.2-0.2-4.4-0.3-6.6\n    c0-0.3,0-0.5,0-0.8c-0.2-4.5-0.3-9-0.7-13.5c-0.4-6-1.1-12-1.6-18.1c-0.2-2.6-1.4-4.5-3.8-5.5c-2-0.8-4.1-1.6-6.3-1.9\n    c-5.3-0.8-10.7-1.3-16.1-1.9c-4.8-0.6-9.6-1.5-14.1-3.5c-5-2.3-10.1-4.5-15.1-7c-10.2-5.1-20.9-8.4-32.2-9.6c-0.3,0-0.7,0-1,0.2\n    c-4.8,2.6-9.9,4.4-15,6c-7.1,2.2-14.1,2.1-21-0.7c-4.1-1.7-7.5-4.2-10.3-7.6c-0.1,0.1-0.2,0.1-0.3,0.2c-7.2,8.2-16.4,10.9-26.9,9.1\n    c-6-1-11.8-3.2-17.2-6c-2-1-3.8-1.3-5.8-0.8c-0.2,0.1-0.5,0.1-0.7,0.1c-7.4,1-14.6,2.7-21.4,5.8c-5.9,2.7-11.7,5.3-17.5,8.1\n    c-6.7,3.3-13.8,5.3-21.3,6c-4.7,0.4-9.4,1-14,1.7c-2.5,0.3-4.9,1-7,2.3c-1.6,0.9-2.7,2.2-2.9,4.2c-0.2,2.1-0.5,4.1-0.7,6.2\n    c-0.4,5.2-0.9,10.5-1.2,15.7c-0.2,3.5-0.3,7-0.5,10.6c0,0.3,0,0.6,0,0.9c0,1-0.1,1.9-0.1,2.9c0,0.7,0,1.4-0.1,2.1\n    c0,0.8-0.1,1.5-0.1,2.3c0,1.2-0.1,2.4-0.1,3.6c0,0.4,0,0.9-0.1,1.3c0,0.6,0,1.3,0,1.9c0,0.3,0,0.6,0,0.9c0,0.6,0,1.3-0.1,1.9\n    c0,0.3,0,0.6-0.1,1c0,0.6,0,1.3-0.1,1.9c0,0.4,0,0.8,0,1.1c0,0.7,0,1.4-0.1,2.1c0,0.4,0,0.8-0.1,1.2c0,1.5-0.1,3-0.1,4.5\n    c0,0.5-0.1,1-0.1,1.5c0,1.1-0.1,2.3-0.1,3.4c0,0.7-0.1,1.4-0.1,2.1c0,0.7-0.1,1.5-0.1,2.2c0,0.9-0.1,1.8-0.1,2.7\n    c0,0.4,0,0.7-0.1,1.1c0,0.5-0.1,1-0.1,1.5c-0.1,1.4-0.1,2.9-0.2,4.3c-0.1,1.1-0.2,2.1-0.2,3.2c-0.2,2.8-0.5,5.6-0.7,8.4\n    c-0.7,5.5-1.3,11.1-2.1,16.6c-1.6,11.4-4,22.7-7.2,33.8c-0.3,1.2-0.4,2.5-0.5,3.8c-0.2,2-0.2,4-0.7,5.9c-2.1,8.8-7.4,14.7-16.2,17.3\n    c-1,0.3-2,0.4-3.1,0.7c-1.5,0-3,0-4.5,0c-0.8-0.2-1.6-0.4-2.4-0.6c-6.4-1.5-10.8-5.9-11.7-12c-0.7-4.2-0.5-8.5,0.3-12.7\n    c1.2-6.6,4.6-12.1,9.2-16.8c2.4-2.4,5.1-4.3,8.4-5.3c0.3-0.1,0.5-0.5,0.6-0.8c2-6.9,3.3-13.9,4.1-21c0.8-7.3,1.6-14.6,2.1-22\n    c0.7-9.3,1.2-18.6,1.9-27.9c0.4-5,0.8-10,1.2-15.1c0.4-4.2,0.8-8.5,1.3-12.7c0.4-3.8,0.7-7.6,1.3-11.4c0.6-4,1.1-8,0.7-12\n    c-0.2-2.4-0.4-4.9-0.4-7.3c-0.1-4.1,0.4-8,1.8-11.9c1.1-2.9,2.9-5.4,4.6-8c1.1-1.5,1.8-3.1,2.2-5c2-10.1,4.6-19.9,8.1-29.6\n    c1-2.6,2-5.2,3-7.8c-0.3-0.1-0.5-0.3-0.8-0.4c-3.9-1.7-7.4-3.9-10.7-6.6C37.9,102,33.8,86.9,39.4,71.8c3.5-9.3,9.5-16.9,16.9-23.4\n    c4.8-4.1,10.2-7.2,16.4-8.6C74.2,39.5,75.7,39.2,77.2,39z M199.9,150.3c0.1,0.1,0.2,0.3,0.3,0.4c1.6,4.5,4.7,7.7,8.8,10.1\n    c5.7,3.4,11.8,4.1,18.1,2.8c5.2-1.1,10.1-2.9,14.9-5.2c4.5-2.1,8.6-4.6,11.8-8.5c3.9-4.7,4.3-10.2,1-15.3c-1.8-2.8-4.2-5.2-6.8-7.3\n    c-6.1-4.9-12.6-9.2-19.2-13.3c-4.3-2.7-8.8-5-13.6-6.8c-0.6-0.2-1-0.2-1.5,0.2c-0.5,0.4-1.1,0.8-1.7,1.2c-1.7,1-3.4,2.1-5.2,3\n    c-4.5,2.3-9,2.3-13.5,0c-1.8-0.9-3.7-1.9-5.2-3.2c-1.8-1.5-3.3-1.4-5.3-0.5c-12,5.4-22.7,12.8-32.8,21.2c-2.1,1.8-3.9,3.9-5.3,6.4\n    c-2.4,4.4-2.3,8.7,0.5,12.8c0.9,1.3,2,2.6,3.2,3.7c4.7,4.3,10.5,6.9,16.4,9c4.3,1.5,8.5,3,13.2,3c6.2,0,11.8-1.7,16.5-5.8\n    C197,156.1,199,153.6,199.9,150.3z M200.3,43.7c-0.4,0-0.8,0-1.1,0c-11.2,0.3-22.3,1.1-33.3,3c-11.5,1.9-22.7,4.8-33.6,9.1\n    C106.1,66.2,86,83.6,72.4,108.3c-7.9,14.4-13,29.8-16.3,45.8c-0.9,4.6-2.4,8.8-5.3,12.5c-1.2,1.6-2,3.5-2.7,5.3\n    c-1.6,4.5-1.5,9.1-1.1,13.7c0.4,5,0.6,9.9,0,14.9c-0.8,6.8-1.9,13.5-2.6,20.3c-0.8,7-1.3,14.1-1.8,21.2c-0.5,6.2-0.8,12.3-1.2,18.5\n    c-0.6,7.4-1.1,14.9-1.8,22.3c-0.6,5.8-1.4,11.5-2.4,17.3c-0.6,3.8-1.6,7.5-2.3,11.2c6.6,1.5,10.3,6.3,13,12.2\n    c0.1-0.4,0.2-0.7,0.3-0.9c4.4-17.3,6.8-34.9,7.9-52.6c0.6-10.3,1-20.6,1.3-30.9c0.5-16.4,1.1-32.8,2.8-49.2\n    c0.6-5.4,3.2-8.9,8.3-10.6c1.8-0.6,3.7-1.2,5.6-1.5c5.7-0.8,11.5-1.4,17.2-2.1c4.2-0.5,8.3-1.3,12.2-3.1c5.4-2.5,10.9-5,16.3-7.5\n    c6.3-2.9,12.7-5.7,19.5-7.2c2.6-0.6,5.3-1,7.7-1.5c-1-1.1-2-2.2-3-3.4c-4.2-5-5.9-10.5-3.5-16.8c1.5-4,4.3-7.1,7.3-9.9\n    c4.3-3.9,9.1-7.1,13.9-10.3c6.5-4.4,13.2-8.6,20.6-11.6c0.1,0,0.1-0.1,0.2-0.2c-1.8-2.8-1.5-4.9,1.1-6.9c1-0.8,2.2-1.5,3.4-1.9\n    c8.1-3.2,16.4-3.3,24.6-0.6c2.1,0.7,4.1,1.6,5.7,3.2c1.9,1.8,2,3.8,0.5,5.9c-0.1,0.1-0.1,0.2-0.2,0.4c1.4,0.6,2.8,1.2,4.1,1.8\n    c9.9,4.9,19,11.1,27.7,17.7c3.3,2.5,6.3,5.5,8.5,9c2.8,4.5,3.7,9.2,1.8,14.2c-1.3,3.5-3.6,6.2-6.3,8.6c-0.2,0.2-0.5,0.4-0.9,0.7\n    c5.8,0.8,11.4,1.9,16.7,4.1c7,2.9,14,6,20.8,9.3c7.6,3.7,15.4,5.9,23.8,6.5c4.7,0.4,9.3,1,13.9,1.9c4.1,0.7,7.9,2.3,10.3,5.9\n    c0.5,1.4,1.1,2.9,1.3,4.4c0.6,5.2,1.1,10.4,1.5,15.6c0.4,5.6,0.7,11.2,1,16.8c0.3,6.6,0.4,13.1,0.6,19.7c0.1,2.4,0.1,4.7,0.2,7.1\n    c0.2,5.2,0.4,10.4,0.7,15.6c0.2,3.5,0.3,6.9,0.6,10.4c0.4,4.4,0.8,8.8,1.3,13.1c0.5,4,0.9,8.1,1.6,12.1c1.1,6.2,2.3,12.4,3.5,18.6\n    c0.4,2.1,1,4.2,1.5,6.4c2.8-6,6.4-10.9,13-12.3c-1.1-5.5-2.3-10.9-3.1-16.3c-1-6.6-1.6-13.3-2.3-20c-0.5-5.1-0.8-10.3-1.2-15.4\n    c-0.4-5.7-0.7-11.5-1.1-17.2c-0.4-5.5-0.8-11-1.3-16.5c-0.4-4.2-0.8-8.5-1.4-12.7c-0.6-5-1.5-10-1.8-15c-0.3-3.9,0-7.9,0.1-11.9\n    c0-3.3,0.3-6.5,0-9.8c-0.3-4.1-2-7.8-4.6-11.1c-1.7-2.2-3.1-4.6-3.6-7.4c-0.7-3.3-1.3-6.5-2.1-9.8c-3.2-13.3-7.7-26.1-14.1-38.3\n    c-7.9-14.8-18.3-27.6-31.7-37.8c-17-13-36.4-20.3-57.1-24.4c-4.4-0.9-8.8-1.5-13.2-2.1c-3.6-0.5-7.2-0.8-10.8-1.1\n    c-2.3-0.2-4.6-0.4-6.9-0.5C205.9,43.8,203.1,43.8,200.3,43.7z M66,110.4c0.9-1.7,1.8-3.3,2.7-4.9C73.4,97,79,89.1,85.6,81.9\n    c4.9-5.3,10.1-10.1,15.9-14.4c0.5-0.4,0.6-0.7,0.4-1.2c-1.2-2.2-2.1-4.5-3.6-6.5c-4.5-6.3-10.5-10-18.3-10.6\n    c-4.7-0.3-9.1,0.9-13.2,3.1c-4.1,2.2-7.5,5.1-10.5,8.6c-3.2,3.7-6,7.7-7.8,12.3c-3.2,8-3.1,15.8,1.2,23.4c2.8,5,6.9,8.8,11.9,11.5\n    C63,108.9,64.5,109.6,66,110.4z M333.8,110.2c0.3-0.1,0.6-0.2,0.9-0.3c4.8-2.1,9-4.9,12.4-9c6.3-7.6,8-16.1,5.1-25.5\n    c-1.5-4.8-4.1-9-7.3-12.9c-3.9-4.7-8.3-8.8-14-11.2c-5.8-2.5-11.7-3-17.6-0.7c-7.6,2.8-12.4,8.4-15.4,15.8c-0.2,0.5-0.1,0.8,0.4,1.2\n    c6.1,4.5,11.7,9.7,16.8,15.3c5.3,5.8,9.9,12.1,13.9,18.9C330.6,104.5,332.2,107.3,333.8,110.2z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#8F8F8F",
    d: "M195.9,39.1c0-0.1,0-0.1,0-0.2c2.6,0,5.3,0,7.9,0c0,0.1,0,0.1,0,0.2C201.3,39.1,198.6,39.1,195.9,39.1z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FEFBF5",
    d: "M61.5,255.5c0-1.1,0.1-2.3,0.1-3.4c0.6-0.5,0.4-1,0.1-1.5c0-1.5,0.1-3,0.1-4.5c0-0.4,0-0.8,0.1-1.2\n    c0-0.7,0-1.4,0.1-2.1c0-0.4,0-0.8,0-1.1c0-0.6,0-1.3,0.1-1.9c0-0.3,0-0.6,0.1-1c0-0.6,0-1.3,0.1-1.9c0-0.3,0-0.6,0-0.9\n    c0-0.6,0-1.3,0-1.9c0-0.4,0-0.9,0.1-1.3c0-1.2,0.1-2.4,0.1-3.6c0.6-0.7,0.4-1.5,0.1-2.3c0-0.7,0-1.4,0.1-2.1\n    c0.6-0.9,0.4-1.9,0.1-2.9c0-0.3,0-0.6,0-0.9c0.1-0.2,0.3-0.3,0.3-0.5c0.2-3.2,0.4-6.4,0.6-9.6c0.1-1.9,0.2-3.8,0.4-5.7\n    c0.3-2.9,0.6-5.8,0.9-8.7c0.2-2.3,1.1-4.1,3.2-5.1c1.4-0.7,2.8-1.3,4.3-1.6c3.2-0.6,6.5-1.1,9.7-1.5c3.3-0.4,6.7-0.6,10-1.2\n    c3.2-0.5,6.5-1,9.5-2c3.9-1.3,7.7-3.1,11.5-4.9c4-1.8,7.9-3.7,11.9-5.5c5.8-2.7,11.8-4.9,18.1-6c3.2-0.6,6.4-1.1,9.6-1.6\n    c0.4-0.1,0.8,0.1,1.2,0.2c4.6,2.4,9.4,4.2,14.3,5.7c3.3,1,6.6,1.7,9.9,1.7c1.9,0,3.9-0.2,5.8-0.5c4.2-0.7,8.1-2.3,11.6-5\n    c1.6-1.3,3.1-2.8,4.8-4.2c0.7,0.7,1.4,1.6,2.2,2.3c0.9,0.9,1.9,1.7,3,2.4c3.5,2.5,7.4,3.9,11.6,4.6c2.7,0.4,5.5,0.6,8.1,0.2\n    c3.2-0.6,6.3-1.3,9.4-2.3c3.9-1.4,7.7-3.2,11.6-4.8c0.4-0.2,1-0.4,1.4-0.3c2.6,0.4,5.2,0.9,7.8,1.3c5,0.7,9.8,2.1,14.4,4\n    c6.5,2.8,13,5.9,19.5,8.8c2.7,1.2,5.5,2.5,8.3,3.5c4.7,1.8,9.7,2.3,14.6,2.9c4,0.5,8.1,0.8,12.1,1.4c2.6,0.4,5.2,1,7.5,2.3\n    c1.5,0.8,2.7,2,3.1,3.7c0.2,0.9,0.3,1.9,0.4,2.9c0.4,3.9,0.8,7.8,1.1,11.8c0.3,3.5,0.4,6.9,0.6,10.4c0,0.3,0.2,0.6,0.4,0.8\n    c0,0.3,0,0.5,0,0.8c-0.1,0.2-0.3,0.4-0.4,0.6c-0.5,2-0.9,4-1.3,6c-2,8.3-4.8,16.4-8.5,24.1c-2.5,5.2-5.5,10.2-8.8,15\n    c-3,4.2-6.3,8.2-9.9,11.9c-2.4,2.4-4.9,4.8-7.5,7c-3.3,2.7-6.7,5.3-10.2,7.7c-6,4.1-12.5,7.5-19.2,10.4c-7.2,3.1-14.6,5.7-22.2,7.5\n    c-5.6,1.4-11.2,2.5-16.8,3.4c-4.6,0.8-9.3,1.3-13.9,1.9c-3.2,0.4-6.4,0.6-9.6,0.8c-3.6,0.2-7.2,0.3-10.8,0.4c-3.5,0-7-0.1-10.6-0.2\n    c-2.1,0-4.3-0.1-6.4-0.2c-2.4-0.1-4.8-0.2-7.2-0.4c-3.6-0.3-7.2-0.6-10.8-1.2c-4.6-0.7-9.1-1.6-13.6-2.6c-6.9-1.5-13.6-3.7-20.3-6.1\n    c-7.6-2.7-15-5.9-22.3-9.4c-5.6-2.8-11.2-5.7-16.6-8.8c-6.5-3.7-12.9-7.8-19.3-11.7c-0.7-0.4-1.4-0.8-2.1-1.1\n    c-0.3-0.4-0.7-0.8-0.9-1.2c-2.3-3.6-4.6-7.1-6.8-10.7c0-0.5,0-1,0-1.5c0-0.4,0-0.7,0.1-1.1c0.7-0.9,0.4-1.8,0.1-2.7\n    c0-0.7,0.1-1.5,0.1-2.2C62,256.9,61.7,256.2,61.5,255.5z M163.4,260.7c-0.1-0.1-0.2-0.2-0.2-0.2c0,0-0.1,0-0.1,0.1\n    c0.1,0.1,0.1,0.2,0.2,0.3c0.4,0.6,0.7,1.3,1.1,1.9c1.6,2.2,3.7,3.9,6.1,5.3c3.2,1.7,6.5,2.7,9.8,2.7c0.9,1.6,1.6,3.1,2.6,4.3\n    c1.2,1.7,3,2.9,4.9,3.8c8.1,3.7,16.3,3.7,24.4,0c3.5-1.6,6.1-4.1,7.1-8.1c0.2,0,0.3,0,0.5,0c4.7-0.1,8.8-1.7,12.5-4.5\n    c1.8-1.4,3.4-3.1,4.3-5.2c0.1-0.1,0.1-0.2,0.2-0.3c0,0-0.1,0-0.1-0.1c-0.1,0.1-0.1,0.2-0.2,0.2c-0.6,0.6-1.2,1.2-1.8,1.8\n    c-1.8,1.8-3.8,3.3-6.2,4.2c-5.1,1.9-10.1,1.4-15.1-0.5c-4.7-1.8-8.8-4.5-12.8-7.4c-0.5-0.4-0.8-0.4-1.3,0c-1.3,1-2.7,1.9-4,2.8\n    c-4.5,2.9-9.3,5.5-14.8,6.1c-5.5,0.6-10.4-0.6-14.5-4.4C165.1,262.4,164.3,261.5,163.4,260.7z M263,201.9\n    c-10.9,0-19.8,8.8-19.9,19.7c-0.1,11,8.8,19.9,19.6,20c11,0,20-8.8,20-19.7C282.9,210.9,274,201.9,263,201.9z M136.9,201.9\n    c-10.9,0-19.8,8.8-19.9,19.6c-0.1,11,8.7,19.9,19.6,20c11,0.1,20-8.7,20-19.7C156.7,210.9,147.9,201.9,136.9,201.9z M200,236.2\n    C200,236.2,200,236.2,200,236.2c-0.4,0-0.8,0-1.2,0c-0.4,0-0.9-0.1-1.3-0.1c-0.8,0.1-1.6,0.1-2.3,0.3c-1.4,0.5-1.6,1.6-0.3,2.4\n    c1.3,0.8,2.8,1.5,4.3,1.8c2.5,0.5,4.6-0.7,6.4-2.2c0.6-0.5,0.5-1.4-0.3-1.7c-0.7-0.3-1.4-0.5-2.1-0.5C202.1,236,201,236.2,200,236.2\n    z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FAFAFA",
    d: "M338.1,184c-2.5-3.7-6.3-5.2-10.3-5.9c-4.6-0.8-9.3-1.5-13.9-1.9c-8.4-0.6-16.2-2.8-23.8-6.5\n    c-6.8-3.4-13.8-6.4-20.8-9.3c-5.3-2.2-10.9-3.3-16.7-4.1c0.4-0.3,0.6-0.5,0.9-0.7c2.7-2.4,5-5.1,6.3-8.6c1.8-5,1-9.8-1.8-14.2\n    c-2.2-3.6-5.2-6.5-8.5-9c-8.8-6.6-17.8-12.9-27.7-17.7c-1.3-0.6-2.7-1.2-4.1-1.8c0.1-0.1,0.2-0.3,0.2-0.4c1.5-2.2,1.3-4.1-0.5-5.9\n    c-1.6-1.6-3.6-2.5-5.7-3.2c-8.3-2.7-16.5-2.6-24.6,0.6c-1.2,0.5-2.4,1.2-3.4,1.9c-2.6,2-2.9,4.1-1.1,6.9c-0.1,0.1-0.1,0.2-0.2,0.2\n    c-7.4,2.9-14,7.2-20.6,11.6c-4.8,3.2-9.7,6.4-13.9,10.3c-3.1,2.8-5.8,5.9-7.3,9.9c-2.4,6.3-0.8,11.8,3.5,16.8c1,1.2,2.1,2.3,3,3.4\n    c-2.4,0.5-5.1,0.9-7.7,1.5c-6.8,1.5-13.2,4.3-19.5,7.2c-5.4,2.5-10.9,5-16.3,7.5c-3.9,1.8-8,2.6-12.2,3.1\n    c-5.7,0.7-11.5,1.3-17.2,2.1c-1.9,0.3-3.8,0.9-5.6,1.5c-5.1,1.7-7.7,5.2-8.3,10.6c-1.7,16.4-2.3,32.8-2.8,49.2\n    c-0.3,10.3-0.7,20.6-1.3,30.9c-1.1,17.8-3.5,35.3-7.9,52.6c-0.1,0.3-0.1,0.5-0.3,0.9c-2.7-5.9-6.4-10.7-13-12.2\n    c0.8-3.8,1.7-7.5,2.3-11.2c0.9-5.7,1.8-11.5,2.4-17.3c0.8-7.4,1.3-14.9,1.8-22.3c0.5-6.2,0.8-12.3,1.2-18.5\n    c0.5-7.1,1.1-14.1,1.8-21.2c0.7-6.8,1.8-13.5,2.6-20.3c0.6-5,0.4-9.9,0-14.9c-0.4-4.6-0.5-9.3,1.1-13.7c0.7-1.9,1.5-3.8,2.7-5.3\n    c2.9-3.7,4.3-7.9,5.3-12.5c3.3-16,8.4-31.4,16.3-45.8c13.6-24.8,33.7-42.1,59.9-52.5c10.8-4.3,22.1-7.2,33.6-9.1\n    c11-1.8,22.2-2.7,33.3-3c0.4,0,0.8,0,1.1,0c0.1,0.1,0.2,0.3,0.4,0.3c5.1,1.3,10.2,2.5,15.3,3.8c9.2,2.4,18.3,5.3,27.2,8.7\n    c9.1,3.5,18,7.4,26.5,12.1c5.8,3.2,11.4,6.7,16.7,10.5c5.1,3.7,9.9,7.7,14.5,12.1c2.5,2.4,4.9,5,7.1,7.7c2.6,3.2,5.2,6.4,7.6,9.8\n    c4.3,6.1,7.7,12.6,10.7,19.4c2.9,6.6,5.1,13.4,6.8,20.3c1.1,4.5,2,9.1,2.8,13.7c0.5,2.9,0.8,5.9,1.2,8.9c0.2,1.9,0.5,3.8,0.6,5.7\n    C337.8,179.2,338,181.6,338.1,184z M155.4,75.9c-4.4,0.4-8.4,0.7-12.4,1.2c-7.8,1.1-15.2,3.4-22,7.3c-6.5,3.7-11.7,8.9-16.4,14.6\n    c-1.2,1.5-2.3,3.2-3.3,4.9c-0.8,1.3-0.9,2.8-0.3,4.3c0.4,1,0.6,2,1,3c1,3,2.1,5.9,3.9,8.5c3,4.4,7.2,6,12.3,5.3\n    c3.8-0.5,7.2-1.9,10.6-3.6c8.8-4.3,16.7-10.1,23.9-16.6c4.5-4,8.8-8.1,12.6-12.7c1.8-2.2,3.4-4.7,4.1-7.5c0.8-3.3-0.4-5.9-3.5-7.3\n    c-0.7-0.3-1.5-0.7-2.2-0.7C161,76.4,158.1,76.2,155.4,75.9z M244.8,76.2c-1.7,0-3.4-0.1-5.1,0c-2.3,0.1-4.6,0.5-6.7,1.7\n    c-2.3,1.3-3.3,3.4-2.9,5.9c0.4,2.9,1.9,5.3,3.6,7.6c3.2,4.2,7.1,7.9,10.9,11.5c7.4,6.9,15.3,13.1,24.4,17.8c4,2.1,8.1,4,12.6,4.6\n    c4.9,0.6,9-0.8,12-4.9c0.7-1,1.5-2.1,1.9-3.3c1.2-2.9,2.1-5.8,3.2-8.7c0.5-1.3,0.4-2.6-0.2-3.8c-0.5-1-0.9-2-1.6-2.9\n    c-1.4-1.9-2.9-3.7-4.4-5.4c-6.3-7.3-13.9-12.7-23.1-15.9C261.5,77.4,253.2,76.4,244.8,76.2z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#E7E7E7",
    d: "M338.1,184c-0.2-2.4-0.3-4.8-0.5-7.2c-0.2-1.9-0.4-3.8-0.6-5.7c-0.4-3-0.6-6-1.2-8.9c-0.8-4.6-1.7-9.2-2.8-13.7\n    c-1.7-7-4-13.7-6.8-20.3c-3-6.8-6.4-13.3-10.7-19.4c-2.4-3.4-4.9-6.6-7.6-9.8c-2.2-2.7-4.6-5.2-7.1-7.7c-4.5-4.4-9.3-8.5-14.5-12.1\n    c-5.3-3.9-10.9-7.3-16.7-10.5c-8.5-4.7-17.4-8.7-26.5-12.1c-8.9-3.4-18-6.3-27.2-8.7c-5.1-1.3-10.2-2.5-15.3-3.8\n    c-0.1,0-0.3-0.2-0.4-0.3c2.8,0.1,5.6,0.1,8.4,0.2c2.3,0.1,4.6,0.3,6.9,0.5c3.6,0.3,7.2,0.6,10.8,1.1c4.4,0.6,8.9,1.2,13.2,2.1\n    c20.8,4.1,40.1,11.5,57.1,24.4c13.4,10.2,23.8,22.9,31.7,37.8c6.5,12.1,10.9,25,14.1,38.3c0.8,3.2,1.4,6.5,2.1,9.8\n    c0.6,2.8,1.9,5.2,3.6,7.4c2.6,3.3,4.2,7,4.6,11.1c0.3,3.2,0,6.5,0,9.8c0,4-0.4,7.9-0.1,11.9c0.4,5,1.3,10,1.8,15\n    c0.5,4.2,1,8.5,1.4,12.7c0.5,5.5,0.9,11,1.3,16.5c0.4,5.7,0.7,11.5,1.1,17.2c0.4,5.1,0.6,10.3,1.2,15.4c0.7,6.7,1.3,13.4,2.3,20\n    c0.8,5.5,2.1,10.9,3.1,16.3c-6.5,1.4-10.2,6.2-13,12.3c-0.5-2.3-1.1-4.3-1.5-6.4c-1.2-6.2-2.5-12.4-3.5-18.6\n    c-0.7-4-1.1-8.1-1.6-12.1c-0.5-4.4-0.9-8.7-1.3-13.1c-0.3-3.4-0.5-6.9-0.6-10.4c-0.3-5.2-0.5-10.4-0.7-15.6\n    c-0.1-2.4-0.2-4.7-0.2-7.1c-0.2-6.6-0.3-13.2-0.6-19.7c-0.2-5.6-0.5-11.2-1-16.8c-0.4-5.2-0.9-10.4-1.5-15.6\n    C339.3,186.9,338.6,185.5,338.1,184z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FAFAFA",
    d: "M164.8,161.1c-5.9-2.1-11.7-4.6-16.4-9c-1.2-1.1-2.3-2.4-3.2-3.7c-2.8-4.1-2.9-8.4-0.5-12.8\n    c1.4-2.5,3.1-4.6,5.3-6.4c10.1-8.4,20.8-15.8,32.8-21.2c2-0.9,3.5-1,5.3,0.5c1.5,1.3,3.4,2.2,5.2,3.2c4.5,2.3,9,2.2,13.5,0\n    c1.8-0.9,3.5-2,5.2-3c1.4,1.2,2.8,2.5,4.2,3.7c3.3,2.9,6.8,5.6,10,8.6c3.7,3.4,7,7.1,9.6,11.4c1.6,2.7,2.8,5.5,3,8.6\n    c0.2,3.7-1,7-3.7,9.6c-1.6,1.5-3.6,2.8-5.4,4c-3.3,2.2-6.9,3.8-10.8,4.8c-2.9,0.7-5.8,1.1-8.7,1.1c-0.4,0-0.7,0.2-1.1,0.3\n    c-4-2.4-7.2-5.6-8.8-10.1c-0.1-0.1-0.2-0.3-0.3-0.4c-1.2,0.9-2.3,1.9-3.5,2.8c-2.7,2.2-5.6,4-8.8,5.3c-3.5,1.5-7.2,2.5-11,2.8\n    c-3.3,0.2-6.6,0.3-9.8-0.2C166.1,161,165.4,161.1,164.8,161.1z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M68.9,277c0.7,0.4,1.4,0.7,2.1,1.1c6.4,3.9,12.8,7.9,19.3,11.7c5.4,3.1,11,6,16.6,8.8\n    c7.2,3.6,14.7,6.7,22.3,9.4c6.6,2.4,13.4,4.6,20.3,6.1c4.5,1,9.1,1.9,13.6,2.6c3.6,0.6,7.2,0.8,10.8,1.2c2.4,0.2,4.8,0.3,7.2,0.4\n    c2.1,0.1,4.3,0.1,6.4,0.2c3.5,0.1,7,0.2,10.6,0.2c3.6,0,7.2-0.2,10.8-0.4c3.2-0.2,6.4-0.4,9.6-0.8c4.7-0.5,9.3-1.1,13.9-1.9\n    c5.6-1,11.3-2.1,16.8-3.4c7.6-1.9,15-4.4,22.2-7.5c6.7-2.9,13.1-6.3,19.2-10.4c3.5-2.4,6.9-5,10.2-7.7c2.6-2.2,5.1-4.5,7.5-7\n    c3.6-3.7,6.9-7.7,9.9-11.9c3.4-4.8,6.3-9.8,8.8-15c3.7-7.7,6.5-15.8,8.5-24.1c0.5-2,0.9-4,1.3-6c0.1-0.2,0.3-0.4,0.4-0.6\n    c0.1,2.2,0.2,4.4,0.3,6.6c0.4,11.3,0.8,22.6,1.2,33.8c0,0.9,0.1,1.9,0.1,2.8c-0.1,0.1-0.1,0.2-0.2,0.3c-4.2,7.5-9.3,14.3-15.3,20.4\n    c-9.8,10.1-21.2,18-33.8,24.2c-21.6,10.8-44.7,16.5-68.7,18.7c-5.3,0.5-10.7,0.8-16.1,0.9c-10,0.3-19.9-0.2-29.8-1.3\n    c-5.4-0.6-10.7-1.5-16.1-2.4c-10.9-1.9-21.6-4.8-32-8.7c-17.5-6.5-33.5-15.4-47.2-28.2C75.8,285.3,72.1,281.4,68.9,277z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#642B1E",
    d: "M68.9,277c3.2,4.4,6.9,8.3,10.9,12c13.7,12.8,29.7,21.7,47.2,28.2c10.4,3.9,21.1,6.8,32,8.7\n    c5.3,0.9,10.7,1.8,16.1,2.4c9.9,1.1,19.9,1.6,29.8,1.3c5.4-0.2,10.7-0.4,16.1-0.9c24-2.3,47.1-7.9,68.7-18.7\n    c12.5-6.3,24-14.1,33.8-24.2c6-6.1,11.1-12.9,15.3-20.4c0.1-0.1,0.1-0.2,0.2-0.3c0.3,4,0.5,8,0.8,12c0.1,1.3,0.2,2.6,0.3,3.9\n    c-2.1,2.6-4.1,5.2-6.3,7.7c-9.7,11.1-21.3,19.8-34.1,26.9c-14.7,8.1-30.3,13.7-46.6,17.6c-12.1,2.9-24.3,4.7-36.7,5.5\n    c-12.1,0.9-24.3,0.8-36.4-0.3c-20.4-1.8-40.3-5.9-59.5-13.4c-14.5-5.6-28.1-13-40.3-22.8c-7.4-6-14.1-12.8-19.8-20.4\n    c-0.2-0.3-0.4-0.5-0.7-0.8c0.2-2.8,0.5-5.6,0.7-8.4c0.1-1.1,0.2-2.1,0.2-3.2c0.1-1.4,0.2-2.9,0.2-4.3c0.1,0,0.1,0,0.2,0\n    c2.3,3.6,4.6,7.1,6.8,10.7C68.2,276.3,68.6,276.6,68.9,277z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#565656",
    d: "M66,110.4c-1.5-0.7-3-1.4-4.5-2.2c-5-2.8-9.1-6.5-11.9-11.5c-4.3-7.6-4.4-15.4-1.2-23.4\n    c1.8-4.6,4.6-8.6,7.8-12.3c3-3.5,6.5-6.4,10.5-8.6c4.1-2.2,8.5-3.5,13.2-3.1c7.8,0.6,13.8,4.3,18.3,10.6c1.4,2,2.4,4.3,3.6,6.5\n    c0.3,0.5,0.2,0.9-0.4,1.2c-5.8,4.3-11.1,9.1-15.9,14.4c-6.6,7.2-12.2,15-16.9,23.6C67.8,107,67,108.6,66,110.4z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#565656",
    d: "M333.8,110.2c-1.6-2.9-3.2-5.7-4.8-8.5c-4-6.7-8.6-13.1-13.9-18.9c-5.1-5.6-10.6-10.8-16.8-15.3\n    c-0.5-0.3-0.6-0.6-0.4-1.2c3-7.4,7.8-12.9,15.4-15.8c5.9-2.2,11.8-1.8,17.6,0.7c5.7,2.5,10.1,6.5,14,11.2c3.2,3.9,5.8,8.1,7.3,12.9\n    c3,9.4,1.3,17.9-5.1,25.5c-3.4,4-7.6,6.9-12.4,9C334.5,110,334.2,110.1,333.8,110.2z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M337.2,221.1c-0.1-0.3-0.3-0.6-0.4-0.8c-0.2-3.5-0.3-6.9-0.6-10.4c-0.3-3.9-0.7-7.8-1.1-11.8\n    c-0.1-1-0.2-1.9-0.4-2.9c-0.4-1.8-1.5-2.9-3.1-3.7c-2.3-1.3-4.9-1.9-7.5-2.3c-4-0.5-8.1-0.9-12.1-1.4c-4.9-0.6-9.9-1.1-14.6-2.9\n    c-2.8-1.1-5.6-2.3-8.3-3.5c-6.5-2.9-12.9-6-19.5-8.8c-4.6-2-9.5-3.3-14.4-4c-2.6-0.4-5.2-0.9-7.8-1.3c-0.5-0.1-1,0.1-1.4,0.3\n    c-3.9,1.6-7.6,3.4-11.6,4.8c-3,1.1-6.2,1.8-9.4,2.3c-2.7,0.5-5.4,0.3-8.1-0.2c-4.2-0.7-8.1-2.1-11.6-4.6c-1-0.7-2-1.6-3-2.4\n    c-0.8-0.7-1.5-1.6-2.2-2.3c-1.7,1.5-3.2,3-4.8,4.2c-3.4,2.7-7.3,4.3-11.6,5c-1.9,0.3-3.9,0.6-5.8,0.5c-3.4,0-6.7-0.7-9.9-1.7\n    c-4.9-1.5-9.7-3.3-14.3-5.7c-0.3-0.2-0.8-0.3-1.2-0.2c-3.2,0.5-6.4,1-9.6,1.6c-6.3,1.1-12.3,3.3-18.1,6c-4,1.8-7.9,3.8-11.9,5.5\n    c-3.8,1.7-7.6,3.5-11.5,4.9c-3.1,1-6.3,1.5-9.5,2c-3.3,0.5-6.6,0.7-10,1.2c-3.2,0.4-6.5,0.9-9.7,1.5c-1.5,0.3-2.9,1-4.3,1.6\n    c-2.1,1-2.9,2.8-3.2,5.1c-0.3,2.9-0.6,5.8-0.9,8.7c-0.2,1.9-0.3,3.8-0.4,5.7c-0.2,3.2-0.4,6.4-0.6,9.6c0,0.2-0.2,0.3-0.3,0.5\n    c0.2-3.5,0.2-7,0.5-10.6c0.4-5.2,0.8-10.5,1.2-15.7c0.2-2.1,0.5-4.1,0.7-6.2c0.2-1.9,1.3-3.2,2.9-4.2c2.2-1.2,4.6-1.9,7-2.3\n    c4.7-0.6,9.3-1.3,14-1.7c7.5-0.7,14.5-2.7,21.3-6c5.8-2.8,11.6-5.5,17.5-8.1c6.8-3.1,14-4.8,21.4-5.8c0.2,0,0.5-0.1,0.7-0.1\n    c2-0.5,3.9-0.2,5.8,0.8c5.4,2.8,11.2,5,17.2,6c10.5,1.8,19.7-0.9,26.9-9.1c0.1-0.1,0.1-0.1,0.3-0.2c2.8,3.4,6.2,6,10.3,7.6\n    c6.9,2.8,13.9,2.9,21,0.7c5.2-1.6,10.2-3.4,15-6c0.3-0.2,0.7-0.2,1-0.2c11.3,1.2,22,4.5,32.2,9.6c5,2.5,10.1,4.7,15.1,7\n    c4.5,2.1,9.3,2.9,14.1,3.5c5.4,0.7,10.8,1.2,16.1,1.9c2.1,0.3,4.2,1.1,6.3,1.9c2.4,0.9,3.6,2.8,3.8,5.5c0.5,6,1.1,12,1.6,18.1\n    C336.9,212.1,337,216.6,337.2,221.1z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#E8E8E8",
    d: "M209,160.7c0.4-0.1,0.7-0.3,1.1-0.3c3,0,5.9-0.3,8.7-1.1c3.9-1,7.5-2.6,10.8-4.8c1.9-1.2,3.8-2.4,5.4-4\n    c2.7-2.6,3.9-5.9,3.7-9.6c-0.2-3.1-1.3-6-3-8.6c-2.6-4.3-5.9-8-9.6-11.4c-3.2-3-6.7-5.7-10-8.6c-1.4-1.2-2.8-2.5-4.2-3.7\n    c0.6-0.4,1.1-0.8,1.7-1.2c0.5-0.4,1-0.4,1.5-0.2c4.8,1.8,9.3,4.1,13.6,6.8c6.6,4.2,13.2,8.4,19.2,13.3c2.6,2.1,5,4.4,6.8,7.3\n    c3.3,5.1,2.9,10.6-1,15.3c-3.2,3.9-7.4,6.4-11.8,8.5c-4.8,2.3-9.7,4.1-14.9,5.2C220.8,164.8,214.6,164.1,209,160.7z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#E6E6E6",
    d: "M164.8,161.1c0.7,0,1.3-0.1,2,0c3.3,0.5,6.6,0.4,9.8,0.2c3.9-0.3,7.5-1.3,11-2.8c3.2-1.4,6.1-3.2,8.8-5.3\n    c1.2-0.9,2.3-1.9,3.5-2.8c-0.9,3.3-2.9,5.9-5.4,8.1c-4.8,4.1-10.3,5.8-16.5,5.8C173.3,164.1,169.1,162.6,164.8,161.1z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M62.6,222c0.3,1,0.5,1.9-0.1,2.9C62.5,223.9,62.6,223,62.6,222z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M61.3,259.8c0.3,0.9,0.5,1.8-0.1,2.7C61.2,261.6,61.2,260.7,61.3,259.8z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M62.4,227c0.3,0.8,0.5,1.6-0.1,2.3C62.3,228.5,62.4,227.7,62.4,227z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M61.5,255.5c0.3,0.7,0.5,1.4-0.1,2.1C61.4,256.9,61.4,256.2,61.5,255.5z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M61.7,250.6c0.3,0.5,0.5,1.1-0.1,1.5C61.6,251.6,61.6,251.1,61.7,250.6z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M61.1,265.1c-0.1,0-0.1,0-0.2,0c0-0.5,0.1-1,0.1-1.5C61.1,264.1,61.1,264.6,61.1,265.1z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M62.2,232.8c0,0.4,0,0.9-0.1,1.3C62.2,233.7,62.2,233.3,62.2,232.8z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M61.8,244.9c0,0.4,0,0.8-0.1,1.2C61.8,245.7,61.8,245.3,61.8,244.9z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M62,238.9c0,0.3,0,0.6-0.1,1C62,239.5,62,239.2,62,238.9z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M61.9,241.7c0,0.4,0,0.8,0,1.1C61.9,242.5,61.9,242.1,61.9,241.7z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#F1E5DA",
    d: "M62.1,236c0,0.3,0,0.6,0,0.9C62.1,236.7,62.1,236.3,62.1,236z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#642B1E",
    d: "M263,201.9c11,0,19.8,9,19.8,19.9c0,10.9-9,19.7-20,19.7c-10.9,0-19.7-9-19.6-20\n    C243.2,210.7,252.2,201.9,263,201.9z M257.2,206.4c-5,0-9.1,4.1-9.1,9.1c0,5,4.1,9.1,9.1,9.2c5,0,9.2-4.1,9.2-9.2\n    C266.4,210.5,262.3,206.4,257.2,206.4z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#642B1E",
    d: "M136.9,201.9c11,0,19.8,9,19.8,20c0,10.9-9,19.7-20,19.7c-10.9-0.1-19.7-9-19.6-20\n    C117.1,210.7,126.1,201.8,136.9,201.9z M133.5,215.5c0,5,4.1,9.1,9.1,9.2c5,0,9.1-4.1,9.2-9.1c0-5.1-4.1-9.2-9.1-9.2\n    C137.6,206.4,133.5,210.5,133.5,215.5z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#672D21",
    d: "M236.6,260.8c-0.9,2.2-2.5,3.8-4.3,5.2c-3.7,2.9-7.8,4.5-12.5,4.5c-0.2,0-0.3,0-0.5,0c-1,3.9-3.6,6.5-7.1,8.1\n    c-8.1,3.8-16.3,3.7-24.4,0c-1.9-0.9-3.6-2.1-4.9-3.8c-1-1.3-1.6-2.8-2.6-4.3c-3.3,0-6.7-0.9-9.8-2.7c-2.4-1.3-4.5-3-6.1-5.3\n    c-0.4-0.6-0.7-1.2-1.1-1.9c0.1-0.1,0.1-0.1,0.2-0.2c0.9,0.9,1.7,1.8,2.6,2.6c4.1,3.8,9,5,14.5,4.4c5.5-0.6,10.2-3.2,14.8-6.1\n    c1.4-0.9,2.7-1.8,4-2.8c0.5-0.4,0.8-0.4,1.3,0c4,2.9,8.1,5.6,12.8,7.4c5,1.9,10,2.3,15.1,0.5c2.4-0.9,4.4-2.4,6.2-4.2\n    c0.6-0.6,1.2-1.2,1.8-1.8C236.5,260.7,236.5,260.8,236.6,260.8z M216.8,270.3c-0.9-0.2-1.7-0.5-2.6-0.7c-4.9-1.6-9.3-4.2-13.5-7.1\n    c-0.6-0.4-0.9-0.4-1.5,0c-3.3,2.3-6.8,4.5-10.5,6c-1.8,0.7-3.7,1.3-5.7,2c0.4,0.7,0.7,1.6,1.2,2.3c1.4,2,3.4,3.3,5.6,4.3\n    c4.7,2,9.6,2.4,14.6,1.6c3.2-0.5,6.2-1.5,8.9-3.4C214.9,274,216.3,272.5,216.8,270.3z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#662D20",
    d: "M200,236.2c1-0.1,2.1-0.2,3.1-0.1c0.7,0,1.5,0.2,2.1,0.5c0.8,0.4,0.9,1.2,0.3,1.7c-1.8,1.6-4,2.7-6.4,2.2\n    c-1.5-0.3-3-1-4.3-1.8c-1.3-0.8-1.1-1.9,0.3-2.4c0.7-0.2,1.5-0.2,2.3-0.3c0.4,0,0.9,0.1,1.3,0.1C199.2,236.2,199.6,236.2,200,236.2\n    C200,236.2,200,236.2,200,236.2z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#672D21",
    d: "M163.3,260.8c-0.1-0.1-0.1-0.2-0.2-0.3c0,0,0.1,0,0.1-0.1c0.1,0.1,0.2,0.2,0.2,0.2\n    C163.4,260.7,163.3,260.8,163.3,260.8z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#672D21",
    d: "M236.4,260.7c0.1-0.1,0.1-0.2,0.2-0.2c0,0,0.1,0,0.1,0.1c-0.1,0.1-0.1,0.2-0.2,0.3\n    C236.5,260.8,236.5,260.7,236.4,260.7z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#010101",
    d: "M155.4,75.9c2.6,0.2,5.5,0.5,8.5,0.8c0.8,0.1,1.5,0.4,2.2,0.7c3.1,1.4,4.3,4,3.5,7.3c-0.7,2.9-2.3,5.3-4.1,7.5\n    c-3.8,4.6-8.1,8.8-12.6,12.7c-7.3,6.5-15.1,12.3-23.9,16.6c-3.4,1.6-6.8,3.1-10.6,3.6c-5.2,0.7-9.4-0.9-12.3-5.3\n    c-1.8-2.6-2.9-5.6-3.9-8.5c-0.3-1-0.6-2.1-1-3c-0.6-1.5-0.5-3,0.3-4.3c1-1.7,2-3.4,3.3-4.9c4.6-5.8,9.9-10.9,16.4-14.6\n    c6.8-3.9,14.2-6.3,22-7.3C147.1,76.6,151.1,76.4,155.4,75.9z M146.8,86.8c0,3.7,2.9,6.7,6.6,6.6c3.6,0,6.6-2.9,6.6-6.6\n    c0-3.7-2.9-6.7-6.6-6.7C149.8,80.2,146.8,83.1,146.8,86.8z M138.9,82.5c0,1.7,1.3,3.1,3,3.2c1.7,0.1,3.1-1.3,3.1-3\n    c0-1.7-1.3-3.1-3-3.1C140.4,79.4,138.9,80.8,138.9,82.5z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#010101",
    d: "M244.8,76.2c8.4,0.2,16.7,1.2,24.7,4c9.1,3.2,16.8,8.6,23.1,15.9c1.5,1.8,3,3.6,4.4,5.4\n    c0.7,0.9,1.1,1.9,1.6,2.9c0.6,1.2,0.7,2.5,0.2,3.8c-1.1,2.9-2.1,5.9-3.2,8.7c-0.5,1.2-1.2,2.3-1.9,3.3c-2.9,4.1-7.1,5.5-12,4.9\n    c-4.5-0.6-8.6-2.5-12.6-4.6c-9-4.7-17-10.9-24.4-17.8c-3.9-3.6-7.7-7.2-10.9-11.5c-1.7-2.3-3.2-4.7-3.6-7.6\n    c-0.4-2.6,0.6-4.6,2.9-5.9c2.1-1.2,4.4-1.6,6.7-1.7C241.3,76.1,243.1,76.2,244.8,76.2z M253,86.8c0-3.7-3-6.7-6.6-6.7\n    c-3.6,0-6.6,3-6.6,6.6c0,3.7,2.9,6.7,6.6,6.7C250,93.5,253,90.5,253,86.8z M254.9,82.5c0,1.7,1.4,3.1,3,3.1c1.7,0,3-1.4,3-3.1\n    c0-1.7-1.4-3.1-3-3.1C256.2,79.4,254.9,80.8,254.9,82.5z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FDFDFD",
    d: "M257.2,206.4c5,0,9.1,4.1,9.1,9.1c0,5-4.1,9.2-9.2,9.2c-5,0-9.1-4.2-9.1-9.2\n    C248.1,210.5,252.2,206.4,257.2,206.4z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FDFDFD",
    d: "M133.5,215.5c0-5,4.1-9.1,9.1-9.1c5,0,9.2,4.2,9.1,9.2c0,5-4.2,9.1-9.2,9.1\n    C137.6,224.6,133.5,220.5,133.5,215.5z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FD928E",
    d: "M216.8,270.3c-0.5,2.2-1.9,3.7-3.5,4.9c-2.6,2-5.7,3-8.9,3.4c-5,0.7-9.9,0.4-14.6-1.6c-2.2-1-4.2-2.3-5.6-4.3\n    c-0.5-0.7-0.8-1.5-1.2-2.3c2-0.7,3.9-1.2,5.7-2c3.8-1.5,7.2-3.7,10.5-6c0.6-0.4,0.9-0.4,1.5,0c4.2,2.9,8.6,5.6,13.5,7.1\n    C215,269.8,215.9,270.1,216.8,270.3z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FCFCFC",
    d: "M146.8,86.8c0-3.7,3-6.7,6.7-6.6c3.7,0,6.6,3,6.6,6.7c0,3.6-3,6.6-6.6,6.6C149.8,93.5,146.8,90.5,146.8,86.8z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FAFAFA",
    d: "M138.9,82.5c0-1.7,1.5-3.1,3.1-3c1.7,0.1,3,1.4,3,3.1c0,1.7-1.5,3.1-3.1,3C140.2,85.6,138.9,84.2,138.9,82.5z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FCFCFC",
    d: "M253,86.8c0,3.7-3,6.6-6.7,6.6c-3.7,0-6.6-3-6.6-6.7c0-3.6,3-6.6,6.6-6.6C250.1,80.2,253,83.2,253,86.8z"
  }), /* @__PURE__ */ import_react38.default.createElement("path", {
    fill: "#FAFAFA",
    d: "M254.9,82.5c0-1.7,1.4-3.1,3.1-3.1c1.7,0,3,1.4,3,3.1c0,1.7-1.4,3.1-3,3.1C256.2,85.6,254.9,84.2,254.9,82.5z"
  })));
  var pandaswap_default = PandaSwapIcon;

  // src/searchbar/icons/yetiswap.tsx
  var import_react39 = __toESM(require_react());
  var YetiSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react39.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react39.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#48668C",
    d: "M215.5,275.6c-0.3-0.9-0.6-2.7-0.9-2.7c-2.8,0.2-6-0.1-8.3,1.2c-2,1.1-2.9,4.1-4.8,7c0-7.8,0-14.5,0-21.2\n        c0-2.5,5.2-10,7.8-12c1-0.7,1.6-2.2,2-3.4c1.8-6,4.9-12.1,4.7-18.1c-0.1-5.1-4.1-10-6.3-15c-0.6,0.1-1.1,0.2-1.7,0.3\n        c1.5-1.3,2.9-2.6,4.4-4c1.4,3.8,2.6,7.3,4,11.1c1.2-1.1,1.7-1.6,2.6-2.4c0.9,2.2,1.5,3.9,2.1,5.3c2.7-0.8,5.3-1.6,8-2.4\n        c0.2,1.3,0.4,2.5,0.6,4.3c1.5-1.7,2.8-3,4.3-4.7c0.6,0.9,1.1,1.6,1.3,2c2.7-0.9,5.6-1.3,7.6-2.9c1.4-1.2,1.6-4,2.3-6.1\n        c1.6-4.9,3.1-9.8,4.6-14.7l-0.1,0.1c3.9-1.4,4.3-4.6,3.5-7.9c-1.6-6.1-3.6-12.2-5.6-19c-0.7,1.6-1.1,2.5-1.5,3.3\n        c-2.7-4-5.4-8.1-8.7-13.1c-1,2.7-1.4,4-1.8,4.9c-7.9-1.3-15.6-2.6-24.2-4c1.6,1.9,2.6,3.2,3.5,4.3c-8.3,6.9-16.7,13.7-25,20.6\n        c-0.4-0.3-0.8-0.6-1.1-0.8c1.2-2.9,2.4-5.7,3.7-8.6c2.1-4.5,1.5-8.1-2.4-11.6c-4.1-3.7-7.6-8.1-11.3-12.2c0.4-0.4,0.8-0.8,1.1-1.3\n        c1.7,0.9,3.5,1.8,5.2,2.7c0.5,0.1,0.9,0.2,1.4,0.3c-0.2-0.4-0.4-0.8-0.5-1.2c-8.2-13.1-6.9-28.6-10.9-43c-4.4,2.1-8.6,4.1-13.2,6.2\n        c-0.7-2.4-1.2-4.2-1.6-5.8c-5.2-0.2-5.8,9.4-13.1,5c-0.5,8.4-1,16.4-1.5,24.6c1.1,0.1,2.1,0.1,2.8,0.2c-1.4,5.2-3.1,10.1-3.9,15.1\n        c-1,6.2-1.4,12.4-2.1,19.7c2.2-1.5,3.6-2.5,4.3-3c2.6,11.2,5.3,22.4,8,34.2c4.2-1.7,6.9-2.8,9.6-3.9c0.5,0.4,0.9,0.7,1.4,1.1\n        c-9,13.6-17.4,27.5-27.2,40.5c-6.1,8.1-11,16.1-10.4,26.4c0.5,8.2,0.7,16.5,2.7,24.3c1.8,6.9,5.7,13.3,8.9,19.8\n        c0.3,0.7,2.1,0.7,2.7,0.9c7,8.5,13.8,17,21.1,25.2c2.5,2.8,2.3,4.4,0.8,7.7c-4.3,9.2-10.8,11.4-20.7,11.3\n        c-38.4-0.6-76.7-0.3-115.1-0.2c-8,0-16,0.5-24,0.8c0-0.8,0-1.5,0-2.3c7.9-14.9,17.2-29.3,23.2-45c5.7-15.1,15.1-26.5,26.4-37.1\n        c2.9-2.7,5.4-6.5,6.4-10.3c2.4-9,6.2-16.7,13.4-23.1c12.9-11.7,21.2-26,19.1-44.3c-0.5-4.2,0.8-7.2,4.3-9.1\n        c11.4-6.1,17.2-16.5,22.7-27.5c2.9-5.8,6.1-11.4,9.7-16.8c7.3-10.8,13.8-21.8,14.1-35.4c0-0.5,0.4-1,0.7-1.5c1.6,0.5,3.1,1,5.6,1.7\n        c0.8-6.1,1.1-11.8,2.3-17.2c1.8-8.7,7.8-14.9,15.3-18.7c3.5-1.7,8.8,0.3,13.3,0.4c1.9,0,4.9,0.1,5.7-1.1c4.9-6.9,9.2-14.2,13.8-21.4\n        c0.8,0,1.5,0,2.3,0c4.7,11.2,7.5,23.8,14.5,33.3c6.9,9.3,8.8,19.7,12.5,29.8c2,5.3,5.1,7.5,10,8.7c2.7,0.7,5.7,2,7.6,3.9\n        c6.6,6.6,12.9,13.3,22.6,15.7c1.5,0.4,2.9,3.1,3.4,5c1.3,4.9,1.7,10.2,3.2,15c3,9.3,6.9,18.1,17,22.2c5,2,7.4,6.2,7.7,11.6\n        c0.5,10.6,7.1,18.6,11.5,27.6c8.7,17.8,18.5,34.9,31.5,50c0.8,1,1.6,2.3,1.7,3.5c1.1,10.4,7.3,18.1,13.5,25.9\n        c12.4,15.5,23.7,31.7,30.2,50.8c0.6,1.7,1.3,3.5,2.2,5.7c-2.8,0-4.8,0-6.9,0c-51.7,0-103.4,0.1-155.2-0.2c-5.7,0-9,1.3-10.2,6.9\n        c-0.4,1.7-1.5,3.1-2.3,4.7c-0.6-0.1-1.2-0.3-1.7-0.4c0-2-0.1-3.9,0-5.9c1-12.5-2.5-24.1-6.7-35.6c-1.1-3.1-0.4-5,1.4-7.6\n        c4.2-5.8,8.8-9.3,16.6-10c10.2-0.9,20.4-3.2,26.4-13.6c0.3,0.4,0.6,0.8,0.9,1.3c-0.8,2.4-1.5,4.8-2.6,8.2c4-0.6,7.1-1,10.2-1.4\n        c0.2,0.4,0.4,0.8,0.5,1.1c-3.6,1.8-7.3,3.6-12,6c3.1,2.2,5.8,4.6,8.9,6.4c6.4,3.7,14.3,4.6,18.4,12.3c2,3.8,6.5,3.6,9.7-0.1\n        c1.4-1.6,2.2-3.6,3.7-5.1c4.7-4.5,9.7-8.9,14.6-13.3c0.6-0.5,1.3-0.7,1.9-1.2c12.1-8.7,11.9-7.5,3.4-20.3c-1.4,0.5-2.9,1-5,1.8\n        c0.3-1.8,0.5-3,0.8-4.3c-5.7-0.8-19.1,10.5-21.1,18.6c-2.3-3.4-4.3-6.2-6.3-9.1c-1.9-2.8-3.9-5.5-6.5-9.1c-0.2,3.1-0.3,5.1-0.5,8.6\n        c-1.3-4.1-2.4-6.8-3-9.7c-1.7-8.6-7.2-12.5-15.6-13.2c-2.5-0.2-4.9-0.5-7.4-0.8c-2.3-0.7-4.6-1.2-6.9-2.1c-2-0.7-3.9-1.7-5.9-2.6\n        c5.2-6.7,10.3-13.4,16.2-21.1c4.5,6,8.5,11.2,13,17.3c0.9-8.5-1.1-15.5-5.4-22c-0.9-1.3-2.2-3.6-1.7-4.3c3.3-4.8-0.5-5.8-3.4-6.5\n        c-3.3,1-6.5,1.1-9.6,1.2c-5.2,0.2-10.3,0.5-15.5,0.7c-0.1,0.7-0.2,1.4-0.2,2.1c7.8,0.5,14.3,3.2,18.4,8.6c-2.6,1.9-5.4,3.1-7.2,5.2\n        c-6.6,7.8-12.9,15.9-19.3,23.8C217.8,275.9,216.6,275.7,215.5,275.6z M112.5,283c-0.2-0.2-0.4-0.4-0.6-0.6c0.9-3.1,1.7-6.2,2.8-9.3\n        c4.6-13,3.6-26.4,3.4-40.5c-6.6,5.4-12.5,10.3-18.2,15c5.7-14.1,12.3-27.5,16.4-41.5c2.4-8.1,5.5-14.5,12-19.6\n        c6-4.8,5.5-12.1,6.7-18.7c0.7-4.1,1.6-8.2,2.6-12.3c1.1-4.2,2.4-8.2,3.7-12.4c-0.8-0.5-1.6-0.9-2.3-1.4c-0.5,1-0.9,2-1.4,3\n        c-4.2,8.2-9.2,16.2-12.5,24.8c-2.7,7-5.5,13.1-12.4,16.7c-8.6,4.5-11.6,12.5-13.2,21.4c-0.4,2.3-0.5,3.4,2.2,2.7\n        c0.2,0.2,0.5,0.4,0.7,0.6c-8,12.2-15,25.3-24.3,36.3c-6.3,7.4-4.3,16.3-10.2,24.5c10.8-3.9,19.6-7.1,29.5-10.6\n        c0.1,13.6,1.4,25.8,7.2,37.1c0.5,1.1-0.5,2.9-0.7,4.4c-0.6,4.4-1.2,8.9-2,14.9c3-3.1,4.6-4.8,6.1-6.5c2.4,4.1,4.5,7.7,6.7,11.4\n        c0.3-0.2,0.6-0.4,0.9-0.6c0-13.3,0-26.5,0-39.9C114.3,282.4,113.4,282.7,112.5,283z M88.6,272.6c-12.8,2.9-23.7,6.4-33.4,15.6\n        c-9.1,8.5-14,17.5-16.4,29.3c-1.8,8.4-6.2,16.2-9.5,24.3c0.4,0.4,0.8,0.8,1.1,1.3c5.7,8.3,14.5,5.1,22.3,5.8c0.8,0.1,2-1.5,2.7-2.5\n        c6.9-10.9,13.6-22,20.7-32.8c3.7-5.7,7.3-11.1,7.7-18.5C84.1,287.8,86.7,280.7,88.6,272.6z M200.2,64.3c-3.9,6.2-7.2,11.3-10.5,16.7\n        c3.9,1.2,6.8,2.2,11.5,3.7c-3.8,3.9-6.6,6.7-9.5,9.5c-3,3-8.1,5.6-8.8,9.1c-1.6,7.6,0.5,15.4,3.8,24.6c6.7-11,12.5-20.5,18.3-30\n        c1.9-3,4-6,6.3-9.5C208.1,81.4,204.5,73.5,200.2,64.3z M164,111.1c0.5,0.4,0.9,0.8,1.4,1.2c10.1-8.5,20.2-17.1,30.3-25.6\n        c-0.2-0.4-0.4-0.8-0.6-1.2c-4.9,0-9.9,0-15.4,0c1.3-2.2,2.3-3.8,3.4-5.7c-7.9-0.4-15.1-3.3-21,5c-5,7-5,14.1-5.6,22.1\n        c3-0.7,5.1-1.1,7.6-1.7C164,107.4,164,109.3,164,111.1z M213.8,143c0.6-0.1,1.2-0.1,1.8-0.2c0-16,0-32,0-48.3\n        c-8.4,6.1-9.4,15.8-12.6,24.3c-0.2,0.4,0.1,1.1,0.3,1.6C206.8,127.9,210.3,135.5,213.8,143z M274.4,208.7c0.4,0.1,0.9,0.2,1.3,0.3\n        c5.9-4.5,11.8-9.1,18.4-14.1c-4.2-2.7-7.8-5-12.1-7.7C279.3,195,276.9,201.8,274.4,208.7z M340.1,277.5c-6-7.3-11-13.4-16.7-20.3\n        C322.2,272,324.2,274.6,340.1,277.5z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#4F6C90",
    d: "M233.6,271.1c2,0.9,3.9,1.9,5.9,2.6c2.2,0.8,4.6,1.4,6.9,2.1c-9.7-2.5-15.4,2.8-20.4,10.2\n        c-4.2,6.1-9.5,11.4-14,17.3c-1.1,1.5-2,4.8-1.2,6c2.2,3.1,0.8,5-0.8,7.5c-4.3,6.6-9.9,11.4-16.9,14.9c-1.9,1-3.5,2.8-5.1,4.4\n        c-0.9,0.9-1.5,2.2-2.3,3.3c-3.4,5-8.5,9.7-9.8,15.2c-1.2,5.2,1.8,11.3,3.1,17.7c-4.1-4.5-7.9-8.8-12.1-13.5\n        c5.7-8.1,11.6-16.6,17.6-25.3c-6.4-5.3-8.9,1.6-13.9,4.6c1.5-3.3,2.5-5.5,3.6-8c-2.5-1.7-5-3.4-7.8-5.3c-1,1.5-1.9,2.9-2.8,4.3\n        c-1.9-6-3.8-11.9-5.8-18.3c-1.5,1.1-2.1,1.6-3.3,2.5c-2-15.2-15.1-27.6-8.9-45.3c1.2,6.2,2.1,11.2,3.2,16.2c0.5,2.4,1.3,4.9,2.5,6.9\n        c6.8,11.3,13.7,22.5,20,32.6c2.3,0.3,4,0.1,5.2,0.7c13.8,6.8,22.9,4.3,30.7-8.9c0.8-1.3,0.4-3.3,0.6-5.1\n        c-11.1,0.9-12.8-0.2-13.6-8.5c-3.1,0.4-6.2,0.9-9.1,1.3c-2.5-8-5-16.1-7.6-24.3c0.9,0.4,2.2,1,4.7,2.1c-3.8-7.3-3.2-16.3-12.9-17.6\n        c7.1-5.3,14.2-10.6,21.4-16c0.3,0.3,0.6,0.6,0.9,0.9c-3.2,3.6-6.5,7.1-9.5,10.9c-1.1,1.4-2.3,3.8-1.9,5.3\n        c2.7,11.4,5.8,22.6,8.9,34.5c5.5-0.5,11.2-1.7,15-8.3c3.1-5.4,7.5-10,11.3-15c1.2,0.1,2.3,0.3,3.5,0.4c-6.3,8.1-12.7,16.1-18.8,24.3\n        c-0.9,1.2-0.4,3.5-0.5,5.3c2.2-0.1,4.5,0.1,6.6-0.5c1-0.3,1.7-2,2.5-3C217,291.8,225.3,281.4,233.6,271.1z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#4A7D92",
    d: "M249.8,197.1c-7.4-2.4-14.8-4.8-21.4-6.9C234.6,186.1,246.9,189.5,249.8,197.1\n        C249.8,197.2,249.8,197.1,249.8,197.1z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#A0C5DB",
    d: "M101.6,210.5c-2.7,0.6-2.6-0.5-2.2-2.7c1.6-8.9,4.6-16.9,13.2-21.4c6.9-3.6,9.8-9.7,12.4-16.7\n        c3.3-8.6,8.3-16.5,12.5-24.8c0.5-1,0.9-2,1.4-3c0.8,0.5,1.6,0.9,2.3,1.4c-1.2,4.1-2.6,8.2-3.7,12.4c-1,4.1-1.9,8.2-2.6,12.3\n        c-1.2,6.6-0.7,13.9-6.7,18.7c-6.5,5.1-9.6,11.6-12,19.6c-4.1,14.1-10.7,27.4-16.4,41.5c5.7-4.7,11.7-9.6,18.2-15\n        c0.2,14.1,1.2,27.5-3.4,40.5c-1.1,3-1.9,6.2-2.8,9.3c-0.1,0.4-0.1,0.8-0.2,1.3c0.2-0.2,0.5-0.5,0.7-0.7c0.9-0.3,1.8-0.6,2.8-0.9\n        c0,13.4,0,26.7,0,39.9c-0.3,0.2-0.6,0.4-0.9,0.6c-2.1-3.6-4.2-7.2-6.7-11.4c-1.6,1.7-3.2,3.3-6.1,6.5c0.8-6,1.4-10.5,2-14.9\n        c0.2-1.5,1.2-3.3,0.7-4.4c-5.7-11.3-7.1-23.4-7.2-37.1c-9.9,3.5-18.7,6.7-29.5,10.6c5.9-8.2,3.9-17.1,10.2-24.5\n        c9.4-11,16.3-24.1,24.3-36.3c0.1-0.6,0.3-1.2,0.4-1.8C102.3,209.7,102,210.1,101.6,210.5z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#A0C6DC",
    d: "M88.6,272.6c-1.9,8.1-4.5,15.2-4.9,22.4c-0.5,7.4-4,12.7-7.7,18.5c-7,10.8-13.7,21.9-20.7,32.8\n        c-0.6,1-1.8,2.6-2.7,2.5c-7.7-0.7-16.5,2.5-22.3-5.8c-0.3-0.5-0.8-0.8-1.1-1.3c3.3-8.1,7.8-15.9,9.5-24.3\n        c2.5-11.8,7.4-20.8,16.4-29.3C64.9,279,75.8,275.5,88.6,272.6z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#F6F7F9",
    d: "M233.6,271.1c-8.3,10.4-16.6,20.7-24.9,31.1c-0.8,1-1.5,2.7-2.5,3c-2.1,0.6-4.4,0.4-6.6,0.5\n        c0.1-1.8-0.4-4.1,0.5-5.3c6.1-8.2,12.5-16.3,18.8-24.3c6.4-8,12.7-16,19.3-23.8c1.8-2.1,4.6-3.4,7.2-5.2c-4-5.3-10.6-8.1-18.4-8.6\n        c0.1-0.7,0.2-1.4,0.2-2.1c5.2-0.2,10.3-0.5,15.5-0.7c3.2-0.1,6.3-0.2,9.6-1.2c2.9,0.7,6.7,1.7,3.4,6.5c-0.5,0.7,0.8,3,1.7,4.3\n        c4.3,6.5,6.2,13.5,5.4,22c-4.6-6-8.5-11.3-13-17.3C243.9,257.6,238.8,264.3,233.6,271.1z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#9FC5DB",
    d: "M200.2,64.3c4.2,9.2,7.9,17.1,11.1,24.2c-2.4,3.5-4.5,6.4-6.3,9.5c-5.8,9.5-11.6,19-18.3,30\n        c-3.4-9.2-5.5-17-3.8-24.6c0.7-3.5,5.8-6.1,8.8-9.1c2.8-2.8,5.7-5.7,9.5-9.5c-4.7-1.5-7.6-2.5-11.5-3.7\n        C193.1,75.7,196.3,70.5,200.2,64.3z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#F9FAFB",
    d: "M164,111.1c0-1.8,0-3.6,0-5.9c-2.6,0.6-4.7,1-7.6,1.7c0.6-8,0.6-15.1,5.6-22.1c5.9-8.3,13.1-5.4,21-5\n        c-1.1,1.9-2.1,3.5-3.4,5.7c5.5,0,10.4,0,15.4,0c0.2,0.4,0.4,0.8,0.6,1.2c-10.1,8.5-20.2,17.1-30.3,25.6\n        C164.9,111.9,164.5,111.5,164,111.1z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#9EC3DA",
    d: "M213.8,143c-3.5-7.5-7-15.1-10.5-22.6c-0.2-0.5-0.5-1.2-0.3-1.6c3.2-8.5,4.2-18.2,12.6-24.3\n        c0,16.3,0,32.3,0,48.3C215,142.9,214.4,142.9,213.8,143z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#9FC4DA",
    d: "M274.4,208.7c2.4-6.8,4.8-13.7,7.6-21.4c4.3,2.7,7.8,5,12.1,7.7c-6.5,5-12.4,9.5-18.4,14.1\n        C275.3,208.9,274.9,208.8,274.4,208.7z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#9EC3D9",
    d: "M340.1,277.5c-15.9-2.9-17.9-5.4-16.7-20.3C329.1,264.1,334.1,270.2,340.1,277.5z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#FDFDFE",
    d: "M186,153.4c0.2,0.4,0.4,0.8,0.5,1.2c-0.5-0.1-0.9-0.2-1.4-0.3C185.5,154,185.8,153.7,186,153.4z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#48668C",
    d: "M101.6,210.5c0.4-0.4,0.7-0.8,1.1-1.2c-0.1,0.6-0.3,1.2-0.4,1.8C102.1,210.9,101.9,210.7,101.6,210.5z"
  }), /* @__PURE__ */ import_react39.default.createElement("path", {
    fill: "#48668C",
    d: "M112.5,283c-0.2,0.2-0.5,0.5-0.7,0.7c0.1-0.4,0.1-0.8,0.2-1.3C112.2,282.6,112.4,282.8,112.5,283z"
  })));
  var yetiswap_default = YetiSwapIcon;

  // src/searchbar/icons/zero.exchange.tsx
  var import_react40 = __toESM(require_react());
  var ZeroExchangeIcon = ({ height, width }) => /* @__PURE__ */ import_react40.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react40.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#725CF7",
    d: "M381.3,378.8c-87.3,0-174.6,0-261.9,0c-0.9-0.3-1.7-0.9-2.6-1c-22.7-3.9-42.5-13.3-58.6-30.2\n        c10.4-10.7,20.7-21.5,31.1-32c5.1-5.2,10.5-10,15.8-15c8.5,7.6,18.7,10.8,29.9,11c36.3,0,72.5,0,108.8,0c2,0.1,4,0.2,6,0.2\n        c41.8,0,83.6,0.1,125.4,0.1c1.9,0,3.9,0,6.1,0C381.3,334.6,381.3,356.7,381.3,378.8z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#BA73FB",
    d: "M105.2,300.6c-5.3,5-10.7,9.8-15.8,15c-10.5,10.6-20.8,21.4-31.1,32.1c-14.4-14-23.6-31-28.5-50.4\n        c-0.9-3.8-2-7.6-2.9-11.4c0-8.3,0-16.7,0-25c0.3-0.9,0.8-1.8,1-2.7c3.4-24.3,14.1-44.8,31.3-62c35.7-35.9,71.4-71.7,107.2-107.5\n        c37.6,0,75.2,0,112.7,0c-12.6-0.6-22.7,4.3-31.5,13.2c-46.6,47-93.3,93.8-140,140.6C89.6,260.3,88.8,281.5,105.2,300.6z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#21F7E9",
    d: "M279,88.6c-37.6,0-75.2,0-112.7,0c-2.1-0.1-4.3-0.3-6.4-0.3c-41.5,0-83,0-124.4,0c-2.1,0-4.1,0-6.4,0\n        c0-22.6,0-44.4,0-66.2C47.5,22,66,22,84.6,21.9c20.6,0,41.2,0,61.7,0c22.6,0,45.1,0,67.7,0c16.3,0,32.7,0.1,49,0\n        c1.6,0,3.2-0.6,4.8-0.9c7.3,0,14.6,0,21.9,0c2.6,0.7,5.2,1.4,7.9,2c21.2,4.5,39.7,13.9,54.8,29.8c-14.1,14.1-28.3,28.2-42.4,42.3\n        c-1.5,1.5-3.3,2.7-5,4C297.4,92.9,289,88.6,279,88.6z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#59FAEF",
    d: "M214,21.9c-22.6,0-45.1,0-67.7,0c0-0.3,0-0.6,0-0.9c22.6,0,45.1,0,67.7,0C214.1,21.3,214,21.6,214,21.9z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#67FAF0",
    d: "M146.4,21c0,0.3,0,0.6,0,0.9c-20.6,0-41.2,0-61.7,0c0-0.3,0-0.6,0-0.9C105.2,21,125.8,21,146.4,21z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#74FAF1",
    d: "M84.6,21c0,0.3,0,0.6,0,0.9C66,22,47.5,22,29,22.1c0-0.4-0.1-0.7-0.1-1.1C47.4,21,66,21,84.6,21z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#4BF8ED",
    d: "M214,21.9c0-0.3,0-0.6,0-0.9c17.9,0,35.8,0,53.8,0c-1.6,0.3-3.2,0.9-4.8,0.9C246.7,22,230.4,22,214,21.9z"
  }), /* @__PURE__ */ import_react40.default.createElement("path", {
    fill: "#1FB8F9",
    d: "M135.1,311.6c12-1,21.2-7,29.6-15.5c45.4-45.9,90.8-92,137-137.2c17.4-17,20.3-41.5,3.3-59.9\n        c1.7-1.3,3.5-2.5,5-4c14.2-14.1,28.3-28.2,42.4-42.3c17.1,16.8,27,37.3,29.9,61c4.3,35.6-7.1,65.8-32.3,91.1\n        c-33.9,34-67.8,68.1-101.7,102.1c-1.5,1.5-2.9,3.1-4.4,4.7C207.6,311.6,171.4,311.6,135.1,311.6z"
  })));
  var zero_exchange_default = ZeroExchangeIcon;

  // src/searchbar/icons/beamswap.tsx
  var import_react41 = __toESM(require_react());
  var BeamSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react41.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react41.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react41.default.createElement("g", {
    style: { opacity: 0.2 }
  }, /* @__PURE__ */ import_react41.default.createElement("linearGradient", {
    id: "SVGID_1_",
    gradientUnits: "userSpaceOnUse",
    x1: "200.3752",
    y1: "379.0547",
    x2: "200.3752",
    y2: "20.9453",
    gradientTransform: "matrix(1 0 0 -1 0 400)"
  }, /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#15CEF7" }
  }), /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#9123C5" }
  })), /* @__PURE__ */ import_react41.default.createElement("path", {
    style: { fillRule: "evenodd", clipRule: "evenodd", fill: "url(#SVGID_1_)" },
    d: "M22,184.5c7.9-91.6,84.7-163.5,178.3-163.5c93.7,0,170.5,71.9,178.4,163.5H22z M341.5,310.2H59.2\n        c-3.3-4.2-6.4-8.5-9.2-13h300.7C347.8,301.6,344.8,306,341.5,310.2z M295,352H105.8c-5.4-3.4-10.6-7-15.6-10.9h220.3\n        C305.5,345,300.3,348.7,295,352z M78.4,331.1h243.9c4.1-3.8,8-7.8,11.7-11.9H66.7C70.5,323.3,74.4,327.3,78.4,331.1z M200.4,379.1\n        c25.5,0,50.7-5.4,74-16H126.4C149.6,373.6,174.9,379.1,200.4,379.1z M21.8,187.4H379c0.3,4.2,0.5,8.4,0.5,12.6c0,1.3,0,2.6-0.1,4\n        l0,0.5c0,0.3,0,0.6,0,0.9H21.4c0-0.5,0-1,0-1.4l0,0c0-1.3-0.1-2.6-0.1-4C21.3,195.8,21.5,191.6,21.8,187.4z M23.3,226.4h354.2\n        c0.8-5.6,1.4-11.2,1.7-17H21.6C21.9,215.1,22.4,220.8,23.3,226.4z M365.9,268.3H34.8c-2-4.9-3.9-9.9-5.5-15h342\n        C369.8,258.4,368,263.4,365.9,268.3z M27.7,247.3h345.4c1.4-5.2,2.6-10.6,3.6-16H24.1C25.1,236.7,26.2,242.1,27.7,247.3z\n        M355.6,289.2H45.1c-2.6-4.5-5-9.2-7.2-14h325C360.6,280,358.2,284.7,355.6,289.2z"
  })), /* @__PURE__ */ import_react41.default.createElement("linearGradient", {
    id: "SVGID_00000183928502295634376560000004982184485435288483_",
    gradientUnits: "userSpaceOnUse",
    x1: "200.3763",
    y1: "360.8944",
    x2: "200.3763",
    y2: "39.1083",
    gradientTransform: "matrix(1 0 0 -1 0 400)"
  }, /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#15CEF7" }
  }), /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#9123C5" }
  })), /* @__PURE__ */ import_react41.default.createElement("path", {
    style: { fillRule: "evenodd", clipRule: "evenodd", fill: "url(#SVGID_00000183928502295634376560000004982184485435288483_)" },
    d: "\n      M40.1,186c7.1-82.3,76.1-146.9,160.3-146.9c84.2,0,153.2,64.6,160.3,146.9H40.1z M327.2,299H73.6c-2.9-3.8-5.7-7.6-8.3-11.6h270.2\n      C332.9,291.3,330.1,295.2,327.2,299z M285.4,336.6h-170c-4.8-3-9.5-6.3-14-9.8h198C294.9,330.3,290.2,333.6,285.4,336.6z\n      M90.8,317.8h219.1c3.7-3.4,7.2-7,10.5-10.7H80.3C83.6,310.8,87.1,314.4,90.8,317.8z M200.4,360.9c22.9,0,45.6-4.9,66.5-14.4H133.9\n      C154.8,356,177.4,360.9,200.4,360.9z M39.9,188.7h320.9c0.3,3.8,0.4,7.5,0.4,11.3c0,1.2,0,2.4-0.1,3.5v0v0v0v0v0c0,0.4,0,0.9,0,1.3\n      H39.6c0-0.4,0-0.9,0-1.3c0-1.2-0.1-2.4-0.1-3.6C39.5,196.2,39.7,192.4,39.9,188.7z M41.2,223.7h318.3c0.7-5,1.3-10.1,1.5-15.3H39.7\n      C40,213.6,40.5,218.7,41.2,223.7z M349.2,261.3H51.6c-1.8-4.4-3.5-8.9-4.9-13.5H354C352.6,252.5,351,256.9,349.2,261.3z M45.2,242.5\n      h310.4c1.3-4.7,2.4-9.5,3.2-14.4H42C42.8,233,43.9,237.8,45.2,242.5z M339.9,280.2h-279c-2.4-4.1-4.5-8.3-6.5-12.5h292\n      C344.4,271.9,342.2,276.1,339.9,280.2z"
  }), /* @__PURE__ */ import_react41.default.createElement("g", {
    style: { opacity: 0.5 }
  }, /* @__PURE__ */ import_react41.default.createElement("linearGradient", {
    id: "SVGID_00000013889303268019635800000010446692763919938215_",
    gradientUnits: "userSpaceOnUse",
    x1: "200.3732",
    y1: "349.2991",
    x2: "200.3732",
    y2: "50.7141",
    gradientTransform: "matrix(1 0 0 -1 0 400)"
  }, /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#15CEF7" }
  }), /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#9123C5" }
  })), /* @__PURE__ */ import_react41.default.createElement("path", {
    style: { fillRule: "evenodd", clipRule: "evenodd", fill: "url(#SVGID_00000013889303268019635800000010446692763919938215_)" },
    d: "\n        M51.7,187c6.6-76.4,70.6-136.3,148.7-136.3c78.1,0,142.1,60,148.7,136.3H51.7z M318,291.8H82.7c-2.7-3.5-5.3-7.1-7.7-10.8h250.8\n        C323.3,284.7,320.8,288.3,318,291.8z M279.2,326.8H121.5c-4.5-2.8-8.8-5.8-13-9.1h183.7C288.1,320.9,283.7,324,279.2,326.8z\n        M98.7,309.3H302c3.4-3.2,6.7-6.5,9.8-10H88.9C92,302.8,95.3,306.1,98.7,309.3z M200.4,349.3c21.3,0,42.3-4.5,61.7-13.3H138.7\n        C158.1,344.8,179.1,349.3,200.4,349.3z M51.5,189.5h297.8c0.2,3.5,0.4,7,0.4,10.5c0,1.1,0,2.2-0.1,3.3c0,0.4,0,0.8,0,1.2H51.2\n        c0-0.4,0-0.8,0-1.2l0,0c0-1.1-0.1-2.2-0.1-3.3C51.1,196.5,51.2,193,51.5,189.5z M52.7,222h295.4c0.7-4.7,1.2-9.4,1.4-14.2H51.3\n        C51.5,212.6,52,217.3,52.7,222z M338.4,256.9H62.3c-1.7-4.1-3.2-8.2-4.5-12.5H343C341.6,248.7,340.1,252.8,338.4,256.9z\n        M56.4,239.4h288c1.2-4.4,2.2-8.8,3-13.3h-294C54.2,230.6,55.2,235.1,56.4,239.4z M329.8,274.4H70.9c-2.2-3.8-4.2-7.7-6-11.6h271\n        C334,266.7,332,270.6,329.8,274.4z"
  })), /* @__PURE__ */ import_react41.default.createElement("g", {
    style: { opacity: 0.4 }
  }, /* @__PURE__ */ import_react41.default.createElement("linearGradient", {
    id: "SVGID_00000073699279880338609790000003861742514358607293_",
    gradientUnits: "userSpaceOnUse",
    x1: "200.3715",
    y1: "309.9554",
    x2: "200.3715",
    y2: "90.0529",
    gradientTransform: "matrix(1 0 0 -1 0 400)"
  }, /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#15CEF7" }
  }), /* @__PURE__ */ import_react41.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#9123C5" }
  })), /* @__PURE__ */ import_react41.default.createElement("path", {
    style: { fillRule: "evenodd", clipRule: "evenodd", fill: "url(#SVGID_00000073699279880338609790000003861742514358607293_)" },
    d: "        \n          M90.9,190.5C95.7,134.2,142.9,90,200.4,90c57.5,0,104.7,44.2,109.5,100.4H90.9z M287,267.6H113.7c-2-2.6-3.9-5.2-5.7-8h184.7\n          C290.9,262.4,289,265.1,287,267.6z M258.4,293.4H142.3c-3.3-2.1-6.5-4.3-9.6-6.7H268C265,289,261.8,291.3,258.4,293.4z\n          M125.5,280.5h149.7c2.5-2.3,4.9-4.8,7.2-7.3H118.3C120.6,275.7,123,278.2,125.5,280.5z M200.4,309.9c15.7,0,31.2-3.3,45.4-9.8\n          h-90.8C169.2,306.6,184.7,310,200.4,309.9z M90.7,192.3H310c0.2,2.6,0.3,5.1,0.3,7.7c0,0.8,0,1.6-0.1,2.4c0,0.3,0,0.6,0,0.9H90.5\n          c0-0.3,0-0.6,0-0.9l0,0c0-0.8-0.1-1.6-0.1-2.4C90.4,197.4,90.5,194.8,90.7,192.3z M91.6,216.2h217.5c0.5-3.4,0.9-6.9,1-10.4H90.6\n          C90.7,209.3,91.1,212.7,91.6,216.2z M302,241.9H98.7c-1.2-3-2.4-6.1-3.3-9.2h210C304.4,235.8,303.3,238.9,302,241.9z M94.3,229\n          h212.1c0.9-3.2,1.6-6.5,2.2-9.8H92.1C92.7,222.6,93.4,225.8,94.3,229z M295.7,254.8H105c-1.6-2.8-3.1-5.6-4.5-8.6h199.6\n          C298.8,249.1,297.3,252,295.7,254.8z"
  })), /* @__PURE__ */ import_react41.default.createElement("path", {
    fill: "#05113B",
    d: "M252.9,112.8c16.8-9.1,29-12.6,48.4-7.4c19.4,5.2,21,42.1,29.2,57.9c-11.6-14.3-18.2-41.6-38.5-42.9\n        c-20.3-1.2-40.8,5.9-53.9,18.6c3.1,2.5,6.2,5,9.3,7.5c-26.1,15.1-61.4,18.5-91.6,8.8c10.8-1.1,21.1-5.1,29.2-11.2\n        c-12.2-17.9-40.7-23.3-64.4-19.7C97,128.1,96,157.3,73.2,163.7c19.6-22.4,29.8-50.6,59.2-59c11.3-3.2,17.3-3.8,28.3,0.5\n        c13.3,5.2,31.8,23.8,46.2,25.8C219.8,132.8,242.2,118.6,252.9,112.8L252.9,112.8z"
  }), /* @__PURE__ */ import_react41.default.createElement("path", {
    fill: "#05113B",
    d: "M126.2,227.1c11.7-6.4,20.2-8.8,33.7-5.1c13.5,3.6,14.6,29.3,20.3,40.3c-8.1-10-12.7-29-26.8-29.9\n        c-14.1-0.9-28.4,4.1-37.5,13c2.1,1.7,4.3,3.5,6.4,5.2c-18.2,10.5-42.7,12.9-63.7,6.1c7.5-0.8,14.7-3.6,20.3-7.8\n        c-8.5-12.5-28.3-16.2-44.8-13.7c-16.5,2.5-17.1,22.9-33,27.3c13.7-15.6,20.7-35.2,41.2-41.1c7.9-2.2,12-2.7,19.7,0.3\n        c9.3,3.6,22.2,16.6,32.2,18C103.1,241.1,118.7,231.1,126.2,227.1L126.2,227.1z"
  }), /* @__PURE__ */ import_react41.default.createElement("path", {
    fill: "#05113B",
    d: "M291,297.8c12.7-6.9,22-9.5,36.7-5.6c14.7,3.9,15.9,31.7,22.1,43.6c-8.8-10.8-13.8-31.4-29.1-32.3\n        c-15.3-0.9-30.8,4.4-40.8,14.1c2.3,1.9,4.7,3.8,7,5.6c-19.7,11.4-46.5,14-69.3,6.7c8.2-0.9,16-3.9,22.1-8.5\n        c-9.2-13.5-30.8-17.6-48.7-14.8c-17.9,2.7-18.6,24.8-35.9,29.6c14.9-16.9,22.5-38.1,44.8-44.5c8.6-2.4,13.1-2.9,21.4,0.4\n        c10.1,3.9,24.1,17.9,35,19.5C265.9,312.9,282.8,302.2,291,297.8L291,297.8z"
  })));
  var beamswap_default = BeamSwapIcon;

  // src/searchbar/icons/solarbeam.tsx
  var import_react42 = __toESM(require_react());
  var SolarBeamIcon = ({ height, width }) => /* @__PURE__ */ import_react42.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react42.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react42.default.createElement("g", null, /* @__PURE__ */ import_react42.default.createElement("linearGradient", {
    id: "SVGID_1_",
    gradientUnits: "userSpaceOnUse",
    x1: "2072.4641",
    y1: "-1546.937",
    x2: "2469.3081",
    y2: "-1546.937",
    gradientTransform: "matrix(-0.7071 -0.7071 -0.7071 0.7071 711.9044 2899.5825)"
  }, /* @__PURE__ */ import_react42.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#FFCB86" }
  }), /* @__PURE__ */ import_react42.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#D75CA9" }
  })), /* @__PURE__ */ import_react42.default.createElement("circle", {
    style: { fill: `url(#SVGID_1_)` },
    cx: "200",
    cy: "200",
    r: "198.4"
  })), /* @__PURE__ */ import_react42.default.createElement("path", {
    fill: "#FFFFFF",
    d: "M373.8,186.5c-2.4-31.5-13.2-60.6-30.1-85.2c-5.8-8.4-12.3-16.3-19.5-23.6c-31.6-32.1-75.5-52-124.1-52\n        c-16.6,0-32.6,2.4-47.9,6.7c-10.7,3-21,7.1-30.7,12c-34.3,17.4-62.2,45.7-78.8,80.4c-4.7,9.8-8.5,20.2-11.3,31\n        c-3.7,14.1-5.7,28.9-5.7,44.2c0,46.5,18.2,88.6,47.8,119.9c7.2,7.6,15,14.5,23.4,20.7c25.6,18.8,56.6,30.8,90.2,33.2\n        c4.2,0.3,8.5,0.5,12.9,0.5c4.3,0,8.5-0.2,12.7-0.5c39.4-2.8,75.1-18.7,103-43.4c6-5.3,11.5-11,16.7-17\n        c23.7-27.7,38.9-62.8,41.5-101.4c0.3-3.9,0.5-7.9,0.5-11.9C374.4,195.4,374.1,190.9,373.8,186.5z M348.8,177.3l-157.5-57.4\n        c0.7-4.5,1.1-9.1,1.1-13.7c0-0.9,0-1.9-0.1-2.8l121.5-1.8C331.9,122.7,344.4,148.7,348.8,177.3z M200,49.5\n        c32.9,0,63.3,10.6,88.1,28.6l-99.9,1.4c-3.2-10.1-8.2-19.5-14.6-27.7C182.1,50.4,191,49.5,200,49.5z M147.6,59\n        c12.8,11.8,20.8,28.6,20.8,47.2c0,35.4-28.8,64.2-64.2,64.2c-18.2,0-34.6-7.6-46.3-19.7C72.6,108.4,105.7,74.6,147.6,59z M49.5,200\n        c0-7.9,0.6-15.7,1.8-23.3c7.5,5.6,16,10.1,25.1,13.1l-2.1,92.7C58.7,258.9,49.5,230.5,49.5,200z M97.6,310.1l2.6-115.9\n        c1.3,0.1,2.6,0.1,3.9,0.1c5,0,9.9-0.4,14.7-1.2l58.9,155.7C147,344.2,119.3,330.3,97.6,310.1z M203.8,350.4l-62.2-164.4\n        c6-2.8,11.6-6.3,16.7-10.3l140.2,137.9C273,335.7,240,349.5,203.8,350.4z M315.3,296.5L175,158.5c3.6-4.9,6.7-10.1,9.3-15.7\n        l166.1,60.5C349.6,238.8,336.5,271.2,315.3,296.5z"
  })));
  var solarbeam_default = SolarBeamIcon;

  // src/searchbar/icons/stellaswap.tsx
  var import_react43 = __toESM(require_react());
  var StellaSwapIcon = ({ height, width }) => /* @__PURE__ */ import_react43.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react43.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react43.default.createElement("circle", {
    fill: "#301748",
    cx: "200",
    cy: "199.1",
    r: "194.9"
  }), /* @__PURE__ */ import_react43.default.createElement("linearGradient", {
    id: "SVGID_1_",
    gradientUnits: "userSpaceOnUse",
    x1: "11109.6904",
    y1: "189.3136",
    x2: "11412.6572",
    y2: "189.3136",
    gradientTransform: "matrix(-1 0 0 -1 11484.75 400)"
  }, /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "0",
    style: { stopColor: `#E2107B` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#301748` }
  })), /* @__PURE__ */ import_react43.default.createElement("path", {
    style: { fill: `url(#SVGID_1_)` },
    d: "M207.4,328.9c-6.6-6.1-12.8-12.6-18.5-19.5c-13.6-17.5-43.9-48.3-51.4-55.9c-8.7-8.8-17.4-17.7-26-26.7\n        c-1.3-1.3-3.3-2.8-2.1-5c1.2-2.2,3.6-1.8,5.7-1.7c0.9,0.1,1.9,0.3,2.7,0.6c6.2,2.4,12.3,4.9,18.5,7.4c12.3,5,24.3,10.1,36.7,14.8\n        c7.4,2.8,10.6,0,9.2-7.8c-1.2-6.5-2.8-12.9-4.6-19.3c-1.5-5.4,1.6-11,7-12.5c0.5-0.1,1-0.2,1.6-0.3c2.5-0.4,5.1-0.4,7.6-0.6\n        c2.5-0.2,5.1-0.8,6.2-3.8c1-2.7,0.1-5.7-2.1-7.4c-8.4-8.1-16.6-16.2-24.9-24.4c-20.8-20.5-41.5-41-62.2-61.5\n        C98.4,93.3,86.1,81.2,73.9,69.1c-1.2-1.2-2.5-2.2-1.5-4.1s2.6-1.6,4.2-1.3c5.1,1,8.8,4.7,12.8,7.4c10.7,7.4,21.9,14,32.8,21\n        c7.6,4.8,15.3,9.5,22.9,14.4c7.6,4.9,14.7,9.7,22.2,14.5c10.7,6.8,21.5,13.4,32.2,20.2c11.5,7.3,23,14.8,34.4,22.3\n        c2.1,1.4,4,2.1,6.2,0.1c2.2-1.9,1.9-3.9,0.9-6.5c-2.3-6.2-6.6-11.1-8.2-17.4c-0.6-2.1-1-4.1,1-5.7c1.7-1.4,4.1-1.5,5.9-0.3\n        c7.8,3.7,15.3,7.8,22.7,12.3c8.9,5.6,18.2,10.6,27.8,14.9c15.6,7.4,30.5,16.1,45.3,24.9c8.1,5.2,15.2,11.9,20.6,19.9\n        c4.3,5.9,7.9,12.3,10.7,19c4,9.8,6.6,20,7.9,30.5c2.4,18.7-4.4,42.7-13.1,55.6c-7.4,11.7-17.1,21.8-28.5,29.8\n        c-7.7,5.2-15.9,9.5-24.6,12.8c-9.1,3.6-18.5,4.1-28.5,4.5c-0.8,0.1-1.6,0.1-2.5,0C256.6,356.6,236.2,353.7,207.4,328.9z\n        M341.7,266.5c0.7-33.6-26-61.5-59.7-62.2c-0.6,0-1.2,0-1.9,0c-32.9,0.2-60,27.1-60.1,62.6c0,29.1,28.3,61.5,60.5,59.5\n        C313.8,327.8,341.5,297.7,341.7,266.5z"
  }), /* @__PURE__ */ import_react43.default.createElement("linearGradient", {
    id: "SVGID_00000179647521726871257740000015064218755421354396_",
    gradientUnits: "userSpaceOnUse",
    x1: "11332.2012",
    y1: "212.6705",
    x2: "11350.5742",
    y2: "212.6705",
    gradientTransform: "matrix(-1 0 0 -1 11484.75 400)"
  }, /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "0",
    style: { stopColor: `#E2107B` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#301748` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#0D1126` }
  })), /* @__PURE__ */ import_react43.default.createElement("path", {
    style: { fill: `url(#SVGID_00000179647521726871257740000015064218755421354396_)` },
    d: "M134.3,187.3c0,5.2,4,9.5,9.2,9.6\n        c5.1,0,9.1-4.2,9.1-9.2c0-0.2,0-0.4,0-0.6c-0.2-5.2-4.4-9.3-9.6-9.4C137.9,178.1,134.1,182.3,134.3,187.3z"
  }), /* @__PURE__ */ import_react43.default.createElement("linearGradient", {
    id: "SVGID_00000102512321202755739380000006902697473436652699_",
    gradientUnits: "userSpaceOnUse",
    x1: "11302.877",
    y1: "339.0115",
    x2: "11321.7012",
    y2: "339.0115",
    gradientTransform: "matrix(-1 0 0 -1 11484.75 400)"
  }, /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "0",
    style: { stopColor: `#E2107B` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#301748` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#0D1126` }
  })), /* @__PURE__ */ import_react43.default.createElement("path", {
    style: { fill: `url(#SVGID_00000102512321202755739380000006902697473436652699_)` },
    d: "M173,70c5.6,0,8.9-3.6,8.8-9.2\n        c-0.3-4.8-4.2-8.7-9.1-8.9c-4.1,0-9.7,5.2-9.8,9.1C163.3,66.3,167.8,70.3,173,70z"
  }), /* @__PURE__ */ import_react43.default.createElement("linearGradient", {
    id: "SVGID_00000039129237823542455810000013466356786325873588_",
    gradientUnits: "userSpaceOnUse",
    x1: "11411.9697",
    y1: "247.7285",
    x2: "11428.959",
    y2: "247.7285",
    gradientTransform: "matrix(-1 0 0 -1 11484.75 400)"
  }, /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "0",
    style: { stopColor: `#E2107B` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#301748` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#0D1126` }
  })), /* @__PURE__ */ import_react43.default.createElement("path", {
    style: { fill: `url(#SVGID_00000039129237823542455810000013466356786325873588_)` },
    d: "M72.7,152.2c0.2-4.4-3.2-8.2-7.6-8.4\n        c-0.3,0-0.5,0-0.8,0c-4.6,0.4-8.3,4.2-8.5,8.8c0.3,4.5,4,8,8.5,8.2c4.5,0.2,8.3-3.4,8.5-7.9C72.8,152.6,72.8,152.4,72.7,152.2z"
  }), /* @__PURE__ */ import_react43.default.createElement("linearGradient", {
    id: "SVGID_00000057129531663735334810000000943885206532706221_",
    gradientUnits: "userSpaceOnUse",
    x1: "11110.2441",
    y1: "98.411",
    x2: "11261.5781",
    y2: "156.7504",
    gradientTransform: "matrix(-1 0 0 -1 11484.75 400)"
  }, /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "0",
    style: { stopColor: `#0D1126` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "0",
    style: { stopColor: `#301748` }
  }), /* @__PURE__ */ import_react43.default.createElement("stop", {
    offset: "1",
    style: { stopColor: `#E2107B` }
  })), /* @__PURE__ */ import_react43.default.createElement("path", {
    style: { fill: `url(#SVGID_00000057129531663735334810000000943885206532706221_)` },
    d: "M280.6,326.3c33.2,1.5,61-28.6,61.2-59.8\n        c0.7-33.6-26-61.5-59.7-62.2c-0.6,0-1.2,0-1.9,0c-32.9,0.2-60,27.1-60.1,62.6C220,296,248.4,328.3,280.6,326.3z"
  })));
  var stellaswap_default = StellaSwapIcon;

  // src/searchbar/icons/solar.flare.tsx
  var import_react44 = __toESM(require_react());
  var SolarFlareIcon = ({ height, width }) => /* @__PURE__ */ import_react44.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 400 400"
  }, /* @__PURE__ */ import_react44.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react44.default.createElement("linearGradient", {
    id: "SVGID_1_",
    gradientUnits: "userSpaceOnUse",
    x1: "339.4755",
    y1: "339.4754",
    x2: "60.5245",
    y2: "60.5244"
  }, /* @__PURE__ */ import_react44.default.createElement("stop", {
    offset: "0",
    style: { stopColor: "#FF288B" }
  }), /* @__PURE__ */ import_react44.default.createElement("stop", {
    offset: "1",
    style: { stopColor: "#FFCF90" }
  })), /* @__PURE__ */ import_react44.default.createElement("path", {
    style: { fill: `url(#SVGID_1_)` },
    d: "M200,2.8C91.1,2.8,2.8,91.1,2.8,200S91.1,397.2,200,397.2c108.9,0,197.2-88.3,197.2-197.2S308.9,2.8,200,2.8z\n        M370.2,200c0,17-2.5,33.4-7.2,48.9l-83.6-36.2l6.9-6.9l83.6-15.9C370.1,193.2,370.2,196.6,370.2,200z M29.8,200\n        c0-3.3,0.1-6.6,0.3-9.9l83.8,16l6.3,6.3l-83.4,36.1C32.3,233.1,29.8,216.8,29.8,200z M126.9,181l-93.1-17.7\n        c4.1-18.7,11.4-36.3,21.1-52.2l79.8,62.1L126.9,181z M146.1,200l53.9-53.9l53.9,53.9L200,253.9L146.1,200z M273,180.8l-8.1-8.1\n        l79.9-62.2c9.9,16,17.2,33.7,21.4,52.6L273,180.8z M213,120.9V30.3c18.5,1.4,36.2,5.7,52.5,12.6l-48.1,82.3L213,120.9z M186,121.9\n        l-4,4l-48.3-82.7c16.3-6.9,33.9-11.3,52.3-12.9V121.9z M328.6,88.7l-83.1,64.7l-8.4-8.4l52.4-89.7\n        C304.2,64.5,317.4,75.7,328.6,88.7z M109.6,55.9l52.5,89.9l-8.2,8.2l-83-64.7C82.1,76.3,95.1,65,109.6,55.9z M200,370.2\n        c-67.5,0-125.9-39.4-153.4-96.5l94.2-40.8l59.2,59.2l58.9-58.9l94.3,40.9C325.6,330.9,267.3,370.2,200,370.2z"
  })));
  var solar_flare_default = SolarFlareIcon;

  // src/searchbar/icons/mdex.tsx
  var import_react45 = __toESM(require_react());
  var MdexIcon = ({ height, width }) => /* @__PURE__ */ import_react45.default.createElement(abstract_default, {
    height: height != null ? height : 16,
    width: width != null ? width : 16,
    viewBox: "0 0 12 11"
  }, /* @__PURE__ */ import_react45.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react45.default.createElement("path", {
    d: "M4.18999 3.23002C4.70999 3.71002 5.10999 4.08002 5.54999 4.49002C3.66999 5.76002 5.41999 7.81003 6.83999 6.61002C7.29999 6.20003 7.32999 5.49002 6.90999 5.04002C6.87999 5.00002 6.83999 4.97003 6.80999 4.94002C5.80999 4.02002 4.79999 3.10002 3.79999 2.18002C3.35999 1.69002 2.60999 1.66002 2.11999 2.10002C1.83999 2.35002 1.69999 2.73002 1.72999 3.10002C1.72999 5.50002 1.77999 7.91003 1.72999 10.31C0.899992 10.43 0.129992 9.86002 0.00999174 9.03002C-8.25524e-06 8.93002 -0.0100083 8.83002 -8.25524e-06 8.73002C0.00999174 6.77002 -0.0200083 4.81002 0.0199917 2.87002C0.0499917 1.26002 1.37999 -0.0299754 2.98999 2.45594e-05C3.72999 0.0100246 4.42999 0.300025 4.95999 0.810025C6.04999 1.83002 7.09999 2.89002 8.21999 3.86002C9.25999 5.07002 9.14999 6.88002 7.98999 7.96002C4.67999 10.68 0.949992 5.99002 4.18999 3.23002Z",
    fill: "white"
  }), /* @__PURE__ */ import_react45.default.createElement("path", {
    d: "M7.39996 2.54002C6.96996 2.15002 6.58996 1.81002 6.20996 1.46002C7.59996 -0.989979 11.76 -0.039979 11.72 2.83002C11.75 4.83002 11.72 6.82002 11.69 8.82002C11.68 9.63002 11.01 10.28 10.2 10.27C10.13 10.27 10.06 10.27 9.98996 10.25C9.98996 7.92002 9.99996 5.58002 10.03 3.25002C10.12 2.65002 9.79996 2.06002 9.23996 1.82002C8.44996 1.46002 7.92996 2.02002 7.38996 2.54002H7.39996Z",
    fill: "white"
  })));
  var mdex_default = MdexIcon;

  // src/searchbar/tokenSearch/Logo.tsx
  var Logo = ({
    label,
    width,
    height,
    grayscaleFilter
  }) => {
    let result;
    switch (label) {
      case "bsc":
        result = /* @__PURE__ */ import_react46.default.createElement(bsc_default, {
          width,
          height
        });
        break;
      case "avalanche":
        result = /* @__PURE__ */ import_react46.default.createElement(avalanche_default, {
          width,
          height
        });
        break;
      case "kyberdmm":
        result = /* @__PURE__ */ import_react46.default.createElement(kyber_default, {
          width,
          height
        });
        break;
      case "pangolin":
        result = /* @__PURE__ */ import_react46.default.createElement(pangolin_default, {
          width,
          height
        });
        break;
      case "sushiswap":
        result = /* @__PURE__ */ import_react46.default.createElement(sushi_default, {
          width,
          height
        });
        break;
      case "traderjoe":
        result = /* @__PURE__ */ import_react46.default.createElement(trader_default, {
          width,
          height
        });
        break;
      case "mdex":
        result = /* @__PURE__ */ import_react46.default.createElement(mdex_default, {
          width,
          height
        });
        break;
      case "Select All":
        result = /* @__PURE__ */ import_react46.default.createElement(import_react46.default.Fragment, null);
        break;
      case "moonbeam":
        result = /* @__PURE__ */ import_react46.default.createElement(moonbeam_default, {
          width,
          height
        });
        break;
      case "moonriver":
        result = /* @__PURE__ */ import_react46.default.createElement(moonriver_default, {
          width,
          height
        });
        break;
      case "apeswap":
        result = /* @__PURE__ */ import_react46.default.createElement(apeswap_default, {
          width,
          height
        });
        break;
      case "babyswap":
        result = /* @__PURE__ */ import_react46.default.createElement(babyswap_default, {
          width,
          height
        });
        break;
      case "biswap":
        result = /* @__PURE__ */ import_react46.default.createElement(biswap_default, {
          width,
          height
        });
        break;
      case "ellipsis.finance":
        result = /* @__PURE__ */ import_react46.default.createElement(ellipsis_finance_default, {
          width,
          height
        });
        break;
      case "pancakeswap":
        result = /* @__PURE__ */ import_react46.default.createElement(pancake_default, {
          width,
          height
        });
        break;
      case "safeswap":
        result = /* @__PURE__ */ import_react46.default.createElement(safeswap_default, {
          width,
          height
        });
        break;
      case "baguette":
        result = /* @__PURE__ */ import_react46.default.createElement(baguette_default, {
          width,
          height
        });
        break;
      case "canary":
        result = /* @__PURE__ */ import_react46.default.createElement(canary_default, {
          width,
          height
        });
        break;
      case "complusnetwork":
        result = /* @__PURE__ */ import_react46.default.createElement(complus_network_default, {
          width,
          height
        });
        break;
      case "elkfinance":
        result = /* @__PURE__ */ import_react46.default.createElement(elk_finance_default, {
          width,
          height
        });
        break;
      case "lydiafinance":
        result = /* @__PURE__ */ import_react46.default.createElement(lydia_finance_default, {
          width,
          height
        });
        break;
      case "oliveswap":
        result = /* @__PURE__ */ import_react46.default.createElement(oliveswap_default, {
          width,
          height
        });
        break;
      case "pandaswap":
        result = /* @__PURE__ */ import_react46.default.createElement(pandaswap_default, {
          width,
          height
        });
        break;
      case "yetiswap":
        result = /* @__PURE__ */ import_react46.default.createElement(yetiswap_default, {
          width,
          height
        });
        break;
      case "zeroexchange":
        result = /* @__PURE__ */ import_react46.default.createElement(zero_exchange_default, {
          width,
          height
        });
        break;
      case "beamswap":
        result = /* @__PURE__ */ import_react46.default.createElement(beamswap_default, {
          width,
          height
        });
        break;
      case "solarflare":
        result = /* @__PURE__ */ import_react46.default.createElement(solar_flare_default, {
          width,
          height
        });
        break;
      case "stellaswap":
        result = /* @__PURE__ */ import_react46.default.createElement(stellaswap_default, {
          width,
          height
        });
        break;
      case "solarbeam":
        result = /* @__PURE__ */ import_react46.default.createElement(solarbeam_default, {
          width,
          height
        });
        break;
      default:
        result = /* @__PURE__ */ import_react46.default.createElement(default_default, {
          width,
          height
        });
        break;
    }
    return /* @__PURE__ */ import_react46.default.createElement("div", {
      style: { filter: `grayscale(${grayscaleFilter})` }
    }, result);
  };

  // src/searchbar/tokenSearch/helpers/firstAndLast.ts
  var firstAndLast = (str, chars = 8) => str && str.slice(0, chars) + "..." + str.slice(-chars);

  // src/searchbar/tokenSearch/helpers/intToWords.ts
  function intToWords(int) {
    if (typeof int !== "number") {
      int = Number(int);
    }
    if (isNaN(int)) {
      return "?";
    }
    if (int < 1e6) {
      return "$" + Math.round(int).toLocaleString();
    }
    if (int < 1e9) {
      return "$" + Math.round(int / 1e5) / 10 + " Million";
    }
    return "$" + Math.round(int / 1e8) / 10 + " Billion";
  }

  // src/searchbar/icons/down.tsx
  var import_react47 = __toESM(require_react());
  var DownIcon = ({ height, width }) => /* @__PURE__ */ import_react47.default.createElement(abstract_default, {
    height: height != null ? height : 7,
    width: width != null ? width : 5,
    viewBox: "0 0 7 5"
  }, /* @__PURE__ */ import_react47.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react47.default.createElement("path", {
    d: "M1 1L3.49449 3.5L6 1",
    stroke: "#7A808A",
    strokeLinecap: "round",
    transform: "translate(0)"
  })));
  var down_default = DownIcon;

  // src/searchbar/icons/up.tsx
  var import_react48 = __toESM(require_react());
  var UpIcon = ({ height, width }) => /* @__PURE__ */ import_react48.default.createElement(abstract_default, {
    height: height != null ? height : 7,
    width: width != null ? width : 4,
    viewBox: "0 0 7 4"
  }, /* @__PURE__ */ import_react48.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react48.default.createElement("path", {
    d: "M6 3.5L3.50551 1L1 3.5",
    stroke: "#7A808A",
    strokeLinecap: "round",
    transform: "translate(0)"
  })));
  var up_default = UpIcon;

  // src/searchbar/tokenSearch/ResultDetail.tsx
  var imageSize = 26;
  var StyledDetailList = styled_components_esm_default.div`
  ${({ styleOverrides }) => {
    var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
    return `
    display: ${((_a = styleOverrides == null ? void 0 : styleOverrides.container) == null ? void 0 : _a.display) || "grid"};
    grid-gap: 10px;
    align-items: ${((_b = styleOverrides == null ? void 0 : styleOverrides.container) == null ? void 0 : _b.alignItems) || "center"};    
    justify-content: space-between;
    padding: ${((_c = styleOverrides == null ? void 0 : styleOverrides.container) == null ? void 0 : _c.padding) || "5px 0"};    
    background: transparent;
    border-bottom: ${((_d = styleOverrides == null ? void 0 : styleOverrides.container) == null ? void 0 : _d.borderbottom) || "1px solid #474F5C"};    
    grid-auto-flow: row;
    grid-template-columns: 
      minmax(550px, 5.5fr)
      minmax(100px, 1fr)
      minmax(130px, 1.3fr)
      minmax(130px, 1.3fr)
      minmax(60px, 250px);
    position: relative;
    font-size: ${((_e2 = styleOverrides == null ? void 0 : styleOverrides.token) == null ? void 0 : _e2.fontSize) || "13px"};
    color: ${((_f = styleOverrides == null ? void 0 : styleOverrides.token) == null ? void 0 : _f.color) || "#B4BBC7"};

    & .pair-token-info {
      display: grid;
      grid-template-columns: 150px 30px 150px;
      grid-gap: 10px;
    }

    .token {      
      grid-template-columns: 16px 100px; 
      padding: ${((_g = styleOverrides == null ? void 0 : styleOverrides.token) == null ? void 0 : _g.padding) || "0 5px"};  
      .address {
        position: relative;
        padding-left: 5px;
        > span {
          display: none;
          font-size: 12px;
          margin-top: 5px;
          span {
            color: ${((_h = styleOverrides == null ? void 0 : styleOverrides.token) == null ? void 0 : _h.color) || "#B4BBC7"};
          }
        }
      } 
    }

    &.active {
      background: #474F5C;
      border-radius: ${((_i = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _i.radius) || "4px"};
      color: white;
      padding: 24px 0;      
      grid-template-columns: 
        minmax(550px, 5.5fr)
        minmax(100px, 1fr)
        minmax(130px, 1.3fr)
        minmax(130px, 1.3fr)
        minmax(250px, 2.5fr);

      .pair-token-info {
        display: flex;
        align-items: center;
      }

      .token {
        font-weight: ${((_j = styleOverrides == null ? void 0 : styleOverrides.token) == null ? void 0 : _j.fontWeight) || "600"};      
        .address {
          font-size: 12px;
          > span {
            display: block;
          }
        }
        svg {
          width: 26px;
          height: 26px;
          margin-top: -10px;
        }
      }
    }
    .capitalize {
      text-transform: capitalize;
    }
    .text-white {
      color: white;
    }
    .icon-label {
      display: flex;   
      align-items: center;
      > span {
        padding-left: 5px;
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;  
        flex: 1;
      }
    }
    .text-line-1 {
      display: block;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;  
      flex: 1;
    }
    .flex-center {
      display: flex;
      align-items: center;
    }  
    .flex-1 {
       flex: 1;
    }
    .gap-5 {
      gap: 20px;
    }
    .gap-2 {
      gap: 8px;
    }
    & .detail {
      padding: ${((_k = styleOverrides == null ? void 0 : styleOverrides.detail) == null ? void 0 : _k.padding) || "3px"};
    }
    
    > button {      
      display: flex;
      align-items: center;
      justify-content: center;
      justify-self: right;
      border-color: ${((_l = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _l.borderColor) || "#474F5C"};      
      background-color: ${((_m = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _m.backgroundColor) || "#474F5C"};      
      color: ${((_n = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _n.color) || "#7A808A"};      
      border-radius: ${((_o = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _o.borderRadius) || "4px"};     
      
      border-width: 0;      
      cursor: pointer;
      padding: ${((_p = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _p.padding) || "6px 8px !important"};
      width: ${((_q = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _q.width) || "auto"};
      &.down {
        position: absolute;
        top: 0;
        right: 0;
        background: transparent;
      }
      &:hover {
        background-color: ${((_r = styleOverrides == null ? void 0 : styleOverrides.button) == null ? void 0 : _r.hoverBackColor) || "#232C38"};      
      }    
    }
    .actions {
      display: flex;
      flex: 1;
      gap: 12px;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      padding: 10px;
    }
    &:not(.active):hover {
      cursor: pointer; 
      color: rgb(193,255,0);
      .token, .pair, button, strong {
        color: rgb(193,255,0);
      }      
    }
  `;
  }}

  @media (max-width: 768px) {
    &, &.active {
      grid-template-columns: 
        minmax(550px, 5.5fr)
        minmax(100px, 1fr)
        minmax(130px, 1.3fr)
        minmax(130px, 1.3fr)
        minmax(60px, 0.6fr);
    }
    
    .actions {
      grid-column: 2 / -1;
      justify-content: flex-end;
    }
  }
`;
  var StyledAction = styled_components_esm_default.div`
  cursor: pointer;
  padding: 10;
`;
  var Action = (props) => {
    const { component, detail } = props;
    const Component = component;
    return /* @__PURE__ */ import_react49.default.createElement(StyledAction, null, /* @__PURE__ */ import_react49.default.createElement(Component, {
      detail
    }));
  };
  var ResultDetail = (props) => {
    var _a, _b;
    const { index, suggestions, handleDetail, currentIndex, logoIcons } = props;
    const renderProps = (0, import_react49.useContext)(TokenSearch_default);
    const { customActions, customTokenDetail } = renderProps;
    const selectedPair = suggestions[index];
    const tokenImage = (token) => {
      if (token == null ? void 0 : token.image)
        return /* @__PURE__ */ import_react49.default.createElement("img", {
          alt: token == null ? void 0 : token.symbol,
          src: token == null ? void 0 : token.image,
          style: { borderRadius: "50%" },
          width: imageSize
        });
      else
        return /* @__PURE__ */ import_react49.default.createElement(default_default, null);
    };
    return /* @__PURE__ */ import_react49.default.createElement(StyledDetailList, {
      styleOverrides: customTokenDetail == null ? void 0 : customTokenDetail.list,
      onClick: () => currentIndex !== index ? handleDetail(index) : "",
      className: currentIndex === index ? "active" : ""
    }, /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "pair-token-info"
    }, /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "token icon-label"
    }, tokenImage(selectedPair.token0), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "flex-1 address text-line-1"
    }, /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "text-line-1"
    }, selectedPair.token0.name), /* @__PURE__ */ import_react49.default.createElement("span", {
      className: "text-line-1"
    }, /* @__PURE__ */ import_react49.default.createElement("span", null, "Address:"), " ", /* @__PURE__ */ import_react49.default.createElement("strong", null, firstAndLast(selectedPair.token0.address))))), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "gap-5"
    }, "/"), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "token icon-label"
    }, tokenImage(selectedPair.token1), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "flex-1 address text-line-1"
    }, /* @__PURE__ */ import_react49.default.createElement("div", null, selectedPair.token1.name), /* @__PURE__ */ import_react49.default.createElement("span", null, /* @__PURE__ */ import_react49.default.createElement("span", null, "Address:"), " ", /* @__PURE__ */ import_react49.default.createElement("strong", null, firstAndLast(selectedPair.token1.address)))))), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "logo icon-label"
    }, (_a = logoIcons[selectedPair.network]) != null ? _a : /* @__PURE__ */ import_react49.default.createElement(Logo, {
      label: selectedPair.network,
      width: 12,
      height: 12
    }), /* @__PURE__ */ import_react49.default.createElement("span", {
      className: "capitalize"
    }, selectedPair.network)), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "logo icon-label"
    }, (_b = logoIcons[selectedPair.exchange]) != null ? _b : /* @__PURE__ */ import_react49.default.createElement(Logo, {
      label: selectedPair.exchange,
      width: 12,
      height: 12
    }), /* @__PURE__ */ import_react49.default.createElement("span", {
      className: "capitalize"
    }, selectedPair.exchange)), /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "flex-center"
    }, "Volume: ", /* @__PURE__ */ import_react49.default.createElement("strong", {
      className: "text-white"
    }, intToWords(selectedPair.volumeUSD))), /* @__PURE__ */ import_react49.default.createElement("button", {
      onClick: () => handleDetail(currentIndex === index ? null : index),
      className: currentIndex === index ? "down" : "up"
    }, currentIndex !== index ? /* @__PURE__ */ import_react49.default.createElement(import_react49.default.Fragment, null, /* @__PURE__ */ import_react49.default.createElement("span", null, "Details "), /* @__PURE__ */ import_react49.default.createElement(down_default, {
      width: 7,
      height: 7
    })) : /* @__PURE__ */ import_react49.default.createElement(import_react49.default.Fragment, null, /* @__PURE__ */ import_react49.default.createElement("span", null, "Close "), /* @__PURE__ */ import_react49.default.createElement(up_default, {
      height: 7,
      width: 7
    }))), currentIndex === index && /* @__PURE__ */ import_react49.default.createElement("div", {
      className: "actions"
    }, customActions && customActions.map((action) => /* @__PURE__ */ import_react49.default.createElement(Action, {
      key: `action-${action.index}`,
      component: action.component,
      detail: selectedPair
    }))));
  };
  var ResultDetail_default = ResultDetail;

  // src/searchbar/tokenSearch/SearchResult.tsx
  var StyledResult = styled_components_esm_default.div`
  background-color: inherit;
  margin-left: auto;
  margin-right: auto;
  position: relative;
`;
  var StyledLoading = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    position: relative;
    display: flex;
    justify-content: center;  
    margin: 10px;
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "white"};
    font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "12px"};      
  `}
`;
  var StyledResultTitle = styled_components_esm_default.div`
  ${({ styleOverrides }) => `    
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#fff"};
    font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "12px"};      
    padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "7px 14px 2px;"};      
    margin: ${(styleOverrides == null ? void 0 : styleOverrides.margin) || "0"};      
    > span {
      font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize2) || "7px"};      
    }
  `}
`;
  var StyledResultContent = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "14px"};
    background: ${(styleOverrides == null ? void 0 : styleOverrides.background) || "#00070E"};
    border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderRadius) || "4px"};        
    width: ${(styleOverrides == null ? void 0 : styleOverrides.width) || "100%"};
    height: ${(styleOverrides == null ? void 0 : styleOverrides.height) || "300px"};
    border: ${(styleOverrides == null ? void 0 : styleOverrides.border) || "1px solid grey"};   
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#FFF"};
    display: ${(styleOverrides == null ? void 0 : styleOverrides.display) || "block"};   
    border-color: ${(styleOverrides == null ? void 0 : styleOverrides.borderColor) || "#474F5C"};  
    border-style: ${(styleOverrides == null ? void 0 : styleOverrides.borderStyle) || "solid"};  
    border-width: ${(styleOverrides == null ? void 0 : styleOverrides.borderWidth) || "1px"};      
    font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "15px"};      
    font-family: ${(styleOverrides == null ? void 0 : styleOverrides.fontFamily) || "'Fira Code', monospace"};  
    overflow: auto;
  `}

  & .result-content-responsive {
    width: fit-content;
    min-width: 100%;
  }

  & .header {
    display: grid;
    grid-gap: 10px;
    grid-template-columns:
      minmax(550px, 5.5fr)
      minmax(100px, 1fr)
      minmax(130px, 1.3fr)
      minmax(130px, 1.3fr)
      minmax(60px, 250px);
    border-bottom: 1px solid #474f5c;
    color: #b4bbc7;
    font-size: 11px;
    font-weight: bold;
    padding-bottom: 10px;

    div {
      overflow: hidden;
      text-overflow: ellipsis;
    }

    > :last-child {
      grid-column: 4 / -1;
    }
  }
`;
  var SearchResult = (props) => {
    var _a;
    const dispatch = useDispatch();
    const renderProps = (0, import_react50.useContext)(TokenSearch_default);
    const { customResult, customLoading } = renderProps;
    const { suggestions, searchText, isLoading, suggestionRendered } = useSelector((state) => state);
    const [currentIndex, setCurrentIndex] = (0, import_react50.useState)(-1);
    const hasNextPage = (0, import_react50.useMemo)(() => suggestionRendered.length < suggestions.length, [suggestions, suggestionRendered]);
    const [sentryRef] = react_infinite_scroll_hook_esm_default({
      loading: isLoading,
      hasNextPage,
      onLoadMore: () => dispatch(loadMore())
    });
    if (props.loading) {
      const loadingTitle = (customLoading == null ? void 0 : customLoading.loadingTitle) ? customLoading.loadingTitle : "Searching...";
      return /* @__PURE__ */ import_react50.default.createElement(StyledLoading, {
        styleOverrides: customLoading
      }, loadingTitle);
    }
    const notFoundTitle = (customLoading == null ? void 0 : customLoading.notFoundTitle) ? customLoading.notFoundTitle : "No results found";
    const handleClose = () => {
      dispatch(setViewResult(false));
    };
    const logoIcons = {};
    (_a = renderProps.networks) == null ? void 0 : _a.forEach((network) => {
      var _a2;
      logoIcons[network.id] = network.icon;
      (_a2 = network.exchanges) == null ? void 0 : _a2.forEach((exchange) => {
        logoIcons[exchange.name] = exchange.icon;
      });
    });
    return /* @__PURE__ */ import_react50.default.createElement(StyledResult, null, /* @__PURE__ */ import_react50.default.createElement(StyledResultTitle, {
      styleOverrides: customResult == null ? void 0 : customResult.title
    }, /* @__PURE__ */ import_react50.default.createElement("div", null, "Search Results ", /* @__PURE__ */ import_react50.default.createElement("span", null, "(", suggestions.length, " Results Found)")), /* @__PURE__ */ import_react50.default.createElement("button", {
      onClick: handleClose
    }, "Close\xA0", /* @__PURE__ */ import_react50.default.createElement(unchecked_default, {
      width: 7,
      height: 7
    }))), /* @__PURE__ */ import_react50.default.createElement(StyledResultContent, {
      styleOverrides: customResult == null ? void 0 : customResult.content
    }, /* @__PURE__ */ import_react50.default.createElement("div", {
      className: "result-content-responsive"
    }, /* @__PURE__ */ import_react50.default.createElement("div", {
      className: "header"
    }, /* @__PURE__ */ import_react50.default.createElement("div", null, "Pair"), /* @__PURE__ */ import_react50.default.createElement("div", null, "Network"), /* @__PURE__ */ import_react50.default.createElement("div", null, "Exchange"), /* @__PURE__ */ import_react50.default.createElement("div", null, "Details")), suggestionRendered.map((suggestions2, index) => /* @__PURE__ */ import_react50.default.createElement(ResultDetail_default, {
      suggestions: suggestionRendered,
      index,
      key: `token-detail-${index}`,
      currentIndex,
      handleDetail: setCurrentIndex,
      logoIcons
    })), !!searchText && !suggestionRendered.length && /* @__PURE__ */ import_react50.default.createElement(StyledLoading, {
      styleOverrides: customLoading
    }, notFoundTitle), hasNextPage && /* @__PURE__ */ import_react50.default.createElement("div", {
      ref: sentryRef
    }, "loading...."))));
  };
  var SearchResult_default = SearchResult;

  // src/searchbar/tokenSearch/SearchFilters.tsx
  var import_react57 = __toESM(require_react());
  var import_lodash5 = __toESM(require_lodash());

  // node_modules/react-accessible-accordion/dist/es/index.js
  var import_react51 = __toESM(require_react());
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i3 = 0; i3 < props.length; i3++) {
      var descriptor = props[i3];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _defineProperty2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends3() {
    _extends3 = Object.assign || function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function ownKeys2(object2, enumerableOnly) {
    var keys2 = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
        });
      keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread22(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      if (i3 % 2) {
        ownKeys2(Object(source), true).forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o3) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o4) {
      return o4.__proto__ || Object.getPrototypeOf(o4);
    };
    return _getPrototypeOf(o3);
  }
  function _setPrototypeOf(o3, p2) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o4, p3) {
      o4.__proto__ = p3;
      return o4;
    };
    return _setPrototypeOf(o3, p2);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e3) {
      return false;
    }
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose2(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _slicedToArray(arr, i3) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i3) || _unsupportedIterableToArray(arr, i3) || _nonIterableRest();
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
      return Array.from(iter);
  }
  function _iterableToArrayLimit(arr, i3) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e2 = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i3 && _arr.length === i3)
          break;
      }
    } catch (err) {
      _d = true;
      _e2 = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e2;
      }
    }
    return _arr;
  }
  function _unsupportedIterableToArray(o3, minLen) {
    if (!o3)
      return;
    if (typeof o3 === "string")
      return _arrayLikeToArray(o3, minLen);
    var n3 = Object.prototype.toString.call(o3).slice(8, -1);
    if (n3 === "Object" && o3.constructor)
      n3 = o3.constructor.name;
    if (n3 === "Map" || n3 === "Set")
      return Array.from(o3);
    if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
      return _arrayLikeToArray(o3, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
      arr2[i3] = arr[i3];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var AccordionStore = function AccordionStore2(_ref) {
    var _this = this;
    var _ref$expanded = _ref.expanded, _expanded = _ref$expanded === void 0 ? [] : _ref$expanded, _ref$allowMultipleExp = _ref.allowMultipleExpanded, allowMultipleExpanded = _ref$allowMultipleExp === void 0 ? false : _ref$allowMultipleExp, _ref$allowZeroExpande = _ref.allowZeroExpanded, allowZeroExpanded = _ref$allowZeroExpande === void 0 ? false : _ref$allowZeroExpande;
    _classCallCheck(this, AccordionStore2);
    _defineProperty2(this, "expanded", void 0);
    _defineProperty2(this, "allowMultipleExpanded", void 0);
    _defineProperty2(this, "allowZeroExpanded", void 0);
    _defineProperty2(this, "toggleExpanded", function(uuid) {
      if (_this.isItemDisabled(uuid)) {
        return _this;
      }
      var isExpanded = _this.isItemExpanded(uuid);
      if (!isExpanded) {
        return _this.augment({
          expanded: _this.allowMultipleExpanded ? [].concat(_toConsumableArray(_this.expanded), [uuid]) : [uuid]
        });
      } else {
        return _this.augment({
          expanded: _this.expanded.filter(function(expandedUuid) {
            return expandedUuid !== uuid;
          })
        });
      }
    });
    _defineProperty2(this, "isItemDisabled", function(uuid) {
      var isExpanded = _this.isItemExpanded(uuid);
      var isOnlyOneExpanded = _this.expanded.length === 1;
      return Boolean(isExpanded && !_this.allowZeroExpanded && isOnlyOneExpanded);
    });
    _defineProperty2(this, "isItemExpanded", function(uuid) {
      return _this.expanded.indexOf(uuid) !== -1;
    });
    _defineProperty2(this, "getPanelAttributes", function(uuid, dangerouslySetExpanded) {
      var expanded = dangerouslySetExpanded !== null && dangerouslySetExpanded !== void 0 ? dangerouslySetExpanded : _this.isItemExpanded(uuid);
      return {
        role: _this.allowMultipleExpanded ? void 0 : "region",
        "aria-hidden": _this.allowMultipleExpanded ? !expanded : void 0,
        "aria-labelledby": _this.getButtonId(uuid),
        id: _this.getPanelId(uuid),
        hidden: expanded ? void 0 : true
      };
    });
    _defineProperty2(this, "getHeadingAttributes", function() {
      return {
        role: "heading"
      };
    });
    _defineProperty2(this, "getButtonAttributes", function(uuid, dangerouslySetExpanded) {
      var expanded = dangerouslySetExpanded !== null && dangerouslySetExpanded !== void 0 ? dangerouslySetExpanded : _this.isItemExpanded(uuid);
      var disabled = _this.isItemDisabled(uuid);
      return {
        id: _this.getButtonId(uuid),
        "aria-disabled": disabled,
        "aria-expanded": expanded,
        "aria-controls": _this.getPanelId(uuid),
        role: "button",
        tabIndex: 0
      };
    });
    _defineProperty2(this, "getPanelId", function(uuid) {
      return "accordion__panel-".concat(uuid);
    });
    _defineProperty2(this, "getButtonId", function(uuid) {
      return "accordion__heading-".concat(uuid);
    });
    _defineProperty2(this, "augment", function(args) {
      return new AccordionStore2(_objectSpread22({
        expanded: _this.expanded,
        allowMultipleExpanded: _this.allowMultipleExpanded,
        allowZeroExpanded: _this.allowZeroExpanded
      }, args));
    });
    this.expanded = _expanded;
    this.allowMultipleExpanded = allowMultipleExpanded;
    this.allowZeroExpanded = allowZeroExpanded;
  };
  var Context = /* @__PURE__ */ (0, import_react51.createContext)(null);
  var Provider2 = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits(Provider4, _React$PureComponent);
    var _super = _createSuper(Provider4);
    function Provider4() {
      var _this;
      _classCallCheck(this, Provider4);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty2(_assertThisInitialized(_this), "state", new AccordionStore({
        expanded: _this.props.preExpanded,
        allowMultipleExpanded: _this.props.allowMultipleExpanded,
        allowZeroExpanded: _this.props.allowZeroExpanded
      }));
      _defineProperty2(_assertThisInitialized(_this), "toggleExpanded", function(key) {
        _this.setState(function(state) {
          return state.toggleExpanded(key);
        }, function() {
          if (_this.props.onChange) {
            _this.props.onChange(_this.state.expanded);
          }
        });
      });
      _defineProperty2(_assertThisInitialized(_this), "isItemDisabled", function(key) {
        return _this.state.isItemDisabled(key);
      });
      _defineProperty2(_assertThisInitialized(_this), "isItemExpanded", function(key) {
        return _this.state.isItemExpanded(key);
      });
      _defineProperty2(_assertThisInitialized(_this), "getPanelAttributes", function(key, dangerouslySetExpanded) {
        return _this.state.getPanelAttributes(key, dangerouslySetExpanded);
      });
      _defineProperty2(_assertThisInitialized(_this), "getHeadingAttributes", function() {
        return _this.state.getHeadingAttributes();
      });
      _defineProperty2(_assertThisInitialized(_this), "getButtonAttributes", function(key, dangerouslySetExpanded) {
        return _this.state.getButtonAttributes(key, dangerouslySetExpanded);
      });
      return _this;
    }
    _createClass(Provider4, [{
      key: "render",
      value: function render2() {
        var _this$state = this.state, allowZeroExpanded = _this$state.allowZeroExpanded, allowMultipleExpanded = _this$state.allowMultipleExpanded;
        return /* @__PURE__ */ (0, import_react51.createElement)(Context.Provider, {
          value: {
            allowMultipleExpanded,
            allowZeroExpanded,
            toggleExpanded: this.toggleExpanded,
            isItemDisabled: this.isItemDisabled,
            isItemExpanded: this.isItemExpanded,
            getPanelAttributes: this.getPanelAttributes,
            getHeadingAttributes: this.getHeadingAttributes,
            getButtonAttributes: this.getButtonAttributes
          }
        }, this.props.children || null);
      }
    }]);
    return Provider4;
  }(import_react51.PureComponent);
  _defineProperty2(Provider2, "defaultProps", {
    allowMultipleExpanded: false,
    allowZeroExpanded: false
  });
  var Consumer = /* @__PURE__ */ function(_React$PureComponent2) {
    _inherits(Consumer3, _React$PureComponent2);
    var _super2 = _createSuper(Consumer3);
    function Consumer3() {
      var _this2;
      _classCallCheck(this, Consumer3);
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      _this2 = _super2.call.apply(_super2, [this].concat(args));
      _defineProperty2(_assertThisInitialized(_this2), "renderChildren", function(container) {
        return container ? _this2.props.children(container) : null;
      });
      return _this2;
    }
    _createClass(Consumer3, [{
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ (0, import_react51.createElement)(Context.Consumer, null, this.renderChildren);
      }
    }]);
    return Consumer3;
  }(import_react51.PureComponent);
  var Accordion = function Accordion2(_ref) {
    var _ref$className = _ref.className, className = _ref$className === void 0 ? "accordion" : _ref$className, allowMultipleExpanded = _ref.allowMultipleExpanded, allowZeroExpanded = _ref.allowZeroExpanded, onChange = _ref.onChange, preExpanded = _ref.preExpanded, rest = _objectWithoutProperties(_ref, ["className", "allowMultipleExpanded", "allowZeroExpanded", "onChange", "preExpanded"]);
    return /* @__PURE__ */ (0, import_react51.createElement)(Provider2, {
      preExpanded,
      allowMultipleExpanded,
      allowZeroExpanded,
      onChange
    }, /* @__PURE__ */ (0, import_react51.createElement)("div", _extends3({
      "data-accordion-component": "Accordion",
      className
    }, rest)));
  };
  var DisplayName;
  (function(DisplayName2) {
    DisplayName2["Accordion"] = "Accordion";
    DisplayName2["AccordionItem"] = "AccordionItem";
    DisplayName2["AccordionItemButton"] = "AccordionItemButton";
    DisplayName2["AccordionItemHeading"] = "AccordionItemHeading";
    DisplayName2["AccordionItemPanel"] = "AccordionItemPanel";
  })(DisplayName || (DisplayName = {}));
  var DisplayName$1 = DisplayName;
  var DEFAULT = 0;
  var counter = DEFAULT;
  function nextUuid() {
    var current = counter;
    counter = counter + 1;
    return "raa-".concat(current);
  }
  var idRegex = /[\u0009\u000a\u000c\u000d\u0020]/g;
  function assertValidHtmlId(htmlId) {
    if (htmlId === "" || idRegex.test(htmlId)) {
      console.error('uuid must be a valid HTML5 id but was given "'.concat(htmlId, '", ASCII whitespaces are forbidden'));
      return false;
    }
    return true;
  }
  var Context$1 = /* @__PURE__ */ (0, import_react51.createContext)(null);
  var Provider$1 = function Provider3(_ref) {
    var children = _ref.children, uuid = _ref.uuid, accordionContext = _ref.accordionContext, dangerouslySetExpanded = _ref.dangerouslySetExpanded;
    var toggleExpanded = function toggleExpanded2() {
      accordionContext.toggleExpanded(uuid);
    };
    var renderChildren = function renderChildren2(accordionContext2) {
      var expanded = dangerouslySetExpanded !== null && dangerouslySetExpanded !== void 0 ? dangerouslySetExpanded : accordionContext2.isItemExpanded(uuid);
      var disabled = accordionContext2.isItemDisabled(uuid);
      var panelAttributes = accordionContext2.getPanelAttributes(uuid, dangerouslySetExpanded);
      var headingAttributes = accordionContext2.getHeadingAttributes(uuid);
      var buttonAttributes = accordionContext2.getButtonAttributes(uuid, dangerouslySetExpanded);
      return /* @__PURE__ */ (0, import_react51.createElement)(Context$1.Provider, {
        value: {
          uuid,
          expanded,
          disabled,
          toggleExpanded,
          panelAttributes,
          headingAttributes,
          buttonAttributes
        }
      }, children);
    };
    return /* @__PURE__ */ (0, import_react51.createElement)(Consumer, null, renderChildren);
  };
  var ProviderWrapper = function ProviderWrapper2(props) {
    return /* @__PURE__ */ (0, import_react51.createElement)(Consumer, null, function(accordionContext) {
      return /* @__PURE__ */ (0, import_react51.createElement)(Provider$1, _extends3({}, props, {
        accordionContext
      }));
    });
  };
  var Consumer$1 = function Consumer2(_ref2) {
    var children = _ref2.children;
    var renderChildren = function renderChildren2(container) {
      return container ? children(container) : null;
    };
    return /* @__PURE__ */ (0, import_react51.createElement)(Context$1.Consumer, null, renderChildren);
  };
  var AccordionItem = function AccordionItem2(_ref) {
    var customUuid = _ref.uuid, dangerouslySetExpanded = _ref.dangerouslySetExpanded, _ref$className = _ref.className, className = _ref$className === void 0 ? "accordion__item" : _ref$className, activeClassName = _ref.activeClassName, rest = _objectWithoutProperties(_ref, ["uuid", "dangerouslySetExpanded", "className", "activeClassName"]);
    var _useState = (0, import_react51.useState)(nextUuid()), _useState2 = _slicedToArray(_useState, 1), instanceUuid = _useState2[0];
    var uuid = customUuid !== null && customUuid !== void 0 ? customUuid : instanceUuid;
    var renderChildren = function renderChildren2(itemContext) {
      var expanded = itemContext.expanded;
      var cx = expanded && activeClassName ? activeClassName : className;
      return /* @__PURE__ */ (0, import_react51.createElement)("div", _extends3({
        "data-accordion-component": "AccordionItem",
        className: cx
      }, rest));
    };
    assertValidHtmlId(uuid.toString());
    if (rest.id) {
      assertValidHtmlId(rest.id);
    }
    return /* @__PURE__ */ (0, import_react51.createElement)(ProviderWrapper, {
      uuid,
      dangerouslySetExpanded
    }, /* @__PURE__ */ (0, import_react51.createElement)(Consumer$1, null, renderChildren));
  };
  AccordionItem.displayName = DisplayName$1.AccordionItem;
  function getClosestAccordion(el) {
    return el && (el.matches('[data-accordion-component="Accordion"]') ? el : getClosestAccordion(el.parentElement));
  }
  function getSiblingButtons(item) {
    var parentAccordion = getClosestAccordion(item);
    return parentAccordion && Array.from(parentAccordion.querySelectorAll('[data-accordion-component="AccordionItemButton"]'));
  }
  function focusFirstSiblingOf(item) {
    var siblings = getSiblingButtons(item) || [];
    var first = siblings[0];
    if (first) {
      first.focus();
    }
  }
  function focusLastSiblingOf(item) {
    var siblings = getSiblingButtons(item) || [];
    var last = siblings[siblings.length - 1];
    if (last) {
      last.focus();
    }
  }
  function focusNextSiblingOf(item) {
    var siblings = getSiblingButtons(item) || [];
    var currentIndex = siblings.indexOf(item);
    if (currentIndex !== -1) {
      var next = siblings[currentIndex + 1];
      if (next) {
        next.focus();
      }
    }
  }
  function focusPreviousSiblingOf(item) {
    var siblings = getSiblingButtons(item) || [];
    var currentIndex = siblings.indexOf(item);
    if (currentIndex !== -1) {
      var previous = siblings[currentIndex - 1];
      if (previous) {
        previous.focus();
      }
    }
  }
  var keycodes = {
    END: "End",
    ENTER: "Enter",
    HOME: "Home",
    SPACE: " ",
    SPACE_DEPRECATED: "Spacebar",
    UP: "ArrowUp",
    DOWN: "ArrowDown",
    LEFT: "ArrowLeft",
    RIGHT: "ArrowRight"
  };
  var AccordionItemButton = function AccordionItemButton2(_ref) {
    var toggleExpanded = _ref.toggleExpanded, _ref$className = _ref.className, className = _ref$className === void 0 ? "accordion__button" : _ref$className, rest = _objectWithoutProperties(_ref, ["toggleExpanded", "className"]);
    var handleKeyPress = function handleKeyPress2(evt) {
      var keyCode = evt.key;
      if (keyCode === keycodes.ENTER || keyCode === keycodes.SPACE || keyCode === keycodes.SPACE_DEPRECATED) {
        evt.preventDefault();
        toggleExpanded();
      }
      if (evt.target instanceof HTMLElement) {
        switch (keyCode) {
          case keycodes.HOME: {
            evt.preventDefault();
            focusFirstSiblingOf(evt.target);
            break;
          }
          case keycodes.END: {
            evt.preventDefault();
            focusLastSiblingOf(evt.target);
            break;
          }
          case keycodes.LEFT:
          case keycodes.UP: {
            evt.preventDefault();
            focusPreviousSiblingOf(evt.target);
            break;
          }
          case keycodes.RIGHT:
          case keycodes.DOWN: {
            evt.preventDefault();
            focusNextSiblingOf(evt.target);
            break;
          }
        }
      }
    };
    if (rest.id) {
      assertValidHtmlId(rest.id);
    }
    return /* @__PURE__ */ (0, import_react51.createElement)("div", _extends3({
      className
    }, rest, {
      role: "button",
      tabIndex: 0,
      onClick: toggleExpanded,
      onKeyDown: handleKeyPress,
      "data-accordion-component": "AccordionItemButton"
    }));
  };
  var AccordionItemButtonWrapper = function AccordionItemButtonWrapper2(props) {
    return /* @__PURE__ */ (0, import_react51.createElement)(Consumer$1, null, function(itemContext) {
      var toggleExpanded = itemContext.toggleExpanded, buttonAttributes = itemContext.buttonAttributes;
      return /* @__PURE__ */ (0, import_react51.createElement)(AccordionItemButton, _extends3({
        toggleExpanded
      }, props, buttonAttributes));
    });
  };
  var defaultProps = {
    className: "accordion__heading",
    "aria-level": 3
  };
  var SPEC_ERROR = "AccordionItemButton may contain only one child element, which must be an instance of AccordionItemButton.\n\nFrom the WAI-ARIA spec (https://www.w3.org/TR/wai-aria-practices-1.1/#accordion):\n\n\u201CThe button element is the only element inside the heading element. That is, if there are other visually persistent elements, they are not included inside the heading element.\u201D\n\n";
  var AccordionItemHeading = /* @__PURE__ */ function(_React$PureComponent) {
    _inherits(AccordionItemHeading2, _React$PureComponent);
    var _super = _createSuper(AccordionItemHeading2);
    function AccordionItemHeading2() {
      var _this;
      _classCallCheck(this, AccordionItemHeading2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _defineProperty2(_assertThisInitialized(_this), "ref", void 0);
      _defineProperty2(_assertThisInitialized(_this), "setRef", function(ref) {
        _this.ref = ref;
      });
      return _this;
    }
    _createClass(AccordionItemHeading2, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        AccordionItemHeading2.VALIDATE(this.ref);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        AccordionItemHeading2.VALIDATE(this.ref);
      }
    }, {
      key: "render",
      value: function render2() {
        return /* @__PURE__ */ (0, import_react51.createElement)("div", _extends3({
          "data-accordion-component": "AccordionItemHeading"
        }, this.props, {
          ref: this.setRef
        }));
      }
    }], [{
      key: "VALIDATE",
      value: function VALIDATE(ref) {
        if (ref === void 0) {
          throw new Error("ref is undefined");
        }
        if (!(ref.childElementCount === 1 && ref.firstElementChild && ref.firstElementChild.getAttribute("data-accordion-component") === "AccordionItemButton")) {
          throw new Error(SPEC_ERROR);
        }
      }
    }]);
    return AccordionItemHeading2;
  }(import_react51.PureComponent);
  _defineProperty2(AccordionItemHeading, "defaultProps", defaultProps);
  var AccordionItemHeadingWrapper = function AccordionItemHeadingWrapper2(props) {
    return /* @__PURE__ */ (0, import_react51.createElement)(Consumer$1, null, function(itemContext) {
      var headingAttributes = itemContext.headingAttributes;
      if (props.id) {
        assertValidHtmlId(props.id);
      }
      return /* @__PURE__ */ (0, import_react51.createElement)(AccordionItemHeading, _extends3({}, props, headingAttributes));
    });
  };
  AccordionItemHeadingWrapper.displayName = DisplayName$1.AccordionItemHeading;
  var AccordionItemPanel = function AccordionItemPanel2(_ref) {
    var _ref$className = _ref.className, className = _ref$className === void 0 ? "accordion__panel" : _ref$className, region = _ref.region, id = _ref.id, rest = _objectWithoutProperties(_ref, ["className", "region", "id"]);
    var renderChildren = function renderChildren2(_ref2) {
      var panelAttributes = _ref2.panelAttributes;
      if (id) {
        assertValidHtmlId(id);
      }
      var attrs = _objectSpread22(_objectSpread22({}, panelAttributes), {}, {
        "aria-labelledby": region ? panelAttributes["aria-labelledby"] : void 0
      });
      return /* @__PURE__ */ (0, import_react51.createElement)("div", _extends3({
        "data-accordion-component": "AccordionItemPanel",
        className
      }, rest, attrs, {
        role: region ? "region" : void 0
      }));
    };
    return /* @__PURE__ */ (0, import_react51.createElement)(Consumer$1, null, renderChildren);
  };

  // src/searchbar/tokenSearch/SearchFiltersNetworkSelectors.tsx
  var import_react55 = __toESM(require_react());
  var import_lodash3 = __toESM(require_lodash());

  // src/searchbar/tokenSearch/Chip.tsx
  var import_react53 = __toESM(require_react());

  // src/searchbar/icons/checked.tsx
  var import_react52 = __toESM(require_react());
  var CheckedIcon = ({ height, width }) => /* @__PURE__ */ import_react52.default.createElement(abstract_default, {
    height: height != null ? height : 11,
    width: width != null ? width : 8,
    viewBox: "0 0 11 8"
  }, /* @__PURE__ */ import_react52.default.createElement("g", {
    transform: "translate(0)"
  }, /* @__PURE__ */ import_react52.default.createElement("path", {
    d: "M1 2.91L4.29 6.16L9.48 1",
    stroke: "#00C30E",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  })));
  var checked_default = CheckedIcon;

  // src/searchbar/tokenSearch/Chip.tsx
  var StyledChip = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    > input {
      display: none;
    }

    > input + label {
      
      transition: all 500ms ease;    
      cursor: pointer;    
      display: grid;
      align-items: center;
      user-select: none;

      ::-webkit-transition: all 500ms ease;    
      ::-moz-user-select: -moz-none;
      ::-webkit-user-select: none;
      ::-ms-user-select: none;          

      font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "8px"};  
      font-weight: ${(styleOverrides == null ? void 0 : styleOverrides.fontWeight) || "500"};  
      border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderRadius) || "4px"};  
      background-color: ${(styleOverrides == null ? void 0 : styleOverrides.backgroundColor) || "#232B35"};  
      border: ${(styleOverrides == null ? void 0 : styleOverrides.border) || "solid 2px #232B35"};   
      padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "2px 5px"};   
      margin: ${(styleOverrides == null ? void 0 : styleOverrides.margin) || "5px"};   
      color: ${(styleOverrides == null ? void 0 : styleOverrides.defaultColor) || "#B4BBC7"};   
      width: ${(styleOverrides == null ? void 0 : styleOverrides.width) || "120px"};   
      height: ${(styleOverrides == null ? void 0 : styleOverrides.height) || "35px"};   
      text-align: ${(styleOverrides == null ? void 0 : styleOverrides.textAlign) || "left"}; 
      text-transform: ${(styleOverrides == null ? void 0 : styleOverrides.textTransform) || "uppercase"}; 
      grid-template-columns: ${(styleOverrides == null ? void 0 : styleOverrides.gridTemplateColumns) || "22% 68% 10%"}; 
      >:last-child {      
        justify-self: ${(styleOverrides == null ? void 0 : styleOverrides.justifySelf) || "end"}; 
      }
    }
    
    > input:checked + label {   
      ::-webkit-transition: all 500ms ease;
      transition: all 500ms ease;   
      border-color: ${(styleOverrides == null ? void 0 : styleOverrides.checkedBorderColor) || "#474F5C"};    
      color: ${(styleOverrides == null ? void 0 : styleOverrides.checkedColor) || "white"};   
      background-color: ${(styleOverrides == null ? void 0 : styleOverrides.checkedBackgroundColor) || "#474F5C"};   
    }    
  `}
  
  @media (max-width: 375px) {
    width: 50%;

    > input + label {
      width: auto;
    }
  }
`;
  var Chip = (props) => {
    const renderProps = (0, import_react53.useContext)(TokenSearch_default);
    const { label, checked, onChange, name, value, styleOverrides, grayscaleFilter, icon } = props;
    const { customChip } = renderProps;
    const customStyles = styleOverrides === void 0 ? customChip : styleOverrides;
    const checkedStatus = checked ? /* @__PURE__ */ import_react53.default.createElement(checked_default, null) : /* @__PURE__ */ import_react53.default.createElement(unchecked_default, null);
    return /* @__PURE__ */ import_react53.default.createElement(StyledChip, {
      styleOverrides: customStyles
    }, /* @__PURE__ */ import_react53.default.createElement("input", {
      type: "checkbox",
      id: `${label}-${name}`,
      onChange,
      checked,
      name,
      value
    }), /* @__PURE__ */ import_react53.default.createElement("label", {
      htmlFor: `${label}-${name}`
    }, /* @__PURE__ */ import_react53.default.createElement("div", {
      className: checked ? "chip-icon active" : "chip-icon"
    }, icon != null ? icon : /* @__PURE__ */ import_react53.default.createElement(Logo, {
      label,
      grayscaleFilter,
      width: 16,
      height: 16
    })), /* @__PURE__ */ import_react53.default.createElement("span", null, label), !["Select All", "Deselect All"].includes(label) && checkedStatus));
  };

  // src/searchbar/tokenSearch/Button.tsx
  var import_react54 = __toESM(require_react());
  var StyledButton = styled_components_esm_default.button`
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  box-sizing: border-box;
  outline: none;
  padding: 3px 6px;
  margin: 3px;
  color: #B4BBC7;
  background-color: #474F5C;
`;
  var Button = ({ className, styleOverrides, onClick, children }) => {
    return /* @__PURE__ */ import_react54.default.createElement(StyledButton, {
      className,
      onClick,
      style: styleOverrides
    }, children);
  };
  var Button_default = Button;

  // src/searchbar/tokenSearch/SearchFiltersNetworkSelectors.tsx
  var FilterNetworkAll = () => {
    const dispatch = useDispatch();
    const renderProps = (0, import_react55.useContext)(TokenSearch_default);
    const { exchangeMap, networkMap } = useSelector((state) => state);
    const networkAll = Object.values((0, import_lodash3.omitBy)(networkMap, (b3) => !b3)).length === 0;
    const exchangeNamesActive = Object.keys((0, import_lodash3.omitBy)(exchangeMap, (b3) => !b3));
    const { networks } = renderProps;
    const networkNames = networks == null ? void 0 : networks.map((network) => network.id);
    const handleChange = () => {
      dispatch(setNetworkMapAll({ networkNames, networkAll }));
      dispatch(setExchangeMapAll({ exchangeNames: exchangeNamesActive, exchangeAll: false }));
    };
    return /* @__PURE__ */ import_react55.default.createElement(Button_default, {
      onClick: handleChange
    }, networkAll ? "Select All" : "Unselect All");
  };
  var FilterNetworkSelectors = () => {
    const renderProps = (0, import_react55.useContext)(TokenSearch_default);
    const networks = [...renderProps.networks];
    const networkItems = (0, import_react55.useMemo)(() => networks.map((network) => {
      return { id: network.id, exchanges: network.exchanges.map((exhange) => exhange.name) };
    }), [networks]);
    const dispatch = useDispatch();
    const { networkMap } = useSelector((state) => state);
    const networkElement = (network) => {
      return /* @__PURE__ */ import_react55.default.createElement(Chip, {
        key: network.id,
        name: network.id,
        label: network.name || network.id,
        icon: network.icon,
        checked: networkMap[network.id] || false,
        onChange: (e3) => dispatch(setNetworkMap({
          networkName: network.id,
          checked: e3.target.checked,
          networks: networkItems
        }))
      });
    };
    return networks.map((network) => networkElement(network));
  };

  // src/searchbar/tokenSearch/SearchFiltersExchangeSelectors.tsx
  var import_react56 = __toESM(require_react());
  var import_lodash4 = __toESM(require_lodash());
  var FilterExchangeAll = () => {
    const dispatch = useDispatch();
    const { exchangeMap, networkMap } = useSelector((state) => state);
    const exchangeAll = Object.values((0, import_lodash4.omitBy)(exchangeMap, (b3) => !b3)).length === 0;
    const selectedNetworks = Object.keys((0, import_lodash4.omitBy)(networkMap, (b3) => !b3));
    const renderProps = (0, import_react56.useContext)(TokenSearch_default);
    const { networks } = renderProps;
    const exchangeNames = [];
    networks == null ? void 0 : networks.forEach((network) => {
      var _a;
      if (selectedNetworks.includes(network.id)) {
        (_a = network.exchanges) == null ? void 0 : _a.forEach((exchange) => {
          exchangeNames.push(exchange.name);
        });
      }
    });
    return /* @__PURE__ */ import_react56.default.createElement(Button_default, {
      onClick: () => dispatch(setExchangeMapAll({ exchangeNames, exchangeAll }))
    }, exchangeAll ? "Select All" : "Unselect All");
  };
  var FilterExchangeSelectors = () => {
    var _a;
    const dispatch = useDispatch();
    const { networkMap, exchangeMap } = useSelector((state) => state);
    const renderProps = (0, import_react56.useContext)(TokenSearch_default);
    const selectedNetworks = Object.keys((0, import_lodash4.omitBy)(networkMap, (b3) => !b3));
    const exchanges = [];
    (_a = renderProps.networks) == null ? void 0 : _a.forEach((network) => {
      var _a2;
      if (selectedNetworks.includes(network.id)) {
        if ((_a2 = network.exchanges) == null ? void 0 : _a2.length)
          exchanges.push(...network.exchanges);
      }
    });
    const exchangeElement = (exchange) => {
      return /* @__PURE__ */ import_react56.default.createElement(Chip, {
        key: exchange.name,
        name: exchange.name,
        label: exchange.name,
        icon: exchange.icon,
        grayscaleFilter: 1,
        checked: exchangeMap[exchange.name] || false,
        onChange: (e3) => dispatch(setExchangeMap({
          exchangeName: exchange.name,
          checked: e3.target.checked
        }))
      });
    };
    return exchanges.map((exchange) => exchangeElement(exchange));
  };

  // src/searchbar/tokenSearch/SearchFilters.tsx
  var FilterWrapper = styled_components_esm_default.div`  
  ${({ styleOverrides }) => `    
    .accordion__button {
      position: relative;
    }
    background-color: ${(styleOverrides == null ? void 0 : styleOverrides.backgroundColor) || "#00070E"};
    border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderRadius) || "4px"};

    .accordion__panel {    
      border: ${(styleOverrides == null ? void 0 : styleOverrides.contentBorder) || "0"};       
      border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.contentBorderRadius) || "0"}; 
      margin:  ${(styleOverrides == null ? void 0 : styleOverrides.margin) || "0"};
    }
  `}
`;
  var StyledFilterHeader = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    display: ${(styleOverrides == null ? void 0 : styleOverrides.display) || "flex"};
    justify-content: ${(styleOverrides == null ? void 0 : styleOverrides.justifyContent) || "space-between"};
    align-items: ${(styleOverrides == null ? void 0 : styleOverrides.alignItems) || "center"};
    width: ${(styleOverrides == null ? void 0 : styleOverrides.width) || "auto"};
    border: ${(styleOverrides == null ? void 0 : styleOverrides.border) || "none"}; 
    background-color: ${(styleOverrides == null ? void 0 : styleOverrides.backgroundColor) || "#00070E"}; 
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#fff"};    
    cursor: pointer;
    padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "6px 14px"};   
    text-align: ${(styleOverrides == null ? void 0 : styleOverrides.textAlign) || "left"};     
    margin: ${(styleOverrides == null ? void 0 : styleOverrides.margin) || "5px 0 0"};     
    border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderRadius) || "4px"};     
    font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "13px"};     
    font-weight: ${(styleOverrides == null ? void 0 : styleOverrides.fontWeight) || "500"};     
    &:hover {
      background-color: ${(styleOverrides == null ? void 0 : styleOverrides.hoverColor) || "#232C38"};
    }
  `}      
`;
  var StyledFilterHeaderActionWrapper = styled_components_esm_default.div`
    margin-left: 10px;
    display: flex;
    align-items: center;
`;
  var StyledFilterContent = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    display: flex;
    flex-wrap: wrap;
    margin-bottom: 5px;
    margin-left: 10px;
    justify-content: ${(styleOverrides == null ? void 0 : styleOverrides.justifyContent) || "start"};
    align-items: ${(styleOverrides == null ? void 0 : styleOverrides.alignItems) || "center"};  
    padding:  ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "0 0 5px"};    
    .chip-icon {
      filter: grayscale(1);
      &.active{
        filter: unset;
      }     
    }
  `}
`;
  var StyledDescription = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    text-align: ${(styleOverrides == null ? void 0 : styleOverrides.textAlign) || "right"};
    font-size: ${(styleOverrides == null ? void 0 : styleOverrides.fontSize) || "12px"};
    padding: ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "10px 10px 5px"};       
    background-color: ${(styleOverrides == null ? void 0 : styleOverrides.backgroundColor) || "#00070E"};
    color: ${(styleOverrides == null ? void 0 : styleOverrides.color) || "#c4c5c7"};       
  `}
`;
  var StyledFilterWrapper = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    display: block;
    justify-content: ${(styleOverrides == null ? void 0 : styleOverrides.justifyContent) || "center"};
    align-items: ${(styleOverrides == null ? void 0 : styleOverrides.alignItems) || "center"};  
    padding:  ${(styleOverrides == null ? void 0 : styleOverrides.padding) || "0 0 5px"};       
    background-color: ${(styleOverrides == null ? void 0 : styleOverrides.backgroundColor) || "#00070E"};    
    border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderRadius) || "4px"};    
  `}
`;
  var StyledCount = styled_components_esm_default.div`
  color: white;
  font-weight: 400;
`;
  var SearchDescription = (props) => {
    const { networkCount, exchangeCount, type } = props;
    let desc;
    if (networkCount === 0 && exchangeCount === 0) {
      desc = "Searching all networks and exchanges";
    } else {
      if (type === "network")
        desc = /* @__PURE__ */ import_react57.default.createElement("div", {
          style: { display: "flex", justifyContent: "right" }
        }, "Searching\xA0", /* @__PURE__ */ import_react57.default.createElement(StyledCount, null, networkCount, " network", networkCount > 1 ? "s" : ""), exchangeCount > 0 && /* @__PURE__ */ import_react57.default.createElement(import_react57.default.Fragment, null, "\xA0within\xA0", /* @__PURE__ */ import_react57.default.createElement(StyledCount, null, exchangeCount, " exchange", exchangeCount > 1 ? "s" : "")));
      else
        desc = /* @__PURE__ */ import_react57.default.createElement("div", {
          style: { display: "flex", justifyContent: "right" }
        }, "Searching\xA0", /* @__PURE__ */ import_react57.default.createElement(StyledCount, null, exchangeCount, " exchange", exchangeCount > 1 ? "s" : ""), "\xA0within\xA0", /* @__PURE__ */ import_react57.default.createElement(StyledCount, null, networkCount, " network", networkCount > 1 ? "s" : ""));
    }
    return /* @__PURE__ */ import_react57.default.createElement(import_react57.default.Fragment, null, desc);
  };
  var AccordionToggleButton = ({ isOpen, onClick }) => {
    return /* @__PURE__ */ import_react57.default.createElement(Button_default, {
      className: "accordion-toggle",
      onClick
    }, isOpen ? /* @__PURE__ */ import_react57.default.createElement(import_react57.default.Fragment, null, /* @__PURE__ */ import_react57.default.createElement("span", null, "Close"), /* @__PURE__ */ import_react57.default.createElement(down_default, {
      width: 8,
      height: 8
    })) : /* @__PURE__ */ import_react57.default.createElement(import_react57.default.Fragment, null, /* @__PURE__ */ import_react57.default.createElement("span", null, "Open"), /* @__PURE__ */ import_react57.default.createElement(up_default, {
      width: 8,
      height: 8
    })));
  };
  var SearchFilters = () => {
    var _a, _b, _c, _d, _e2, _f, _g, _h, _i, _j;
    const dispatch = useDispatch();
    const { networkMap, exchangeMap, searchText } = useSelector((state) => state);
    const renderProps = (0, import_react57.useContext)(TokenSearch_default);
    const { customSearchFilter, networks } = renderProps;
    const exchangesActive = Object.values(networkMap).filter((b3) => b3).length !== 0;
    let networkIds = Object.keys((0, import_lodash5.omitBy)(networkMap, (b3) => !b3));
    const exchangeIds = Object.keys((0, import_lodash5.omitBy)(exchangeMap, (b3) => !b3)) || [];
    if (!networkIds.length) {
      networkIds = (networks == null ? void 0 : networks.map((network) => network.id)) || [];
    }
    const networkCount = networkIds.length;
    const exchangeCount = exchangeIds.length;
    if (!exchangeIds.length) {
      networks == null ? void 0 : networks.forEach((network) => {
        var _a2;
        if (networkIds.includes(network.id)) {
          (_a2 = network.exchanges) == null ? void 0 : _a2.forEach((exchange) => {
            exchangeIds.push(exchange.name);
          });
        }
      });
    }
    const totalExchangeCount = exchangeIds.length;
    const networkTitle = ((_a = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _a.network) || "Select Network(s)";
    const exchangeTitle = ((_b = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _b.exchange) || "Select Exchange(s)";
    const [isNetworkMapExpanded, setIsNetworkMapExpanded] = (0, import_react57.useState)(true);
    const [isExchangeMapExpanded, setIsExchangeMapExpanded] = (0, import_react57.useState)(false);
    (0, import_react57.useEffect)(() => {
      (Object.keys(networkMap).length > 0 || Object.keys(exchangeMap).length > 0) && searchText.length > 0 && dispatch(setViewResult(true));
    }, [networkMap, exchangeMap, searchText]);
    return /* @__PURE__ */ import_react57.default.createElement(FilterWrapper, {
      styleOverrides: customSearchFilter == null ? void 0 : customSearchFilter.wrapper
    }, /* @__PURE__ */ import_react57.default.createElement(Accordion, {
      allowMultipleExpanded: true,
      allowZeroExpanded: true
    }, /* @__PURE__ */ import_react57.default.createElement(AccordionItem, {
      dangerouslySetExpanded: isNetworkMapExpanded
    }, /* @__PURE__ */ import_react57.default.createElement(AccordionItemHeadingWrapper, null, /* @__PURE__ */ import_react57.default.createElement(AccordionItemButtonWrapper, null, /* @__PURE__ */ import_react57.default.createElement(StyledFilterHeader, {
      styleOverrides: (_c = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _c.header
    }, /* @__PURE__ */ import_react57.default.createElement("span", null, networkTitle), /* @__PURE__ */ import_react57.default.createElement(StyledFilterHeaderActionWrapper, null, /* @__PURE__ */ import_react57.default.createElement(FilterNetworkAll, null), /* @__PURE__ */ import_react57.default.createElement(AccordionToggleButton, {
      isOpen: isNetworkMapExpanded,
      onClick: () => setIsNetworkMapExpanded(!isNetworkMapExpanded)
    }))))), /* @__PURE__ */ import_react57.default.createElement(AccordionItemPanel, null, /* @__PURE__ */ import_react57.default.createElement(StyledFilterWrapper, {
      styleOverrides: (_d = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _d.wrapper
    }, /* @__PURE__ */ import_react57.default.createElement(StyledFilterContent, {
      styleOverrides: (_e2 = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _e2.content
    }, /* @__PURE__ */ import_react57.default.createElement(FilterNetworkSelectors, null)), /* @__PURE__ */ import_react57.default.createElement(StyledDescription, {
      styleOverrides: (_f = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _f.description
    }, /* @__PURE__ */ import_react57.default.createElement(SearchDescription, {
      networkCount,
      exchangeCount,
      type: "network"
    }))))), exchangesActive && /* @__PURE__ */ import_react57.default.createElement(AccordionItem, {
      dangerouslySetExpanded: isExchangeMapExpanded
    }, /* @__PURE__ */ import_react57.default.createElement(AccordionItemHeadingWrapper, null, /* @__PURE__ */ import_react57.default.createElement(AccordionItemButtonWrapper, null, /* @__PURE__ */ import_react57.default.createElement(StyledFilterHeader, {
      styleOverrides: (_g = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _g.header
    }, /* @__PURE__ */ import_react57.default.createElement("span", null, exchangeTitle), /* @__PURE__ */ import_react57.default.createElement(StyledFilterHeaderActionWrapper, null, /* @__PURE__ */ import_react57.default.createElement(FilterExchangeAll, null), /* @__PURE__ */ import_react57.default.createElement(AccordionToggleButton, {
      isOpen: isExchangeMapExpanded,
      onClick: () => setIsExchangeMapExpanded(!isExchangeMapExpanded)
    }))))), /* @__PURE__ */ import_react57.default.createElement(AccordionItemPanel, null, /* @__PURE__ */ import_react57.default.createElement(StyledFilterWrapper, {
      styleOverrides: (_h = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _h.wrapper
    }, /* @__PURE__ */ import_react57.default.createElement(StyledFilterContent, {
      styleOverrides: (_i = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _i.content
    }, /* @__PURE__ */ import_react57.default.createElement(FilterExchangeSelectors, null)), /* @__PURE__ */ import_react57.default.createElement(StyledDescription, {
      styleOverrides: (_j = customSearchFilter == null ? void 0 : customSearchFilter.content) == null ? void 0 : _j.description
    }, /* @__PURE__ */ import_react57.default.createElement(SearchDescription, {
      networkCount,
      exchangeCount: exchangeCount || totalExchangeCount,
      type: "exchange"
    })))))));
  };
  var SearchFilters_default = SearchFilters;

  // src/searchbar/hooks/useClickOutside.ts
  var import_react58 = __toESM(require_react());
  var useClickOutside = (callback) => {
    const ref = (0, import_react58.useRef)(null);
    (0, import_react58.useEffect)(() => {
      function onClick(event) {
        var _a;
        if (ref && ref.current && !((_a = ref.current) == null ? void 0 : _a.contains(event.target))) {
          callback(event);
        }
      }
      document.addEventListener("mousedown", onClick);
      return () => {
        document.removeEventListener("mousedown", onClick);
      };
    }, []);
    return ref;
  };
  var useClickOutside_default = useClickOutside;

  // src/searchbar/tokenSearch/index.tsx
  var StyledWrapper2 = styled_components_esm_default.div`
  ${({ styleOverrides }) => `
    min-width: 420px;            
    position: relative;
    & .dropDown {
      position: absolute;
      width: -webkit-fill-available;
      left: 0; 
      bottom: ${(styleOverrides == null ? void 0 : styleOverrides.borderBottomLeftRadius) || "5px"};  
      transform: translateY(100%);
      z-index: 99;
      background-color: ${(styleOverrides == null ? void 0 : styleOverrides.backgroundColor) || "#474F5C"};          
      border-bottom-left-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderBottomLeftRadius) || "4px"};  
      border-bottom-right-radius: ${(styleOverrides == null ? void 0 : styleOverrides.borderBottomRightRadius) || "4px"};  
      border-color: ${(styleOverrides == null ? void 0 : styleOverrides.borderColor) || "#474F5C"};          
      border-style: ${(styleOverrides == null ? void 0 : styleOverrides.borderStyle) || "solid"};                
      border-width:${(styleOverrides == null ? void 0 : styleOverrides.borderStyle) || "4px"};                 
      border-top: none;
    }
    & button {
      display: flex;
      align-items: center;
      border-color: ${(styleOverrides == null ? void 0 : styleOverrides.button.borderColor) || "#232C38"};      
      background-color: ${(styleOverrides == null ? void 0 : styleOverrides.button.backColor) || "#232C38"};      
      color: ${(styleOverrides == null ? void 0 : styleOverrides.button.color) || "#B1B8C3"};      
      border-radius: ${(styleOverrides == null ? void 0 : styleOverrides.button.borderRadius) || "4px"};      
      font-size: ${(styleOverrides == null ? void 0 : styleOverrides.button.fontSize) || "10px"};      
      padding: ${(styleOverrides == null ? void 0 : styleOverrides.button.padding) || "4px 6px"};      
      border-width: 0;      
      cursor: pointer;
      &:hover {
        background-color: ${(styleOverrides == null ? void 0 : styleOverrides.button.hoverBackColor) || "black"};      
      }
      & span {
        padding-right: 3px;
      }
    }
  `}
`;
  var Backdrop = styled_components_esm_default.div`
  position: fixed;
  width: 100%;
  height: 100%;
  z-index: 1;
`;
  var TokenSearch = (renderProps) => {
    const { customWrapper } = renderProps;
    const dispatch = useDispatch();
    const { isSelecting, isLoading, viewResult } = useSelector((state) => state);
    const closeResultPanel = () => {
      dispatch(stopSelecting());
      dispatch(setViewResult(false));
    };
    const searchRef = useClickOutside_default(closeResultPanel);
    (0, import_react59.useEffect)(() => {
      window.addEventListener("searchBarClose", closeResultPanel);
    }, []);
    return /* @__PURE__ */ import_react59.default.createElement(TokenSearch_default.Provider, {
      value: renderProps
    }, isSelecting && /* @__PURE__ */ import_react59.default.createElement(Backdrop, null), /* @__PURE__ */ import_react59.default.createElement(StyledWrapper2, {
      ref: searchRef,
      styleOverrides: customWrapper
    }, /* @__PURE__ */ import_react59.default.createElement(SearchInput_default, null), isSelecting && /* @__PURE__ */ import_react59.default.createElement("div", {
      className: "dropDown"
    }, /* @__PURE__ */ import_react59.default.createElement(SearchFilters_default, null), viewResult && /* @__PURE__ */ import_react59.default.createElement(SearchResult_default, {
      loading: isLoading
    }))));
  };
  var tokenSearch_default = TokenSearch;

  // src/searchbar/index.tsx
  var SearchBar = (renderProps) => {
    return /* @__PURE__ */ import_react60.default.createElement(Provider_default, {
      store
    }, !config_default.IS_ENV_PRODUCTION && /* @__PURE__ */ import_react60.default.createElement(tokenSearch_default, {
      customWrapper: renderProps.customWrapper,
      customSearchInput: renderProps.customSearchInput,
      customSearchFilter: renderProps.customSearchFilter,
      customLoading: renderProps.customLoading,
      customChip: renderProps.customChip,
      customResult: renderProps.customResult,
      customTokenDetail: renderProps.customTokenDetail,
      customActions: renderProps.customActions,
      customAllChip: renderProps.customAllChip,
      networks: renderProps.networks
    }));
  };

  // src/index.tsx
  var React51 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  var rootElement = document.getElementById("root");
  (0, import_react_dom2.render)(/* @__PURE__ */ React51.createElement(SearchBar, {
    networks: []
  }), rootElement);
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! (c) 2020 Andrea Giammarchi */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.global.js.map