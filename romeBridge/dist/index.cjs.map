{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/widget.ts","../src/terminal.ts"],"sourcesContent":["export * from \"./widget\";\nexport * from \"./terminal\";\nexport * from \"./types\";\n","export enum RomeEventType {\n  TERMINAL_CLICK_BUTTON = \"rome.terminal.click_button\",\n  TERMINAL_BRIDGE_READY = \"rome.terminal.bridge_ready\",\n\n  WIDGET_UPDATE_BUTTON_STATUS = \"rome.widget.update_button_status\",\n  WIDGET_GOOGLE_ANALYTICS_EVENT = 'rome.widget.google_analytics_event',\n  WIDGET_ANALYTICS_TRANSACTION_EVENT = 'rome.widget.analytics_transaction_event',\n  WIDGET_GENERIC_MESSAGE = 'rome.widget.generic_message'\n}\n\nexport class RomeEvent {\n  public type: RomeEventType | undefined;\n  public payload: any;\n\n  constructor(payload: any) {\n    this.payload = payload;\n  }\n}\n\nexport type RomeEventHandler<T> = (event: T) => void;\n\nexport class TerminalClickButtonEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.TERMINAL_CLICK_BUTTON;\n  public type: RomeEventType = RomeEventType.TERMINAL_CLICK_BUTTON;\n}\n\nexport class TerminalBridgeReadyEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.TERMINAL_BRIDGE_READY;\n  public type: RomeEventType = RomeEventType.TERMINAL_BRIDGE_READY;\n}\n\nexport class WidgetUpdateButtonStatusEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.WIDGET_UPDATE_BUTTON_STATUS;\n  public type: RomeEventType = RomeEventType.WIDGET_UPDATE_BUTTON_STATUS;\n}\n","import {\n  RomeEventHandler,\n  RomeEventType,\n  TerminalBridgeReadyEvent,\n} from \"./types\";\n\nexport type BridgeAnalyticsEventData = { [key: string]: string };\nexport type BridgeAnalyticsTxEventData = {\n  chain_id: string;\n  token_address: string;\n  token_amount_w_decimals: string;\n  [key: string]: string;\n};\n\nclass WidgetBridge {\n  widgetId = null;\n\n  init() {\n    this.subscribe<TerminalBridgeReadyEvent>(\n      TerminalBridgeReadyEvent.TYPE,\n      (data) => {\n        this.widgetId = data.payload.widgetId;\n      }\n    );\n  }\n\n  emit(type: RomeEventType, payload: any) {\n    window.parent.postMessage(\n      { payload: payload, type: type, widgetId: this.widgetId },\n      \"*\"\n    );\n  }\n\n  sendAnalyticsEvent(event: string, data: BridgeAnalyticsEventData) {\n    this.emit(RomeEventType.WIDGET_GOOGLE_ANALYTICS_EVENT, {\n      data,\n      event,\n    });\n  }\n  sendAnalyticsTxEvent(event: string, txData: BridgeAnalyticsTxEventData) {\n    this.emit(RomeEventType.WIDGET_ANALYTICS_TRANSACTION_EVENT, {\n      txData,\n      event,\n    });\n  }\n\n  subscribe<T>(type: RomeEventType, handler: RomeEventHandler<T>) {\n    window.addEventListener(\"message\", (event) => {\n      if (type !== event.data.type) return;\n\n      handler(event.data);\n    });\n  }\n}\n\nexport const widgetBridge = new WidgetBridge();\n","import { RomeEvent, RomeEventHandler, RomeEventType } from \"./types\";\n\nexport class TerminalBridge {\n  iframeWindow: any;\n  widgetId: string;\n\n  constructor(widgetId: string) {\n    this.widgetId = widgetId;\n  }\n\n  setIframeWindow(iframeWindow: any) {\n    this.iframeWindow = iframeWindow;\n  }\n\n  emit(event: RomeEvent) {\n    if (!this.iframeWindow) throw new Error(\"Invalid window object\");\n\n    this.iframeWindow.postMessage({ ...event, widgetId: this.widgetId }, \"*\");\n  }\n\n  subscribe<T>(type: RomeEventType, handler: RomeEventHandler<T>) {\n    window.addEventListener(\"message\", (event) => {\n      if (event.data.widgetId !== this.widgetId) return;\n      if (event.data.type !== type) return;\n\n      handler(event.data);\n    });\n  }\n}\n\ntype TerminalBridgeMap = { [key: string]: TerminalBridge };\n\nexport class TerminalBridgeFactory {\n  bridges: TerminalBridgeMap;\n\n  constructor() {\n    this.bridges = {};\n  }\n\n  getBridge(widgetId: string): TerminalBridge {\n    if (this.bridges[widgetId]) {\n      return this.bridges[widgetId];\n    }\n\n    const bridge = new TerminalBridge(widgetId);\n    this.bridges[widgetId] = bridge;\n\n    return bridge;\n  }\n\n  removeBridge(widgetId: string) {\n    delete this.bridges[widgetId];\n  }\n}\n\nexport const terminalBridgeFactory = new TerminalBridgeFactory();\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAK,gBAAL,kBAAKA,mBAAL;AACL,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,2BAAwB;AAExB,EAAAA,eAAA,iCAA8B;AAC9B,EAAAA,eAAA,mCAAgC;AAChC,EAAAA,eAAA,wCAAqC;AACrC,EAAAA,eAAA,4BAAyB;AAPf,SAAAA;AAAA,GAAA;AAUL,IAAM,YAAN,MAAgB;AAAA,EAIrB,YAAY,SAAc;AACxB,SAAK,UAAU;AAAA,EACjB;AACF;AAIO,IAAM,2BAAN,cAAuC,UAAU;AAAA,EAAjD;AAAA;AAEL,SAAO,OAAsB;AAAA;AAC/B;AAHa,yBACJ,OAAsB;AAIxB,IAAM,2BAAN,cAAuC,UAAU;AAAA,EAAjD;AAAA;AAEL,SAAO,OAAsB;AAAA;AAC/B;AAHa,yBACJ,OAAsB;AAIxB,IAAM,gCAAN,cAA4C,UAAU;AAAA,EAAtD;AAAA;AAEL,SAAO,OAAsB;AAAA;AAC/B;AAHa,8BACJ,OAAsB;;;AClB/B,IAAM,eAAN,MAAmB;AAAA,EAAnB;AACE,oBAAW;AAAA;AAAA,EAEX,OAAO;AACL,SAAK;AAAA,MACH,yBAAyB;AAAA,MACzB,CAAC,SAAS;AACR,aAAK,WAAW,KAAK,QAAQ;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,KAAK,MAAqB,SAAc;AACtC,WAAO,OAAO;AAAA,MACZ,EAAE,SAAkB,MAAY,UAAU,KAAK,SAAS;AAAA,MACxD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,mBAAmB,OAAe,MAAgC;AAChE,SAAK,+EAAkD;AAAA,MACrD;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,qBAAqB,OAAe,QAAoC;AACtE,SAAK,yFAAuD;AAAA,MAC1D;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,UAAa,MAAqB,SAA8B;AAC9D,WAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,UAAI,SAAS,MAAM,KAAK;AAAM;AAE9B,cAAQ,MAAM,IAAI;AAAA,IACpB,CAAC;AAAA,EACH;AACF;AAEO,IAAM,eAAe,IAAI,aAAa;;;ACrDtC,IAAM,iBAAN,MAAqB;AAAA,EAI1B,YAAY,UAAkB;AAC5B,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,gBAAgB,cAAmB;AACjC,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,KAAK,OAAkB;AACrB,QAAI,CAAC,KAAK;AAAc,YAAM,IAAI,MAAM,uBAAuB;AAE/D,SAAK,aAAa,YAAY,EAAE,GAAG,OAAO,UAAU,KAAK,SAAS,GAAG,GAAG;AAAA,EAC1E;AAAA,EAEA,UAAa,MAAqB,SAA8B;AAC9D,WAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,UAAI,MAAM,KAAK,aAAa,KAAK;AAAU;AAC3C,UAAI,MAAM,KAAK,SAAS;AAAM;AAE9B,cAAQ,MAAM,IAAI;AAAA,IACpB,CAAC;AAAA,EACH;AACF;AAIO,IAAM,wBAAN,MAA4B;AAAA,EAGjC,cAAc;AACZ,SAAK,UAAU,CAAC;AAAA,EAClB;AAAA,EAEA,UAAU,UAAkC;AAC1C,QAAI,KAAK,QAAQ,WAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,IACtB;AAEA,UAAM,SAAS,IAAI,eAAe,QAAQ;AAC1C,SAAK,QAAQ,YAAY;AAEzB,WAAO;AAAA,EACT;AAAA,EAEA,aAAa,UAAkB;AAC7B,WAAO,KAAK,QAAQ;AAAA,EACtB;AACF;AAEO,IAAM,wBAAwB,IAAI,sBAAsB;","names":["RomeEventType"]}