{"version":3,"sources":["../src/types.ts","../src/widget.ts","../src/terminal.ts"],"sourcesContent":["export enum RomeEventType {\n  TERMINAL_CLICK_BUTTON = \"rome.terminal.click_button\",\n  TERMINAL_BRIDGE_READY = \"rome.terminal.bridge_ready\",\n\n  WIDGET_UPDATE_BUTTON_STATUS = \"rome.widget.update_button_status\",\n  WIDGET_GOOGLE_ANALYTICS_EVENT = 'rome.widget.google_analytics_event',\n  WIDGET_ANALYTICS_TRANSACTION_EVENT = 'rome.widget.analytics_transaction_event',\n  WIDGET_GENERIC_MESSAGE = 'rome.widget.generic_message'\n}\n\nexport class RomeEvent {\n  public type: RomeEventType | undefined;\n  public payload: any;\n\n  constructor(payload: any) {\n    this.payload = payload;\n  }\n}\n\nexport type RomeEventHandler<T> = (event: T) => void;\n\nexport class TerminalClickButtonEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.TERMINAL_CLICK_BUTTON;\n  public type: RomeEventType = RomeEventType.TERMINAL_CLICK_BUTTON;\n}\n\nexport class TerminalBridgeReadyEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.TERMINAL_BRIDGE_READY;\n  public type: RomeEventType = RomeEventType.TERMINAL_BRIDGE_READY;\n}\n\nexport class WidgetUpdateButtonStatusEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.WIDGET_UPDATE_BUTTON_STATUS;\n  public type: RomeEventType = RomeEventType.WIDGET_UPDATE_BUTTON_STATUS;\n}\n","import {RomeEventHandler, RomeEventType, TerminalBridgeReadyEvent,} from \"./types\";\n\nexport type BridgeAnalyticsEventData = { [key: string]: string };\nexport type BridgeAnalyticsTxEventData = {\n  chain_id:string,\n  token_address:string,\n  token_amount_w_decimals:string\n  [key: string]: string\n}\n\nclass WidgetBridge {\n  widgetId = null;\n\n  init() {\n    this.subscribe<TerminalBridgeReadyEvent>(\n      TerminalBridgeReadyEvent.TYPE,\n      (data) => {\n        this.widgetId = data.payload.widgetId;\n      }\n    );\n  }\n\n  emit(type: RomeEventType, payload: any) {\n    window.parent.postMessage(\n      { payload: payload, type: type, widgetId: this.widgetId },\n      \"*\"\n    );\n  }\n\n  sendAnalyticsEvent(event:string,data:BridgeAnalyticsEventData){\n    this.emit(RomeEventType.WIDGET_GOOGLE_ANALYTICS_EVENT, {\n      data,\n      event\n    });\n  }\n  sendAnalyticsTxEvent(event:string,txData:BridgeAnalyticsTxEventData){\n    this.emit(RomeEventType.WIDGET_ANALYTICS_TRANSACTION_EVENT, {\n      txData,\n      event\n    });\n  }\n\n  subscribe<T>(type: RomeEventType, handler: RomeEventHandler<T>) {\n    window.addEventListener(\"message\", (event) => {\n      if (type !== event.data.type) return;\n\n      handler(event.data);\n    });\n  }\n}\n\nexport const widgetBridge = new WidgetBridge();\n","import { RomeEvent, RomeEventHandler, RomeEventType } from \"./types\";\n\nexport class TerminalBridge {\n  iframeWindow: any;\n  widgetId: string;\n\n  constructor(widgetId: string) {\n    this.widgetId = widgetId;\n  }\n\n  setIframeWindow(iframeWindow: any) {\n    this.iframeWindow = iframeWindow;\n  }\n\n  emit(event: RomeEvent) {\n    if (!this.iframeWindow) throw new Error(\"Invalid window object\");\n\n    this.iframeWindow.postMessage({ ...event, widgetId: this.widgetId }, \"*\");\n  }\n\n  subscribe<T>(type: RomeEventType, handler: RomeEventHandler<T>) {\n    window.addEventListener(\"message\", (event) => {\n      if (event.data.widgetId !== this.widgetId) return;\n      if (event.data.type !== type) return;\n\n      handler(event.data);\n    });\n  }\n}\n\ntype TerminalBridgeMap = { [key: string]: TerminalBridge };\n\nexport class TerminalBridgeFactory {\n  bridges: TerminalBridgeMap;\n\n  constructor() {\n    this.bridges = {};\n  }\n\n  getBridge(widgetId: string): TerminalBridge {\n    if (this.bridges[widgetId]) {\n      return this.bridges[widgetId];\n    }\n\n    const bridge = new TerminalBridge(widgetId);\n    this.bridges[widgetId] = bridge;\n\n    return bridge;\n  }\n\n  removeBridge(widgetId: string) {\n    delete this.bridges[widgetId];\n  }\n}\n\nexport const terminalBridgeFactory = new TerminalBridgeFactory();\n"],"mappings":";;AAAO,MAAK,gBAAL,kBAAKA,mBAAL;AACL,IAAAA,eAAA,2BAAwB;AACxB,IAAAA,eAAA,2BAAwB;AAExB,IAAAA,eAAA,iCAA8B;AAC9B,IAAAA,eAAA,mCAAgC;AAChC,IAAAA,eAAA,wCAAqC;AACrC,IAAAA,eAAA,4BAAyB;AAPf,WAAAA;AAAA,KAAA;AAUL,MAAM,YAAN,MAAgB;AAAA,IAIrB,YAAY,SAAc;AACxB,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAIO,MAAM,2BAAN,cAAuC,UAAU;AAAA,IAAjD;AAAA;AAEL,WAAO,OAAsB;AAAA;AAAA,EAC/B;AAFE,EADW,yBACJ,OAAsB;AAIxB,MAAM,2BAAN,cAAuC,UAAU;AAAA,IAAjD;AAAA;AAEL,WAAO,OAAsB;AAAA;AAAA,EAC/B;AAFE,EADW,yBACJ,OAAsB;AAIxB,MAAM,gCAAN,cAA4C,UAAU;AAAA,IAAtD;AAAA;AAEL,WAAO,OAAsB;AAAA;AAAA,EAC/B;AAFE,EADW,8BACJ,OAAsB;;;ACtB/B,MAAM,eAAN,MAAmB;AAAA,IAAnB;AACE,sBAAW;AAAA;AAAA,IAEX,OAAO;AACL,WAAK;AAAA,QACH,yBAAyB;AAAA,QACzB,CAAC,SAAS;AACR,eAAK,WAAW,KAAK,QAAQ;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,IAEA,KAAK,MAAqB,SAAc;AACtC,aAAO,OAAO;AAAA,QACZ,EAAE,SAAkB,MAAY,UAAU,KAAK,SAAS;AAAA,QACxD;AAAA,MACF;AAAA,IACF;AAAA,IAEA,mBAAmB,OAAa,MAA8B;AAC5D,WAAK,+EAAkD;AAAA,QACrD;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,qBAAqB,OAAa,QAAkC;AAClE,WAAK,yFAAuD;AAAA,QAC1D;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,UAAa,MAAqB,SAA8B;AAC9D,aAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,YAAI,SAAS,MAAM,KAAK;AAAM;AAE9B,gBAAQ,MAAM,IAAI;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAEO,MAAM,eAAe,IAAI,aAAa;;;ACjDtC,MAAM,iBAAN,MAAqB;AAAA,IAI1B,YAAY,UAAkB;AAC5B,WAAK,WAAW;AAAA,IAClB;AAAA,IAEA,gBAAgB,cAAmB;AACjC,WAAK,eAAe;AAAA,IACtB;AAAA,IAEA,KAAK,OAAkB;AACrB,UAAI,CAAC,KAAK;AAAc,cAAM,IAAI,MAAM,uBAAuB;AAE/D,WAAK,aAAa,YAAY,EAAE,GAAG,OAAO,UAAU,KAAK,SAAS,GAAG,GAAG;AAAA,IAC1E;AAAA,IAEA,UAAa,MAAqB,SAA8B;AAC9D,aAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,YAAI,MAAM,KAAK,aAAa,KAAK;AAAU;AAC3C,YAAI,MAAM,KAAK,SAAS;AAAM;AAE9B,gBAAQ,MAAM,IAAI;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAIO,MAAM,wBAAN,MAA4B;AAAA,IAGjC,cAAc;AACZ,WAAK,UAAU,CAAC;AAAA,IAClB;AAAA,IAEA,UAAU,UAAkC;AAC1C,UAAI,KAAK,QAAQ,WAAW;AAC1B,eAAO,KAAK,QAAQ;AAAA,MACtB;AAEA,YAAM,SAAS,IAAI,eAAe,QAAQ;AAC1C,WAAK,QAAQ,YAAY;AAEzB,aAAO;AAAA,IACT;AAAA,IAEA,aAAa,UAAkB;AAC7B,aAAO,KAAK,QAAQ;AAAA,IACtB;AAAA,EACF;AAEO,MAAM,wBAAwB,IAAI,sBAAsB;","names":["RomeEventType"]}