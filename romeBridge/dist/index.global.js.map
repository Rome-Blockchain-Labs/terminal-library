{"version":3,"sources":["../src/widget.ts","../src/types.ts","../src/terminal.ts"],"sourcesContent":["import {\n  RomeEventHandler,\n  RomeEventType,\n  TerminalBridgeReadyEvent,\n} from \"./types\";\n\nclass RomeBridge {\n  widgetId = null;\n\n  init() {\n    this.subscribe<TerminalBridgeReadyEvent>(\n      TerminalBridgeReadyEvent.TYPE,\n      (data) => {\n        this.widgetId = data.payload.widgetId;\n      }\n    );\n  }\n\n  emit(type: RomeEventType, payload: any) {\n    window.parent.postMessage(\n      { payload: payload, type: type, widgetId: this.widgetId },\n      \"*\"\n    );\n  }\n\n  subscribe<T>(type: RomeEventType, handler: RomeEventHandler<T>) {\n    window.addEventListener(\"message\", (event) => {\n      if (type !== event.data.type) return;\n\n      handler(event.data);\n    });\n  }\n}\n\nexport const romeBridge = new RomeBridge();\n\nexport default romeBridge;\n","export enum RomeEventType {\n  TERMINAL_CLICK_BUTTON = 'rome.terminal.click_button',\n  TERMINAL_BRIDGE_READY = 'rome.terminal.bridge_ready',\n\n  WIDGET_UPDATE_BUTTON_STATUS = 'rome.widget.update_button_status',\n}\n\nexport class RomeEvent {\n  public type: RomeEventType | undefined;\n  public payload: any;\n\n  constructor(payload: any) {\n    this.payload = payload;\n  }\n}\n\nexport type RomeEventHandler<T> = (event: T) => void;\n\n\nexport class TerminalClickButtonEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.TERMINAL_CLICK_BUTTON;\n  public type: RomeEventType = RomeEventType.TERMINAL_CLICK_BUTTON;\n}\n\nexport class TerminalBridgeReadyEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.TERMINAL_BRIDGE_READY;\n  public type: RomeEventType = RomeEventType.TERMINAL_BRIDGE_READY;\n}\n\nexport class WidgetUpdateButtonStatusEvent extends RomeEvent {\n  static TYPE: RomeEventType = RomeEventType.WIDGET_UPDATE_BUTTON_STATUS;\n  public type: RomeEventType = RomeEventType.WIDGET_UPDATE_BUTTON_STATUS;\n}\n","import { RomeEvent, RomeEventHandler, RomeEventType } from \"./types\";\n\nexport class RomeBridge {\n  iframeWindow: any;\n  widgetId: string;\n\n  constructor(widgetId: string) {\n    this.widgetId = widgetId;\n  }\n\n  setIframeWindow(iframeWindow: any) {\n    this.iframeWindow = iframeWindow;\n  }\n\n  emit(event: RomeEvent) {\n    if (!this.iframeWindow) throw new Error('Invalid window object');\n\n    this.iframeWindow.postMessage({ ...event, widgetId: this.widgetId }, '*');\n  }\n\n  subscribe<T>(type: RomeEventType, handler: RomeEventHandler<T>) {\n    window.addEventListener('message', (event) => {\n      if (event.data.widgetId !== this.widgetId) return;\n      if (event.data.type !== type) return;\n\n      handler(event.data);\n    });\n  }\n}\n\ntype RomeBridgeMap = { [key: string]: RomeBridge };\n\nexport class RomeBridgeFactory {\n  bridges: RomeBridgeMap;\n\n  constructor() {\n    this.bridges = {};\n  }\n\n  getBridge(widgetId: string): RomeBridge {\n    if (this.bridges[widgetId]) {\n      return this.bridges[widgetId];\n    }\n\n    const bridge = new RomeBridge(widgetId);\n    this.bridges[widgetId] = bridge;\n\n    return bridge;\n  }\n\n  removeBridge(widgetId: string) {\n    delete this.bridges[widgetId];\n  }\n}\n\nexport const romeBridgeFactory = new RomeBridgeFactory();\n\nexport default romeBridgeFactory;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOO,wBAAgB;AAAA,IAIrB,YAAY,SAAc;AACxB,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAKO,+CAAuC,UAAU;AAAA,IAAjD;AAAA;AAEE,kBAAsB;AAAA;AAAA,EAC/B;AAFS,EADF,yBACE,OAAsB;AAIxB,+CAAuC,UAAU;AAAA,IAAjD;AAAA;AAEE,kBAAsB;AAAA;AAAA,EAC/B;AAFS,EADF,yBACE,OAAsB;AAIxB,oDAA4C,UAAU;AAAA,IAAtD;AAAA;AAEE,kBAAsB;AAAA;AAAA,EAC/B;AAFS,EADF,8BACE,OAAsB;;;ADxB/B,yBAAiB;AAAA,IAAjB;AACE,sBAAW;AAAA;AAAA,IAEX,OAAO;AACL,WAAK,UACH,yBAAyB,MACzB,CAAC,SAAS;AACR,aAAK,WAAW,KAAK,QAAQ;AAAA,MAC/B,CACF;AAAA,IACF;AAAA,IAEA,KAAK,MAAqB,SAAc;AACtC,aAAO,OAAO,YACZ,EAAE,SAAkB,MAAY,UAAU,KAAK,SAAS,GACxD,GACF;AAAA,IACF;AAAA,IAEA,UAAa,MAAqB,SAA8B;AAC9D,aAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,YAAI,SAAS,MAAM,KAAK;AAAM;AAE9B,gBAAQ,MAAM,IAAI;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAEO,MAAM,aAAa,IAAI,WAAW;AAEzC,MAAO,iBAAQ;;;AEpCf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,0BAAiB;AAAA,IAItB,YAAY,UAAkB;AAC5B,WAAK,WAAW;AAAA,IAClB;AAAA,IAEA,gBAAgB,cAAmB;AACjC,WAAK,eAAe;AAAA,IACtB;AAAA,IAEA,KAAK,OAAkB;AACrB,UAAI,CAAC,KAAK;AAAc,cAAM,IAAI,MAAM,uBAAuB;AAE/D,WAAK,aAAa,YAAY,iCAAK,QAAL,EAAY,UAAU,KAAK,SAAS,IAAG,GAAG;AAAA,IAC1E;AAAA,IAEA,UAAa,MAAqB,SAA8B;AAC9D,aAAO,iBAAiB,WAAW,CAAC,UAAU;AAC5C,YAAI,MAAM,KAAK,aAAa,KAAK;AAAU;AAC3C,YAAI,MAAM,KAAK,SAAS;AAAM;AAE9B,gBAAQ,MAAM,IAAI;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAIO,gCAAwB;AAAA,IAG7B,cAAc;AACZ,WAAK,UAAU,CAAC;AAAA,IAClB;AAAA,IAEA,UAAU,UAA8B;AACtC,UAAI,KAAK,QAAQ,WAAW;AAC1B,eAAO,KAAK,QAAQ;AAAA,MACtB;AAEA,YAAM,SAAS,IAAI,YAAW,QAAQ;AACtC,WAAK,QAAQ,YAAY;AAEzB,aAAO;AAAA,IACT;AAAA,IAEA,aAAa,UAAkB;AAC7B,aAAO,KAAK,QAAQ;AAAA,IACtB;AAAA,EACF;AAEO,MAAM,oBAAoB,IAAI,kBAAkB;AAEvD,MAAO,mBAAQ;","names":[]}